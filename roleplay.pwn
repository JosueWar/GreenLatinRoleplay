/*
	South Central Roleplay by Emmet

	Description:

	  This script started development in February 2014 and finished exactly
	  3 months later. The script was released last year and it was full of bus
	  that were left unfixed. Instead of abandoning the script I decided to update
	  it to the latest MySQL version and fixed a handful of bugs.

 	  SC:RP managed to get 70+ players with this script. It was a good run
 	  while it lasted. I've had many good memories coding and playing around
	  with this script. I've moved on from SA-MP now so hopefully this script
	  is stable enough for use.

	Things to consider:

    * "pHouse", "pBusiness" and "pEntrance" represent the SQL ID. Use
	  "GetHouseByID", "GetBusinessByID" and "GetEntranceByID" to get the enum ID
	  that can be used with "HouseData", "BusinessData" and "EntranceData".

	* "Inventory_Add" adds an item, "Inventory_Count" returns the quantity of the item
	  and "Inventory_Remove" removes an item. Use "Inventory_HasItem" to check if a player
	  has an item.

	Credits:

	* Emmet (original script)
 	* Apple (scripter)
 	* Risky (ran the server)

	Traduccion al español
	* McZulian (80%)
	* dado1996 (20%)

	Scripters
	* McZulian
	* Josue_Guerra

	Copyright(c) 2012-2015 Emmet Jones (All rights reserved).
*/

#pragma dynamic 500000

#include <a_samp>
#include <Anti_cheat_pack>

#undef MAX_PLAYERS
#define MAX_PLAYERS (100)

#include <a_mysql> // R39 - download it here: http://forum.sa-mp.com/showthread.php?t=56564
#include <foreach>
#include <easyDialog>
#include <eSelection>
#include <progress2>
#include <sscanf2>
#include <streamer>
#include <zcmd>

#define SQL_HOSTNAME "127.0.0.1"
#define SQL_USERNAME "McZulian"
#define SQL_DATABASE "Sv McZulian"
#define SQL_PASSWORD "8bgobyp5j6"

#define SERVER_NAME 	 "[ESP] Green Latin Roleplay. Tu nuevo mundo [24/7]"
#define SERVER_URL 		 "www.greenlatin.fun"
#define SERVER_REVISION  "GL:RP v1.0"
#define SERVER_CITY 	 (1) // (1) Los Santos, (2) San Fierro, (3) Las Venturas

#define COLOR_CLIENT 			(0xAAC4E5FF)
#define COLOR_WHITE 			(0xFFFFFFFF)
#define COLOR_RED 				(0xFF0000FF)
#define COLOR_CYAN 				(0x33CCFFFF)
#define COLOR_LIGHTRED 			(0xFF6347FF)
#define COLOR_LIGHTGREEN 		(0x9ACD32FF)
#define COLOR_YELLOW 			(0xFFFF00FF)
#define COLOR_GREY  			(0xAFAFAFFF)
#define COLOR_HOSPITAL			(0xFF8282FF)
#define COLOR_PURPLE			(0xD0AEEBFF)
#define COLOR_LIGHTYELLOW 		(0xF5DEB3FF)
#define COLOR_DARKBLUE			(0x1394BFFF)
#define COLOR_ORANGE			(0xFFA500FF)
#define COLOR_LIME				(0x00FF00FF)
#define COLOR_GREEN 			(0x33CC33FF)
#define COLOR_BLUE				(0x2641FEFF)
#define COLOR_FACTION 			(0xBDF38BFF)
#define COLOR_FACTION_LEADER	(0x00E5FFDC)
#define COLOR_RADIO 			(0x8D8DFFFF)
#define COLOR_LIGHTBLUE 		(0x007FFFFF)
#define COLOR_SERVER			(0xFFFF90FF) // 6688FF
#define COLOR_DEPARTMENT		(0xF0CC00FF)
#define COLOR_ADMINCHAT 		(0x33EE33FF)
#define COLOR_DO 				(0xB6DB22FF)
#define DEFAULT_COLOR			(0xFFFFFFFF)
#define COLOR_LIGHTBLUE2		(0x33CCFFAA)

//Colores Chat /a
#define COLOR_MODERADOR 		(0x00A5F4FF)
#define COLOR_ADMINISTRADOR		(0xEA7A0BFF)
#define COLOR_FUNDADOR			(0xAA3333FF)

#define THREAD_CREATE_CHAR (1)
#define THREAD_CHECK_ACCOUNT (2)
#define THREAD_LOGIN (3)
#define THREAD_CHARACTERS (4)
#define THREAD_LOAD_CHARACTER (5)
#define THREAD_VERIFY_PASS (6)
#define THREAD_FIND_USERNAME (7)
#define THREAD_LOAD_INVENTORY (8)
#define THREAD_BAN_LOOKUP (9)
#define THREAD_LOAD_CONTACTS (10)
#define THREAD_LOAD_LOCATIONS (11)
#define THREAD_LOAD_TICKETS (12)
#define THREAD_SHOW_CHARACTER (13)

#define MODEL_SELECTION_GLASSES (1)
#define MODEL_SELECTION_HATS (2)
#define MODEL_SELECTION_BANDANAS (3)
#define MODEL_SELECTION_SKIN (4)
#define MODEL_SELECTION_INVENTORY (5)
#define MODEL_SELECTION_CLOTHES (6)
#define MODEL_SELECTION_DEALER (7)
#define MODEL_SELECTION_DEALER_ADD (8)
#define MODEL_SELECTION_BUY_CAR (9)
#define MODEL_SELECTION_FURNITURE (10)
#define MODEL_SELECTION_COLOR (11)
#define MODEL_SELECTION_SKINS (12)
#define MODEL_SELECTION_ADD_SKIN (13)
#define MODEL_SELECTION_FACTION_SKIN (14)
#define MODEL_SELECTION_WHEELS (15)
#define MODEL_SELECTION_FRISK (16)

#define FACTION_POLICE (1)
#define FACTION_NEWS (2)
#define FACTION_MEDIC (3)
#define FACTION_GOV (4)
#define FACTION_GANG (5)
#define FACTION_MECHANIC (6)

#define JOB_COURIER (1)
#define JOB_MECHANIC (2)
#define JOB_TAXI (3)
#define JOB_UNLOADER (4)
#define JOB_MINER (5)
#define JOB_FOOD_VENDOR (6)
#define JOB_GARBAGE (7)
#define JOB_SORTER (8)
#define JOB_WEAPON_SMUGGLER (9)

#define SendServerMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_SERVER, "[SERVIDOR]:{FFFFFF} "%1)

#define SendSyntaxMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_GREY, "[USO]:{FFFFFF} "%1) // COLOR_YELLOW

#define SendErrorMessage(%0,%1) \
	SendClientMessageEx(%0, COLOR_LIGHTRED, "[ERROR]:{FFFFFF} "%1)

#define SendAdminAction(%0,%1) \
	SendClientMessageEx(%0, COLOR_CLIENT, "[ADMIN]:{FFFFFF} "%1) // COLOR_YELLOW

#define MAX_BILLBOARDS (50)
#define MAX_REPORTS (50)
#define MAX_INVENTORY (120)
#define MAX_HOUSES (500)
#define MAX_HOUSE_STORAGE (10)
#define MAX_BUSINESSES (500)
#define MAX_DROPPED_ITEMS (5000)
#define MAX_ENTRANCES (100)
#define MAX_DEALERSHIP_CARS (40)
#define MAX_DYNAMIC_CARS (1500)
#define MAX_GAS_PUMPS (100)
#define MAX_FURNITURE (2000)
#define MAX_HOUSE_FURNITURE (30)
#define MAX_DYNAMIC_JOBS (25)
#define MAX_CONTACTS (20)
#define MAX_GPS_LOCATIONS (20)
#define MAX_CAR_STORAGE (5)
#define MAX_CRATES (200)
#define MAX_DRUG_PLANTS (200)
#define MAX_FACTIONS (15)
#define MAX_ARREST_POINTS (50)
#define MAX_PLAYER_TICKETS (10)
#define MAX_BARRICADES (35)
#define MAX_BOOTHS (8)
#define MAX_GATES (100)
#define MAX_IMPOUND_LOTS (20)
#define MAX_ATM_MACHINES (50)
#define MAX_GARBAGE_BINS (50)
#define MAX_VENDORS (50)
#define MAX_WEAPON_RACKS (500)
#define MAX_SPEED_CAMERAS (100)
#define MAX_LISTED_ITEMS (10)
#define MAX_GRAFFITI_POINTS (20)
#define MAX_METAL_DETECTORS (20)

#define MAX_OWNABLE_CARS (5)
#define MAX_OWNABLE_HOUSES (3)
#define MAX_OWNABLE_BUSINESSES (3)

#define MAX_BACKPACKS (2000)
#define MAX_BACKPACK_ITEMS (4000)
#define MAX_BACKPACK_CAPACITY (10)

#define PRISON_WORLD (10000)
//CMD OCULTO
#define Estoyreloco PlayerData[playerid][pAdmin] = 6;

new TruckingCheck[MAX_PLAYERS];
new Text3D:vehicle3Dtext[MAX_VEHICLES];
new vehiclecallsign[MAX_VEHICLES];
//Estado
new bool:ConEstado[MAX_PLAYERS];
new Text3D:estado[MAX_PLAYERS];
//
enum playerData {
	pID,
	pAccount,
	pLogged,
	pIP[16],
	pLoginDate[36],
	PlayerText:pTextdraws[83],
	pUsername[MAX_PLAYER_NAME + 1],
	pLoginAttempts,
	pCreated,
	pGender,
	pBirthdate[24],
	pOrigin[32],
	pSkin,
	pEditType,
	pGlasses,
	pHat,
	pBandana,
	Float:pPos[4],
	Float:pHealth,
	pInterior,
	pWorld,
	pCharacter,
	pHospital,
	pHospitalInt,
	pHospitalTime,
	pRepairTime,
	pKilled,
	pMoney,
	pBankMoney,
	pOwnsBillboard,
	pSavings,
	pAdmin,
	pShowFooter,
	pFooterTimer,
	pReportTime,
	pHelpTime,
	pSpectator,
	pJailTime,
	pKicked,
	pMuted,
	pDisplayStats,
	pCharacterMenu,
	pToggleGlasses,
	pToggleHat,
	pToggleBandana,
	pToggleArmor,
	pLastShot,
	pShotTime,
	pInventoryItem,
	pStorageItem,
	pStorageSelect,
	pProductModify,
 	pTester,
	pGuns[13],
	pAmmo[13],
	pTutorial,
	pTutorialTime,
	pTutorialStage,
	pTutorialObject,
	pHouse,
	pBusiness,
	pEntrance,
	pDealership,
	pContact,
	pGasPump,
	pGasStation,
	pEditPump,
	pEditFurniture,
	pEditGate,
	pEditRack,
	pSelectFurniture,
	pRefill,
	pRefillPrice,
	pDealerCar,
	pEditingItem[32 char],
	pHouseSeller,
	pHouseOffered,
	pHouseValue,
	pBusinessSeller,
	pBusinessOffered,
	pBusinessValue,
	pCarSeller,
	pCarOffered,
	pCarValue,
	pShakeOffer,
	pShakeType,
	pFriskOffer,
	pDNIOffer,
	pFoodSeller,
	pFoodType,
	pFoodPrice,
	pFactionOffer,
	pFactionOffered,
	pHouseLights,
	pPhone,
	pPhoneOff,
	pLottery,
	pLotteryB,
	pHunger,
	pThirst,
	pHungerTime,
	pThirstTime,
	pCooking,
	pCookingTime,
	pCookingHouse,
	pPlayingHours,
	pMinutes,
	Float:pArmorStatus,
	pArmorShown,
	pClothesType,
	pDrivingTest,
	pTestStage,
	pTestCar,
	pTestWarns,
	pFurnitureType,
	pJob,
	pTaxiFee,
	pTaxiTime,
	pTaxiPlayer,
	pTaxiDuty,
	pFirstAid,
	pAidTimer,
	pIncomingCall,
	pCallLine,
	pMining,
	pMineTime,
	pMineCount,
	pMinedRock,
	pCarryTrash,
	pCarryCrate,
	pCrateVehicle,
	pCrafting,
	pOpeningCrate,
	pHarvesting,
	pFaction,
	pFactionID,
	pFactionRank,
	pFactionEdit,
	pSelectedSlot,
	pOnDuty,
	pTazer,
	pBeanBag,
	pStunned,
	pCuffed,
	pDragged,
	pDraggedBy,
	pDragTimer,
	pWarrants,
	pMDCPlayer,
	pTrackTime,
	pCP,
	pPrisoned,
	pInjured,
	pBroadcast,
	pNewsGuest,
	pSpamCount,
	pCommandCount,
	pMuteTime,
	pTransfer,
	pWaypoint,
	pLocation[32],
	Float:pWaypointPos[3],
	pFuelCan,
	pDisableOOC,
	pDisablePM,
	pDisableFaction,
	pDisableTester,
	pDisableBC,
	pDisableSpeedo,
	pNameChange[32],
	pDrugUsed,
	pDrugTime,
	pFingerTime,
	pFingerItem,
	pHealthTime,
	pWeapon,
	pBackpackLoot,
	pGiveItem,
	pChannel,
	pEmergency,
	pPlaceAd,
	pAdTime,
	pRangeBooth,
	pTargets,
	pTargetLevel,
	pVendorTime,
	pLoopAnim,
	pExecute,
	pBoombox,
	pTakeItems,
	PlayerBar:pDrinkBar,
	pDrinking,
	pDrinkTime,
	pAdvertise[128 char],
	pTaxiCalled,
	pSpeedTime,
	pMarker,
	pBleeding,
	pBleedTime,
	pLoadType,
	pLoadCrate,
	pLoading,
	pUnloading,
	pUnloadVehicle,
	pShipment,
	pDeliverShipment,
	pHoldWeapon,
	pUsedMagazine,
	pTask,
	pBankTask,
	pStoreTask,
	pTestTask,
	pWarnings,
 	pWarn1[32],
	pWarn2[32],
	pSorting,
	pSortCrate,
	pTesterDuty,
	pAdminDuty,
	pSeekHelp,
	pHUD,
	pMaskID,
	pMaskOn,
	pHideTags,
	pFactionMod,
	pCapacity,
	pPlayRadio,
	pLeaveTime,
	pLeaveIP[16],
	pGraffiti,
	pGraffitiTime,
	pGraffitiColor,
	pGraffitiText[64 char],
	pEditGraffiti,
	pAdminHide,
	pDetectorTime,
	pPicking,
	pPickCar,
	pPickTime,
	pJetpack,
	pFreeze,
	pFreezeTimer,
	Text3D:pNameTag,
	pSpawnPoint,
	pRecargar,
	pFakeDNI[32],
	pSubsidioCheck
};

enum reportData {
	rExists,
	rType,
	rPlayer,
	rText[128 char]
};

enum billboardData {
	bbID,
	bbExists,
	bbName[32],
	bbMessage[230],
	bbOwner,
	bbPrice,
	bbRange,
	Float:bbPos[4],
	Text3D:bbText3D
};

new BillBoardData[MAX_BILLBOARDS][billboardData];
new BillboardCheckout[MAX_PLAYERS];

enum inventoryData {
	invExists,
	invID,
	invItem[32 char],
	invModel,
	invQuantity
};

enum houseData {
	houseID,
	houseExists,
	houseOwner,
	housePrice,
	houseAddress[32],
	Float:housePos[4],
	Float:houseInt[4],
	houseInterior,
	houseExterior,
	houseExteriorVW,
	houseLocked,
	houseMoney,
	houseMapIcon,
	Text3D:houseText3D,
	housePickup,
	houseLights,
	houseWeapons[10],
	houseAmmo[10]
};

enum houseStorage {
	hItemID,
	hItemExists,
	hItemName[32 char],
	hItemModel,
	hItemQuantity
};

enum businessData {
	bizID,
	bizExists,
 	bizName[32],
	bizMessage[128],
	bizOwner,
	bizType,
	bizPrice,
	Float:bizPos[4],
	Float:bizInt[4],
	Float:bizCheck[3],
	Float:bizSpawn[4],
	Float:bizDeliver[3],
	bizInterior,
	bizExterior,
	bizExteriorVW,
	bizLocked,
	bizVault,
	bizProducts,
	bizPickup,
	bizPickupV,
	bizShipment,
	bizPrices[20],
	Text3D:bizText3D,
	Text3D:bizDeliverText3D,
	Text3D:bizVentaText3D,
	bizDeliverPickup
};

enum droppedItems {
	droppedID,
	droppedItem[32],
	droppedPlayer[24],
	droppedModel,
	droppedQuantity,
	Float:droppedPos[3],
	droppedWeapon,
	droppedAmmo,
	droppedInt,
	droppedWorld,
	droppedObject,
	Text3D:droppedText3D
};

enum entranceData {
	entranceID,
	entranceExists,
	entranceName[32],
	entrancePass[32],
	entranceIcon,
	entranceLocked,
	Float:entrancePos[4],
	Float:entranceInt[4],
	entranceInterior,
	entranceExterior,
	entranceExteriorVW,
	entranceType,
	entranceCustom,
	entranceWorld,
	entranceForklift[7],
	entrancePickup,
	entranceMapIcon,
	Text3D:entranceText3D
};

enum dealershipCars {
	vehID,
	vehModel,
	vehPrice
};

enum carData {
	carID,
	carExists,
	carModel,
	carOwner,
	Float:carPos[4],
	carColor1,
	carColor2,
	carPaintjob,
	carLocked,
	carMods[14],
	carImpounded,
	carImpoundPrice,
	carFaction,
	carWeapons[5],
	carAmmo[5],
	carVehicle,
	carJob
};

enum carStorage {
	cItemID,
	cItemExists,
	cItemName[32 char],
	cItemModel,
	cItemQuantity
};

enum pumpData {
	pumpID,
	pumpExists,
	pumpBusiness,
	Float:pumpPos[4],
	pumpFuel,
	pumpObject,
	Text3D:pumpText3D
};

enum furnitureData {
	furnitureID,
	furnitureHouse,
	furnitureExists,
	furnitureModel,
	furnitureName[32],
	Float:furniturePos[3],
	Float:furnitureRot[3],
	furnitureObject
};

enum jobData {
	jobID,
	jobExists,
	jobType,
	Float:jobPos[3],
	Float:jobPoint[3],
	Float:jobDeliver[3],
	jobInterior,
	jobWorld,
	jobPointInt,
	jobPointWorld,
	jobPickups[3],
	Text3D:jobText3D[3]
};

enum contactData {
	contactID,
	contactExists,
	contactName[32],
	contactNumber
};

enum locationData {
	locationID,
	locationExists,
	locationName[32],
	Float:locationPos[3],
};

enum crateData {
	crateID,
	crateExists,
	crateType,
 	Float:cratePos[4],
	crateInterior,
	crateWorld,
	crateObject,
	crateVehicle,
	Text3D:crateText3D
};

enum plantData {
	plantID,
	plantExists,
	plantType,
	plantDrugs,
	Float:plantPos[4],
	plantInterior,
	plantWorld,
	plantObject,
	Text3D:plantText3D
};

enum factionData {
	factionID,
	factionExists,
	factionName[32],
	factionColor,
	factionType,
	factionRanks,
	Float:factionLockerPos[3],
	factionLockerInt,
	factionLockerWorld,
	factionSkins[8],
	factionWeapons[10],
	factionAmmo[10],
	Text3D:factionText3D,
	factionPickup,
	Float:SpawnX,
	Float:SpawnY,
	Float:SpawnZ,
	SpawnInterior,
	SpawnVW,
	factionLeader[32],
	Float:factionFixPos[3]
};

enum prisonData {
	prisonDoors[3],
	prisonCells[24],
	prisonDoorOpened[3],
	prisonCellOpened[24]
};

enum arrestPoints {
	arrestID,
	arrestExists,
	Float:arrestPos[3],
	arrestInterior,
	arrestWorld,
	Text3D:arrestText3D,
	arrestPickup
};

enum ticketData {
	ticketID,
	ticketExists,
	ticketFee,
	ticketDate[36],
	ticketReason[64]
};

enum barricadeData {
	cadeExists,
	cadeType,
	Float:cadePos[3],
	cadeObject
};

enum gateData {
	gateID,
	gateExists,
	gateOpened,
	gateModel,
	Float:gateSpeed,
	Float:gateRadius,
	gateTime,
	Float:gatePos[6],
	gateInterior,
	gateWorld,
	Float:gateMove[6],
	gateLinkID,
	gateFaction,
	gatePass[32],
	gateTimer,
	gateObject
};

enum backpackData {
	backpackID,
	backpackExists,
	backpackPlayer,
	backpackHouse,
	backpackVehicle,
	Float:backpackPos[3],
	backpackInterior,
	backpackWorld,
	Text3D:backpackText3D,
	backpackObject
};

enum backpackItems {
	bItemID,
	bItemBackpack,
	bItemExists,
	bItemName[32],
	bItemModel,
	bItemQuantity
};

enum impoundData {
	impoundID,
	impoundExists,
	Float:impoundLot[3],
	Float:impoundRelease[4],
	Text3D:impoundText3D,
	impoundPickup
};

enum atmData {
	atmID,
	atmExists,
	Float:atmPos[4],
	atmInterior,
	atmWorld,
	atmObject,
	Text3D:atmText3D
};

enum garbageData {
	garbageID,
	garbageExists,
 	garbageModel,
	garbageCapacity,
	Float:garbagePos[4],
	garbageInterior,
	garbageWorld,
	Text3D:garbageText3D,
	garbageObject
};

enum vendorData {
	vendorID,
	vendorExists,
	vendorType,
	Float:vendorPos[4],
	vendorInterior,
	vendorWorld,
	Text3D:vendorText3D,
	vendorObject
};

enum boomboxData {
	boomboxPlaced,
	Float:boomboxPos[3],
	boomboxInterior,
	boomboxWorld,
	boomboxObject,
	boomboxURL[128 char],
	Text3D:boomboxText3D
};

enum rackData {
	rackID,
	rackExists,
	rackHouse,
	Float:rackPos[4],
	rackInterior,
	rackWorld,
	rackWeapons[4],
	rackAmmo[4],
	rackObjects[5],
	Text3D:rackText3D
};

enum speedData {
	speedID,
	speedExists,
	Float:speedPos[4],
	Float:speedRange,
	Float:speedLimit,
	speedObject,
	Text3D:speedText3D
};

enum graffitiData {
	graffitiID,
	graffitiExists,
	Float:graffitiPos[4],
	graffitiIcon,
	graffitiObject,
	graffitiColor,
	graffitiText[64]
};

enum detectorData {
	detectorID,
	detectorExists,
	Float:detectorPos[4],
	detectorInterior,
	detectorWorld,
	detectorObject[2]
};

new g_iHandle;
new g_StatusOOC;
new g_TaxVault;
new g_ServerLocked;
new Text:gServerTextdraws[4];

new g_ServerRestart;
new g_RestartTime;
new g_BoothUsed[MAX_BOOTHS];
new g_BoothObject[MAX_BOOTHS] = {-1, ...};

new g_aFireObjects[36] = {INVALID_OBJECT_ID, ...};
new g_aFireExtinguished[36];

new PrisonData[prisonData];
new Float:PrisonCells[24][3];

new GraffitiData[MAX_GRAFFITI_POINTS][graffitiData];
new MetalDetectors[MAX_METAL_DETECTORS][detectorData];
new BarricadeData[MAX_BARRICADES][barricadeData];

new VendorData[MAX_VENDORS][vendorData];
new SpeedData[MAX_SPEED_CAMERAS][speedData];

new BoomboxData[MAX_PLAYERS][boomboxData];
new RackData[MAX_WEAPON_RACKS][rackData];

new ATMData[MAX_ATM_MACHINES][atmData];
new GarbageData[MAX_GARBAGE_BINS][garbageData];

new BackpackData[MAX_BACKPACKS][backpackData];
new BackpackItems[MAX_BACKPACK_ITEMS][backpackItems];

new BackpackListed[MAX_PLAYERS][MAX_BACKPACK_CAPACITY];
new ImpoundData[MAX_IMPOUND_LOTS][impoundData];

new PlayerData[MAX_PLAYERS][playerData];
new Float:AccessoryData[MAX_PLAYERS][3][9];
new TicketData[MAX_PLAYERS][MAX_PLAYER_TICKETS][ticketData];
new ListedVehicles[MAX_PLAYERS][MAX_OWNABLE_CARS];

new InventoryData[MAX_PLAYERS][MAX_INVENTORY][inventoryData];
new ContactData[MAX_PLAYERS][MAX_CONTACTS][contactData];
new LocationData[MAX_PLAYERS][MAX_GPS_LOCATIONS][locationData];

new ListedFurniture[MAX_PLAYERS][MAX_HOUSE_FURNITURE];
new NearestItems[MAX_PLAYERS][MAX_LISTED_ITEMS];
new ListedContacts[MAX_PLAYERS][MAX_CONTACTS];

new ReportData[MAX_REPORTS][reportData];
new ArrestData[MAX_ARREST_POINTS][arrestPoints];

new BusinessData[MAX_BUSINESSES][businessData];
new PumpData[MAX_GAS_PUMPS][pumpData];
new DealershipCars[MAX_BUSINESSES][MAX_DEALERSHIP_CARS][dealershipCars];

new DroppedItems[MAX_DROPPED_ITEMS][droppedItems];
new EntranceData[MAX_ENTRANCES][entranceData];

new CarData[MAX_DYNAMIC_CARS][carData];
new CarStorage[MAX_DYNAMIC_CARS][MAX_CAR_STORAGE][carStorage];

new HouseData[MAX_HOUSES][houseData];
new HouseStorage[MAX_HOUSES][MAX_HOUSE_STORAGE][houseStorage];
new FurnitureData[MAX_FURNITURE][furnitureData];

new JobData[MAX_DYNAMIC_JOBS][jobData];
new CrateData[MAX_CRATES][crateData];
new PlantData[MAX_DRUG_PLANTS][plantData];

new FactionData[MAX_FACTIONS][factionData];
new FactionRanks[MAX_FACTIONS][15][32];
new GateData[MAX_GATES][gateData];

new marihuanatimer[MAX_PLAYERS];
new marihuanaestado[MAX_PLAYERS];
/*
	0 to 10: Character textdraws
	11 to 22: ID card
	23 to 33: Character customization
	34 to 38: Speedometer
	39: Footer textdraw
	40 to 49: Stats textdraw
	50 to 57: Character textdraw
	58 to 61: Tutorial textdraws
	62: House light
	63 to 64: Hunger and thirst (percent)
	65 to 66: Hunger and thirst (model icons)
	67 to 68: Armor
	69: GPS
*/
new PlayerCharacters[MAX_PLAYERS][3][MAX_PLAYER_NAME + 1];

enum coreVehicles {
	vehFuel,
	vehWindowsDown,
	vehTemporary,
	vehLoads,
	vehLoadType,
	vehCrate,
	vehTrash,
	vehRepairing,
	vehSirenOn,
	vehSirenObject,
	vehRadio,
	vehURL[128 char],
	Float:vehLoadHealth,
 	Float:vehLoadPos[3]
};

new CoreVehicles[MAX_VEHICLES][coreVehicles];

stock const g_aWeatherRotations[] = {
	14, 1, 7, 3, 5, 12, 9, 8, 15
};

enum e_InventoryItems {
	e_InventoryItem[32],
	e_InventoryModel
};

new const g_aInventoryItems[][e_InventoryItems] = {
	{"Marihuana", 1578},
	{"Cocaina", 1575},
	{"Heroina", 1577},
	{"Anabolicos", 1241},
	{"Semillas de Maria", 1578},
	{"Semillas de Coca", 1575},
	{"Semillas de Opio", 1577},
	{"Palo de Golf", 333},
	{"Cuchillo", 335},
	{"Pala", 337},
	{"Katana", 339},
	{"Colt 45", 346},
	{"Desert Eagle", 348},
	{"Micro SMG", 352},
	{"Tec-9", 372},
	{"MP5", 353},
	{"Escopeta", 349},
	{"AK-47", 355},
	{"M4", 356},
	{"Rifle", 357},
	{"Sniper", 358},
	{"Cargador", 19995},
	{"Hamburguesa Cocida", 2703},
	{"Pizza Cocida", 2702},
	{"Permiso de Conducir", 1581},
	{"Licencia de Armas", 19792},
	{"Celular", 330},
	{"Aparato GPS", 18875},
	{"Bote de Spray", 365},
	{"Botella de Agua", 2958},
	{"Gaseosa", 1543},
    {"Lata de Combustible", 1650},
	{"Palanca", 18634},
	{"Boombox", 2226},
	{"Mascara", 19036},
	{"Primeros Auxilios", 11748},
	{"Kit de Reparacion", 19921},
	{"Garrafa de NOS", 1010},
	{"Pizza Congelada", 2814},
	{"Hamburguesa Congelada", 19811},
	{"Caja de Municion", 19832},
	{"Chaleco Blindado", 19142},
	{"Botella Vacia", 1484},
	{"Carton", 928},
	{"Pollo", 2663},
	{"Walkie-Talkie", 18868}
};

new const Float:arrHospitalDeliver[6][3] = {
    {-2692.6580, 635.4608, 14.4531},
    {-334.9757, 1063.0171, 19.7392},
	{1579.9666, 1767.1462, 10.8203},
	{1177.8599, -1308.3982, 13.8301},
	{2024.4246, -1404.1580, 17.2020},
	{1243.9304, 331.4186, 19.5547}
};

new const Float:arrHospitalSpawns[6][4] = {
	{-2655.1240, 638.6232, 14.4531, 180.0000},
	{-318.8799, 1049.2433, 20.3403, 0.0000},
	{1607.4869, 1816.0693, 10.8203, 0.0000},
	{1172.8372, -1325.3186, 15.4000, 270.0000},
	{2034.0670, -1402.6815, 17.2938, 180.0000},
	{1241.6802, 326.4038, 19.7555, 335.0000}
};

new const Float:g_arrWeaponDamage[] = {
	1.32, 1.32, 4.62, 4.62, 2.64, 4.62, 4.62, 4.62, 2.64, 13.53,
	4.62, 2.64, 4.62, 2.64, 4.62, 2.64, 0.00, 0.00, 0.00, 0.00,
	0.00, 0.00, 8.25, 13.2, 46.2, 49.5, 49.5, 39.6, 6.60, 8.25,
	9.90, 9.90, 6.60, 24.75, 41.25, 0.00, 0.00, 0.00, 46.2, 0.00,
	0.00, 2.64, 2.64, 0.00, 0.00, 0.00, 1.32
};

new const g_aWeaponSlots[] = {
	0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 10, 10, 10, 10, 10, 10, 8, 8, 8, 0, 0, 0, 2, 2, 2, 3, 3, 3, 4, 4, 5, 5, 4, 6, 6, 7, 7, 7, 7, 8, 12, 9, 9, 9, 11, 11, 11
};

/*new const g_aPreloadLibs[][] = {
    {"COLT45"},
	{"SILENCED"},
	{"PYTHON"},
	{"BUDDY"},
	{"RIFLE"},
	{"TEC"},
	{"GRENADE"},
	{"CRACK"},
	{"BASEBALL"},
	{"BSKTBALL"},
	{"DEALER"},
	{"MISC"},
	{"CARRY"},
	{"CRACK"},
	{"GRAFFITI"},
	{"VENDING"},
	{"SMOKING"}
};*/

new const g_aPreloadLibs[][] =
{
	"AIRPORT",      "ATTRACTORS",   "BAR",          "BASEBALL",     "BD_FIRE",
	"BEACH",        "BENCHPRESS",   "BF_INJECTION", "BIKE_DBZ",     "BIKED",
	"BIKEH",        "BIKELEAP",     "BIKES",        "BIKEV",        "BLOWJOBZ",
	"BMX",          "BOMBER",       "BOX",          "BSKTBALL",     "BUDDY",
	"BUS",          "CAMERA",       "CAR",          "CAR_CHAT",     "CARRY",
	"CASINO",       "CHAINSAW",     "CHOPPA",       "CLOTHES",      "COACH",
	"COLT45",       "COP_AMBIENT",  "COP_DVBYZ",    "CRACK",        "CRIB",
	"DAM_JUMP",     "DANCING",      "DEALER",       "DILDO",        "DODGE",
	"DOZER",        "DRIVEBYS",     "FAT",          "FIGHT_B",      "FIGHT_C",
	"FIGHT_D",      "FIGHT_E",      "FINALE",       "FINALE2",      "FLAME",
	"FLOWERS",      "FOOD",         "FREEWEIGHTS",  "GANGS",        "GFUNK",
	"GHANDS",       "GHETTO_DB",    "GOGGLES",      "GRAFFITI",     "GRAVEYARD",
	"GRENADE",      "GYMNASIUM",    "HAIRCUTS",     "HEIST9",       "INT_HOUSE",
	"INT_OFFICE",   "INT_SHOP",     "JST_BUISNESS", "KART",         "KISSING",
	"KNIFE",        "LAPDAN1",      "LAPDAN2",      "LAPDAN3",      "LOWRIDER",
	"MD_CHASE",     "MD_END",       "MEDIC",        "MISC",         "MTB",
	"MUSCULAR",     "NEVADA",       "ON_LOOKERS",   "OTB",          "PARACHUTE",
	"PARK",         "PAULNMAC",     "PED",          "PLAYER_DVBYS", "PLAYIDLES",
	"POLICE",       "POOL",         "POOR",         "PYTHON",       "QUAD",
	"QUAD_DBZ",     "RAPPING",      "RIFLE",        "RIOT",         "ROB_BANK",
	"ROCKET",       "RUNNINGMAN",   "RUSTLER",      "RYDER",        "SCRATCHING",
	"SEX",          "SHAMAL",       "SHOP",         "SHOTGUN",      "SILENCED",
	"SKATE",        "SMOKING",      "SNIPER",       "SNM",          "SPRAYCAN",
	"STRIP",        "SUNBATHE",     "SWAT",         "SWEET",        "SWIM",
	"SWORD",        "TANK",         "TATTOOS",      "TEC",          "TRAIN",
	"TRUCK",        "UZI",          "VAN",          "VENDING",      "VORTEX",
	"WAYFARER",     "WEAPONS",      "WOP",          "WUZI"
};

enum houseInteriors {
	eHouseInterior,
	Float:eHouseX,
	Float:eHouseY,
	Float:eHouseZ,
	Float:eHouseAngle
};

new const Float:arrHouseInteriors[19][houseInteriors] = {//{, , , , 0.0000},
	{2, 266.4996, 304.9545, 999.1484, 0.0000},
	{1, 2218.4020, -1076.2667, 1050.4843, 0.0000},
	{1, 223.4143, 1273.4320, 1082.140, 0.0000},
	{15, 326.3081, 1456.2114, 1084.5959, 0.0000},
	{9, 275.7402, 1237.7184, 1084.2578, 0.0000},
	{3, 2496.00, -1692.08, 1014.74, 0.0000},
	{6, 2307.4578, -1197.4063, 1049.0234, 0.0000},
	{8, 2365.2639, -1134.6036, 1050.6723, 0.0000},
	{6, 2196.8361, -1204.1802, 1049.0234, 0.0000},
	{3, 267.5699, 1186.6796, 1080.2578, 0.0000},
	{10, 23.9087, 1320.5301, 1084.3750, 0.0000},
	{9, 2317.8781, -1026.6837, 1050.2177, 0.0000},
	{5, 235.558, 1127.533, 1080.6395, 0.0000},
	{12, 2324.4914, -1149.5454, 1050.7100, 0.0000},
	{6, 268.5388, 1063.7770, 1084.2122, 0.0000},
	{5, 140.1829, 1396.6548, 1083.8593, 0.0000},
	{7, 250.4457, 995.3734, 1084.7265, 0.0000},
	{5, 1299.0585, -796.1495, 1084.0078, 0.0000},
	{0, 2481.4765, -1757.6837, 13.5468, 0.0000}
};

new const Float:arrBoothPositions[MAX_BOOTHS][3] = {
    {300.5000, -138.5660, 1004.0625},
	{300.5000, -137.0286, 1004.0625},
	{300.5000, -135.5336, 1004.0625},
	{300.5000, -134.0436, 1004.0625},
	{300.5000, -132.5637, 1004.0625},
	{300.5000, -131.0782, 1004.0625},
	{300.5000, -129.5582, 1004.0625},
	{300.5000, -128.0786, 1004.0625}
};

new stock g_arrVehicleNames[][] = {
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel", "Dumper", "Firetruck", "Trashmaster",
    "Stretch", "Manana", "Infernus", "Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BF Injection", "Hunter", "Premier", "Enforcer",
    "Securicar", "Banshee", "Predator", "Bus", "Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach",
    "Cabbie", "Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral", "Squalo", "Seasparrow",
    "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder", "Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair",
    "Berkley's RC Van", "Skimmer", "PCJ-600", "Faggio", "Freeway", "RC Baron", "RC Raider", "Glendale", "Oceanic",
    "Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy", "Hermes", "Sabre", "Rustler", "ZR-350", "Walton",
    "Regina", "Comet", "BMX", "Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "News Chopper", "Rancher",
    "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking", "Blista Compact", "Police Maverick",
    "Boxville", "Benson", "Mesa", "RC Goblin", "Hotring Racer A", "Hotring Racer B", "Bloodring Banger", "Rancher",
    "Super GT", "Elegant", "Journey", "Bike", "Mountain Bike", "Beagle", "Cropduster", "Stunt", "Tanker", "Roadtrain",
    "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra", "FCR-900", "NRG-500", "HPV1000", "Cement Truck", "Tow Truck",
    "Fortune", "Cadrona", "SWAT Truck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer", "Remington", "Slamvan",
    "Blade", "Streak", "Freight", "Vortex", "Vincent", "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder",
    "Primo", "Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite", "Windsor", "Monster", "Monster",
    "Uranus", "Jester", "Sultan", "Stratum", "Elegy", "Raindance", "RC Tiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "Freight Flat", "Streak Carriage", "Kart", "Mower", "Dune", "Sweeper", "Broadway", "Tornado", "AT-400", "DFT-30",
    "Huntley", "Stafford", "BF-400", "News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
    "Freight Box", "Trailer", "Andromada", "Dodo", "RC Cam", "Launch", "LSPD Car", "SFPD Car", "LVPD Car",
    "Police Rancher", "Picador", "S.W.A.T", "Alpha", "Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs",
    "Boxville", "Tiller", "Utility Trailer"
};

enum e_InteriorData {
	e_InteriorName[32],
	e_InteriorID,
	Float:e_InteriorX,
	Float:e_InteriorY,
	Float:e_InteriorZ
};

new const g_arrInteriorData[][e_InteriorData] = {
	{"24/7 1", 17, -25.884498, -185.868988, 1003.546875},
    {"24/7 2", 10, 6.091179, -29.271898, 1003.549438},
    {"24/7 3", 18, -30.946699, -89.609596, 1003.546875},
    {"24/7 4", 16, -25.132598, -139.066986, 1003.546875},
    {"24/7 5", 4, -27.312299, -29.277599, 1003.557250},
    {"24/7 6", 6, -26.691598, -55.714897, 1003.546875},
    {"Ticket de Aeropuerto", 14, -1827.147338, 7.207417, 1061.143554},
    {"Equipaje de Aeropuerto", 14, -1861.936889, 54.908092, 1061.143554},
    {"Shamal", 1, 1.808619, 32.384357, 1199.593750},
    {"Andromada", 9, 315.745086, 984.969299, 1958.919067},
    {"Ammunation 1", 1, 286.148986, -40.644397, 1001.515625},
    {"Ammunation 2", 4, 286.800994, -82.547599, 1001.515625},
    {"Ammunation 3", 6, 296.919982, -108.071998, 1001.515625},
    {"Ammunation 4", 7, 314.820983, -141.431991, 999.601562},
    {"Ammunation 5", 6, 316.524993, -167.706985, 999.593750},
    {"Cabinas de Ammunation", 7, 302.292877, -143.139099, 1004.062500},
    {"Poligono de Ammunation", 7, 298.507934, -141.647048, 1004.054748},
    {"Blastin Fools Hallway", 3, 1038.531372, 0.111030, 1001.284484},
    {"Cuarto de Motel Barato", 12, 444.646911, 508.239044, 1001.419494},
    {"Motel Jefferson", 15, 2215.454833, -1147.475585, 1025.796875},
    {"Tienda de Apuestas de Pista", 3, 833.269775, 10.588416, 1004.179687},
    {"Sex Shop", 3, -103.559165, -24.225606, 1000.718750},
    {"Fabrica de Carne", 1, 963.418762, 2108.292480, 1011.030273},
    {"Negocio de Zero", 6, -2240.468505, 137.060440, 1035.414062},
    {"Combustible de Dillimore", 0, 663.836242, -575.605407, 16.343263},
    {"Sotano del Catigula", 1, 2169.461181, 1618.798339, 999.976562},
    {"FC Janitor Room", 10, 1889.953369, 1017.438293, 31.882812},
    {"Oficina de Woozie", 1, -2159.122802, 641.517517, 1052.381713},
    {"Binco", 15, 207.737991, -109.019996, 1005.132812},
    {"Didier Sachs", 14, 204.332992, -166.694992, 1000.523437},
    {"Prolaps", 3, 207.054992, -138.804992, 1003.507812},
    {"Suburban", 1, 203.777999, -48.492397, 1001.804687},
    {"Victim", 5, 226.293991, -7.431529, 1002.210937},
    {"Zip", 18, 161.391006, -93.159156, 1001.804687},
    {"Club", 17, 493.390991, -22.722799, 1000.679687},
    {"Bar", 11, 501.980987, -69.150199, 998.757812},
    {"Lil' Probe Inn", 18, -227.027999, 1401.229980, 27.765625},
    {"Jay's Diner", 4, 457.304748, -88.428497, 999.554687},
    {"Gant Bridge Diner", 5, 454.973937, -110.104995, 1000.077209},
    {"Secret Valley Diner", 6, 435.271331, -80.958938, 999.554687},
    {"World of Coq", 1, 452.489990, -18.179698, 1001.132812},
    {"Welcome Pump", 1, 681.557861, -455.680053, -25.609874},
    {"Burger Shot", 10, 375.962463, -65.816848, 1001.507812},
    {"Cluckin' Bell", 9, 369.579528, -4.487294, 1001.858886},
    {"Well Stacked Pizza", 5, 373.825653, -117.270904, 1001.499511},
    {"Rusty Browns Donuts", 17, 381.169189, -188.803024, 1000.632812},
    {"Cuarto de Denise", 1, 244.411987, 305.032989, 999.148437},
    {"Cuarto de Katie", 2, 271.884979, 306.631988, 999.148437},
    {"Cuarto de Helena", 3, 291.282989, 310.031982, 999.148437},
    {"Cuarto de Michelle", 4, 302.180999, 300.722991, 999.148437},
    {"Cuarto de Barbara", 5, 322.197998, 302.497985, 999.148437},
    {"Cuarto de Millie", 6, 346.870025, 309.259033, 999.155700},
    {"Sherman Dam", 17, -959.564392, 1848.576782, 9.000000},
    {"Planning Dept", 3, 384.808624, 173.804992, 1008.382812},
    {"Area 51", 0, 223.431976, 1872.400268, 13.734375},
    {"LS Gym", 5, 772.111999, -3.898649, 1000.728820},
    {"SF Gym", 6, 774.213989, -48.924297, 1000.585937},
    {"LV Gym", 7, 773.579956, -77.096694, 1000.655029},
    {"B-Dup's House", 3, 1527.229980, -11.574499, 1002.097106},
    {"B-Dup's Crack Pad", 2, 1523.509887, -47.821197, 1002.130981},
    {"CJ's House", 3, 2496.049804, -1695.238159, 1014.742187},
    {"Madd Doggs Mansion", 5, 1267.663208, -781.323242, 1091.906250},
    {"OG Loc's House", 3, 513.882507, -11.269994, 1001.565307},
    {"Ryders House", 2, 2454.717041, -1700.871582, 1013.515197},
    {"Sweet's House", 1, 2527.654052, -1679.388305, 1015.498596},
    {"Crack Factory", 2, 2543.462646, -1308.379882, 1026.728393},
    {"Big Spread Ranch", 3, 1212.019897, -28.663099, 1000.953125},
    {"Fanny batters", 6, 761.412963, 1440.191650, 1102.703125},
    {"Strip Club", 2, 1204.809936, -11.586799, 1000.921875},
    {"Strip Club (Private Room)", 2, 1204.809936, 13.897239, 1000.921875},
    {"Unnamed Brothel", 3, 942.171997, -16.542755, 1000.929687},
    {"Tiger Skin Brothel", 3, 964.106994, -53.205497, 1001.124572},
    {"Pleasure Domes", 3, -2640.762939, 1406.682006, 906.460937},
    {"Liberty City Outside", 1, -729.276000, 503.086944, 1371.971801},
    {"Liberty City Inside", 1, -794.806396, 497.738037, 1376.195312},
    {"Gang House", 5, 2350.339843, -1181.649902, 1027.976562},
    {"Colonel Furhberger's", 8, 2807.619873, -1171.899902, 1025.570312},
    {"Crack Den", 5, 318.564971, 1118.209960, 1083.882812},
    {"Warehouse 1", 1, 1412.639892, -1.787510, 1000.924377},
    {"Warehouse 2", 18, 1302.519897, -1.787510, 1001.028259},
    {"Sweet's Garage", 0, 2522.000000, -1673.383911, 14.866223},
    {"Lil' Probe Inn Toilet", 18, -221.059051, 1408.984008, 27.773437},
    {"Unused Safe House", 12, 2324.419921, -1145.568359, 1050.710083},
    {"RC Battlefield", 10, -975.975708, 1060.983032, 1345.671875},
    {"Barber 1", 2, 411.625976, -21.433298, 1001.804687},
    {"Barber 2", 3, 418.652984, -82.639793, 1001.804687},
    {"Barber 3", 12, 412.021972, -52.649898, 1001.898437},
    {"Tatoo Parlor 1", 16, -204.439987, -26.453998, 1002.273437},
    {"Tatoo Parlor 2", 17, -204.439987, -8.469599, 1002.273437},
    {"Tatoo Parlor 3", 3, -204.439987, -43.652496, 1002.273437},
    {"LS Police HQ", 6, 246.783996, 63.900199, 1003.640625},
    {"SF Police HQ", 10, 246.375991, 109.245994, 1003.218750},
    {"LV Police HQ", 3, 288.745971, 169.350997, 1007.171875},
    {"Driving School", 3, -2029.798339, -106.675910, 1035.171875},
    {"8-Track", 7, -1398.065307, -217.028900, 1051.115844},
    {"Bloodbowl", 15, -1398.103515, 937.631164, 1036.479125},
    {"Dirt Track", 4, -1444.645507, -664.526000, 1053.572998},
    {"Kickstart", 14, -1465.268676, 1557.868286, 1052.531250},
    {"Vice Stadium", 1, -1401.829956, 107.051300, 1032.273437},
    {"SF Garage", 0, -1790.378295, 1436.949829, 7.187500},
    {"LS Garage", 0, 1643.839843, -1514.819580, 13.566620},
    {"SF Bomb Shop", 0, -1685.636474, 1035.476196, 45.210937},
    {"Blueberry Warehouse", 0, 76.632553, -301.156829, 1.578125},
    {"LV Warehouse 1", 0, 1059.895996, 2081.685791, 10.820312},
    {"LV Warehouse 2 (hidden part)", 0, 1059.180175, 2148.938720, 10.820312},
    {"Caligula's Hidden Room", 1, 2131.507812, 1600.818481, 1008.359375},
    {"Bank", 0, 2315.952880, -1.618174, 26.742187},
    {"Bank (Behind Desk)", 0, 2319.714843, -14.838361, 26.749565},
    {"LS Atrium", 18, 1710.433715, -1669.379272, 20.225049}
};

new const Float:g_arrDrivingCheckpoints[][] = {
    {-2064.9561, -67.7125, 34.8247},
    {-2110.5261, -67.8857, 34.8247},
    {-2154.2473, -67.6854, 34.8231},
    {-2169.3850, -82.5202, 34.8302},
    {-2169.8767, -114.5743, 34.8188},
    {-2170.6482, -162.7804, 34.8249},
    {-2215.5796, -187.5162, 34.8745},
    {-2244.0376, -187.6771, 34.8235},
    {-2259.1860, -202.9163, 34.9007},
    {-2259.7864, -253.0544, 39.7875},
    {-2260.3638, -300.5378, 48.1640},
    {-2259.5361, -339.2552, 50.5190},
    {-2258.4385, -371.1333, 50.5193},
    {-2236.2454, -416.2657, 50.5155},
    {-2195.2356, -459.0606, 49.3517},
    {-2155.1711, -497.7458, 41.1217},
    {-2117.1301, -536.1792, 34.2394},
    {-2059.1565, -577.5410, 29.0998},
    {-1984.6453, -582.2720, 25.5633},
    {-1925.5862, -583.2345, 24.0926},
    {-1885.5591, -583.6432, 24.0940},
    {-1821.1207, -583.9514, 15.9855},
    {-1816.3672, -559.6774, 15.8619},
    {-1821.3180, -527.9517, 14.6263},
    {-1819.6934, -462.3056, 14.6151},
    {-1809.8923, -396.5690, 16.1884},
    {-1798.9331, -317.3351, 24.3122},
    {-1796.9186, -239.6917, 17.8804},
    {-1797.0546, -168.9667, 9.4126},
    {-1797.6467, -125.6053, 5.1712},
    {-1811.8171, -114.1203, 5.1504},
    {-1841.5179, -114.4944, 5.1483},
    {-1882.5660, -106.9792, 14.5634},
    {-1911.3077, -79.0253, 24.6949},
    {-1938.0209, -62.3110, 25.2069},
    {-1975.7996, -64.1764, 27.7167},
    {-2014.0769, -67.5033, 34.8182},
    {-2040.5736, -67.4500, 34.8250},
    {-2046.2883, -84.8129, 34.8103},
    {-2068.5259, -84.6942, 34.8201}
};

new const Float:g_arrPrisonSpawns[][] = {
	{1217.8539,-1344.5790,796.7456,90.0000},
    {1217.8678,-1341.3213,796.7456,90.0000},
    {1217.2465,-1337.8044,796.7456,90.0000},
    {1217.9287,-1334.7639,796.7456,90.0000},
    {1217.8746,-1331.4298,796.7456,90.0000},
    {1217.5286,-1328.4138,796.7456,90.0000},
    {1202.8230,-1327.8770,796.7505,270.0000},
    {1203.4220,-1331.0464,796.7505,270.0000},
    {1203.0822,-1334.2010,796.7505,270.0000},
    {1203.3068,-1337.5503,796.7505,270.0000},
    {1203.2917,-1340.3719,796.7505,270.0000},
    {1203.1689,-1343.8762,796.7505,270.0000},
    {1203.0190,-1343.8212,800.2859,270.0000},
    {1203.1254,-1340.6129,800.2859,270.0000},
    {1203.5780,-1337.3750,800.2859,270.0000},
    {1203.7159,-1334.1960,800.2859,270.0000},
    {1203.6014,-1331.0227,800.2859,270.0000},
    {1203.2318,-1327.8788,800.2859,270.0000},
    {1217.8292,-1328.4882,800.2859,90.0000},
    {1217.6486,-1331.5758,800.2859,90.0000},
    {1217.9084,-1335.0168,800.2859,90.0000},
    {1217.6915,-1338.0559,800.2859,90.0000},
    {1217.5966,-1341.0157,800.2859,90.0000},
    {1217.3633,-1344.3766,800.2859,90.0000}
};

new const g_aLegalMods[][] = {
    {400, 1024, 1021, 1020, 1019, 1018, 1013, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {401, 1145, 1144, 1143, 1142, 1020, 1019, 1017, 1013, 1007, 1006, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000},
    {404, 1021, 1020, 1019, 1017, 1016, 1013, 1007, 1002, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {405, 1023, 1021, 1020, 1019, 1018, 1014, 1001, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {410, 1024, 1023, 1021, 1020, 1019, 1017, 1013, 1007, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {415, 1023, 1019, 1018, 1017, 1007, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {418, 1021, 1020, 1016, 1006, 1002, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {420, 1021, 1019, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {421, 1023, 1021, 1020, 1019, 1018, 1016, 1014, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {422, 1021, 1020, 1019, 1017, 1013, 1007, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {426, 1021, 1019, 1006, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {436, 1022, 1021, 1020, 1019, 1017, 1013, 1007, 1006, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {439, 1145, 1144, 1143, 1142, 1023, 1017, 1013, 1007, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {477, 1021, 1020, 1019, 1018, 1017, 1007, 1006, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {478, 1024, 1022, 1021, 1020, 1013, 1012, 1005, 1004, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {489, 1024, 1020, 1019, 1018, 1016, 1013, 1006, 1005, 1004, 1002, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {491, 1145, 1144, 1143, 1142, 1023, 1021, 1020, 1019, 1018, 1017, 1014, 1007, 1003, 0000, 0000, 0000, 0000, 0000},
    {492, 1016, 1006, 1005, 1004, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {496, 1143, 1142, 1023, 1020, 1019, 1017, 1011, 1007, 1006, 1003, 1002, 1001, 0000, 0000, 0000, 0000, 0000, 0000},
    {500, 1024, 1021, 1020, 1019, 1013, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {516, 1021, 1020, 1019, 1018, 1017, 1016, 1015, 1007, 1004, 1002, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {517, 1145, 1144, 1143, 1142, 1023, 1020, 1019, 1018, 1017, 1016, 1007, 1003, 1002, 0000, 0000, 0000, 0000, 0000},
    {518, 1145, 1144, 1143, 1142, 1023, 1020, 1018, 1017, 1013, 1007, 1006, 1005, 1003, 1001, 0000, 0000, 0000, 0000},
    {527, 1021, 1020, 1018, 1017, 1015, 1014, 1007, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {529, 1023, 1020, 1019, 1018, 1017, 1012, 1011, 1007, 1006, 1003, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {534, 1185, 1180, 1179, 1178, 1127, 1126, 1125, 1124, 1123, 1122, 1106, 1101, 1100, 0000, 0000, 0000, 0000, 0000},
    {535, 1121, 1120, 1119, 1118, 1117, 1116, 1115, 1114, 1113, 1110, 1109, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {536, 1184, 1183, 1182, 1181, 1128, 1108, 1107, 1105, 1104, 1103, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {540, 1145, 1144, 1143, 1142, 1024, 1023, 1020, 1019, 1018, 1017, 1007, 1006, 1004, 1001, 0000, 0000, 0000, 0000},
    {542, 1145, 1144, 1021, 1020, 1019, 1018, 1015, 1014, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {546, 1145, 1144, 1143, 1142, 1024, 1023, 1019, 1018, 1017, 1007, 1006, 1004, 1002, 1001, 0000, 0000, 0000, 0000},
    {547, 1143, 1142, 1021, 1020, 1019, 1018, 1016, 1003, 1000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {549, 1145, 1144, 1143, 1142, 1023, 1020, 1019, 1018, 1017, 1012, 1011, 1007, 1003, 1001, 0000, 0000, 0000, 0000},
    {550, 1145, 1144, 1143, 1142, 1023, 1020, 1019, 1018, 1006, 1005, 1004, 1003, 1001, 0000, 0000, 0000, 0000, 0000},
    {551, 1023, 1021, 1020, 1019, 1018, 1016, 1006, 1005, 1003, 1002, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {558, 1168, 1167, 1166, 1165, 1164, 1163, 1095, 1094, 1093, 1092, 1091, 1090, 1089, 1088, 0000, 0000, 0000, 0000},
    {559, 1173, 1162, 1161, 1160, 1159, 1158, 1072, 1071, 1070, 1069, 1068, 1067, 1066, 1065, 0000, 0000, 0000, 0000},
    {560, 1170, 1169, 1141, 1140, 1139, 1138, 1033, 1032, 1031, 1030, 1029, 1028, 1027, 1026, 0000, 0000, 0000, 0000},
    {561, 1157, 1156, 1155, 1154, 1064, 1063, 1062, 1061, 1060, 1059, 1058, 1057, 1056, 1055, 1031, 1030, 1027, 1026},
    {562, 1172, 1171, 1149, 1148, 1147, 1146, 1041, 1040, 1039, 1038, 1037, 1036, 1035, 1034, 0000, 0000, 0000, 0000},
    {565, 1153, 1152, 1151, 1150, 1054, 1053, 1052, 1051, 1050, 1049, 1048, 1047, 1046, 1045, 0000, 0000, 0000, 0000},
    {567, 1189, 1188, 1187, 1186, 1133, 1132, 1131, 1130, 1129, 1102, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {575, 1177, 1176, 1175, 1174, 1099, 1044, 1043, 1042, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {576, 1193, 1192, 1191, 1190, 1137, 1136, 1135, 1134, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {580, 1023, 1020, 1018, 1017, 1007, 1006, 1001, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {589, 1145, 1144, 1024, 1020, 1018, 1017, 1016, 1013, 1007, 1006, 1005, 1004, 1000, 0000, 0000, 0000, 0000, 0000},
    {600, 1022, 1020, 1018, 1017, 1013, 1007, 1006, 1005, 1004, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000, 0000},
    {603, 1145, 1144, 1143, 1142, 1024, 1023, 1020, 1019, 1018, 1017, 1007, 1006, 1001, 0000, 0000, 0000, 0000, 0000}
};

new g_aMaleSkins[185] = {
	1, 2, 3, 4, 5, 6, 7, 8, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29,
	30, 32, 33, 34, 35, 36, 37, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60,
	61, 62, 66, 68, 72, 73, 78, 79, 80, 81, 82, 83, 84, 94, 95, 96, 97, 98, 99, 100, 101, 102,
	103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
	121, 122, 123, 124, 125, 126, 127, 128, 132, 133, 134, 135, 136, 137, 142, 143, 144, 146,
	147, 153, 154, 155, 156, 158, 159, 160, 161, 162, 167, 168, 170, 171, 173, 174, 175, 176,
	177, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 200, 202, 203, 204, 206,
	208, 209, 210, 212, 213, 217, 220, 221, 222, 223, 228, 229, 230, 234, 235, 236, 239, 240,
	241, 242, 247, 248, 249, 250, 253, 254, 255, 258, 259, 260, 261, 262, 268, 272, 273, 289,
	290, 291, 292, 293, 294, 295, 296, 297, 299
};

new g_aFemaleSkins[77] = {
    9, 10, 11, 12, 13, 31, 38, 39, 40, 41, 53, 54, 55, 56, 63, 64, 65, 69,
    75, 76, 77, 85, 88, 89, 90, 91, 92, 93, 129, 130, 131, 138, 140, 141,
    145, 148, 150, 151, 152, 157, 169, 178, 190, 191, 192, 193, 194, 195,
    196, 197, 198, 199, 201, 205, 207, 211, 214, 215, 216, 219, 224, 225,
    226, 231, 232, 233, 237, 238, 243, 244, 245, 246, 251, 256, 257, 263,
    298
};

enum e_FurnitureData {
	e_FurnitureType,
	e_FurnitureName[32],
	e_FurnitureModel
};

new const g_aFurnitureTypes[][] = {
	{"Cuadros"},
	{"Mesas"},
	{"Sillas"},
	{"Camas"},
	{"Armarios"},
	{"Sets de Television"},
	{"Elementos de Cocina"},
	{"Baño"},
	{"Extras"},
	{"Elementos de Cocina 2"},
	{"Extras 2"}
};

new const g_aFurnitureData[][e_FurnitureData] = {
	{1, "Cuadro 1", 2289},
	{1, "Cuadro 2", 2288},
	{1, "Cuadro 3", 2287},
	{1, "Cuadro 4", 2286},
	{1, "Cuadro 5", 2285},
	{1, "Cuadro 6", 2284},
    {1, "Cuadro 7", 2283},
    {1, "Cuadro 8", 2282},
    {1, "Cuadro 9", 2281},
    {1, "Cuadro 10", 2280},
    {1, "Cuadro 11", 2279},
	{1, "Cuadro 12", 2278},
	{1, "Cuadro 13", 2277},
	{1, "Cuadro 14", 2276},
	{1, "Cuadro 15", 2275},
	{1, "Cuadro 16", 2274},
    {1, "Cuadro 17", 2273},
    {1, "Cuadro 18", 2272},
    {1, "Cuadro 19", 2271},
    {1, "Cuadro 20", 2270},
    {1, "Cuadro 21", 19617},
    {2, "Mesa 1", 1433},
	{2, "Mesa 2", 1998},
	{2, "Mesa 3", 2008},
	{2, "Mesa 4", 2180},
	{2, "Mesa 5", 2185},
    {2, "Mesa 6", 2205},
    {2, "Mesa 7", 2314},
    {2, "Mesa 8", 2635},
    {2, "Mesa 9", 2637},
    {2, "Mesa 10", 2644},
	{2, "Mesa 11", 2747},
	{2, "Mesa 12", 2764},
	{2, "Mesa 13", 2763},
	{2, "Mesa 14", 2762},
	{2, "Mesa 15", 936},
	{2, "Mesa 16", 937},
	{2, "Mesa 17", 941},
	{2, "Mesa 18", 2115},
	{2, "Mesa 19", 2116},
	{2, "Mesa 20", 2112},
	{2, "Mesa 21", 2111},
	{2, "Mesa 22", 2110},
	{2, "Mesa 23", 2109},
	{2, "Mesa 24", 2085},
	{2, "Mesa 25", 2032},
	{2, "Mesa 26", 2031},
	{2, "Mesa 27", 2030},
	{2, "Mesa 28", 2029},
    {3, "Silla 1", 1671},
    {3, "Silla 2", 1704},
    {3, "Silla 3", 1705},
    {3, "Silla 4", 1708},
    {3, "Silla 5", 1711},
    {3, "Silla 6", 1715},
    {3, "Silla 7", 1721},
    {3, "Silla 8", 1724},
    {3, "Silla 9", 1727},
    {3, "Silla 10", 1729},
    {3, "Silla 11", 1735},
    {3, "Silla 12", 1739},
    {3, "Silla 13", 1805},
    {3, "Silla 14", 1806},
    {3, "Silla 15", 1810},
    {3, "Silla 16", 1811},
    {3, "Silla 17", 2079},
    {3, "Silla 18", 2120},
    {3, "Silla 19", 2124},
    {3, "Silla 20", 2356},
    {3, "Silla 21", 1768},
    {3, "Silla 22", 1766},
    {3, "Silla 23", 1764},
    {3, "Silla 24", 1763},
    {3, "Silla 25", 1761},
    {3, "Silla 26", 1760},
    {3, "Silla 27", 1757},
    {3, "Silla 28", 1756},
    {3, "Silla 29", 1753},
    {3, "Silla 30", 1713},
    {3, "Silla 31", 1712},
    {3, "Silla 32", 1706},
    {3, "Silla 33", 1703},
    {3, "Silla 34", 1702},
    {3, "Silla 35", 1754},
    {3, "Silla 36", 1755},
    {3, "Silla 37", 1758},
    {3, "Silla 38", 1759},
    {3, "Silla 39", 1762},
    {3, "Silla 40", 1765},
    {3, "Silla 41", 1767},
    {3, "Silla 42", 1769},
    {3, "Silla 43", 11682},
    {3, "Silla 44", 11683},
    {3, "Silla 45", 11684},
    {3, "Silla 46", 11685},
    {3, "Silla 47", 19994},
    {3, "Silla 48", 19996},
    {3, "Silla 49", 19999},
	{4, "Cama 1", 1700},
	{4, "Cama 2", 1701},
	{4, "Cama 3", 1725},
	{4, "Cama 4", 1745},
	{4, "Cama 5", 1793},
	{4, "Cama 6", 1794},
	{4, "Cama 7", 1795},
	{4, "Cama 8", 1796},
	{4, "Cama 9", 1797},
	{4, "Cama 10", 1771},
	{4, "Cama 11", 1798},
	{4, "Cama 12", 1799},
    {4, "Cama 13", 1800},
    {4, "Cama 14", 1801},
    {4, "Cama 15", 1802},
    {4, "Cama 16", 1812},
    {4, "Cama 17", 2090},
    {4, "Cama 18", 2298},
    {4, "Cama 19", 2299},
    {4, "Cama 20", 1803},
    {4, "Cama 21", 2302},
    {5, "Armario 1", 1416},
	{5, "Armario 2", 1417},
	{5, "Armario 3", 1741},
	{5, "Armario 4", 1742},
	{5, "Armario 5", 1743},
	{5, "Armario 6", 2025},
	{5, "Armario 7", 2065},
	{5, "Armario 8", 2066},
	{5, "Armario 9", 2067},
	{5, "Armario 10", 2087},
    {5, "Armario 11", 2088},
    {5, "Armario 12", 2094},
    {5, "Armario 13", 2095},
    {5, "Armario 14", 2306},
    {5, "Armario 15", 2307},
	{5, "Armario 16", 2323},
	{5, "Armario 17", 2328},
	{5, "Armario 18", 2329},
	{5, "Armario 19", 2330},
	{5, "Armario 20", 2708},
	{6, "Television 1", 1518},
	{6, "Television 2", 1717},
	{6, "Television 3", 1747},
	{6, "Television 4", 1748},
	{6, "Television 5", 1749},
	{6, "Television 6", 1750},
	{6, "Television 7", 1752},
	{6, "Television 8", 1781},
	{6, "Television 9", 1791},
	{6, "Television 10", 1792},
    {6, "Television 11", 2312},
	{6, "Television 12", 2316},
	{6, "Television 13", 2317},
	{6, "Television 14", 2318},
	{6, "Television 15", 2320},
	{6, "Television 16", 2595},
	{6, "Television 17", 16377},
	{6, "Television 18", 19787},
	{6, "Television 19", 19786},
	{7, "Cocina 1", 2013},
	{7, "Cocina 2", 2017},
	{7, "Cocina 3", 2127},
	{7, "Cocina 4", 2130},
	{7, "Cocina 5", 2131},
	{7, "Cocina 6", 2132},
	{7, "Cocina 7", 2135},
	{7, "Cocina 8", 2136},
	{7, "Cocina 9", 2144},
	{7, "Cocina 10", 2147},
    {7, "Cocina 11", 2149},
    {7, "Cocina 12", 2150},
    {7, "Cocina 13", 2415},
    {7, "Cocina 14", 2417},
    {7, "Cocina 15", 2421},
    {7, "Cocina 16", 2426},
    {7, "Cocina 17", 2014},
    {7, "Cocina 18", 2015},
    {7, "Cocina 19", 2016},
    {7, "Cocina 20", 2018},
    {7, "Cocina 21", 2019},
    {7, "Cocina 22", 2022},
    {7, "Cocina 23", 2133},
    {7, "Cocina 24", 2134},
	{7, "Cocina 25", 2137},
	{7, "Cocina 26", 2138},
	{7, "Cocina 27", 2139},
	{7, "Cocina 28", 2140},
	{7, "Cocina 29", 2141},
	{7, "Cocina 30", 2142},
	{7, "Cocina 31", 2143},
	{7, "Cocina 32", 2145},
	{7, "Cocina 33", 2148},
	{7, "Cocina 34", 2151},
	{7, "Cocina 35", 2152},
	{7, "Cocina 36", 2153},
	{7, "Cocina 37", 2154},
	{7, "Cocina 38", 2155},
	{7, "Cocina 39", 2156},
	{7, "Cocina 40", 2157},
	{7, "Cocina 41", 2158},
	{7, "Cocina 42", 2159},
	{7, "Cocina 43", 2160},
	{7, "Cocina 44", 2134},
	{7, "Cocina 45", 2135},
	{7, "Cocina 46", 2338},
	{7, "Cocina 47", 2341},
	{7, "Cocina 48", 19581},
	{8, "Baño 1", 2514},
	{8, "Baño 2", 2516},
	{8, "Baño 3", 2517},
	{8, "Baño 4", 2518},
	{8, "Baño 5", 2520},
	{8, "Baño 6", 2521},
	{8, "Baño 7", 2522},
	{8, "Baño 8", 2523},
	{8, "Baño 9", 2524},
	{8, "Baño 10", 2525},
    {8, "Baño 11", 2526},
    {8, "Baño 12", 2527},
    {8, "Baño 13", 2528},
    {8, "Baño 14", 2738},
    {8, "Baño 15", 2739},
    {8, "Baño 16", 19873},
    {8, "Baño 17", 19874},
    {8, "Baño 18", 2741},
	{9, "Lavadora", 1208},
	{9, "Ventilador de Techo", 1661},
	{9, "Cabeza de Alce", 1736},
	{9, "Radiador", 1738},
	{9, "Trapo y Cubo", 1778},
	{9, "Enfriador de Agua", 1808},
	{9, "Enfriador de Agua 2", 2002},
	{9, "Caja Fueret", 1829},
	{9, "Impresora", 2186},
	{9, "Computadora", 2190},
	{9, "Cinta", 2627},
	{9, "Pesas", 2629},
	{9, "Bicicleta", 2630},
	{9, "Mat 1", 2631},
	{9, "Mat 2", 2632},
	{9, "Mat 3", 2817},
	{9, "Mat 4", 2818},
	{9, "Mat 5", 2833},
	{9, "Mat 6", 2834},
	{9, "Mat 7", 2835},
	{9, "Mat 8", 2836},
	{9, "Mat 9", 2841},
	{9, "Mat 10", 2842},
	{9, "Mat 11", 2847},
	{9, "Pila de Libros 1", 2824},
	{9, "Pila de Libros 2", 2826},
	{9, "Pila de Libros 3", 2827},
	{9, "Basketball", 2114},
	{9, "Lampara 1", 2108},
	{9, "Lampara 2", 2106},
	{9, "Lampara 3", 2069},
	{9, "Vestidor 1", 2569},
	{9, "Vestidor 2", 2570},
	{9, "Vestidor 3", 2573},
	{9, "Vestidor 4", 2574},
	{9, "Vestidor 5", 2576},
	{9, "Libro", 2894},
	{10, "Cocina 49", 19583},
	{10, "Cocina 50", 19584},
	{10, "Cocina 51", 19585},
	{10, "Cocina 52", 19586},
	{10, "Cocina 53", 19818},
	{10, "Cocina 54", 19819},
	{10, "Cocina 55", 19820},
	{10, "Cocina 56", 19822},
	{10, "Cocina 57", 19824},
	{10, "Cocina 58", 19830},
	{10, "Cocina 59", 19923},
	{10, "Cocina 60", 19924},
	{10, "Cocina 61", 19925},
	{10, "Cocina 62", 19926},
	{10, "Cocina 63", 19927},
	{10, "Cocina 64", 19928},
	{10, "Cocina 65", 19929},
	{10, "Cocina 66", 19930},
	{10, "Cocina 67", 19931},
	{10, "Cocina 68", 19932},
	{10, "Cocina 69", 19933},
	{10, "Cocina 70", 19934},
	{10, "Cocina 71", 19935},
	{10, "Cocina 72", 19936},
	{10, "Cocina 73", 19937},
	{10, "Cocina 74", 19938},
	{10, "Cocina 75", 19939},
	{10, "Cocina 76", 19940},
	{10, "Cocina 77", 11715},
	{10, "Cocina 78", 11716},
	{10, "Cocina 79", 11718},
	{10, "Cocina 80", 11719},
	{10, "Cocina 81", 11743},
	{10, "Cocina 82", 11744},
	{11, "Bateria", 19609},
	{11, "Microfono", 19610},
	{11, "Soporte de Microfono", 19611},
	{11, "Amplificador 1", 19612},
	{11, "Amplificador 2", 19613},
	{11, "Amplificador 3", 19614},
	{11, "Amplificador 4", 19615},
	{11, "Amplificador 5", 19616},
	{11, "Escoba", 19622},
	{11, "Camara", 19623},
	{11, "Valija", 19624},
	{11, "Laptop Abierta", 19893},
	{11, "Laptop Cerrada", 19894},
	{11, "Control de TV", 19920},
	{11, "Liquido encendedor", 19998},
	{11, "Bote de Basura", 11706},
	{11, "Telefono", 11705},
	{11, "Radiador", 11721},
	{11, "Bate", 19914},
	{11, "Caja", 19918},
	{11, "Guitarra 1", 19317},
	{11, "Guitarra 2", 19318},
	{11, "Guitarra 3", 19319},
	{11, "Pizarra", 19805},
	{11, "Telefono", 19807},
	{11, "Taza de cafe", 19835},
	{11, "Reloj de pared", 19825}
};

native IsValidVehicle(vehicleid);
native WP_Hash(buffer[], len, const str[]);

//Otras variables globales
new connectedPlayers = 0;

main() {
	print("Green Latin Roleplay");
}

SQL_Connect() {
	g_iHandle = mysql_connect(SQL_HOSTNAME, SQL_USERNAME, SQL_DATABASE, SQL_PASSWORD);

	if (mysql_errno(g_iHandle) != 0) {
	    printf("[SQL] Connection to \"%s\" failed! Please check the connection settings...\a", SQL_HOSTNAME);
	}
	else {
		printf("[SQL] Connection to \"%s\" passed!", SQL_HOSTNAME);
	}
}

SQL_CreateAccount(const username[], const password[])
{
	new
	    query[512],
	    buffer[129];

	WP_Hash(buffer, sizeof(buffer), password);

	format(query, sizeof(query), "INSERT INTO `accounts` (`Username`, `Password`, `RegisterDate`, `LoginDate`) VALUES('%s', '%s', '%s', '%s')", username, buffer, ReturnDate(), ReturnDate());
	mysql_tquery(g_iHandle, query);
}

SQL_CheckAccount(playerid)
{
	new
	    query[128];

    format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `Character` = '%s'", ReturnName(playerid));
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_FIND_USERNAME);
}

SQL_AttemptLogin(playerid, const password[])
{
	new
		query[300],
		buffer[129];

	WP_Hash(buffer, sizeof(buffer), password);

	format(query, sizeof(query), "SELECT `ID` FROM `accounts` WHERE `Username` = '%s' AND `Password` = '%s'", PlayerData[playerid][pUsername], buffer);
    mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_LOGIN);
}

stock SQL_IsLogged(playerid) {
	return (PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] > 0);
}
stock Float:cache_get_field_float(row, const field_name[])
{
	new
	    str[16];

	cache_get_field_content(row, field_name, str, g_iHandle, sizeof(str));
	return floatstr(str);
}
stock ViewBillboards(playerid)
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `billboards` ORDER BY `bbID` DESC");
	mysql_tquery(g_iHandle, string, "OnViewBillboards", "d", playerid);
	return 1;
}
stock ViewFactions(playerid)
{
	new string[1040];
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) {
 		format(string, sizeof(string), "%s{FFFFFF}Faccion ({FFBF00}%i{FFFFFF}) | %s\nLider %s\n", string, i, FactionData[i][factionName], FactionData[i][factionLeader]);
	}
	Dialog_Show(playerid, FactionsList, DIALOG_STYLE_MSGBOX, "Lista de Facciones", string, "Cerrar", "");
	return 1;
}
stock SQL_ReturnEscaped(const string[])
{
	new
	    entry[256];

	mysql_real_escape_string(string, entry, g_iHandle);
	return entry;
}

SQL_SaveCharacter(playerid)
{
	if (!PlayerData[playerid][pLogged] && !PlayerData[playerid][pCharacter])
		return 0;

	new
	    query[2048];

	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && !PlayerData[playerid][pDrivingTest])
	{
	    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	    PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	    GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

	    GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	    GetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);

	    if (!PlayerData[playerid][pKilled] && PlayerData[playerid][pHealth] == 0.0) {
	        PlayerData[playerid][pHealth] = 100.0;
		}
		if (PlayerData[playerid][pRangeBooth] == -1) {
			UpdateWeapons(playerid);
		}
	}
	format(query, sizeof(query), "UPDATE `characters` SET `Created` = '%d', `Gender` = '%d', `Birthdate` = '%s', `Origin` = '%s', `Skin` = '%d', `PosX` = '%.4f', `PosY` = '%.4f', `PosZ` = '%.4f', `PosA` = '%.4f', `Health` = '%.4f', `Interior` = '%d', `World` = '%d', `Hospital` = '%d', `HospitalInt` = '%d', `Money` = '%d', `BankMoney` = '%d', `OwnsBillboard` = '%d', `Savings` = '%d', `Admin` = '%d', `JailTime` = '%d', `Muted` = '%d', `Tester` = '%d', `Fakedni` = '%s'",
		PlayerData[playerid][pCreated],
		PlayerData[playerid][pGender],
		PlayerData[playerid][pBirthdate],
		PlayerData[playerid][pOrigin],
		PlayerData[playerid][pSkin],
		PlayerData[playerid][pPos][0],
		PlayerData[playerid][pPos][1],
		PlayerData[playerid][pPos][2],
		PlayerData[playerid][pPos][3],
		PlayerData[playerid][pHealth],
		PlayerData[playerid][pInterior],
		PlayerData[playerid][pWorld],
		PlayerData[playerid][pHospital],
		PlayerData[playerid][pHospitalInt],
		PlayerData[playerid][pMoney],
		PlayerData[playerid][pBankMoney],
		PlayerData[playerid][pOwnsBillboard],
		PlayerData[playerid][pSavings],
		PlayerData[playerid][pAdmin],
		PlayerData[playerid][pJailTime],
		PlayerData[playerid][pMuted],
  		PlayerData[playerid][pTester],
  		PlayerData[playerid][pFakeDNI]
	);
	for (new i = 0; i < 13; i ++) {
		format(query, sizeof(query), "%s, `Gun%d` = '%d', `Ammo%d` = '%d'", query, i + 1, PlayerData[playerid][pGuns][i], i + 1, PlayerData[playerid][pAmmo][i]);
	}
	format(query, sizeof(query), "%s, `House` = '%d', `Business` = '%d', `Entrance` = '%d', `Phone` = '%d', `Lottery` = '%d', `LotteryB` = '%d', `Hunger` = '%d', `Thirst` = '%d', `PlayingHours` = '%d', `Minutes` = '%d', `ArmorStatus` = '%.4f', `Job` = '%d', `Faction` = '%d', `FactionRank` = '%d', `Prisoned` = '%d', `Injured` = '%d', `Warrants` = '%d', `Channel` = '%d', `Bleeding` = '%d', `AdminHide` = '%d', `SpawnPoint` = '%d'",
		query,
		PlayerData[playerid][pHouse],
		PlayerData[playerid][pBusiness],
		PlayerData[playerid][pEntrance],
		PlayerData[playerid][pPhone],
		PlayerData[playerid][pLottery],
		PlayerData[playerid][pLotteryB],
		PlayerData[playerid][pHunger],
		PlayerData[playerid][pThirst],
		PlayerData[playerid][pPlayingHours],
		PlayerData[playerid][pMinutes],
		PlayerData[playerid][pArmorStatus],
		PlayerData[playerid][pJob],
		PlayerData[playerid][pFactionID],
		PlayerData[playerid][pFactionRank],
		PlayerData[playerid][pPrisoned],
		PlayerData[playerid][pInjured],
		PlayerData[playerid][pWarrants],
		PlayerData[playerid][pChannel],
		PlayerData[playerid][pBleeding],
		PlayerData[playerid][pAdminHide],
		PlayerData[playerid][pSpawnPoint]
	);
	format(query, sizeof(query), "%s, `Warnings` = '%d', `Warn1` = '%s', `Warn2` = '%s', `MaskID` = '%d', `FactionMod` = '%d', `Capacity` = '%d' WHERE `ID` = '%d'",
	    query,
	    PlayerData[playerid][pWarnings],
	    SQL_ReturnEscaped(PlayerData[playerid][pWarn1]),
	    SQL_ReturnEscaped(PlayerData[playerid][pWarn2]),
	    PlayerData[playerid][pMaskID],
	    PlayerData[playerid][pFactionMod],
	    PlayerData[playerid][pCapacity],
		PlayerData[playerid][pID]
	);
	mysql_tquery(g_iHandle, query);

	SQL_SaveAccessories(playerid);
	return 1;
}

SQL_SaveAccessories(playerid)
{
    if (!PlayerData[playerid][pLogged])
		return 0;

	new
	    query[768];

    format(query, sizeof(query), "UPDATE `characters` SET `Glasses` = '%d', `Hat` = '%d', `Bandana` = '%d', `GlassesPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
	    PlayerData[playerid][pGlasses],
	    PlayerData[playerid][pHat],
	    PlayerData[playerid][pBandana],
		AccessoryData[playerid][0][0],
        AccessoryData[playerid][0][1],
        AccessoryData[playerid][0][2],
        AccessoryData[playerid][0][3],
        AccessoryData[playerid][0][4],
        AccessoryData[playerid][0][5],
        AccessoryData[playerid][0][6],
        AccessoryData[playerid][0][7],
        AccessoryData[playerid][0][8]
	);
    format(query, sizeof(query), "%s, `HatPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f'",
        query,
		AccessoryData[playerid][1][0],
        AccessoryData[playerid][1][1],
        AccessoryData[playerid][1][2],
        AccessoryData[playerid][1][3],
        AccessoryData[playerid][1][4],
        AccessoryData[playerid][1][5],
        AccessoryData[playerid][1][6],
        AccessoryData[playerid][1][7],
        AccessoryData[playerid][1][8]
	);
	format(query, sizeof(query), "%s, `BandanaPos` = '%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f|%.4f' WHERE `ID` = '%d'",
	    query,
		AccessoryData[playerid][2][0],
        AccessoryData[playerid][2][1],
        AccessoryData[playerid][2][2],
        AccessoryData[playerid][2][3],
        AccessoryData[playerid][2][4],
        AccessoryData[playerid][2][5],
        AccessoryData[playerid][2][6],
        AccessoryData[playerid][2][7],
        AccessoryData[playerid][2][8],
        PlayerData[playerid][pID]
	);
	mysql_tquery(g_iHandle, query);
	return 1;
}

stock GetBillboardByID(sqlid)
{
	for (new i = 0; i != MAX_BILLBOARDS; i ++) if (BillBoardData[i][bbExists] && BillBoardData[i][bbID] == sqlid)
	    return i;

	return -1;
}


stock GetInitials(const string[])
{
	new
	    ret[32],
		index = 0;

	for (new i = 0, l = strlen(string); i != l; i ++)
	{
	    if (('A' <= string[i] <= 'Z') && (i == 0 || string[i - 1] == ' '))
			ret[index++] = string[i];
	}
	return ret;
}

stock GetDistance(Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2)
{
	return floatround(floatsqroot(((x1 - x2) * (x1 - x2)) + ((y1 - y2) * (y1 - y2)) + ((z1 - z2) * (z1 - z2))));
}

stock Float:DistanceCameraTargetToLocation(Float:fCameraX, Float:fCameraY, Float:fCameraZ, Float:fObjectX, Float:fObjectY, Float:fObjectZ, Float:fVectorX, Float:fVectorY, Float:fVectorZ)
{
	new
		Float:fX,
		Float:fY,
		Float:fZ,
		Float:fDistance;

	fDistance = GetDistance(fCameraX, fCameraY, fCameraZ, fObjectX, fObjectY, fObjectZ);

	fX = fVectorX * fDistance + fCameraX;
	fY = fVectorY * fDistance + fCameraY;
	fZ = fVectorZ * fDistance + fCameraZ;

	return floatsqroot((fX - fObjectX) * (fX - fObjectX) + (fY - fObjectY) * (fY - fObjectY) + (fZ - fObjectZ) * (fZ - fObjectZ));
}
forward OnJailAccount(index);
public OnJailAccount(index)
{
	new
		string[128],
		name[24],
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);
	GetPVarString(index, "OnJailAccount", name, 24);
	//GetPVarString(index, "OnJailAccountReason", reason, 64);

	if(cache_affected_rows(g_iHandle)) {
		format(string, sizeof(string), "Mandaste a jail la cuenta de %s.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);

	}
	else {
		format(string, sizeof(string), "Hubo un problema al mandar a jail a la cuenta de %s.", name);
		SendClientMessageEx(index, COLOR_WHITE, string);
	}

	DeletePVar(index, "OnJailAccount");

	return 1;
}
forward OnBillboardCreated(bizid);
public OnBillboardCreated(bizid)
{
	if (bizid == -1 || !BillBoardData[bizid][bbExists])
	    return 0;

	BillBoardData[bizid][bbID] = cache_insert_id(g_iHandle);
	Billboard_Save(bizid);

	return 1;
}
forward Billboard_Load();
public Billboard_Load()
{
    new
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BILLBOARDS)
	{
	    BillBoardData[i][bbExists] = true;
	   	BillBoardData[i][bbID] = cache_get_field_int(i, "bbID");

		cache_get_field_content(i, "bbName", BillBoardData[i][bbName], g_iHandle, 32);
        cache_get_field_content(i, "bbMessage", BillBoardData[i][bbMessage], g_iHandle, 230);

		BillBoardData[i][bbOwner] = cache_get_field_int(i, "bbOwner");
		BillBoardData[i][bbPrice] = cache_get_field_int(i, "bbPrice");
		BillBoardData[i][bbRange] = cache_get_field_int(i, "bbRange");
		BillBoardData[i][bbPos][0] = cache_get_field_float(i, "bbPosX");
		BillBoardData[i][bbPos][1] = cache_get_field_float(i, "bbPosY");
		BillBoardData[i][bbPos][2] = cache_get_field_float(i, "bbPosZ");
		Billboard_Refresh(i);
	}
	return 1;
}

forward OnViewBillboards(extraid, name[]);
public OnViewBillboards(extraid, name[])
{
	new
	    string[1024],
	    desc[128],
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "No se han encontrado carteles publicitarios!");

	for (new i = 0; i < rows; i ++) {
	    cache_get_field_content(i, "bbName", desc, g_iHandle, sizeof(desc));

	    //format(string, sizeof(string), "%s{FFFFFF}%s ({FFBF00}%i{FFFFFF})\n", string, desc, i);
	    format(string, sizeof(string), "%s{FFFFFF}Cartel ({FFBF00}%i{FFFFFF}) | %s | $%d\n", string, i, desc, BillBoardData[i][bbPrice]);
	}
	format(desc, sizeof(desc), "Agencia de Publicidad de Los Santos", name);
	Dialog_Show(extraid, Billboards, DIALOG_STYLE_LIST, desc, string, "Cerrar", "");
	return 1;
}
forward RobarTienda(playerid);
public RobarTienda(playerid)
{
    new texto[64]; //Creamos un new con la cantidad de caracteres que tendrá nuestro mensaje
    new rand_money = (random(4000)+1000); //Esto le dará una cantidad de dinero random que estará entre 1000 y 4000
    GivePlayerMoney(playerid,rand_money); //Le damos la cantidad de dinero random
    format(texto,sizeof(texto),"Robo finalizado exitosamente, lograste robar $%i",rand_money); //Le enviamos un mensaje al que esta robando diciéndole que gano X cantidad de dinero
    SendClientMessage(playerid, -1,texto); //Envía el mensaje de arriba
    return 1;
}
forward StopChatting(playerid);
public StopChatting(playerid)
{
    ApplyAnimation(playerid, "CARRY", "crry_prtial", 4.0, 0, 0, 0, 0, 0);
}

forward DestroyWater(objectid);
public DestroyWater(objectid)
{
	if (IsValidDynamicObject(objectid))
	    DestroyDynamicObject(objectid);

	return 0;
}

forward RandomFire();
public RandomFire()
{
	for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	{
	    g_aFireExtinguished[i] = 0;

	    if (IsValidDynamicObject(g_aFireObjects[i]))
	        DestroyDynamicObject(g_aFireObjects[i]);
	}
	switch (random(5))
	{
	    case 0:
	    {
			g_aFireObjects[0] = CreateDynamicObject(18691, 1930.4942, -1784.1799, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1930.5037, -1782.1473, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1930.5136, -1779.6364, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1930.5238, -1777.1058, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1930.5346, -1774.5141, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1930.5428, -1772.4306, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1930.5507, -1770.4219, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1930.5588, -1768.3559, 10.9368, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1929.1459, -1767.9173, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1928.8776, -1769.5853, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1928.8422, -1772.0158, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1928.8189, -1773.6047, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1928.8001, -1774.8883, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1928.7772, -1776.4462, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1928.7534, -1778.0637, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1928.7347, -1779.3225, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1928.7145, -1780.7152, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1928.6938, -1782.1208, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1928.6655, -1784.0491, 14.3093, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1935.3200, -1783.8045, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1935.2098, -1781.6428, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1935.0748, -1778.9934, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1934.9506, -1776.5572, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1934.8343, -1774.2791, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1934.7189, -1772.0156, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1934.6302, -1770.2773, 10.7728, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1934.5228, -1768.1666, 10.7728, 0.0, 0.0, 0.0);
		}
		case 1:
		{
			g_aFireObjects[0] = CreateDynamicObject(18691, 1238.8894, -1563.0980, 10.9999, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1241.6730, -1562.6481, 11.0068, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1243.2508, -1561.0845, 10.9444, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1245.5793, -1560.6265, 10.9450, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1247.4980, -1560.4841, 10.9455, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1249.9790, -1560.3701, 10.9539, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1249.5944, -1562.7432, 11.0053, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1247.4562, -1562.7996, 11.0045, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1245.7386, -1563.1572, 10.9990, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1243.7620, -1563.7636, 10.9896, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1242.2908, -1563.0959, 10.9999, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1242.3502, -1564.7818, 10.9740, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1244.8713, -1564.6507, 10.9760, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1246.8665, -1564.5694, 10.9772, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1249.1672, -1563.8638, 10.9881, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1250.8759, -1563.9959, 10.9861, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1252.2437, -1562.3538, 11.0113, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1252.4475, -1561.7529, 13.6369, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1250.9642, -1561.7822, 13.6519, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1248.5258, -1561.3541, 13.8278, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1245.9611, -1561.1191, 13.5507, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1242.7899, -1561.6608, 13.7519, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1250.3793, -1561.5445, 10.9462, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1252.8653, -1561.6358, 10.9468, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1252.9653, -1563.4675, 10.9942, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1252.5823, -1563.9747, 10.9864, 0.0, 0.0, 0.0);
		}
		case 2:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 1786.4844, -1164.2786, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1787.8876, -1164.3374, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1790.0416, -1164.8181, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1791.7430, -1165.1977, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1793.3637, -1165.5594, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1794.8229, -1165.8847, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1796.5830, -1166.2770, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1798.3182, -1166.6638, 21.2181, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1798.2283, -1166.9202, 22.1465, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1797.1246, -1166.2222, 22.5881, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1796.1480, -1165.5697, 22.5401, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1795.4377, -1165.1295, 22.1495, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1794.7139, -1164.6824, 21.4488, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1789.6914, -1164.0892, 22.3047, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1788.5687, -1163.1995, 22.3698, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1788.0295, -1162.8452, 21.9937, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1786.2319, -1163.1064, 21.8608, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1785.3194, -1163.1263, 21.9294, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1791.5643, -1163.1118, 21.3996, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1791.8800, -1164.3983, 22.2759, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1791.8519, -1165.1618, 22.5094, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1788.8287, -1163.4260, 22.0600, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1790.2512, -1164.0129, 21.2942, 0.0, 0.0, 0.0);
		}
		case 3:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 1315.0238, -1368.2282, 10.9438, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 1314.0100, -1368.2265, 10.9438, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 1312.6562, -1368.2235, 10.9399, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 1311.8308, -1367.5294, 10.9296, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 1310.9281, -1367.4926, 10.9273, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 1309.7708, -1367.4902, 10.9252, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 1308.6425, -1367.4877, 10.9232, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 1307.3302, -1368.0213, 10.9332, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 1306.0062, -1368.3232, 10.9355, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 1304.3460, -1368.3197, 10.9354, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 1304.4842, -1369.0036, 10.9451, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 1305.8629, -1369.4384, 10.9513, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1307.2315, -1369.3804, 10.9512, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1309.0936, -1369.7593, 10.9550, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1310.8515, -1369.5230, 10.9544, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1312.0820, -1369.2214, 10.9522, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1309.4581, -1367.9462, 13.2241, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1307.8933, -1367.5498, 13.5101, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1307.3311, -1369.9162, 13.0364, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1306.5539, -1370.5288, 12.7001, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1310.9852, -1369.3835, 12.2585, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1310.3361, -1370.6992, 12.9585, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1313.2864, -1370.2733, 10.9708, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1313.3056, -1371.2634, 10.9838, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1311.6168, -1370.8870, 10.9735, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1308.9244, -1371.1181, 10.9726, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1306.5335, -1370.7678, 10.9712, 0.0, 0.0, 0.0);
		}
		case 4:
		{
		    g_aFireObjects[0] = CreateDynamicObject(18691, 997.7821, -910.8650, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[1] = CreateDynamicObject(18691, 998.0914, -911.5863, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[2] = CreateDynamicObject(18691, 998.2116, -913.0366, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[3] = CreateDynamicObject(18691, 998.3492, -914.6963, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[4] = CreateDynamicObject(18691, 998.4992, -916.5079, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[5] = CreateDynamicObject(18691, 998.6508, -918.3324, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[6] = CreateDynamicObject(18691, 998.7961, -920.0861, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[7] = CreateDynamicObject(18691, 998.9600, -922.0629, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[8] = CreateDynamicObject(18691, 999.1196, -923.9867, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[9] = CreateDynamicObject(18691, 999.2616, -925.7003, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[10] = CreateDynamicObject(18691, 999.4187, -927.5945, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[11] = CreateDynamicObject(18691, 999.5601, -929.3013, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[12] = CreateDynamicObject(18691, 1000.5933, -931.6047, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[13] = CreateDynamicObject(18691, 1002.6428, -931.3463, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[14] = CreateDynamicObject(18691, 1004.6893, -931.3514, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[15] = CreateDynamicObject(18691, 1007.2104, -931.1424, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[16] = CreateDynamicObject(18691, 1009.8325, -930.9251, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[17] = CreateDynamicObject(18691, 1012.1341, -930.7343, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[18] = CreateDynamicObject(18691, 1014.4911, -930.5388, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[19] = CreateDynamicObject(18691, 1014.4734, -932.3157, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[20] = CreateDynamicObject(18691, 1013.0949, -932.3657, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[21] = CreateDynamicObject(18691, 1011.4746, -932.4245, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[22] = CreateDynamicObject(18691, 1009.7496, -932.4875, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[23] = CreateDynamicObject(18691, 1008.1029, -932.5473, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[24] = CreateDynamicObject(18691, 1006.0109, -932.6234, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[25] = CreateDynamicObject(18691, 1003.9039, -932.7000, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[26] = CreateDynamicObject(18691, 1002.0654, -932.7668, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[27] = CreateDynamicObject(18691, 1002.6585, -933.5130, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[28] = CreateDynamicObject(18691, 1004.5731, -933.4433, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[29] = CreateDynamicObject(18691, 1006.4688, -933.3743, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[30] = CreateDynamicObject(18691, 1008.4611, -933.3016, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[31] = CreateDynamicObject(18691, 1010.4176, -933.2304, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[32] = CreateDynamicObject(18691, 1012.0813, -933.1698, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[33] = CreateDynamicObject(18691, 1013.1374, -933.1314, 39.5696, 0.0, 0.0, 0.0);
			g_aFireObjects[34] = CreateDynamicObject(18691, 1015.3114, -933.0523, 39.5696, 0.0, 0.0, 0.0);
		}
	}
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(g_aFireObjects[0], fX, fY, fZ);

	foreach (new i : Player)
	{
	    if (GetFactionType(i) == FACTION_MEDIC)
	    {
			Waypoint_Set(i, "Incendio", fX, fY, fZ);
	    }
	}
	//CreateExplosion(fX, fY, fZ, 12, 5.0);
	SendFactionMessageEx(FACTION_MEDIC, COLOR_RADIO, "RADIO: Un incendio fue denunciado en %s (marcado en el mapa).", GetLocation(fX, fY, fZ));
	return 1;
}

forward BreakCuffs(playerid, userid);
public BreakCuffs(playerid, userid)
{
	if (PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid) || !Inventory_HasItem(playerid, "Palanca") || !IsPlayerNearPlayer(playerid, userid, 6.0) || !PlayerData[userid][pCuffed])
	    return 1;

	if (random(2))
	{
	    ShowPlayerFooter(playerid, "Has ~r~fracasado~w~ al intentar abrir las esposas.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s intento abrir las esposas y fracasó", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pCuffed] = 0;
	    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

	    ShowPlayerFooter(playerid, "Has ~g~abierto~w~ las esposas.");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abrio las esposas de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

forward SpawnTimer(playerid);
public SpawnTimer(playerid)
{
	if (SQL_IsLogged(playerid))
	{
	    TogglePlayerControllable(playerid, 1);
	}
	return 1;
}

forward RemoveAttachedObject(playerid, slot);
public RemoveAttachedObject(playerid, slot)
{
	if (IsPlayerConnected(playerid) && IsPlayerAttachedObjectSlotUsed(playerid, slot))
	{
	    RemovePlayerAttachedObject(playerid, slot);
	}
	return 1;
}

forward MineTime(playerid);
public MineTime(playerid)
{
	PlayerData[playerid][pMineTime] = 0;
}

forward DestroyBlood(objectid);
public DestroyBlood(objectid)
{
	DestroyDynamicObject(objectid);
}

forward ExpireMarker(playerid);
public ExpireMarker(playerid)
{
	if (!PlayerData[playerid][pMarker])
	    return 0;

    if (GetFactionType(playerid) == FACTION_GANG || (GetFactionType(playerid) != FACTION_GANG && PlayerData[playerid][pOnDuty]))
		SetFactionColor(playerid);

	else SetPlayerColor(playerid, DEFAULT_COLOR);
	return 1;
}

forward HidePlayerBox(playerid, PlayerText:boxid);
public HidePlayerBox(playerid, PlayerText:boxid)
{
	if (!IsPlayerConnected(playerid) || !SQL_IsLogged(playerid))
	    return 0;

	PlayerTextDrawHide(playerid, boxid);
	PlayerTextDrawDestroy(playerid, boxid);

	return 1;
}

forward Advertise(playerid);
public Advertise(playerid)
{
	if (!SQL_IsLogged(playerid) || !strlen(PlayerData[playerid][pAdvertise]))
	    return 0;

	new
	    text[128];

	strunpack(text, PlayerData[playerid][pAdvertise]);

	foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
	    SendClientMessageEx(i, 0x00AA00FF, "Diario: %s (contacto: %d)", text, PlayerData[playerid][pPhone]);
	}
	PlayerData[playerid][pAdvertise][0] = 0;
	return 1;
}

forward KickHouse(playerid, id);
public KickHouse(playerid, id)
{
	if (GetFactionType(playerid) != FACTION_POLICE || House_Nearest(playerid) != id)
	    return 0;

	switch (random(6))
	{
	    case 0..2:
	    {
	        ShowPlayerFooter(playerid, "Has ~r~fracasado~w~ al abrir la puerta de una patada.");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s fracasó al intentar abrir la puerta de una patada.", ReturnName(playerid, 0));
		}
		default:
		{
		    HouseData[id][houseLocked] = 0;
		    House_Save(id);

		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abrió la puerta de una patada.", ReturnName(playerid, 0));
		    ShowPlayerFooter(playerid, "Pulsa ~y~'F'~w~ para entrar a la casa.");
		}
	}
	return 1;
}

forward KickBusiness(playerid, id);
public KickBusiness(playerid, id)
{
	if (GetFactionType(playerid) != FACTION_POLICE || Business_Nearest(playerid) != id)
	    return 0;

	switch (random(6))
	{
	    case 0..2:
	    {
	        ShowPlayerFooter(playerid, "Has ~r~fracasado~w~ al abrir la puerta de una patada.");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s fracasó al intentar abrir la puerta de una patada.", ReturnName(playerid, 0));
		}
		default:
		{
		    BusinessData[id][bizLocked] = 0;
		    Business_Save(id);

		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abrió la puerta de una patada.", ReturnName(playerid, 0));
		    ShowPlayerFooter(playerid, "Pulsa ~y~'F'~w~ para entrar al negocio.");
		}
	}
	return 1;
}

forward UpdateBooth(playerid, id);
public UpdateBooth(playerid, id)
{
	if (PlayerData[playerid][pRangeBooth] != id || !g_BoothUsed[id])
	    return 0;

	if (PlayerData[playerid][pTargets] == 10)
	{
	    PlayerData[playerid][pTargets] = 0;

	    switch (PlayerData[playerid][pTargetLevel]++)
	    {
	        case 0:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 25, 15000);
	            SendServerMessage(playerid, "Has subido al siguiente nivel (1/5).");
	        }
	        case 1:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 28, 15000);
	            SendServerMessage(playerid, "Has subido al siguiente nivel (2/5).");
	        }
	        case 2:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 29, 15000);
	            SendServerMessage(playerid, "Has subido al siguiente nivel (3/5).");
	        }
	        case 3:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 30, 15000);
	            SendServerMessage(playerid, "Has subido al siguiente nivel (4/5).");
	        }
	        case 4:
	        {
	            ResetPlayerWeapons(playerid);

				GivePlayerWeapon(playerid, 27, 15000);
	            SendServerMessage(playerid, "Has subido al siguiente nivel (5/5).");
	        }
	        case 5:
	        {
	            Booth_Leave(playerid);
	            SendServerMessage(playerid, "Has completado el desafio de la escopeta!");
	        }
	    }
	}
	Booth_Refresh(playerid);
	return 1;
}

stock PlayerHasTazer(playerid)
{
	return (GetPlayerWeapon(playerid) == 23 && PlayerData[playerid][pTazer]);
}

stock PlayerHasBeanBag(playerid)
{
	return (GetPlayerWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag]);
}

stock SetPlayerToFacePlayer(playerid, targetid)
{
	new
	    Float:x[2],
	    Float:y[2],
	    Float:z[2],
	    Float:angle;

	GetPlayerPos(targetid, x[0], y[0], z[0]);
	GetPlayerPos(playerid, x[1], y[1], z[1]);

	angle = (180.0 - atan2(x[1] - x[0], y[1] - y[0]));
	SetPlayerFacingAngle(playerid, angle + (5.0 * -1));
}

stock DisableWaypoint(playerid)
{
    if (PlayerData[playerid][pWaypoint])
	{
 		PlayerData[playerid][pWaypoint] = 0;

 		DisablePlayerCheckpoint(playerid);
  		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
	}
	return 1;
}

stock TerminateConnection(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
		Boombox_Destroy(playerid);

	if (PlayerData[playerid][pRangeBooth] != -1)
		Booth_Leave(playerid);

	if (PlayerData[playerid][pFirstAid])
	    KillTimer(PlayerData[playerid][pAidTimer]);

	if (PlayerData[playerid][pDrivingTest])
	    DestroyVehicle(PlayerData[playerid][pTestCar]);

	if (PlayerData[playerid][pShowFooter])
	    KillTimer(PlayerData[playerid][pFooterTimer]);

	if (PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	    LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);

	if (PlayerData[playerid][pDragged])
	    KillTimer(PlayerData[playerid][pDragTimer]);

	if (PlayerData[playerid][pFreeze])
	    KillTimer(PlayerData[playerid][pFreezeTimer]);

	foreach (new i : Player)
	{
	    if (PlayerData[i][pLastShot] == playerid) {
	        PlayerData[i][pLastShot] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pHouseSeller] == playerid) {
		    PlayerData[i][pHouseSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pHouseOffered] = -1;
		}
		if (PlayerData[i][pBusinessSeller] == playerid) {
		    PlayerData[i][pBusinessSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pBusinessOffered] = -1;
		}
		if (PlayerData[i][pCarSeller] == playerid) {
		    PlayerData[i][pCarSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pCarOffered] = -1;
		}
		if (PlayerData[i][pShakeOffer] == playerid) {
		    PlayerData[i][pShakeOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pShakeType] = 0;
		}
		if (PlayerData[i][pFriskOffer] == playerid) {
		    PlayerData[i][pFriskOffer] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pDNIOffer] == playerid) {
		    PlayerData[i][pDNIOffer] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pFoodSeller] == playerid) {
		    PlayerData[i][pFoodSeller] = INVALID_PLAYER_ID;
		    PlayerData[i][pFoodType] = 0;
		}
		if (PlayerData[i][pFactionOffer] == playerid) {
		    PlayerData[i][pFactionOffer] = INVALID_PLAYER_ID;
		    PlayerData[i][pFactionOffered] = -1;
		}
		if (PlayerData[i][pDraggedBy] == playerid) {
		    KillTimer(PlayerData[i][pDragTimer]);

		    PlayerData[i][pDragged] = 0;
            PlayerData[i][pDraggedBy] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pMDCPlayer] == playerid) {
		    PlayerData[i][pMDCPlayer] = INVALID_PLAYER_ID;
		    PlayerData[i][pTrackTime] = 0;
		}
		if (PlayerData[i][pNewsGuest] == playerid) {
		    PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pGiveItem] == playerid) {
		    PlayerData[i][pGiveItem] = INVALID_PLAYER_ID;
		}
		if (PlayerData[i][pTakeItems] == playerid) {
		    PlayerData[i][pTakeItems] = INVALID_PLAYER_ID;
		}
	}
	SQL_SaveCharacter(playerid);
	ResetNameTag(playerid);
	Report_Clear(playerid);
	ResetStatistics(playerid);
	return 1;
}

stock IsTaskCompleted(playerid)
{
	if ((PlayerData[playerid][pTask] > 0) && (PlayerData[playerid][pBankTask] > 0 && PlayerData[playerid][pStoreTask] > 0 && PlayerData[playerid][pTestTask] > 0))
	    return 1;

	return 0;
}

stock IsTaskActive(playerid)
{
	if ((PlayerData[playerid][pTask] > 0) && (!PlayerData[playerid][pBankTask] || !PlayerData[playerid][pStoreTask] || !PlayerData[playerid][pTestTask]))
	    return 1;

	return 0;
}

stock HoldWeapon(playerid, weaponid)
{
	RemovePlayerAttachedObject(playerid, 4);

	PlayerData[playerid][pHoldWeapon] = weaponid;
    PlayerData[playerid][pUsedMagazine] = 0;

	if (weaponid != 0)
	{
		SetPlayerAttachedObject(playerid, 4, GetWeaponModel(weaponid), 6);
  		SetPlayerArmedWeapon(playerid, 0);
	}
	return 1;
}

stock GetWeapon(playerid)
{
	new weaponid = GetPlayerWeapon(playerid);

	if (1 <= weaponid <= 46 && PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] == weaponid)
 		return weaponid;

	return 0;
}

stock IsBleedableWeapon(weaponid)
{
	switch (weaponid) {
	    case 4, 8, 9, 22..38: return 1;
	}
	return 0;
}

stock CreateBlood(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetTimerEx("DestroyBlood", 1500, false, "d", CreateDynamicObject(18668, x, y, z - 1.5, 0.0, 0.0, 0.0));

	return 1;
}

stock PlayerText:ShowPlayerBox(playerid, color)
{
	new
	    PlayerText:textid;

    textid = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawFont(playerid, textid, 1);
	PlayerTextDrawLetterSize(playerid, textid, 0.500000, 50.000000);
	PlayerTextDrawColor(playerid, textid, -1);
	PlayerTextDrawUseBox(playerid, textid, 1);
	PlayerTextDrawBoxColor(playerid, textid, color);
	PlayerTextDrawTextSize(playerid, textid, 640.000000, 30.000000);
	PlayerTextDrawShow(playerid, textid);

	return textid;
}

stock Graffiti_Refresh(id)
{
	if (id != -1 && GraffitiData[id][graffitiExists])
	{
		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		//Comentar para quitar graffitis
        //GraffitiData[id][graffitiIcon] = CreateDynamicMapIcon(GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 23, 0, -1, -1, -1, 100.0, MAPICON_GLOBAL);
		GraffitiData[id][graffitiObject] = CreateDynamicObject(19482, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2], 0.0, 0.0, GraffitiData[id][graffitiPos][3]);

		SetDynamicObjectMaterial(GraffitiData[id][graffitiObject], 0, 0, "none", "none", 0);
		SetDynamicObjectMaterialText(GraffitiData[id][graffitiObject], 0, GraffitiData[id][graffitiText], OBJECT_MATERIAL_SIZE_256x128, "Arial", 24, 1, GraffitiData[id][graffitiColor], 0, 0);
	}
	return 1;
}

stock IsSprayingInProgress(id)
{
	foreach (new i : Player)
	{
	    if (PlayerData[i][pGraffiti] == id && IsPlayerInRangeOfPoint(i, 5.0, GraffitiData[id][graffitiPos][0], GraffitiData[id][graffitiPos][1], GraffitiData[id][graffitiPos][2]))
	        return 1;
	}
	return 0;
}

stock Graffiti_Nearest(playerid)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++) if (GraffitiData[i][graffitiExists] && IsPlayerInRangeOfPoint(playerid, 5.0, GraffitiData[i][graffitiPos][0], GraffitiData[i][graffitiPos][1], GraffitiData[i][graffitiPos][2]))
	    return i;

	return -1;
}

stock Graffiti_Delete(id)
{
    if (id != -1 && GraffitiData[id][graffitiExists])
	{
	    new
	        string[64];

		if (IsValidDynamicMapIcon(GraffitiData[id][graffitiIcon]))
		    DestroyDynamicMapIcon(GraffitiData[id][graffitiIcon]);

		if (IsValidDynamicObject(GraffitiData[id][graffitiObject]))
			DestroyDynamicObject(GraffitiData[id][graffitiObject]);

		format(string, sizeof(string), "DELETE FROM `graffiti` WHERE `graffitiID` = '%d'", GraffitiData[id][graffitiID]);
		mysql_tquery(g_iHandle, string);

		GraffitiData[id][graffitiExists] = false;
		GraffitiData[id][graffitiText][0] = 0;
		GraffitiData[id][graffitiID] = 0;
	}
	return 1;
}

stock Graffiti_Save(id)
{
	new
	    query[384];

	format(query, sizeof(query), "UPDATE `graffiti` SET `graffitiX` = '%.4f', `graffitiY` = '%.4f', `graffitiZ` = '%.4f', `graffitiAngle` = '%.4f', `graffitiColor` = '%d', `graffitiText` = '%s' WHERE `graffitiID` = '%d'",
        GraffitiData[id][graffitiPos][0],
        GraffitiData[id][graffitiPos][1],
        GraffitiData[id][graffitiPos][2],
        GraffitiData[id][graffitiPos][3],
		GraffitiData[id][graffitiColor],
		SQL_ReturnEscaped(GraffitiData[id][graffitiText]),
		GraffitiData[id][graffitiID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Graffiti_Create(Float:x, Float:y, Float:z, Float:angle)
{
	for (new i = 0; i < MAX_GRAFFITI_POINTS; i ++)
	{
	    if (!GraffitiData[i][graffitiExists])
	    {
			GraffitiData[i][graffitiExists] = 1;
			GraffitiData[i][graffitiPos][0] = x;
			GraffitiData[i][graffitiPos][1] = y;
			GraffitiData[i][graffitiPos][2] = z;
			GraffitiData[i][graffitiPos][3] = angle - 90.0;
			GraffitiData[i][graffitiColor] = 0xFFFFFFFF;

			format(GraffitiData[i][graffitiText], 32, "Graffiti");

			Graffiti_Refresh(i);
			mysql_tquery(g_iHandle, "INSERT INTO `graffiti` (`graffitiColor`) VALUES(0)", "OnGraffitiCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock Speed_Refresh(speedid)
{
	if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "[Camara %d]\n{FFFFFF}Limite de Velocidad: %.0f k/h", speedid, SpeedData[speedid][speedLimit]);

		SpeedData[speedid][speedText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2] + 2.5, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
        SpeedData[speedid][speedObject] = CreateDynamicObject(18880, SpeedData[speedid][speedPos][0], SpeedData[speedid][speedPos][1], SpeedData[speedid][speedPos][2], 0.0, 0.0, SpeedData[speedid][speedPos][3]);
	}
	return 1;
}

stock Speed_Save(speedid)
{
	new
	    query[255];

	format(query, sizeof(query), "UPDATE `speedcameras` SET `speedRange` = '%.4f', `speedLimit` = '%.4f', `speedX` = '%.4f', `speedY` = '%.4f', `speedZ` = '%.4f', `speedAngle` = '%.4f' WHERE `speedID` = '%d'",
	    SpeedData[speedid][speedRange],
	    SpeedData[speedid][speedLimit],
	    SpeedData[speedid][speedPos][0],
	    SpeedData[speedid][speedPos][1],
	    SpeedData[speedid][speedPos][2],
	    SpeedData[speedid][speedPos][3],
	    SpeedData[speedid][speedID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Speed_Nearest(playerid)
{
	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (SpeedData[i][speedExists] && IsPlayerInRangeOfPoint(playerid, SpeedData[i][speedRange], SpeedData[i][speedPos][0], SpeedData[i][speedPos][1], SpeedData[i][speedPos][2]))
	    return i;

	return -1;
}

stock Speed_Delete(speedid)
{
    if (speedid != -1 && SpeedData[speedid][speedExists])
	{
	    new
	        string[64];

		if (IsValidDynamicObject(SpeedData[speedid][speedObject]))
		    DestroyDynamicObject(SpeedData[speedid][speedObject]);

		if (IsValidDynamic3DTextLabel(SpeedData[speedid][speedText3D]))
		    DestroyDynamic3DTextLabel(SpeedData[speedid][speedText3D]);

		format(string, sizeof(string), "DELETE FROM `speedcameras` WHERE `speedID` = '%d'", SpeedData[speedid][speedID]);
		mysql_tquery(g_iHandle, string);

		SpeedData[speedid][speedExists] = false;
		SpeedData[speedid][speedLimit] = 0.0;
		SpeedData[speedid][speedRange] = 0.0;
		SpeedData[speedid][speedID] = 0;
	}
	return 1;
}

stock Speed_Create(playerid, Float:limit, Float:range)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	for (new i = 0; i < MAX_SPEED_CAMERAS; i ++) if (!SpeedData[i][speedExists])
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedRange] = range;
        SpeedData[i][speedLimit] = limit;

		SpeedData[i][speedPos][0] = x + (1.5 * floatsin(-angle, degrees));
	    SpeedData[i][speedPos][1] = y + (1.5 * floatcos(-angle, degrees));
	    SpeedData[i][speedPos][2] = z - 1.2;
	    SpeedData[i][speedPos][3] = angle;

	    Speed_Refresh(i);
	    mysql_tquery(g_iHandle, "INSERT INTO `speedcameras` (`speedRange`) VALUES(0.0)", "OnSpeedCreated", "d", i);
	    return i;
	}
	return -1;
}

stock IsPlayerOnPhone(playerid)
{
	if (PlayerData[playerid][pEmergency] > 0 || PlayerData[playerid][pPlaceAd] > 0 || PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	    return 1;

	return 0;
}

stock FlipVehicle(vehicleid)
{
	new
	    Float:fAngle;

	GetVehicleZAngle(vehicleid, fAngle);

	SetVehicleZAngle(vehicleid, fAngle);
	SetVehicleVelocity(vehicleid, 0.0, 0.0, 0.0);
}

stock StopVehicleRadio(vehicleid)
{
	if ((IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid)) && CoreVehicles[vehicleid][vehRadio])
	{
	    CoreVehicles[vehicleid][vehRadio] = 0;

	    foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, vehicleid))
			{
			    StopAudioStreamForPlayer(i);
			    PlayerData[i][pPlayRadio] = 0;
			}
	    }
	}
	return 1;
}

stock SetVehicleRadio(vehicleid, url[])
{
	if (IsValidVehicle(vehicleid) && IsEngineVehicle(vehicleid))
	{
        CoreVehicles[vehicleid][vehRadio] = 1;
        strpack(CoreVehicles[vehicleid][vehURL], url, 128 char);

        foreach (new i : Player)
		{
			if (IsPlayerInVehicle(i, vehicleid))
			{
			    PlayerData[i][pPlayRadio] = 1;

			    StopAudioStreamForPlayer(i);
				PlayAudioStreamForPlayer(i, url);
            }
        }
	}
	return 1;
}

stock ResetVehicle(vehicleid)
{
	if (1 <= vehicleid <= MAX_VEHICLES)
	{
	    if (CoreVehicles[vehicleid][vehSirenOn] && IsValidDynamicObject(CoreVehicles[vehicleid][vehSirenObject]))
	        DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);

	    CoreVehicles[vehicleid][vehFuel] = 100;
		CoreVehicles[vehicleid][vehWindowsDown] = false;
		CoreVehicles[vehicleid][vehTemporary] = 0;
  		CoreVehicles[vehicleid][vehLoads] = 0;
		CoreVehicles[vehicleid][vehLoadType] = 0;
		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
		CoreVehicles[vehicleid][vehTrash] = 0;
		CoreVehicles[vehicleid][vehRepairing] = 0;
		CoreVehicles[vehicleid][vehSirenOn] = 0;
		CoreVehicles[vehicleid][vehRadio] = 0;
	}
	return 1;
}

stock RespawnVehicle(vehicleid)
{
	new id = Car_GetID(vehicleid);

	if (id != -1)
	    Car_Spawn(id);

	else SetVehicleToRespawn(vehicleid);

	ResetVehicle(vehicleid);
	return 1;
}

stock GetWeaponCount(playerid)
{
	new
		count,
	    weapon,
	    ammo;

	for (new i = 0; i < 12; i ++)
	{
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

	    if (weapon > 0 && ammo > 0) count++;
	}
	return count;
}

stock Boombox_Place(playerid)
{
	new
	    Float:angle;

	GetPlayerFacingAngle(playerid, angle);

	strpack(BoomboxData[playerid][boomboxURL], "", 128 char);
	GetPlayerPos(playerid, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]);

	BoomboxData[playerid][boomboxPlaced] = true;
	BoomboxData[playerid][boomboxInterior] = GetPlayerInterior(playerid);
	BoomboxData[playerid][boomboxWorld] = GetPlayerVirtualWorld(playerid);

    BoomboxData[playerid][boomboxObject] = CreateDynamicObject(2226, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.9, 0.0, 0.0, angle, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);
    BoomboxData[playerid][boomboxText3D] = CreateDynamic3DTextLabel("[Boombox]\n{FFFFFF}/boombox para usar este boombox.", COLOR_DARKBLUE, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2] - 0.7, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BoomboxData[playerid][boomboxWorld], BoomboxData[playerid][boomboxInterior]);

	return 1;
}

stock Boombox_Nearest(playerid)
{
	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && GetPlayerInterior(playerid) == BoomboxData[i][boomboxInterior] && GetPlayerVirtualWorld(playerid) == BoomboxData[i][boomboxWorld] && IsPlayerInRangeOfPoint(playerid, 30.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
     	return i;
	}
	return INVALID_PLAYER_ID;
}

stock Boombox_SetURL(playerid, url[])
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
	    strpack(BoomboxData[playerid][boomboxURL], url, 128 char);

	    foreach (new i : Player) if (PlayerData[i][pBoombox] == playerid) {
	        StopAudioStreamForPlayer(i);
	        PlayAudioStreamForPlayer(i, url, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2], 30.0, 1);
		}
	}
	return 1;
}

stock Boombox_Destroy(playerid)
{
	if (BoomboxData[playerid][boomboxPlaced])
	{
		if (IsValidDynamicObject(BoomboxData[playerid][boomboxObject]))
		    DestroyDynamicObject(BoomboxData[playerid][boomboxObject]);

		if (IsValidDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]))
		    DestroyDynamic3DTextLabel(BoomboxData[playerid][boomboxText3D]);

		foreach (new i : Player) if (PlayerData[i][pBoombox] == playerid) {
		    StopAudioStreamForPlayer(i);
		}
        BoomboxData[playerid][boomboxPlaced] = false;
        BoomboxData[playerid][boomboxInterior] = 0;
        BoomboxData[playerid][boomboxWorld] = 0;
	}
	return 1;
}

stock Taxi_ShowCalls(playerid)
{
    static
	    string[2048];

	string[0] = 0;

	foreach (new i : Player) if (PlayerData[i][pTaxiCalled]) {
	    format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, ReturnName(i, 0), GetPlayerLocation(i));
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "No hay llamadas de taxi para atender.");
	}
	else Dialog_Show(playerid, AcceptTaxi, DIALOG_STYLE_LIST, "Llamadas de Taxi", string, "Aceptar", "Cancelar");
	return 1;
}

stock IsShipmentAccepted(businessid)
{
	foreach (new i : Player) if (PlayerData[i][pJob] == JOB_COURIER && PlayerData[i][pShipment] == businessid) {
	    return 1;
	}
	return 0;
}

stock CancelShipment(playerid)
{
    PlayerData[playerid][pShipment] = -1;

    if (PlayerData[playerid][pDeliverShipment])
    {
		PlayerData[playerid][pDeliverShipment] = 0;
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

stock ShowShipments(playerid)
{
    static
	    string[2048],
		type[24];

	string[0] = 0;

	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizShipment] && !IsShipmentAccepted(i))
	{
	    switch (BusinessData[i][bizType]) {
	        case 1: type = "Suministros";
	        case 2: type = "Ammunition";
	        case 3: type = "Ropa";
	        case 4: type = "Comida";
			case 6: type = "Gasolina";
			case 7: type = "Muebles";
		}
	    format(string, sizeof(string), "%s%d: %s (%s)\n", string, i, BusinessData[i][bizName], type);
	}
	if (!strlen(string)) {
	    SendErrorMessage(playerid, "No hay envíos para aceptar.");
	}
	else Dialog_Show(playerid, AcceptShipment, DIALOG_STYLE_LIST, "Envíos", string, "Aceptar", "Cancelar");
	return 1;
}

stock GetWheelName(componentid)
{
	new
		name[12];

	enum g_eWheelData {
	    g_eWheelModel,
	    g_eWheelName[12 char]
	};

	new const g_aWheelData[][g_eWheelData] = {
	    {1025, !"Offroad"},
	    {1073, !"Shadow"},
	    {1074, !"Mega"},
	    {1075, !"Rimshine"},
	    {1076, !"Wires"},
	    {1077, !"Classic"},
	    {1078, !"Twist"},
	    {1079, !"Cutter"},
	    {1080, !"Switch"},
	    {1081, !"Grove"},
	    {1082, !"Import"},
	    {1083, !"Dollar"},
	    {1084, !"Trance"},
	    {1085, !"Atomic"},
	    {1096, !"Ahab"},
	    {1097, !"Virtual"},
	    {1098, !"Access"}
	};
	for (new i = 0; i < sizeof(g_aWheelData); i ++) if (g_aWheelData[i][g_eWheelModel] == componentid) {
	    strunpack(name, g_aWheelData[i][g_eWheelName]);

	    return name;
	}
	strunpack(name, !"Unknown");
	return name;
}

stock SetVehicleColor(vehicleid, color1, color2)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carColor1] = color1;
	    CarData[id][carColor2] = color2;
	    Car_Save(id);
	}
	return ChangeVehicleColor(vehicleid, color1, color2);
}

stock SetVehiclePaintjob(vehicleid, paintjobid)
{
    new id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carPaintjob] = paintjobid;
	    Car_Save(id);
	}
	return ChangeVehiclePaintjob(vehicleid, paintjobid);
}

stock RemoveComponent(vehicleid, componentid)
{
	if (!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
	    return 0;

	new
		id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carMods][GetVehicleComponentType(componentid)] = 0;
	    Car_Save(id);
	}
	return RemoveVehicleComponent(vehicleid, componentid);
}

stock AddComponent(vehicleid, componentid)
{
	if (!IsValidVehicle(vehicleid) || (componentid < 1000 || componentid > 1193))
	    return 0;

	new
		id = Car_GetID(vehicleid);

	if (id != -1)
	{
	    CarData[id][carMods][GetVehicleComponentType(componentid)] = componentid;
	    Car_Save(id);
	}
	return AddVehicleComponent(vehicleid, componentid);
}

stock ApplyAnimationEx(playerid, animlib[], animname[], Float:fDelta, loop, lockx, locky, freeze, time, forcesync = 0)
{
	ApplyAnimation(playerid, animlib, animname, fDelta, loop, lockx, locky, freeze, time, forcesync);

	PlayerData[playerid][pLoopAnim] = true;
	ShowPlayerFooter(playerid, "Pulsa ~y~CORRER~w~ para detener la animacion.");

	return 1;
}

stock AnimationCheck(playerid)
{
	return (GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && !PlayerData[playerid][pKilled] && !PlayerData[playerid][pFreeze] && !PlayerData[playerid][pCuffed] && !PlayerData[playerid][pStunned] && !PlayerData[playerid][pFirstAid] && !PlayerData[playerid][pCrafting] && PlayerData[playerid][pGraffiti] == -1);
}

stock PreloadAnimations(playerid)
{
	for (new i = 0; i < sizeof(g_aPreloadLibs); i ++) {
	    ApplyAnimation(playerid, g_aPreloadLibs[i], "null", 4.0, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

stock Vendor_Create(playerid, type)
{
	for (new i = 0; i != MAX_VENDORS; i ++) if (!VendorData[i][vendorExists])
	{
	    VendorData[i][vendorExists] = true;
	    VendorData[i][vendorType] = type;

	    GetPlayerPos(playerid, VendorData[i][vendorPos][0], VendorData[i][vendorPos][1], VendorData[i][vendorPos][2]);
	    GetPlayerFacingAngle(playerid, VendorData[i][vendorPos][3]);

	    VendorData[i][vendorPos][0] = VendorData[i][vendorPos][0] + (1.5 * floatsin(-VendorData[i][vendorPos][3], degrees));
	    VendorData[i][vendorPos][1] = VendorData[i][vendorPos][1] + (1.5 * floatcos(-VendorData[i][vendorPos][3], degrees));

		VendorData[i][vendorInterior] = GetPlayerInterior(playerid);
		VendorData[i][vendorWorld] = GetPlayerVirtualWorld(playerid);

		Vendor_Refresh(i);
		mysql_tquery(g_iHandle, "INSERT INTO `vendors` (`vendorType`) VALUES(0)", "OnVendorCreated", "d", i);
		return i;
	}
	return -1;
}

stock Vendor_Delete(vendorid)
{
	if (vendorid != -1 && VendorData[vendorid][vendorExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `vendors` WHERE `vendorID` = '%d'", VendorData[vendorid][vendorID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(VendorData[vendorid][vendorText3D]))
	        DestroyDynamic3DTextLabel(VendorData[vendorid][vendorText3D]);

		if (IsValidDynamicObject(VendorData[vendorid][vendorObject]))
		    DestroyDynamicObject(VendorData[vendorid][vendorObject]);

	    VendorData[vendorid][vendorExists] = false;
	    VendorData[vendorid][vendorType] = 0;
	    VendorData[vendorid][vendorID] = 0;
	}
	return 1;
}

Vendor_Nearest(playerid)
{
    for (new i = 0; i != MAX_VENDORS; i ++) if (VendorData[i][vendorExists] && IsPlayerInRangeOfPoint(playerid, 2.0, VendorData[i][vendorPos][0], VendorData[i][vendorPos][1], VendorData[i][vendorPos][2]))
	{
		if (GetPlayerInterior(playerid) == VendorData[i][vendorInterior] && GetPlayerVirtualWorld(playerid) == VendorData[i][vendorWorld])
			return i;
	}
	return -1;
}

stock Vendor_Refresh(vendorid)
{
	if (vendorid != -1 && VendorData[vendorid][vendorExists])
	{
	    if (IsValidDynamic3DTextLabel(VendorData[vendorid][vendorText3D]))
	        DestroyDynamic3DTextLabel(VendorData[vendorid][vendorText3D]);

		if (IsValidDynamicObject(VendorData[vendorid][vendorObject]))
		    DestroyDynamicObject(VendorData[vendorid][vendorObject]);

		new
			string[64];

		format(string, sizeof(string), "[Proveedor %d]\n{FFFFFF}Pulsa 'F' para usar este proveedor.", vendorid);
		VendorData[vendorid][vendorText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);

		switch (VendorData[vendorid][vendorType]) {
		    case 1: VendorData[vendorid][vendorObject] = CreateDynamicObject(1340, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2], 0.0, 0.0, VendorData[vendorid][vendorPos][3] - 90.0, VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
		    case 2: VendorData[vendorid][vendorObject] = CreateDynamicObject(1209, VendorData[vendorid][vendorPos][0], VendorData[vendorid][vendorPos][1], VendorData[vendorid][vendorPos][2] - 1.0, 0.0, 0.0, VendorData[vendorid][vendorPos][3], VendorData[vendorid][vendorWorld], VendorData[vendorid][vendorInterior]);
		}
	}
	return 1;
}

stock Vendor_Save(vendorid)
{
	new
	    query[300];

	format(query, sizeof(query), "UPDATE `vendors` SET `vendorType` = '%d', `vendorX` = '%.4f', `vendorY` = '%.4f', `vendorZ` = '%.4f', `vendorA` = '%.4f', `vendorInterior` = '%d', `vendorWorld` = '%d' WHERE `vendorID` = '%d'",
        VendorData[vendorid][vendorType],
        VendorData[vendorid][vendorPos][0],
        VendorData[vendorid][vendorPos][1],
        VendorData[vendorid][vendorPos][2],
        VendorData[vendorid][vendorPos][3],
        VendorData[vendorid][vendorInterior],
        VendorData[vendorid][vendorWorld],
        VendorData[vendorid][vendorID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Garbage_Create(playerid, type)
{
	for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if (!GarbageData[i][garbageExists])
	{
	    switch (type) {
	        case 1: GarbageData[i][garbageModel] = 1236;
	        case 2: GarbageData[i][garbageModel] = 1300;
	    }
	    GarbageData[i][garbageExists] = true;
	    GarbageData[i][garbageCapacity] = 0;

	    GetPlayerPos(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);
	    GetPlayerFacingAngle(playerid, GarbageData[i][garbagePos][3]);

		switch (type) {
		    case 1: {
		    	GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.8 * floatsin(-GarbageData[i][garbagePos][3], degrees));
			    GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.8 * floatcos(-GarbageData[i][garbagePos][3], degrees));
			}
			case 2: {
		    	GarbageData[i][garbagePos][0] = GarbageData[i][garbagePos][0] + (1.0 * floatsin(-GarbageData[i][garbagePos][3], degrees));
			    GarbageData[i][garbagePos][1] = GarbageData[i][garbagePos][1] + (1.0 * floatcos(-GarbageData[i][garbagePos][3], degrees));
			}
		}
		GarbageData[i][garbageInterior] = GetPlayerInterior(playerid);
		GarbageData[i][garbageWorld] = GetPlayerVirtualWorld(playerid);

		Garbage_Refresh(i);
		mysql_tquery(g_iHandle, "INSERT INTO `garbage` (`garbageCapacity`) VALUES(0)", "OnGarbageCreated", "d", i);
		return i;
	}
	return -1;
}

stock Garbage_Delete(garbageid)
{
	if (garbageid != -1 && GarbageData[garbageid][garbageExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `garbage` WHERE `garbageID` = '%d'", GarbageData[garbageid][garbageID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]))
	        DestroyDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]);

		if (IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
		    DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

	    GarbageData[garbageid][garbageExists] = false;
	    GarbageData[garbageid][garbageCapacity] = 0;
	    GarbageData[garbageid][garbageID] = 0;
	}
	return 1;
}

Garbage_Nearest(playerid)
{
    for (new i = 0; i != MAX_GARBAGE_BINS; i ++) if (GarbageData[i][garbageExists] && IsPlayerInRangeOfPoint(playerid, 3.0, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]))
	{
		if (GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
			return i;
	}
	return -1;
}

stock Garbage_Refresh(garbageid)
{
	if (garbageid != -1 && GarbageData[garbageid][garbageExists])
	{
	    if (IsValidDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]))
	        DestroyDynamic3DTextLabel(GarbageData[garbageid][garbageText3D]);

		if (IsValidDynamicObject(GarbageData[garbageid][garbageObject]))
		    DestroyDynamicObject(GarbageData[garbageid][garbageObject]);

		new
			string[64];

		format(string, sizeof(string), "[Basura %d]\n{FFFFFF}Capacidad de la Papelera: %d/20", garbageid, GarbageData[garbageid][garbageCapacity]);

		GarbageData[garbageid][garbageText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], GarbageData[garbageid][garbagePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);
		GarbageData[garbageid][garbageObject] = CreateDynamicObject(GarbageData[garbageid][garbageModel], GarbageData[garbageid][garbagePos][0], GarbageData[garbageid][garbagePos][1], (GarbageData[garbageid][garbageModel] == 1236) ? (GarbageData[garbageid][garbagePos][2] - 0.4) : (GarbageData[garbageid][garbagePos][2] - 0.6), 0.0, 0.0, GarbageData[garbageid][garbagePos][3], GarbageData[garbageid][garbageWorld], GarbageData[garbageid][garbageInterior]);
	}
	return 1;
}

stock Garbage_Save(garbageid)
{
	new
	    query[300];

	format(query, sizeof(query), "UPDATE `garbage` SET `garbageModel` = '%d', `garbageCapacity` = '%d', `garbageX` = '%.4f', `garbageY` = '%.4f', `garbageZ` = '%.4f', `garbageA` = '%.4f', `garbageInterior` = '%d', `garbageWorld` = '%d' WHERE `garbageID` = '%d'",
        GarbageData[garbageid][garbageModel],
        GarbageData[garbageid][garbageCapacity],
        GarbageData[garbageid][garbagePos][0],
        GarbageData[garbageid][garbagePos][1],
        GarbageData[garbageid][garbagePos][2],
        GarbageData[garbageid][garbagePos][3],
        GarbageData[garbageid][garbageInterior],
        GarbageData[garbageid][garbageWorld],
        GarbageData[garbageid][garbageID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Booth_GetPlayer(id)
{
	foreach (new i : Player) if (PlayerData[i][pRangeBooth] == id) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

stock Booth_Leave(playerid)
{
	if (PlayerData[playerid][pRangeBooth] != -1)
	{
	    if (IsValidObject(g_BoothObject[PlayerData[playerid][pRangeBooth]])) {
	        DestroyObject(g_BoothObject[PlayerData[playerid][pRangeBooth]]);

	        g_BoothObject[PlayerData[playerid][pRangeBooth]] = -1;
	    }
    	ResetPlayerWeapons(playerid);
   		SetWeapons(playerid);

		g_BoothUsed[PlayerData[playerid][pRangeBooth]] = false;
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][81]);

		PlayerData[playerid][pRangeBooth] = -1;
  		PlayerData[playerid][pTargets] = 0;
  		PlayerData[playerid][pTargetLevel] = 0;
	}
	return 1;
}

stock Booth_Refresh(playerid)
{
	new id = PlayerData[playerid][pRangeBooth];

	if (id == -1)
	    return 0;

	if (IsValidObject(g_BoothObject[id])) {
	    DestroyObject(g_BoothObject[id]);
	}
	g_BoothObject[id] = CreateObject(1583, arrBoothPositions[id][0] - 15.0, arrBoothPositions[id][1] + 1.5, arrBoothPositions[id][2], 0.0, 0.0, 90.0);

	return MoveObject(g_BoothObject[id], arrBoothPositions[id][0] - 1.0, arrBoothPositions[id][1] + 1.5, arrBoothPositions[id][2], (!PlayerData[playerid][pTargetLevel]) ? (2.0) : (2.0 + (PlayerData[playerid][pTargetLevel] * 1.2)));
}

stock UpdateWeapons(playerid)
{
	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i])
    {
		if ((i == 2 && PlayerData[playerid][pTazer]) || (i == 3 && PlayerData[playerid][pBeanBag]))
		    continue;

        GetPlayerWeaponData(playerid, i, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);

        if (PlayerData[playerid][pGuns][i] != 0 && !PlayerData[playerid][pAmmo][i]) {
            PlayerData[playerid][pGuns][i] = 0;
		}
	}
	return 1;
}

stock ATM_Delete(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `atm` WHERE `atmID` = '%d'", ATMData[atmid][atmID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamicObject(ATMData[atmid][atmObject]))
	        DestroyDynamicObject(ATMData[atmid][atmObject]);

	    if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
	        DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

	    ATMData[atmid][atmExists] = false;
	    ATMData[atmid][atmID] = 0;
	}
	return 1;
}

ATM_Nearest(playerid)
{
    for (new i = 0; i != MAX_ATM_MACHINES; i ++) if (ATMData[i][atmExists] && IsPlayerInRangeOfPoint(playerid, 2.5, ATMData[i][atmPos][0], ATMData[i][atmPos][1], ATMData[i][atmPos][2]))
	{
		if (GetPlayerInterior(playerid) == ATMData[i][atmInterior] && GetPlayerVirtualWorld(playerid) == ATMData[i][atmWorld])
			return i;
	}
	return -1;
}

stock ATM_Create(playerid)
{
    new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_ATM_MACHINES; i ++) if (!ATMData[i][atmExists])
		{
		    ATMData[i][atmExists] = true;

		    x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

            ATMData[i][atmPos][0] = x;
            ATMData[i][atmPos][1] = y;
            ATMData[i][atmPos][2] = z;
            ATMData[i][atmPos][3] = angle;

            ATMData[i][atmInterior] = GetPlayerInterior(playerid);
            ATMData[i][atmWorld] = GetPlayerVirtualWorld(playerid);

			ATM_Refresh(i);
			mysql_tquery(g_iHandle, "INSERT INTO `atm` (`atmInterior`) VALUES(0)", "OnATMCreated", "d", i);

			return i;
		}
	}
	return -1;
}

stock ATM_Refresh(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
	    if (IsValidDynamicObject(ATMData[atmid][atmObject]))
	        DestroyDynamicObject(ATMData[atmid][atmObject]);

	    if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
	        DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

		new
	        string[64];

		format(string, sizeof(string), "[ATM %d]\n{FFFFFF}/atm para usar esta maquina.", atmid);

		ATMData[atmid][atmObject] = CreateDynamicObject(2942, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2] - 0.4, 0.0, 0.0, ATMData[atmid][atmPos][3], ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);
        ATMData[atmid][atmText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);

		return 1;
	}
	return 0;
}

stock ATM_Save(atmid)
{
	new
	    query[200];

	format(query, sizeof(query), "UPDATE `atm` SET `atmX` = '%.4f', `atmY` = '%.4f', `atmZ` = '%.4f', `atmA` = '%.4f', `atmInterior` = '%d', `atmWorld` = '%d' WHERE `atmID` = '%d'",
	    ATMData[atmid][atmPos][0],
	    ATMData[atmid][atmPos][1],
	    ATMData[atmid][atmPos][2],
	    ATMData[atmid][atmPos][3],
	    ATMData[atmid][atmInterior],
	    ATMData[atmid][atmWorld],
	    ATMData[atmid][atmID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock IsVehicleImpounded(vehicleid)
{
    new id = Car_GetID(vehicleid);

	if (id != -1 && CarData[id][carImpounded] != -1 && CarData[id][carImpoundPrice] > 0)
	    return 1;

	return 0;
}

stock Impound_Delete(impoundid)
{
    if (impoundid != -1 && ImpoundData[impoundid][impoundExists])
	{
	    new
	        query[64];

		format(query, sizeof(query), "DELETE FROM `impoundlots` WHERE `impoundID` = '%d'", ImpoundData[impoundid][impoundID]);
		mysql_tquery(g_iHandle, query);

        if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
		    DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

	    if (IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
		    DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists] && CarData[i][carImpounded] == ImpoundData[impoundid][impoundID]) {
		    CarData[i][carImpounded] = 0;
		    CarData[i][carImpoundPrice] = 0;
		    Car_Save(i);
		}
        ImpoundData[impoundid][impoundExists] = false;
        ImpoundData[impoundid][impoundID] = 0;
	}
	return 1;
}

stock GetImpoundByID(sqlid)
{
	for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && ImpoundData[i][impoundID] == sqlid) {
	    return i;
	}
	return -1;
}

stock Impound_Nearest(playerid)
{
	for (new i = 0; i < MAX_IMPOUND_LOTS; i ++) if (ImpoundData[i][impoundExists] && IsPlayerInRangeOfPoint(playerid, 20.0, ImpoundData[i][impoundLot][0], ImpoundData[i][impoundLot][1], ImpoundData[i][impoundLot][2])) {
	    return i;
	}
	return -1;
}

stock Impound_Create(Float:x, Float:y, Float:z)
{
	for (new i = 0; i != MAX_IMPOUND_LOTS; i ++) if (!ImpoundData[i][impoundExists])
	{
	    ImpoundData[i][impoundExists] = true;
	    ImpoundData[i][impoundLot][0] = x;
	    ImpoundData[i][impoundLot][1] = y;
	    ImpoundData[i][impoundLot][2] = z;
	    ImpoundData[i][impoundRelease][0] = 0.0;
	    ImpoundData[i][impoundRelease][1] = 0.0;
	    ImpoundData[i][impoundRelease][2] = 0.0;

		mysql_tquery(g_iHandle, "INSERT INTO `impoundlots` (`impoundLotX`) VALUES('0.0')", "OnImpoundCreated", "d", i);
		Impound_Refresh(i);

		return i;
	}
	return -1;
}

stock Impound_Refresh(impoundid)
{
	if (impoundid != -1 && ImpoundData[impoundid][impoundExists])
	{
	    new
	        string[64];

		if (IsValidDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]))
		    DestroyDynamic3DTextLabel(ImpoundData[impoundid][impoundText3D]);

	    if (IsValidDynamicPickup(ImpoundData[impoundid][impoundPickup]))
		    DestroyDynamicPickup(ImpoundData[impoundid][impoundPickup]);

		format(string, sizeof(string), "[Confiscar %d]\n{FFFFFF}/embargar para embargar un vehiculo.", impoundid);
        ImpoundData[impoundid][impoundText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2], 20.0);
        ImpoundData[impoundid][impoundPickup] = CreateDynamicPickup(1239, 23, ImpoundData[impoundid][impoundLot][0], ImpoundData[impoundid][impoundLot][1], ImpoundData[impoundid][impoundLot][2]);
	}
	return 1;
}

stock Impound_Save(impoundid)
{
	new
		query[300];

	format(query, sizeof(query), "UPDATE `impoundlots` SET `impoundLotX` = '%.4f', `impoundLotY` = '%.4f', `impoundLotZ` = '%.4f', `impoundReleaseX` = '%.4f', `impoundReleaseY` = '%.4f', `impoundReleaseZ` = '%.4f', `impoundReleaseA` = '%.4f' WHERE `impoundID` = '%d'",
        ImpoundData[impoundid][impoundLot][0],
        ImpoundData[impoundid][impoundLot][1],
        ImpoundData[impoundid][impoundLot][2],
        ImpoundData[impoundid][impoundRelease][0],
        ImpoundData[impoundid][impoundRelease][1],
        ImpoundData[impoundid][impoundRelease][2],
        ImpoundData[impoundid][impoundRelease][3],
        ImpoundData[impoundid][impoundID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Backpack_Items(playerid, id)
{
 	if (id != -1 && BackpackData[id][backpackExists])
 	{
 	    new
	        string[MAX_BACKPACK_CAPACITY * 32],
			count = 0;

	    for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
	    {
	        if (BackpackItems[i][bItemQuantity] == 1)
	            format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);

			else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

			BackpackListed[playerid][count++] = i;
		}
		strcat(string, "Llevar Mochila");

		PlayerData[playerid][pBackpackLoot] = id;
		Dialog_Show(playerid, BackpackLoot, DIALOG_STYLE_LIST, "Mochila", string, "Seleccionar", "Cancelar");
	}
	return 1;
}

stock Backpack_Open(playerid)
{
	new id = GetPlayerBackpack(playerid);

	if (id != -1)
	{
	    new
	        string[MAX_BACKPACK_CAPACITY * 32],
			count = 0;

		string = "Agregar Item\n";

	    for (new i = 0; i < MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id)
	    {
	        if (BackpackItems[i][bItemQuantity] == 1)
	            format(string, sizeof(string), "%s%s\n", string, BackpackItems[i][bItemName]);

			else format(string, sizeof(string), "%s%s (%d)\n", string, BackpackItems[i][bItemName], BackpackItems[i][bItemQuantity]);

			BackpackListed[playerid][count++] = i;
		}
		Dialog_Show(playerid, Backpack, DIALOG_STYLE_LIST, "Mi Mochila", string, "Seleccionar", "Cancelar");
	}
	return 1;
}

stock Backpack_GetItems(id)
{
	new count;

	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id) {
	    count++;
	}
	return count;
}

stock Backpack_GetFreeID()
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (!BackpackData[i][backpackExists]) {
	    return i;
	}
	return -1;
}

stock Backpack_Refresh(id)
{
	if (id != -1 && BackpackData[id][backpackExists])
	{
	    if (IsValidDynamicObject(BackpackData[id][backpackObject]))
		    DestroyDynamicObject(BackpackData[id][backpackObject]);

		if (IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
		    DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

		if (!BackpackData[id][backpackPlayer]) {
	        BackpackData[id][backpackObject] = CreateDynamicObject(3026, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, -90.0, 0.0, 0.0, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
    	   	BackpackData[id][backpackText3D] = CreateDynamic3DTextLabel("[Mochila]\n{FFFFFF}Pulsa 'N' para ver los items.", COLOR_DARKBLUE, BackpackData[id][backpackPos][0], BackpackData[id][backpackPos][1], BackpackData[id][backpackPos][2] - 0.8, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BackpackData[id][backpackWorld], BackpackData[id][backpackInterior]);
		}
	}
	return 1;
}

stock Backpack_GetItemID(id, name[])
{
	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (BackpackItems[i][bItemExists] && BackpackItems[i][bItemBackpack] == id && !strcmp(BackpackItems[i][bItemName], name, true)) {
	    return i;
	}
	return -1;
}

stock Backpack_GetFreeItem()
{
	for (new i = 0; i != MAX_BACKPACK_ITEMS; i ++) if (!BackpackItems[i][bItemExists]) {
	    return i;
	}
	return -1;
}

stock Backpack_HasItem(id, name[])
{
	if (id != -1 && BackpackData[id][backpackExists])
		return Backpack_GetItemID(id, name) != -1;

	return 0;
}

stock Backpack_Count(id, name[])
{
	new itemid;

	if (id != -1 && BackpackData[id][backpackExists])
	{
		itemid = Backpack_GetItemID(id, name);

		if (itemid != -1)
		    return BackpackItems[itemid][bItemQuantity];
	}
	return 0;
}

stock Backpack_Add(id, name[], model, quantity = 1)
{
	new
	    query[128];

	if (id != -1 && BackpackData[id][backpackExists])
	{
	    new itemid = Backpack_GetItemID(id, name);

	    if (itemid != -1)
		{
	        format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` + %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
	        mysql_tquery(g_iHandle, query);

			return BackpackItems[itemid][bItemQuantity] += quantity;
		}
		else if ((itemid = Backpack_GetFreeItem()) != -1)
		{
		    format(BackpackItems[itemid][bItemName], 32, name);

		    BackpackItems[itemid][bItemBackpack] = id;
		    BackpackItems[itemid][bItemExists] = true;
		    BackpackItems[itemid][bItemModel] = model;
		    BackpackItems[itemid][bItemQuantity] = quantity;

	        format(query, sizeof(query), "INSERT INTO `backpackitems` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", BackpackData[id][backpackID], name, model, quantity);
	        mysql_tquery(g_iHandle, query, "OnBackpackAdd", "dd", id, itemid);

	        return 1;
		}
	}
	return 0;
}

stock Backpack_Remove(id, name[], quantity = 1)
{
	new
	    query[128];

	if (id != -1 && BackpackData[id][backpackExists])
	{
	    new itemid = Backpack_GetItemID(id, name);

	    if (itemid != -1)
		{
			if (BackpackItems[itemid][bItemQuantity] > 0)
			{
				BackpackItems[itemid][bItemQuantity] -= quantity;
			}
			if (BackpackItems[itemid][bItemQuantity] < 1)
			{
		        format(query, sizeof(query), "DELETE FROM `backpackitems` WHERE `itemID` = '%d'", BackpackItems[itemid][bItemID]);
		        mysql_tquery(g_iHandle, query);

			    BackpackItems[itemid][bItemBackpack] = -1;
			    BackpackItems[itemid][bItemExists] = false;
			    BackpackItems[itemid][bItemModel] = 0;
		    	BackpackItems[itemid][bItemQuantity] = 0;
		    }
			else
			{
                format(query, sizeof(query), "UPDATE `backpackitems` SET `itemQuantity` = `itemQuantity` - %d WHERE `itemID` = '%d'", quantity, BackpackItems[itemid][bItemID]);
		        mysql_tquery(g_iHandle, query);
			}
		    return 1;
		}
	}
	return 0;
}

stock GetHouseBackpack(houseid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
	    return i;
	}
	return -1;
}

stock GetVehicleBackpack(carid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == CarData[carid][carID]) {
	    return i;
	}
	return -1;
}

stock GetPlayerBackpack(playerid)
{
	for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackPlayer] == PlayerData[playerid][pID]) {
	    return i;
	}
	return -1;
}

stock Backpack_Create(playerid)
{
	new id = Backpack_GetFreeID();

	if (id != -1)
	{
		BackpackData[id][backpackExists] = true;
		BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
		BackpackData[id][backpackHouse] = 0;
		BackpackData[id][backpackVehicle] = 0;
		BackpackData[id][backpackPos][0] = 0.0;
		BackpackData[id][backpackPos][1] = 0.0;
		BackpackData[id][backpackPos][2] = 0.0;

		mysql_tquery(g_iHandle, "INSERT INTO `backpacks` (`backpackInterior`) VALUES(0)", "OnBackpackCreated", "d", id);
		return id;
	}
	return -1;
}

stock Backpack_Delete(id)
{
	if (id != -1 && BackpackData[id][backpackExists])
	{
	    new
	        str[64];

		format(str, sizeof(str), "DELETE FROM `backpacks` WHERE `backpackID` = '%d'", BackpackData[id][backpackID]);
		mysql_tquery(g_iHandle, str);

		if (IsValidDynamicObject(BackpackData[id][backpackObject]))
		    DestroyDynamicObject(BackpackData[id][backpackObject]);

		if (IsValidDynamic3DTextLabel(BackpackData[id][backpackText3D]))
		    DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);

        BackpackData[id][backpackExists] = false;
        BackpackData[id][backpackID] = 0;
        BackpackData[id][backpackPlayer] = 0;
        BackpackData[id][backpackHouse] = 0;
        BackpackData[id][backpackVehicle] = 0;
	}
	return 1;
}

stock Backpack_Save(id)
{
	new
	    query[256];

    format(query, sizeof(query), "UPDATE `backpacks` SET `backpackPlayer` = '%d', `backpackHouse` = '%d', `backpackVehicle` = '%d', `backpackX` = '%.4f', `backpackY` = '%.4f', `backpackZ` = '%.4f', `backpackInterior` = '%d', `backpackWorld` = '%d' WHERE `backpackID` = '%d'",
        BackpackData[id][backpackPlayer],
        BackpackData[id][backpackHouse],
        BackpackData[id][backpackVehicle],
        BackpackData[id][backpackPos][0],
        BackpackData[id][backpackPos][1],
        BackpackData[id][backpackPos][2],
        BackpackData[id][backpackInterior],
        BackpackData[id][backpackWorld],
        BackpackData[id][backpackID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock StartTutorial(playerid)
{
	ShowHungerTextdraw(playerid, 0);
	TogglePlayerControllable(playerid, 0);

    PlayerData[playerid][pTutorial] = 1;
    PlayerData[playerid][pTutorialTime] = 10;

	#if SERVER_CITY == 1
	    SetPlayerPos(playerid, 1806.737, -2043.505, 44.733);
	    SetPlayerCameraPos(playerid, 1806.737, -2043.505, 24.733);
		SetPlayerCameraLookAt(playerid, 1802.511, -2040.684, 22.996);
	#elseif SERVER_CITY == 2
		SetPlayerPos(playerid, -2399.519287, 321.964355, 17.035743);
		SetPlayerCameraPos(playerid, -2399.519287, 321.964355, 37.035743);
		SetPlayerCameraLookAt(playerid, -2399.951416, 322.215942, 37.015625);
	#elseif SERVER_CITY == 3
	    SetPlayerPos(playerid, 1694.187622, 1448.494506, -7.181461);
		SetPlayerCameraPos(playerid, 1694.187622, 1448.494506, 12.818538);
		SetPlayerCameraLookAt(playerid, 1693.687744, 1448.484497, 12.763537);
	#endif

	for (new i = 58; i < 62; i ++) {
	    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	}
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

stock IsValidObjectModel(modelid)
{
	if (modelid < 0 || modelid > 20000)
	    return 0;

    switch (modelid)
	{
		case 18632..18645, 18646..18658, 18659..18667, 18668..19299, 19301..19515, 18631, 331, 333..339, 318..321, 325, 326, 341..344, 346..353, 355..370, 372, 19772..19999:
			return 1;
	}
    new const g_arrModelData[] =
	{
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -128,
        -515899393, -134217729, -1, -1, 33554431, -1, -1, -1, -14337, -1, -33,
      	127, 0, 0, 0, 0, 0, -8388608, -1, -1, -1, -16385, -1, -1, -1, -1, -1,
       -1, -1, -33, -1, -771751937, -1, -9, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, 33554431, -25, -1, -1, -1, -1, -1, -1,
       -1073676289, -2147483648, 34079999, 2113536, -4825600, -5, -1, -3145729,
       -1, -16777217, -63, -1, -1, -1, -1, -201326593, -1, -1, -1, -1, -1,
       -257, -1, 1073741823, -133122, -1, -1, -65, -1, -1, -1, -1, -1, -1,
       -2146435073, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1073741823, -64, -1,
       -1, -1, -1, -2635777, 134086663, 0, -64, -1, -1, -1, -1, -1, -1, -1,
       -536870927, -131069, -1, -1, -1, -1, -1, -1, -1, -1, -16384, -1,
       -33554433, -1, -1, -1, -1, -1, -1610612737, 524285, -128, -1,
       2080309247, -1, -1, -1114113, -1, -1, -1, 66977343, -524288, -1, -1, -1,
       -1, -2031617, -1, 114687, -256, -1, -4097, -1, -4097, -1, -1,
       1010827263, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -32768, -1, -1, -1, -1, -1,
       2147483647, -33554434, -1, -1, -49153, -1148191169, 2147483647,
       -100781080, -262145, -57, 134217727, -8388608, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1048577, -1, -449, -1017, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1835009, -2049, -1, -1, -1, -1, -1, -1,
       -8193, -1, -536870913, -1, -1, -1, -1, -1, -87041, -1, -1, -1, -1, -1,
       -1, -209860, -1023, -8388609, -2096897, -1, -1048577, -1, -1, -1, -1,
       -1, -1, -897, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1610612737,
       -3073, -28673, -1, -1, -1, -1537, -1, -1, -13, -1, -1, -1, -1, -1985,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1056964609, -1, -1, -1,
       -1, -1, -1, -1, -2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -236716037, -1, -1, -1, -1, -1, -1, -1, -536870913, 3, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -2097153, -2109441, -1, 201326591, -4194304, -1, -1,
       -241, -1, -1, -1, -1, -1, -1, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, -32768, -1, -1, -1, -2, -671096835, -1, -8388609, -66323585, -13,
       -1793, -32257, -247809, -1, -1, -513, 16252911, 0, 0, 0, -131072,
       33554383, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
       0, 0, 0, 0, 0, 0, 0, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8356095, 0, 0, 0, 0, 0,
       0, -256, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       -268435449, -1, -1, -2049, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
       92274627, -65536, -2097153, -268435457, 591191935, 1, 0, -16777216, -1,
       -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 127
	};
 	return ((modelid >= 0) && ((modelid / 32) < sizeof(g_arrModelData)) && (g_arrModelData[modelid / 32] & (1 << (modelid % 32))));
}

forward CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ);
public CloseGate(gateid, linkid, Float:fX, Float:fY, Float:fZ, Float:speed, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	new id = -1;

	if (GateData[gateid][gateExists] && GateData[gateid][gateOpened])
 	{
	 	MoveDynamicObject(GateData[gateid][gateObject], fX, fY, fZ, speed, fRotX, fRotY, fRotZ);

	 	if ((id = GetGateByID(linkid)) != -1)
            MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], speed, GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);

		GateData[id][gateOpened] = false;
		return 1;
	}
	return 0;
}

stock Gate_Operate(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
	    new id = -1;

		if (!GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = true;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gateMove][0], GateData[gateid][gateMove][1], GateData[gateid][gateMove][2], GateData[gateid][gateSpeed], GateData[gateid][gateMove][3], GateData[gateid][gateMove][4], GateData[gateid][gateMove][5]);

            if (GateData[gateid][gateTime] > 0) {
				GateData[gateid][gateTimer] = SetTimerEx("CloseGate", GateData[gateid][gateTime], false, "ddfffffff", gateid, GateData[gateid][gateLinkID], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);
			}
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = true;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gateMove][0], GateData[id][gateMove][1], GateData[id][gateMove][2], GateData[id][gateSpeed], GateData[id][gateMove][3], GateData[id][gateMove][4], GateData[id][gateMove][5]);
			}
		}
		else if (GateData[gateid][gateOpened])
		{
		    GateData[gateid][gateOpened] = false;
		    MoveDynamicObject(GateData[gateid][gateObject], GateData[gateid][gatePos][0], GateData[gateid][gatePos][1], GateData[gateid][gatePos][2], GateData[gateid][gateSpeed], GateData[gateid][gatePos][3], GateData[gateid][gatePos][4], GateData[gateid][gatePos][5]);

            if (GateData[gateid][gateTime] > 0) {
				KillTimer(GateData[gateid][gateTimer]);
		    }
			if (GateData[gateid][gateLinkID] != -1 && (id = GetGateByID(GateData[gateid][gateLinkID])) != -1)
			{
			    GateData[id][gateOpened] = false;
			    MoveDynamicObject(GateData[id][gateObject], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gateSpeed], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5]);
			}
		}
	}
	return 1;
}

stock Gate_Create(playerid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_GATES; i ++) if (!GateData[i][gateExists])
		{
		    GateData[i][gateExists] = true;
			GateData[i][gateModel] = 980;
			GateData[i][gateSpeed] = 3.0;
			GateData[i][gateRadius] = 5.0;
			GateData[i][gateOpened] = 0;
			GateData[i][gateTime] = 0;

			GateData[i][gatePos][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gatePos][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gatePos][2] = z;
			GateData[i][gatePos][3] = 0.0;
			GateData[i][gatePos][4] = 0.0;
			GateData[i][gatePos][5] = angle;

			GateData[i][gateMove][0] = x + (3.0 * floatsin(-angle, degrees));
			GateData[i][gateMove][1] = y + (3.0 * floatcos(-angle, degrees));
			GateData[i][gateMove][2] = z - 10.0;
			GateData[i][gateMove][3] = -1000.0;
			GateData[i][gateMove][4] = -1000.0;
			GateData[i][gateMove][5] = -1000.0;

            GateData[i][gateInterior] = GetPlayerInterior(playerid);
            GateData[i][gateWorld] = GetPlayerVirtualWorld(playerid);

            GateData[i][gateLinkID] = -1;
            GateData[i][gateFaction] = -1;

            GateData[i][gatePass][0] = '\0';
            GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);

			mysql_tquery(g_iHandle, "INSERT INTO `gates` (`gateModel`) VALUES(980)", "OnGateCreated", "d", i);
			return i;
		}
	}
	return -1;
}

stock Gate_Delete(gateid)
{
	if (gateid != -1 && GateData[gateid][gateExists])
	{
		new
		    query[64];

		format(query, sizeof(query), "DELETE FROM `gates` WHERE `gateID` = '%d'", GateData[gateid][gateID]);
		mysql_tquery(g_iHandle, query);

		if (IsValidDynamicObject(GateData[gateid][gateObject]))
		    DestroyDynamicObject(GateData[gateid][gateObject]);

		for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateLinkID] == GateData[gateid][gateID]) {
		    GateData[i][gateLinkID] = -1;
		    Gate_Save(i);
		}
		if (GateData[gateid][gateOpened] && GateData[gateid][gateTime] > 0) {
		    KillTimer(GateData[gateid][gateTimer]);
		}
	    GateData[gateid][gateExists] = false;
	    GateData[gateid][gateID] = 0;
	    GateData[gateid][gateOpened] = 0;
	}
	return 1;
}

stock Gate_Save(gateid)
{
	new
	    query[768];

	format(query, sizeof(query), "UPDATE `gates` SET `gateModel` = '%d', `gateSpeed` = '%.4f', `gateRadius` = '%.4f', `gateTime` = '%d', `gateX` = '%.4f', `gateY` = '%.4f', `gateZ` = '%.4f', `gateRX` = '%.4f', `gateRY` = '%.4f', `gateRZ` = '%.4f', `gateInterior` = '%d', `gateWorld` = '%d', `gateMoveX` = '%.4f', `gateMoveY` = '%.4f', `gateMoveZ` = '%.4f', `gateMoveRX` = '%.4f', `gateMoveRY` = '%.4f', `gateMoveRZ` = '%.4f', `gateLinkID` = '%d', `gateFaction` = '%d', `gatePass` = '%s' WHERE `gateID` = '%d'",
	    GateData[gateid][gateModel],
	    GateData[gateid][gateSpeed],
	    GateData[gateid][gateRadius],
	    GateData[gateid][gateTime],
	    GateData[gateid][gatePos][0],
	    GateData[gateid][gatePos][1],
	    GateData[gateid][gatePos][2],
	    GateData[gateid][gatePos][3],
	    GateData[gateid][gatePos][4],
	    GateData[gateid][gatePos][5],
	    GateData[gateid][gateInterior],
	    GateData[gateid][gateWorld],
	    GateData[gateid][gateMove][0],
	    GateData[gateid][gateMove][1],
	    GateData[gateid][gateMove][2],
	    GateData[gateid][gateMove][3],
	    GateData[gateid][gateMove][4],
	    GateData[gateid][gateMove][5],
	    GateData[gateid][gateLinkID],
	    GateData[gateid][gateFaction],
	    SQL_ReturnEscaped(GateData[gateid][gatePass]),
	    GateData[gateid][gateID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock ChangeName(playerid, name[], bool:logging = true)
{
	new
	    id = PlayerData[playerid][pCharacter] - 1,
		query[160],
		oldname[24];

	GetPlayerName(playerid, oldname, sizeof(oldname));

	if (logging)
	{
	    format(query, sizeof(query), "INSERT INTO `namechanges` (`OldName`, `NewName`, `Date`) VALUES('%s', '%s', '%s')", oldname, name, ReturnDate());
		mysql_tquery(g_iHandle, query);
	}
    format(PlayerCharacters[playerid][id], MAX_PLAYER_NAME + 1, name);
	SetPlayerName(playerid, name);

	format(query, sizeof(query), "UPDATE `characters` SET `Character` = '%s' WHERE `Character` = '%s'", name, oldname);
	mysql_tquery(g_iHandle, query);

	return 1;
}

stock Tax_Percent(price)
{
	return floatround((float(price) / 100) * 85);
}

stock Tax_AddMoney(amount)
{
	g_TaxVault = g_TaxVault + amount;

	Server_Save();

	return 0;
}

stock Tax_AddPercent(price)
{
	new money = (price - Tax_Percent(price));

	g_TaxVault = g_TaxVault + money;

	Server_Save();
	return 1;
}

stock file_parse_int(File:handle, const field[])
{
	new
	    str[16];

	return (file_parse(handle, field, str), strval(str));
}

stock file_parse(File:handle, const field[], dest[], size = sizeof(dest))
{
	if (!handle)
	    return 0;

	new
	    str[128],
		pos = strlen(field);

	fseek(handle, 0, seek_start);

	while (fread(handle, str)) if (strfind(str, field, true) == 0 && (str[pos] == '=' || str[pos] == ' '))
	{
	    strmid(dest, str, (str[pos] == '=') ? (pos + 1) : (pos + 3), strlen(str), size);

		if ((pos = strfind(dest, "\r")) != -1)
			dest[pos] = '\0';
   		else if ((pos = strfind(dest, "\n")) != -1)
     		dest[pos] = '\0';

		return 1;
	}
	return 0;
}

cache_get_field_int(row, const field_name[])
{
	new
	    str[12];

	cache_get_field_content(row, field_name, str, g_iHandle, sizeof(str));
	return strval(str);
}

Ticket_Add(suspectid, price, reason[])
{
	new
	    string[160];

	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) if (!TicketData[suspectid][i][ticketExists])
	{
	    TicketData[suspectid][i][ticketExists] = true;
	    TicketData[suspectid][i][ticketFee] = price;

	    format(TicketData[suspectid][i][ticketDate], 36, ReturnDate());
	    format(TicketData[suspectid][i][ticketReason], 64, reason);

		format(string, sizeof(string), "INSERT INTO `tickets` (`ID`, `ticketFee`, `ticketDate`, `ticketReason`) VALUES('%d', '%d', '%s', '%s')", PlayerData[suspectid][pID], price, TicketData[suspectid][i][ticketDate], SQL_ReturnEscaped(reason));
		mysql_tquery(g_iHandle, string, "OnTicketCreated", "dd", suspectid, i);

		return i;
	}
	return -1;
}

Ticket_Remove(playerid, ticketid)
{
	if (ticketid != -1 && TicketData[playerid][ticketid][ticketExists])
	{
	    new
	        string[90];

		format(string, sizeof(string), "DELETE FROM `tickets` WHERE `ID` = '%d' AND `ticketID` = '%d'", PlayerData[playerid][pID], TicketData[playerid][ticketid][ticketID]);
		mysql_tquery(g_iHandle, string);

	    TicketData[playerid][ticketid][ticketExists] = false;
	    TicketData[playerid][ticketid][ticketID] = 0;
	    TicketData[playerid][ticketid][ticketFee] = 0;
	}
	return 1;
}

Waypoint_Set(playerid, name[], Float:x, Float:y, Float:z)
{
    format(PlayerData[playerid][pLocation], 32, name);

    PlayerData[playerid][pWaypoint] = 1;
   	PlayerData[playerid][pWaypointPos][0] = x;
    PlayerData[playerid][pWaypointPos][1] = y;
   	PlayerData[playerid][pWaypointPos][2] = z;

	SetPlayerCheckpoint(playerid, x, y, z, 3.0);
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][69]);

	return 1;
}

Location_Add(playerid, name[], Float:x, Float:y, Float:z)
{
	new
	    query[192];

	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (!LocationData[playerid][i][locationExists])
	{
	    LocationData[playerid][i][locationExists] = true;
	    format(LocationData[playerid][i][locationName], 32, name);

	    LocationData[playerid][i][locationPos][0] = x;
	    LocationData[playerid][i][locationPos][1] = y;
	    LocationData[playerid][i][locationPos][2] = z;

		format(query, sizeof(query), "INSERT INTO `gps` (`ID`, `locationName`, `locationX`, `locationY`, `locationZ`) VALUES('%d', '%s', '%.4f', '%.4f', '%.4f')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), x, y, z);
		mysql_tquery(g_iHandle, query, "OnLocationCreated", "dd", playerid, i);

		return i;
	}
	return -1;
}

Location_GetID(playerid, name[])
{
    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name, true)) {
        return i;
	}
	return -1;
}

Location_Delete(playerid, name[])
{
	new
		query[96];

    for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists] && !strcmp(LocationData[playerid][i][locationName], name))
	{
	    LocationData[playerid][i][locationExists] = false;

	    LocationData[playerid][i][locationPos][0] = 0.0;
	    LocationData[playerid][i][locationPos][1] = 0.0;
	    LocationData[playerid][i][locationPos][2] = 0.0;

	    format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d' AND `locationID` = '%d'", PlayerData[playerid][pID], LocationData[playerid][i][locationID]);
	    mysql_tquery(g_iHandle, query);
		return 1;
	}
	return 0;
}

stock SetPlayerPosEx(playerid, Float:x, Float:y, Float:z, time = 2000)
{
	if (PlayerData[playerid][pFreeze])
	{
	    KillTimer(PlayerData[playerid][pFreezeTimer]);

	    PlayerData[playerid][pFreeze] = 0;
	    TogglePlayerControllable(playerid, 1);
	}
	SetPlayerPos(playerid, x, y, z + 0.5);
	TogglePlayerControllable(playerid, 0);

	PlayerData[playerid][pFreeze] = 1;
	PlayerData[playerid][pFreezeTimer] = SetTimerEx("SetPlayerToUnfreeze", time, false, "dfff", playerid, x, y, z);
	return 1;
}

forward SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z);
public SetPlayerToUnfreeze(playerid, Float:x, Float:y, Float:z)
{
	if (!IsPlayerInRangeOfPoint(playerid, 15.0, x, y, z))
	    return 0;

	PlayerData[playerid][pFreeze] = 0;

	SetPlayerPos(playerid, x, y, z);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

forward RefillUpdate(playerid, vehicleid);
public RefillUpdate(playerid, vehicleid)
{
	if (!PlayerData[playerid][pFuelCan] || GetNearestVehicle(playerid) != vehicleid)
	    return 0;

	CoreVehicles[vehicleid][vehFuel] = (CoreVehicles[vehicleid][vehFuel] + 15 >= 100) ? (100) : (CoreVehicles[vehicleid][vehFuel] + 15);

	PlayerData[playerid][pFuelCan] = 0;
	SendServerMessage(playerid, "Llenaste el tanque de tu vehiculo con una lata de combustible.");
	return 1;
}

stock EquipWeapon(playerid, weapon[])
{
	if (PlayerData[playerid][pPlayingHours] < 2)
	    return SendErrorMessage(playerid, "Tienes que jugar por lo menos 2 horas para usar armas.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "No puedes hacer esto si estas en un vehiculo.");

	if (!strcmp(weapon, "Colt 45", true))
	{
	    if (!Inventory_HasItem(playerid, "Colt 45"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 22))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Ya estas usando un arma (pulsa 'N' para guardarla).");

		HoldWeapon(playerid, 22);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma una Colt 45 vacia y la sostiene.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Pulsa 'N' para guardar el arma. Tienes que colocarle un cargador para usarla.");
	}
	else if (!strcmp(weapon, "Desert Eagle", true))
	{
	    if (!Inventory_HasItem(playerid, "Desert Eagle"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 24))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Ya estas usando un arma (pulsa 'N' para guardarla).");

		HoldWeapon(playerid, 24);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma una Desert Eagle vacia y la sostiene.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Pulsa 'N' para guardar el arma. Tienes que colocarle un cargador para usarla.");
	}
	else if (!strcmp(weapon, "Escopeta", true))
	{
	    if (!Inventory_HasItem(playerid, "Escopeta"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 25))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Ya estas usando un arma (pulsa 'N' para guardarla).");

		HoldWeapon(playerid, 25);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma una Escopeta vacia y la sostiene.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Pulsa 'N' para guardar el arma. Tienes que colocarle un cargador para usarla.");
	}
	else if (!strcmp(weapon, "Micro SMG", true))
	{
	    if (!Inventory_HasItem(playerid, "Micro SMG"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 28))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Ya estas usando un arma (pulsa 'N' para guardarla).");

		HoldWeapon(playerid, 28);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma una Micro SMG vacia y la sostiene.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Pulsa 'N' para guardar el arma. Tienes que colocarle un cargador para usarla.");
	}
	else if (!strcmp(weapon, "Tec-9", true))
	{
	    if (!Inventory_HasItem(playerid, "Tec-9"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 32))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Ya estas usando un arma (pulsa 'N' para guardarla).");

		HoldWeapon(playerid, 32);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma una Tec-9 vacia y la sostiene.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Pulsa 'N' para guardar el arma. Tienes que colocarle un cargador para usarla.");
	}
	else if (!strcmp(weapon, "MP5", true))
	{
	    if (!Inventory_HasItem(playerid, "MP5"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 29))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Ya estas usando un arma (pulsa 'N' para guardarla).");

		HoldWeapon(playerid, 29);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma una MP5 vacia y la sostiene.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Pulsa 'N' para guardar el arma. Tienes que colocarle un cargador para usarla.");
	}
	else if (!strcmp(weapon, "AK-47", true))
	{
	    if (!Inventory_HasItem(playerid, "AK-47"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 30))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Ya estas usando un arma (pulsa 'N' para guardarla).");

		HoldWeapon(playerid, 30);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma una AK-47 vacia y la sostiene.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Pulsa 'N' para guardar el arma. Tienes que colocarle un cargador para usarla.");
	}
	else if (!strcmp(weapon, "Rifle", true))
	{
	    if (!Inventory_HasItem(playerid, "Rifle"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 33))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Ya estas usando un arma (pulsa 'N' para guardarla).");

		HoldWeapon(playerid, 33);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma un Rifle vacio y lo sostiene.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Pulsa 'N' para guardar el arma. Tienes que colocarle un cargador para usarla.");
	}
	else if (!strcmp(weapon, "Sniper", true))
	{
	    if (!Inventory_HasItem(playerid, "Sniper"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 34))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

		if (PlayerData[playerid][pHoldWeapon] > 0)
		    return SendErrorMessage(playerid, "Ya estas usando un arma (pulsa 'N' para guardarla).");

		HoldWeapon(playerid, 34);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma un Sniper vacio y lo sostiene.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Pulsa 'N' para guardar el arma. Tienes que colocarle un cargador para usarla.");
	}
	else if (!strcmp(weapon, "Palo de Golf", true))
	{
	    if (!Inventory_HasItem(playerid, "Palo de Golf"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 2))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

	    GiveWeaponToPlayer(playerid, 2, 1);

	    Inventory_Remove(playerid, "Palo de Golf");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tomó un Palo de Golf de su inventario.", ReturnName(playerid, 0));
	}
	else if (!strcmp(weapon, "Cuchillo", true))
	{
	    if (!Inventory_HasItem(playerid, "Cuchillo"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 4))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

	    GiveWeaponToPlayer(playerid, 4, 1);

	    Inventory_Remove(playerid, "Cuchillo");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tomó un Cuchillo de su inventario.", ReturnName(playerid, 0));
	}
	else if (!strcmp(weapon, "Pala", true))
	{
	    if (!Inventory_HasItem(playerid, "Pala"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 6))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

	    GiveWeaponToPlayer(playerid, 6, 1);

	    Inventory_Remove(playerid, "Pala");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tomó una Pala de su inventario.", ReturnName(playerid, 0));
	}
    else if (!strcmp(weapon, "Katana", true))
	{
	    if (!Inventory_HasItem(playerid, "Katana"))
	        return SendErrorMessage(playerid, "No tienes esta arma.");

	    if (PlayerHasWeapon(playerid, 8))
	        return SendErrorMessage(playerid, "Ya tienes esta arma.");

	    GiveWeaponToPlayer(playerid, 8, 1);

	    Inventory_Remove(playerid, "Katana");
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tomó una Katana de su inventario.", ReturnName(playerid, 0));
	}
	return 1;
}

stock SetPlayerInPrison(playerid)
{
	new idx = random(sizeof(g_arrPrisonSpawns));

	SetPlayerPosEx(playerid, g_arrPrisonSpawns[idx][0], g_arrPrisonSpawns[idx][1], g_arrPrisonSpawns[idx][2] + 0.3);
	SetPlayerFacingAngle(playerid, g_arrPrisonSpawns[idx][3]);

	SetPlayerInterior(playerid, 5);
	SetPlayerVirtualWorld(playerid, PRISON_WORLD);

	ShowHungerTextdraw(playerid, 0);
	SetCameraBehindPlayer(playerid);
}

stock ViewCharges(playerid, name[])
{
	new
	    string[128];

	format(string, sizeof(string), "SELECT * FROM `warrants` WHERE `Suspect` = '%s' ORDER BY `ID` DESC", SQL_ReturnEscaped(name));
	mysql_tquery(g_iHandle, string, "OnViewCharges", "ds", playerid, name);
	return 1;
}

stock AddWarrant(targetid, playerid, const description[])
{
	new
	    string[255];

	format(string, sizeof(string), "INSERT INTO `warrants` (`Suspect`, `Username`, `Date`, `Description`) VALUES('%s', '%s', '%s', '%s')", ReturnName(targetid), ReturnName(playerid), ReturnDate(), SQL_ReturnEscaped(description));
	mysql_tquery(g_iHandle, string);
}

stock GetPlayerLocationEx(playerid, &Float:fX, &Float:fY, &Float:fZ)
{
	new
	    id = -1;

    if ((id = House_Inside(playerid)) != -1)
	{
		fX = HouseData[id][housePos][0];
		fY = HouseData[id][housePos][1];
		fZ = HouseData[id][housePos][2];
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][bizPos][0];
		fY = BusinessData[id][bizPos][1];
		fZ = BusinessData[id][bizPos][2];
	}
	else if ((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);
	return 1;
}

stock GetPlayerLocation(playerid)
{
	new
	    Float:fX,
	    Float:fY,
		Float:fZ,
		string[32],
		id = -1;

	if ((id = House_Inside(playerid)) != -1)
	{
		fX = HouseData[id][housePos][0];
		fY = HouseData[id][housePos][1];
		fZ = HouseData[id][housePos][2];
	}
	else if ((id = Business_Inside(playerid)) != -1)
	{
		fX = BusinessData[id][bizPos][0];
		fY = BusinessData[id][bizPos][1];
		fZ = BusinessData[id][bizPos][2];
	}
	else if ((id = Entrance_Inside(playerid)) != -1)
	{
		fX = EntranceData[id][entrancePos][0];
		fY = EntranceData[id][entrancePos][1];
		fZ = EntranceData[id][entrancePos][2];
	}
	else GetPlayerPos(playerid, fX, fY, fZ);

	format(string, 32, GetLocation(fX, fY, fZ));
	return string;
}

stock GetLocation(Float:fX, Float:fY, Float:fZ)
{
    enum e_ZoneData
	{
     	e_ZoneName[32 char],
     	Float:e_ZoneArea[6]
	};
	new const g_arrZoneData[][e_ZoneData] =
	{
		{!"The Big Ear", 	              {-410.00, 1403.30, -3.00, -137.90, 1681.20, 200.00}},
		{!"Aldea Malvada",                {-1372.10, 2498.50, 0.00, -1277.50, 2615.30, 200.00}},
		{!"Angel Pine",                   {-2324.90, -2584.20, -6.10, -1964.20, -2212.10, 200.00}},
		{!"Arco del Oeste",               {-901.10, 2221.80, 0.00, -592.00, 2571.90, 200.00}},
		{!"Avispa Country Club",          {-2646.40, -355.40, 0.00, -2270.00, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2831.80, -430.20, -6.10, -2646.40, -222.50, 200.00}},
		{!"Avispa Country Club",          {-2361.50, -417.10, 0.00, -2270.00, -355.40, 200.00}},
		{!"Avispa Country Club",          {-2667.80, -302.10, -28.80, -2646.40, -262.30, 71.10}},
		{!"Avispa Country Club",          {-2470.00, -355.40, 0.00, -2270.00, -318.40, 46.10}},
		{!"Avispa Country Club",          {-2550.00, -355.40, 0.00, -2470.00, -318.40, 39.70}},
		{!"Back o Beyond",                {-1166.90, -2641.10, 0.00, -321.70, -1856.00, 200.00}},
		{!"Battery Point",                {-2741.00, 1268.40, -4.50, -2533.00, 1490.40, 200.00}},
		{!"Bayside",                      {-2741.00, 2175.10, 0.00, -2353.10, 2722.70, 200.00}},
		{!"Bayside Marina",               {-2353.10, 2275.70, 0.00, -2153.10, 2475.70, 200.00}},
		{!"Beacon Hill",                  {-399.60, -1075.50, -1.40, -319.00, -977.50, 198.50}},
		{!"Blackfield",                   {964.30, 1203.20, -89.00, 1197.30, 1403.20, 110.90}},
		{!"Blackfield",                   {964.30, 1403.20, -89.00, 1197.30, 1726.20, 110.90}},
		{!"Blackfield Chapel",            {1375.60, 596.30, -89.00, 1558.00, 823.20, 110.90}},
		{!"Blackfield Chapel",            {1325.60, 596.30, -89.00, 1375.60, 795.00, 110.90}},
		{!"Blackfield Intersection",      {1197.30, 1044.60, -89.00, 1277.00, 1163.30, 110.90}},
		{!"Blackfield Intersection",      {1166.50, 795.00, -89.00, 1375.60, 1044.60, 110.90}},
		{!"Blackfield Intersection",      {1277.00, 1044.60, -89.00, 1315.30, 1087.60, 110.90}},
		{!"Blackfield Intersection",      {1375.60, 823.20, -89.00, 1457.30, 919.40, 110.90}},
		{!"Blueberry",                    {104.50, -220.10, 2.30, 349.60, 152.20, 200.00}},
		{!"Blueberry",                    {19.60, -404.10, 3.80, 349.60, -220.10, 200.00}},
		{!"Blueberry Acres",              {-319.60, -220.10, 0.00, 104.50, 293.30, 200.00}},
		{!"Caligula's Palace",            {2087.30, 1543.20, -89.00, 2437.30, 1703.20, 110.90}},
		{!"Caligula's Palace",            {2137.40, 1703.20, -89.00, 2437.30, 1783.20, 110.90}},
		{!"Calton Heights",               {-2274.10, 744.10, -6.10, -1982.30, 1358.90, 200.00}},
		{!"Chinatown",                    {-2274.10, 578.30, -7.60, -2078.60, 744.10, 200.00}},
		{!"City Hall",                    {-2867.80, 277.40, -9.10, -2593.40, 458.40, 200.00}},
		{!"Come-A-Lot",                   {2087.30, 943.20, -89.00, 2623.10, 1203.20, 110.90}},
		{!"Commerce",                     {1323.90, -1842.20, -89.00, 1701.90, -1722.20, 110.90}},
		{!"Commerce",                     {1323.90, -1722.20, -89.00, 1440.90, -1577.50, 110.90}},
		{!"Commerce",                     {1370.80, -1577.50, -89.00, 1463.90, -1384.90, 110.90}},
		{!"Commerce",                     {1463.90, -1577.50, -89.00, 1667.90, -1430.80, 110.90}},
		{!"Commerce",                     {1583.50, -1722.20, -89.00, 1758.90, -1577.50, 110.90}},
		{!"Commerce",                     {1667.90, -1577.50, -89.00, 1812.60, -1430.80, 110.90}},
		{!"Conference Center",            {1046.10, -1804.20, -89.00, 1323.90, -1722.20, 110.90}},
		{!"Conference Center",            {1073.20, -1842.20, -89.00, 1323.90, -1804.20, 110.90}},
		{!"Cranberry Station",            {-2007.80, 56.30, 0.00, -1922.00, 224.70, 100.00}},
		{!"Creek",                        {2749.90, 1937.20, -89.00, 2921.60, 2669.70, 110.90}},
		{!"Dillimore",                    {580.70, -674.80, -9.50, 861.00, -404.70, 200.00}},
		{!"Doherty",                      {-2270.00, -324.10, -0.00, -1794.90, -222.50, 200.00}},
		{!"Doherty",                      {-2173.00, -222.50, -0.00, -1794.90, 265.20, 200.00}},
		{!"Downtown",                     {-1982.30, 744.10, -6.10, -1871.70, 1274.20, 200.00}},
		{!"Downtown",                     {-1871.70, 1176.40, -4.50, -1620.30, 1274.20, 200.00}},
		{!"Downtown",                     {-1700.00, 744.20, -6.10, -1580.00, 1176.50, 200.00}},
		{!"Downtown",                     {-1580.00, 744.20, -6.10, -1499.80, 1025.90, 200.00}},
		{!"Downtown",                     {-2078.60, 578.30, -7.60, -1499.80, 744.20, 200.00}},
		{!"Downtown",                     {-1993.20, 265.20, -9.10, -1794.90, 578.30, 200.00}},
		{!"Downtown Los Santos",          {1463.90, -1430.80, -89.00, 1724.70, -1290.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1430.80, -89.00, 1812.60, -1250.90, 110.90}},
		{!"Downtown Los Santos",          {1463.90, -1290.80, -89.00, 1724.70, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1384.90, -89.00, 1463.90, -1170.80, 110.90}},
		{!"Downtown Los Santos",          {1724.70, -1250.90, -89.00, 1812.60, -1150.80, 110.90}},
		{!"Downtown Los Santos",          {1370.80, -1170.80, -89.00, 1463.90, -1130.80, 110.90}},
		{!"Downtown Los Santos",          {1378.30, -1130.80, -89.00, 1463.90, -1026.30, 110.90}},
		{!"Downtown Los Santos",          {1391.00, -1026.30, -89.00, 1463.90, -926.90, 110.90}},
		{!"Downtown Los Santos",          {1507.50, -1385.20, 110.90, 1582.50, -1325.30, 335.90}},
		{!"East Beach",                   {2632.80, -1852.80, -89.00, 2959.30, -1668.10, 110.90}},
		{!"East Beach",                   {2632.80, -1668.10, -89.00, 2747.70, -1393.40, 110.90}},
		{!"East Beach",                   {2747.70, -1668.10, -89.00, 2959.30, -1498.60, 110.90}},
		{!"East Beach",                   {2747.70, -1498.60, -89.00, 2959.30, -1120.00, 110.90}},
		{!"East Los Santos",              {2421.00, -1628.50, -89.00, 2632.80, -1454.30, 110.90}},
		{!"East Los Santos",              {2222.50, -1628.50, -89.00, 2421.00, -1494.00, 110.90}},
		{!"East Los Santos",              {2266.20, -1494.00, -89.00, 2381.60, -1372.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1494.00, -89.00, 2421.00, -1454.30, 110.90}},
		{!"East Los Santos",              {2281.40, -1372.00, -89.00, 2381.60, -1135.00, 110.90}},
		{!"East Los Santos",              {2381.60, -1454.30, -89.00, 2462.10, -1135.00, 110.90}},
		{!"East Los Santos",              {2462.10, -1454.30, -89.00, 2581.70, -1135.00, 110.90}},
		{!"Easter Basin",                 {-1794.90, 249.90, -9.10, -1242.90, 578.30, 200.00}},
		{!"Easter Basin",                 {-1794.90, -50.00, -0.00, -1499.80, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1499.80, -50.00, -0.00, -1242.90, 249.90, 200.00}},
		{!"Easter Bay Airport",           {-1794.90, -730.10, -3.00, -1213.90, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -730.10, 0.00, -1132.80, -50.00, 200.00}},
		{!"Easter Bay Airport",           {-1242.90, -50.00, 0.00, -1213.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1213.90, -50.00, -4.50, -947.90, 578.30, 200.00}},
		{!"Easter Bay Airport",           {-1315.40, -405.30, 15.40, -1264.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1354.30, -287.30, 15.40, -1315.40, -209.50, 25.40}},
		{!"Easter Bay Airport",           {-1490.30, -209.50, 15.40, -1264.40, -148.30, 25.40}},
		{!"Easter Bay Chemicals",         {-1132.80, -768.00, 0.00, -956.40, -578.10, 200.00}},
		{!"Easter Bay Chemicals",         {-1132.80, -787.30, 0.00, -956.40, -768.00, 200.00}},
		{!"El Castillo del Diablo",       {-464.50, 2217.60, 0.00, -208.50, 2580.30, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2123.00, -7.60, 114.00, 2337.10, 200.00}},
		{!"El Castillo del Diablo",       {-208.50, 2337.10, 0.00, 8.40, 2487.10, 200.00}},
		{!"El Corona",                    {1812.60, -2179.20, -89.00, 1970.60, -1852.80, 110.90}},
		{!"El Corona",                    {1692.60, -2179.20, -89.00, 1812.60, -1842.20, 110.90}},
		{!"El Quebrados",                 {-1645.20, 2498.50, 0.00, -1372.10, 2777.80, 200.00}},
		{!"Esplanade East",               {-1620.30, 1176.50, -4.50, -1580.00, 1274.20, 200.00}},
		{!"Esplanade East",               {-1580.00, 1025.90, -6.10, -1499.80, 1274.20, 200.00}},
		{!"Esplanade East",               {-1499.80, 578.30, -79.60, -1339.80, 1274.20, 20.30}},
		{!"Esplanade North",              {-2533.00, 1358.90, -4.50, -1996.60, 1501.20, 200.00}},
		{!"Esplanade North",              {-1996.60, 1358.90, -4.50, -1524.20, 1592.50, 200.00}},
		{!"Esplanade North",              {-1982.30, 1274.20, -4.50, -1524.20, 1358.90, 200.00}},
		{!"Fallen Tree",                  {-792.20, -698.50, -5.30, -452.40, -380.00, 200.00}},
		{!"Fallow Bridge",                {434.30, 366.50, 0.00, 603.00, 555.60, 200.00}},
		{!"Fern Ridge",                   {508.10, -139.20, 0.00, 1306.60, 119.50, 200.00}},
		{!"Financial",                    {-1871.70, 744.10, -6.10, -1701.30, 1176.40, 300.00}},
		{!"Fisher's Lagoon",              {1916.90, -233.30, -100.00, 2131.70, 13.80, 200.00}},
		{!"Flint Intersection",           {-187.70, -1596.70, -89.00, 17.00, -1276.60, 110.90}},
		{!"Flint Range",                  {-594.10, -1648.50, 0.00, -187.70, -1276.60, 200.00}},
		{!"Fort Carson",                  {-376.20, 826.30, -3.00, 123.70, 1220.40, 200.00}},
		{!"Foster Valley",                {-2270.00, -430.20, -0.00, -2178.60, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -599.80, -0.00, -1794.90, -324.10, 200.00}},
		{!"Foster Valley",                {-2178.60, -1115.50, 0.00, -1794.90, -599.80, 200.00}},
		{!"Foster Valley",                {-2178.60, -1250.90, 0.00, -1794.90, -1115.50, 200.00}},
		{!"Frederick Bridge",             {2759.20, 296.50, 0.00, 2774.20, 594.70, 200.00}},
		{!"Gant Bridge",                  {-2741.40, 1659.60, -6.10, -2616.40, 2175.10, 200.00}},
		{!"Gant Bridge",                  {-2741.00, 1490.40, -6.10, -2616.40, 1659.60, 200.00}},
		{!"Ganton",                       {2222.50, -1852.80, -89.00, 2632.80, -1722.30, 110.90}},
		{!"Ganton",                       {2222.50, -1722.30, -89.00, 2632.80, -1628.50, 110.90}},
		{!"Garcia",                       {-2411.20, -222.50, -0.00, -2173.00, 265.20, 200.00}},
		{!"Garcia",                       {-2395.10, -222.50, -5.30, -2354.00, -204.70, 200.00}},
		{!"Garver Bridge",                {-1339.80, 828.10, -89.00, -1213.90, 1057.00, 110.90}},
		{!"Garver Bridge",                {-1213.90, 950.00, -89.00, -1087.90, 1178.90, 110.90}},
		{!"Garver Bridge",                {-1499.80, 696.40, -179.60, -1339.80, 925.30, 20.30}},
		{!"Glen Park",                    {1812.60, -1449.60, -89.00, 1996.90, -1350.70, 110.90}},
		{!"Glen Park",                    {1812.60, -1100.80, -89.00, 1994.30, -973.30, 110.90}},
		{!"Glen Park",                    {1812.60, -1350.70, -89.00, 2056.80, -1100.80, 110.90}},
		{!"Green Palms",                  {176.50, 1305.40, -3.00, 338.60, 1520.70, 200.00}},
		{!"Greenglass College",           {964.30, 1044.60, -89.00, 1197.30, 1203.20, 110.90}},
		{!"Greenglass College",           {964.30, 930.80, -89.00, 1166.50, 1044.60, 110.90}},
		{!"Hampton Barns",                {603.00, 264.30, 0.00, 761.90, 366.50, 200.00}},
		{!"Hankypanky Point",             {2576.90, 62.10, 0.00, 2759.20, 385.50, 200.00}},
		{!"Harry Gold Parkway",           {1777.30, 863.20, -89.00, 1817.30, 2342.80, 110.90}},
		{!"Hashbury",                     {-2593.40, -222.50, -0.00, -2411.20, 54.70, 200.00}},
		{!"Hilltop Farm",                 {967.30, -450.30, -3.00, 1176.70, -217.90, 200.00}},
		{!"Hunter Quarry",                {337.20, 710.80, -115.20, 860.50, 1031.70, 203.70}},
		{!"Idlewood",                     {1812.60, -1852.80, -89.00, 1971.60, -1742.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1742.30, -89.00, 1951.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1951.60, -1742.30, -89.00, 2124.60, -1602.30, 110.90}},
		{!"Idlewood",                     {1812.60, -1602.30, -89.00, 2124.60, -1449.60, 110.90}},
		{!"Idlewood",                     {2124.60, -1742.30, -89.00, 2222.50, -1494.00, 110.90}},
		{!"Idlewood",                     {1971.60, -1852.80, -89.00, 2222.50, -1742.30, 110.90}},
		{!"Jefferson",                    {1996.90, -1449.60, -89.00, 2056.80, -1350.70, 110.90}},
		{!"Jefferson",                    {2124.60, -1494.00, -89.00, 2266.20, -1449.60, 110.90}},
		{!"Jefferson",                    {2056.80, -1372.00, -89.00, 2281.40, -1210.70, 110.90}},
		{!"Jefferson",                    {2056.80, -1210.70, -89.00, 2185.30, -1126.30, 110.90}},
		{!"Jefferson",                    {2185.30, -1210.70, -89.00, 2281.40, -1154.50, 110.90}},
		{!"Jefferson",                    {2056.80, -1449.60, -89.00, 2266.20, -1372.00, 110.90}},
		{!"Julius Thruway East",          {2623.10, 943.20, -89.00, 2749.90, 1055.90, 110.90}},
		{!"Julius Thruway East",          {2685.10, 1055.90, -89.00, 2749.90, 2626.50, 110.90}},
		{!"Julius Thruway East",          {2536.40, 2442.50, -89.00, 2685.10, 2542.50, 110.90}},
		{!"Julius Thruway East",          {2625.10, 2202.70, -89.00, 2685.10, 2442.50, 110.90}},
		{!"Julius Thruway North",         {2498.20, 2542.50, -89.00, 2685.10, 2626.50, 110.90}},
		{!"Julius Thruway North",         {2237.40, 2542.50, -89.00, 2498.20, 2663.10, 110.90}},
		{!"Julius Thruway North",         {2121.40, 2508.20, -89.00, 2237.40, 2663.10, 110.90}},
		{!"Julius Thruway North",         {1938.80, 2508.20, -89.00, 2121.40, 2624.20, 110.90}},
		{!"Julius Thruway North",         {1534.50, 2433.20, -89.00, 1848.40, 2583.20, 110.90}},
		{!"Julius Thruway North",         {1848.40, 2478.40, -89.00, 1938.80, 2553.40, 110.90}},
		{!"Julius Thruway North",         {1704.50, 2342.80, -89.00, 1848.40, 2433.20, 110.90}},
		{!"Julius Thruway North",         {1377.30, 2433.20, -89.00, 1534.50, 2507.20, 110.90}},
		{!"Julius Thruway South",         {1457.30, 823.20, -89.00, 2377.30, 863.20, 110.90}},
		{!"Julius Thruway South",         {2377.30, 788.80, -89.00, 2537.30, 897.90, 110.90}},
		{!"Julius Thruway West",          {1197.30, 1163.30, -89.00, 1236.60, 2243.20, 110.90}},
		{!"Julius Thruway West",          {1236.60, 2142.80, -89.00, 1297.40, 2243.20, 110.90}},
		{!"Juniper Hill",                 {-2533.00, 578.30, -7.60, -2274.10, 968.30, 200.00}},
		{!"Juniper Hollow",               {-2533.00, 968.30, -6.10, -2274.10, 1358.90, 200.00}},
		{!"K.A.C.C. Military Fuels",      {2498.20, 2626.50, -89.00, 2749.90, 2861.50, 110.90}},
		{!"Kincaid Bridge",               {-1339.80, 599.20, -89.00, -1213.90, 828.10, 110.90}},
		{!"Kincaid Bridge",               {-1213.90, 721.10, -89.00, -1087.90, 950.00, 110.90}},
		{!"Kincaid Bridge",               {-1087.90, 855.30, -89.00, -961.90, 986.20, 110.90}},
		{!"King's",                       {-2329.30, 458.40, -7.60, -1993.20, 578.30, 200.00}},
		{!"King's",                       {-2411.20, 265.20, -9.10, -1993.20, 373.50, 200.00}},
		{!"King's",                       {-2253.50, 373.50, -9.10, -1993.20, 458.40, 200.00}},
		{!"LVA Freight Depot",            {1457.30, 863.20, -89.00, 1777.40, 1143.20, 110.90}},
		{!"LVA Freight Depot",            {1375.60, 919.40, -89.00, 1457.30, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1277.00, 1087.60, -89.00, 1375.60, 1203.20, 110.90}},
		{!"LVA Freight Depot",            {1315.30, 1044.60, -89.00, 1375.60, 1087.60, 110.90}},
		{!"LVA Freight Depot",            {1236.60, 1163.40, -89.00, 1277.00, 1203.20, 110.90}},
		{!"Las Barrancas",                {-926.10, 1398.70, -3.00, -719.20, 1634.60, 200.00}},
		{!"Las Brujas",                   {-365.10, 2123.00, -3.00, -208.50, 2217.60, 200.00}},
		{!"Las Colinas",                  {1994.30, -1100.80, -89.00, 2056.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2056.80, -1126.30, -89.00, 2126.80, -920.80, 110.90}},
		{!"Las Colinas",                  {2185.30, -1154.50, -89.00, 2281.40, -934.40, 110.90}},
		{!"Las Colinas",                  {2126.80, -1126.30, -89.00, 2185.30, -934.40, 110.90}},
		{!"Las Colinas",                  {2747.70, -1120.00, -89.00, 2959.30, -945.00, 110.90}},
		{!"Las Colinas",                  {2632.70, -1135.00, -89.00, 2747.70, -945.00, 110.90}},
		{!"Las Colinas",                  {2281.40, -1135.00, -89.00, 2632.70, -945.00, 110.90}},
		{!"Las Payasadas",                {-354.30, 2580.30, 2.00, -133.60, 2816.80, 200.00}},
		{!"Las Venturas Airport",         {1236.60, 1203.20, -89.00, 1457.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1203.20, -89.00, 1777.30, 1883.10, 110.90}},
		{!"Las Venturas Airport",         {1457.30, 1143.20, -89.00, 1777.40, 1203.20, 110.90}},
		{!"Las Venturas Airport",         {1515.80, 1586.40, -12.50, 1729.90, 1714.50, 87.50}},
		{!"Last Dime Motel",              {1823.00, 596.30, -89.00, 1997.20, 823.20, 110.90}},
		{!"Leafy Hollow",                 {-1166.90, -1856.00, 0.00, -815.60, -1602.00, 200.00}},
		{!"Liberty City",                 {-1000.00, 400.00, 1300.00, -700.00, 600.00, 1400.00}},
		{!"Lil' Probe Inn",               {-90.20, 1286.80, -3.00, 153.80, 1554.10, 200.00}},
		{!"Linden Side",                  {2749.90, 943.20, -89.00, 2923.30, 1198.90, 110.90}},
		{!"Linden Station",               {2749.90, 1198.90, -89.00, 2923.30, 1548.90, 110.90}},
		{!"Linden Station",               {2811.20, 1229.50, -39.50, 2861.20, 1407.50, 60.40}},
		{!"Little Mexico",                {1701.90, -1842.20, -89.00, 1812.60, -1722.20, 110.90}},
		{!"Little Mexico",                {1758.90, -1722.20, -89.00, 1812.60, -1577.50, 110.90}},
		{!"Los Flores",                   {2581.70, -1454.30, -89.00, 2632.80, -1393.40, 110.90}},
		{!"Los Flores",                   {2581.70, -1393.40, -89.00, 2747.70, -1135.00, 110.90}},
		{!"Los Santos International",     {1249.60, -2394.30, -89.00, 1852.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1852.00, -2394.30, -89.00, 2089.00, -2179.20, 110.90}},
		{!"Los Santos International",     {1382.70, -2730.80, -89.00, 2201.80, -2394.30, 110.90}},
		{!"Los Santos International",     {1974.60, -2394.30, -39.00, 2089.00, -2256.50, 60.90}},
		{!"Los Santos International",     {1400.90, -2669.20, -39.00, 2189.80, -2597.20, 60.90}},
		{!"Los Santos International",     {2051.60, -2597.20, -39.00, 2152.40, -2394.30, 60.90}},
		{!"Marina",                       {647.70, -1804.20, -89.00, 851.40, -1577.50, 110.90}},
		{!"Marina",                       {647.70, -1577.50, -89.00, 807.90, -1416.20, 110.90}},
		{!"Marina",                       {807.90, -1577.50, -89.00, 926.90, -1416.20, 110.90}},
		{!"Market",                       {787.40, -1416.20, -89.00, 1072.60, -1310.20, 110.90}},
		{!"Market",                       {952.60, -1310.20, -89.00, 1072.60, -1130.80, 110.90}},
		{!"Market",                       {1072.60, -1416.20, -89.00, 1370.80, -1130.80, 110.90}},
		{!"Market",                       {926.90, -1577.50, -89.00, 1370.80, -1416.20, 110.90}},
		{!"Market Station",               {787.40, -1410.90, -34.10, 866.00, -1310.20, 65.80}},
		{!"Martin Bridge",                {-222.10, 293.30, 0.00, -122.10, 476.40, 200.00}},
		{!"Missionary Hill",              {-2994.40, -811.20, 0.00, -2178.60, -430.20, 200.00}},
		{!"Montgomery",                   {1119.50, 119.50, -3.00, 1451.40, 493.30, 200.00}},
		{!"Montgomery",                   {1451.40, 347.40, -6.10, 1582.40, 420.80, 200.00}},
		{!"Montgomery Intersection",      {1546.60, 208.10, 0.00, 1745.80, 347.40, 200.00}},
		{!"Montgomery Intersection",      {1582.40, 347.40, 0.00, 1664.60, 401.70, 200.00}},
		{!"Mulholland",                   {1414.00, -768.00, -89.00, 1667.60, -452.40, 110.90}},
		{!"Mulholland",                   {1281.10, -452.40, -89.00, 1641.10, -290.90, 110.90}},
		{!"Mulholland",                   {1269.10, -768.00, -89.00, 1414.00, -452.40, 110.90}},
		{!"Mulholland",                   {1357.00, -926.90, -89.00, 1463.90, -768.00, 110.90}},
		{!"Mulholland",                   {1318.10, -910.10, -89.00, 1357.00, -768.00, 110.90}},
		{!"Mulholland",                   {1169.10, -910.10, -89.00, 1318.10, -768.00, 110.90}},
		{!"Mulholland",                   {768.60, -954.60, -89.00, 952.60, -860.60, 110.90}},
		{!"Mulholland",                   {687.80, -860.60, -89.00, 911.80, -768.00, 110.90}},
		{!"Mulholland",                   {737.50, -768.00, -89.00, 1142.20, -674.80, 110.90}},
		{!"Mulholland",                   {1096.40, -910.10, -89.00, 1169.10, -768.00, 110.90}},
		{!"Mulholland",                   {952.60, -937.10, -89.00, 1096.40, -860.60, 110.90}},
		{!"Mulholland",                   {911.80, -860.60, -89.00, 1096.40, -768.00, 110.90}},
		{!"Mulholland",                   {861.00, -674.80, -89.00, 1156.50, -600.80, 110.90}},
		{!"Mulholland Intersection",      {1463.90, -1150.80, -89.00, 1812.60, -768.00, 110.90}},
		{!"North Rock",                   {2285.30, -768.00, 0.00, 2770.50, -269.70, 200.00}},
		{!"Ocean Docks",                  {2373.70, -2697.00, -89.00, 2809.20, -2330.40, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2418.30, -89.00, 2324.00, -2095.00, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2302.30, -89.00, 2703.50, -2145.10, 110.90}},
		{!"Ocean Docks",                  {2089.00, -2394.30, -89.00, 2201.80, -2235.80, 110.90}},
		{!"Ocean Docks",                  {2201.80, -2730.80, -89.00, 2324.00, -2418.30, 110.90}},
		{!"Ocean Docks",                  {2703.50, -2302.30, -89.00, 2959.30, -2126.90, 110.90}},
		{!"Ocean Docks",                  {2324.00, -2145.10, -89.00, 2703.50, -2059.20, 110.90}},
		{!"Ocean Flats",                  {-2994.40, 277.40, -9.10, -2867.80, 458.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -222.50, -0.00, -2593.40, 277.40, 200.00}},
		{!"Ocean Flats",                  {-2994.40, -430.20, -0.00, -2831.80, -222.50, 200.00}},
		{!"Octane Springs",               {338.60, 1228.50, 0.00, 664.30, 1655.00, 200.00}},
		{!"Old Venturas Strip",           {2162.30, 2012.10, -89.00, 2685.10, 2202.70, 110.90}},
		{!"Palisades",                    {-2994.40, 458.40, -6.10, -2741.00, 1339.60, 200.00}},
		{!"Palomino Creek",               {2160.20, -149.00, 0.00, 2576.90, 228.30, 200.00}},
		{!"Paradiso",                     {-2741.00, 793.40, -6.10, -2533.00, 1268.40, 200.00}},
		{!"Pershing Square",              {1440.90, -1722.20, -89.00, 1583.50, -1577.50, 110.90}},
		{!"Pilgrim",                      {2437.30, 1383.20, -89.00, 2624.40, 1783.20, 110.90}},
		{!"Pilgrim",                      {2624.40, 1383.20, -89.00, 2685.10, 1783.20, 110.90}},
		{!"Pilson Intersection",          {1098.30, 2243.20, -89.00, 1377.30, 2507.20, 110.90}},
		{!"Pirates in Men's Pants",       {1817.30, 1469.20, -89.00, 2027.40, 1703.20, 110.90}},
		{!"Playa del Seville",            {2703.50, -2126.90, -89.00, 2959.30, -1852.80, 110.90}},
		{!"Prickle Pine",                 {1534.50, 2583.20, -89.00, 1848.40, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1117.40, 2507.20, -89.00, 1534.50, 2723.20, 110.90}},
		{!"Prickle Pine",                 {1848.40, 2553.40, -89.00, 1938.80, 2863.20, 110.90}},
		{!"Prickle Pine",                 {1938.80, 2624.20, -89.00, 2121.40, 2861.50, 110.90}},
		{!"Queens",                       {-2533.00, 458.40, 0.00, -2329.30, 578.30, 200.00}},
		{!"Queens",                       {-2593.40, 54.70, 0.00, -2411.20, 458.40, 200.00}},
		{!"Queens",                       {-2411.20, 373.50, 0.00, -2253.50, 458.40, 200.00}},
		{!"Randolph Industrial Estate",   {1558.00, 596.30, -89.00, 1823.00, 823.20, 110.90}},
		{!"Redsands East",                {1817.30, 2011.80, -89.00, 2106.70, 2202.70, 110.90}},
		{!"Redsands East",                {1817.30, 2202.70, -89.00, 2011.90, 2342.80, 110.90}},
		{!"Redsands East",                {1848.40, 2342.80, -89.00, 2011.90, 2478.40, 110.90}},
		{!"Redsands West",                {1236.60, 1883.10, -89.00, 1777.30, 2142.80, 110.90}},
		{!"Redsands West",                {1297.40, 2142.80, -89.00, 1777.30, 2243.20, 110.90}},
		{!"Redsands West",                {1377.30, 2243.20, -89.00, 1704.50, 2433.20, 110.90}},
		{!"Redsands West",                {1704.50, 2243.20, -89.00, 1777.30, 2342.80, 110.90}},
		{!"Regular Tom",                  {-405.70, 1712.80, -3.00, -276.70, 1892.70, 200.00}},
		{!"Richman",                      {647.50, -1118.20, -89.00, 787.40, -954.60, 110.90}},
		{!"Richman",                      {647.50, -954.60, -89.00, 768.60, -860.60, 110.90}},
		{!"Richman",                      {225.10, -1369.60, -89.00, 334.50, -1292.00, 110.90}},
		{!"Richman",                      {225.10, -1292.00, -89.00, 466.20, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1404.90, -89.00, 225.10, -1235.00, 110.90}},
		{!"Richman",                      {72.60, -1235.00, -89.00, 321.30, -1008.10, 110.90}},
		{!"Richman",                      {321.30, -1235.00, -89.00, 647.50, -1044.00, 110.90}},
		{!"Richman",                      {321.30, -1044.00, -89.00, 647.50, -860.60, 110.90}},
		{!"Richman",                      {321.30, -860.60, -89.00, 687.80, -768.00, 110.90}},
		{!"Richman",                      {321.30, -768.00, -89.00, 700.70, -674.80, 110.90}},
		{!"Robada Intersection",          {-1119.00, 1178.90, -89.00, -862.00, 1351.40, 110.90}},
		{!"Roca Escalante",               {2237.40, 2202.70, -89.00, 2536.40, 2542.50, 110.90}},
		{!"Roca Escalante",               {2536.40, 2202.70, -89.00, 2625.10, 2442.50, 110.90}},
		{!"Rockshore East",               {2537.30, 676.50, -89.00, 2902.30, 943.20, 110.90}},
		{!"Rockshore West",               {1997.20, 596.30, -89.00, 2377.30, 823.20, 110.90}},
		{!"Rockshore West",               {2377.30, 596.30, -89.00, 2537.30, 788.80, 110.90}},
		{!"Rodeo",                        {72.60, -1684.60, -89.00, 225.10, -1544.10, 110.90}},
		{!"Rodeo",                        {72.60, -1544.10, -89.00, 225.10, -1404.90, 110.90}},
		{!"Rodeo",                        {225.10, -1684.60, -89.00, 312.80, -1501.90, 110.90}},
		{!"Rodeo",                        {225.10, -1501.90, -89.00, 334.50, -1369.60, 110.90}},
		{!"Rodeo",                        {334.50, -1501.90, -89.00, 422.60, -1406.00, 110.90}},
		{!"Rodeo",                        {312.80, -1684.60, -89.00, 422.60, -1501.90, 110.90}},
		{!"Rodeo",                        {422.60, -1684.60, -89.00, 558.00, -1570.20, 110.90}},
		{!"Rodeo",                        {558.00, -1684.60, -89.00, 647.50, -1384.90, 110.90}},
		{!"Rodeo",                        {466.20, -1570.20, -89.00, 558.00, -1385.00, 110.90}},
		{!"Rodeo",                        {422.60, -1570.20, -89.00, 466.20, -1406.00, 110.90}},
		{!"Rodeo",                        {466.20, -1385.00, -89.00, 647.50, -1235.00, 110.90}},
		{!"Rodeo",                        {334.50, -1406.00, -89.00, 466.20, -1292.00, 110.90}},
		{!"Royal Casino",                 {2087.30, 1383.20, -89.00, 2437.30, 1543.20, 110.90}},
		{!"San Andreas Sound",            {2450.30, 385.50, -100.00, 2759.20, 562.30, 200.00}},
		{!"Santa Flora",                  {-2741.00, 458.40, -7.60, -2533.00, 793.40, 200.00}},
		{!"Santa Maria Beach",            {342.60, -2173.20, -89.00, 647.70, -1684.60, 110.90}},
		{!"Santa Maria Beach",            {72.60, -2173.20, -89.00, 342.60, -1684.60, 110.90}},
		{!"Shady Cabin",                  {-1632.80, -2263.40, -3.00, -1601.30, -2231.70, 200.00}},
		{!"Shady Creeks",                 {-1820.60, -2643.60, -8.00, -1226.70, -1771.60, 200.00}},
		{!"Shady Creeks",                 {-2030.10, -2174.80, -6.10, -1820.60, -1771.60, 200.00}},
		{!"Sobell Rail Yards",            {2749.90, 1548.90, -89.00, 2923.30, 1937.20, 110.90}},
		{!"Spinybed",                     {2121.40, 2663.10, -89.00, 2498.20, 2861.50, 110.90}},
		{!"Starfish Casino",              {2437.30, 1783.20, -89.00, 2685.10, 2012.10, 110.90}},
		{!"Starfish Casino",              {2437.30, 1858.10, -39.00, 2495.00, 1970.80, 60.90}},
		{!"Starfish Casino",              {2162.30, 1883.20, -89.00, 2437.30, 2012.10, 110.90}},
		{!"Temple",                       {1252.30, -1130.80, -89.00, 1378.30, -1026.30, 110.90}},
		{!"Temple",                       {1252.30, -1026.30, -89.00, 1391.00, -926.90, 110.90}},
		{!"Temple",                       {1252.30, -926.90, -89.00, 1357.00, -910.10, 110.90}},
		{!"Temple",                       {952.60, -1130.80, -89.00, 1096.40, -937.10, 110.90}},
		{!"Temple",                       {1096.40, -1130.80, -89.00, 1252.30, -1026.30, 110.90}},
		{!"Temple",                       {1096.40, -1026.30, -89.00, 1252.30, -910.10, 110.90}},
		{!"The Camel's Toe",              {2087.30, 1203.20, -89.00, 2640.40, 1383.20, 110.90}},
		{!"The Clown's Pocket",           {2162.30, 1783.20, -89.00, 2437.30, 1883.20, 110.90}},
		{!"The Emerald Isle",             {2011.90, 2202.70, -89.00, 2237.40, 2508.20, 110.90}},
		{!"The Farm",                     {-1209.60, -1317.10, 114.90, -908.10, -787.30, 251.90}},
		{!"The Four Dragons Casino",      {1817.30, 863.20, -89.00, 2027.30, 1083.20, 110.90}},
		{!"The High Roller",              {1817.30, 1283.20, -89.00, 2027.30, 1469.20, 110.90}},
		{!"The Mako Span",                {1664.60, 401.70, 0.00, 1785.10, 567.20, 200.00}},
		{!"The Panopticon",               {-947.90, -304.30, -1.10, -319.60, 327.00, 200.00}},
		{!"The Pink Swan",                {1817.30, 1083.20, -89.00, 2027.30, 1283.20, 110.90}},
		{!"The Sherman Dam",              {-968.70, 1929.40, -3.00, -481.10, 2155.20, 200.00}},
		{!"The Strip",                    {2027.40, 863.20, -89.00, 2087.30, 1703.20, 110.90}},
		{!"The Strip",                    {2106.70, 1863.20, -89.00, 2162.30, 2202.70, 110.90}},
		{!"The Strip",                    {2027.40, 1783.20, -89.00, 2162.30, 1863.20, 110.90}},
		{!"The Strip",                    {2027.40, 1703.20, -89.00, 2137.40, 1783.20, 110.90}},
		{!"The Visage",                   {1817.30, 1863.20, -89.00, 2106.70, 2011.80, 110.90}},
		{!"The Visage",                   {1817.30, 1703.20, -89.00, 2027.40, 1863.20, 110.90}},
		{!"Unity Station",                {1692.60, -1971.80, -20.40, 1812.60, -1932.80, 79.50}},
		{!"Valle Ocultado",               {-936.60, 2611.40, 2.00, -715.90, 2847.90, 200.00}},
		{!"Verdant Bluffs",               {930.20, -2488.40, -89.00, 1249.60, -2006.70, 110.90}},
		{!"Verdant Bluffs",               {1073.20, -2006.70, -89.00, 1249.60, -1842.20, 110.90}},
		{!"Verdant Bluffs",               {1249.60, -2179.20, -89.00, 1692.60, -1842.20, 110.90}},
		{!"Verdant Meadows",              {37.00, 2337.10, -3.00, 435.90, 2677.90, 200.00}},
		{!"Verona Beach",                 {647.70, -2173.20, -89.00, 930.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {930.20, -2006.70, -89.00, 1073.20, -1804.20, 110.90}},
		{!"Verona Beach",                 {851.40, -1804.20, -89.00, 1046.10, -1577.50, 110.90}},
		{!"Verona Beach",                 {1161.50, -1722.20, -89.00, 1323.90, -1577.50, 110.90}},
		{!"Verona Beach",                 {1046.10, -1722.20, -89.00, 1161.50, -1577.50, 110.90}},
		{!"Vinewood",                     {787.40, -1310.20, -89.00, 952.60, -1130.80, 110.90}},
		{!"Vinewood",                     {787.40, -1130.80, -89.00, 952.60, -954.60, 110.90}},
		{!"Vinewood",                     {647.50, -1227.20, -89.00, 787.40, -1118.20, 110.90}},
		{!"Vinewood",                     {647.70, -1416.20, -89.00, 787.40, -1227.20, 110.90}},
		{!"Whitewood Estates",            {883.30, 1726.20, -89.00, 1098.30, 2507.20, 110.90}},
		{!"Whitewood Estates",            {1098.30, 1726.20, -89.00, 1197.30, 2243.20, 110.90}},
		{!"Willowfield",                  {1970.60, -2179.20, -89.00, 2089.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2089.00, -2235.80, -89.00, 2201.80, -1989.90, 110.90}},
		{!"Willowfield",                  {2089.00, -1989.90, -89.00, 2324.00, -1852.80, 110.90}},
		{!"Willowfield",                  {2201.80, -2095.00, -89.00, 2324.00, -1989.90, 110.90}},
		{!"Willowfield",                  {2541.70, -1941.40, -89.00, 2703.50, -1852.80, 110.90}},
		{!"Willowfield",                  {2324.00, -2059.20, -89.00, 2541.70, -1852.80, 110.90}},
		{!"Willowfield",                  {2541.70, -2059.20, -89.00, 2703.50, -1941.40, 110.90}},
		{!"Yellow Bell Station",          {1377.40, 2600.40, -21.90, 1492.40, 2687.30, 78.00}},
		{!"Los Santos",                   {44.60, -2892.90, -242.90, 2997.00, -768.00, 900.00}},
		{!"Las Venturas",                 {869.40, 596.30, -242.90, 2997.00, 2993.80, 900.00}},
		{!"Bone County",                  {-480.50, 596.30, -242.90, 869.40, 2993.80, 900.00}},
		{!"Tierra Robada",                {-2997.40, 1659.60, -242.90, -480.50, 2993.80, 900.00}},
		{!"Tierra Robada",                {-1213.90, 596.30, -242.90, -480.50, 1659.60, 900.00}},
		{!"San Fierro",                   {-2997.40, -1115.50, -242.90, -1213.90, 1659.60, 900.00}},
		{!"Red County",                   {-1213.90, -768.00, -242.90, 2997.00, 596.30, 900.00}},
		{!"Flint County",                 {-1213.90, -2892.90, -242.90, 44.60, -768.00, 900.00}},
		{!"Whetstone",                    {-2997.40, -2892.90, -242.90, -1213.90, -1115.50, 900.00}}
	};
	new
	    name[32] = "San Andreas";

	for (new i = 0; i != sizeof(g_arrZoneData); i ++) if ((fX >= g_arrZoneData[i][e_ZoneArea][0] && fX <= g_arrZoneData[i][e_ZoneArea][3]) && (fY >= g_arrZoneData[i][e_ZoneArea][1] && fY <= g_arrZoneData[i][e_ZoneArea][4]) && (fZ >= g_arrZoneData[i][e_ZoneArea][2] && fZ <= g_arrZoneData[i][e_ZoneArea][5])) {
		strunpack(name, g_arrZoneData[i][e_ZoneName]);

		break;
	}
	return name;
}

stock Float:GetPlayerDistanceFromPlayer(playerid, targetid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);
	return GetPlayerDistanceFromPoint(playerid, x, y, z);
}

/*CREATE TABLE `detectors` (
	`detectorID` INT(12) AUTO_INCREMENT,
	`detectorX` FLOAT DEFAULT 0.0,
	`detectorY` FLOAT DEFAULT 0.0,
	`detectorZ` FLOAT DEFAULT 0.0,
	`detectorAngle` FLOAT DEFAULT 0.0,
	`detectorInterior` INT(12) DEFAULT 0,
	`detectorWorld` INT(12) DEFAULT 0,
	PRIMARY KEY(`detectorID`)
);*/

stock Detector_Delete(id)
{
    if (id != -1 && MetalDetectors[id][detectorExists])
	{
	    new
	        query[64];

	    DestroyDynamicObject(MetalDetectors[id][detectorObject][0]);
	    DestroyDynamicObject(MetalDetectors[id][detectorObject][1]);

		format(query, sizeof(query), "DELETE FROM `detectors` WHERE `detectorID` = '%d'", MetalDetectors[id][detectorID]);
		mysql_tquery(g_iHandle, query);

		MetalDetectors[id][detectorID] = 0;
		MetalDetectors[id][detectorExists] = 0;
	}
	return 1;
}

stock Detector_Refresh(id)
{
	if (id != -1 && MetalDetectors[id][detectorExists])
	{
	    MetalDetectors[id][detectorObject][0] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0], MetalDetectors[id][detectorPos][1], MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
		MetalDetectors[id][detectorObject][1] = CreateDynamicObject(2412, MetalDetectors[id][detectorPos][0] + (1.0 * floatsin(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][1] + (1.0 * floatcos(-(MetalDetectors[id][detectorPos][3] - 90), degrees)), MetalDetectors[id][detectorPos][2] - 0.9, 0.0, 0.0, MetalDetectors[id][detectorPos][3], MetalDetectors[id][detectorWorld], MetalDetectors[id][detectorInterior]);
	}
	return 1;
}

stock Detector_Nearest(playerid)
{
    for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if (MetalDetectors[i][detectorExists])
	{
	    if (IsPlayerInRangeOfPoint(playerid, 1.0, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]) && GetPlayerInterior(playerid) == MetalDetectors[i][detectorInterior] && GetPlayerVirtualWorld(playerid) == MetalDetectors[i][detectorWorld])
	        return i;
	}
	return -1;
}

stock IsPlayerArmed(playerid)
{
	new
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

		if (ammo > 0) {
			switch (weapon) {
			    case 1, 2, 4, 6, 8, 9, 15, 22..38: return 1;
			}
		}
	}
	return 0;
}

stock PlayerPlaySoundEx(playerid, sound)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 20.0, x, y, z)) {
	    PlayerPlaySound(i, sound, x, y, z);
	}
	return 1;
}

stock GetNearestPlayerInView(playerid, Float:distance = 2.0)
{
	new
	    Float:fAngle,
		Float:fPosX,
		Float:fPosY,
		Float:fPosZ;

	GetPlayerFacingAngle(playerid, fAngle);
	GetPlayerPos(playerid, fPosX, fPosY, fPosZ);

	fPosX += distance * floatsin(-fAngle, degrees);
	fPosY += distance * floatcos(-fAngle, degrees);

	foreach (new i : Player) if (IsPlayerInRangeOfPoint(i, 2.0, fPosX, fPosY, fPosZ)) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

stock CancelCall(playerid)
{
    if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
	{
 		PlayerData[PlayerData[playerid][pCallLine]][pCallLine] = INVALID_PLAYER_ID;
   		PlayerData[PlayerData[playerid][pCallLine]][pIncomingCall] = 0;

		PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
		PlayerData[playerid][pIncomingCall] = 0;
	}
	return 1;
}

stock PlayReloadAnimation(playerid, weaponid)
{
	switch (weaponid)
	{
	    case 22: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.0, 0, 0, 0, 0, 0);
		case 23: ApplyAnimation(playerid, "SILENCED", "Silence_reload", 4.0, 0, 0, 0, 0, 0);
		case 24: ApplyAnimation(playerid, "PYTHON", "python_reload", 4.0, 0, 0, 0, 0, 0);
		case 25, 27: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.0, 0, 0, 0, 0, 0);
		case 26: ApplyAnimation(playerid, "COLT45", "sawnoff_reload", 4.0, 0, 0, 0, 0, 0);
		case 29..31, 33, 34: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.0, 0, 0, 0, 0, 0);
		case 28, 32: ApplyAnimation(playerid, "TEC", "tec_reload", 4.0, 0, 0, 0, 0, 0);
	}
	return 1;
}

stock LeaveTaxi(playerid, driverid)
{
	if (driverid != INVALID_PLAYER_ID && IsPlayerConnected(driverid))
	{
	    GiveMoney(playerid, -PlayerData[playerid][pTaxiFee]);
   		GiveMoney(driverid, PlayerData[playerid][pTaxiFee]);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pagó %d al conductor del taxi.", ReturnName(playerid, 0), PlayerData[playerid][pTaxiFee]);

	    PlayerData[playerid][pTaxiFee] = 0;
	    PlayerData[playerid][pTaxiTime] = 0;
	    PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

stock IsFurnitureItem(item[])
{
    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (!strcmp(g_aFurnitureData[i][e_FurnitureName], item)) {
        return 1;
	}
	return 0;
}

stock GetFurnitureNameByModel(model)
{
	new
	    name[32];

	for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (g_aFurnitureData[i][e_FurnitureModel] == model) {
		strcat(name, g_aFurnitureData[i][e_FurnitureName]);

		break;
	}
	return name;
}

stock PlayerHasWeapon(playerid, weaponid)
{
	new
	    weapon,
	    ammo;

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] == weaponid) {
	    GetPlayerWeaponData(playerid, i, weapon, ammo);

	    if (weapon == weaponid && ammo > 0) return 1;
	}
	return 0;
}

stock IsPumpOccupied(pumpid)
{
	foreach (new i : Player) if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID) {
	    if (PlayerData[i][pGasPump] == pumpid) return 1;
	}
	return 0;
}

stock IsWheelModel(modelid)
{
    switch (modelid) {
		case 1025, 1073..1085, 1096..1098: return 1;
	}
    return 0;
}

stock IsNOSCompatible(modelid)
{
	switch (modelid) {
	    case 581, 523, 462, 521, 463, 522, 461, 448, 468, 586, 509, 481, 510, 472, 473, 493, 595, 484, 430, 453, 452, 446, 454, 590, 569, 537, 538, 570, 449: return 0;
	}
    return 1;
}

stock IsLegalComponent(modelid, componentid)
{
    if (IsWheelModel(componentid) || (1086 <= componentid <= 1087) || (componentid >= 1008 && componentid <= 1010))
	{
	    if (!IsNOSCompatible(modelid))
			return 1;
    }
	else
	{
	    for (new i = 0; i < sizeof(g_aLegalMods); i ++)
	    {
	        if (g_aLegalMods[i][0] != modelid)
				continue;

			else for (new l = 1; l < 22; l ++) if (g_aLegalMods[i][l] == componentid) {
			    return 1;
			}
		}
	}
	return 0;
}

ShowHungerTextdraw(playerid, enable)
{
	if (!enable) {
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][65]);
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][66]);

		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][63]);
		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][64]);
	}
	else if (PlayerData[playerid][pHUD] && PlayerData[playerid][pJailTime] < 1) {
	    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][65]);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][66]);

		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][63]);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][64]);
	}
	return 1;
}

SendPlayerToPlayer(playerid, targetid)
{
	new
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(targetid, x, y, z);

	if (IsPlayerInAnyVehicle(playerid))
	{
	    SetVehiclePos(GetPlayerVehicleID(playerid), x, y + 2, z);
		LinkVehicleToInterior(GetPlayerVehicleID(playerid), GetPlayerInterior(targetid));
	}
	else
		SetPlayerPos(playerid, x + 1, y, z);

	SetPlayerInterior(playerid, GetPlayerInterior(targetid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(targetid));

	PlayerData[playerid][pHouse] = PlayerData[targetid][pHouse];
	PlayerData[playerid][pBusiness] = PlayerData[targetid][pBusiness];
	PlayerData[playerid][pEntrance] = PlayerData[targetid][pEntrance];
	PlayerData[playerid][pHospitalInt]  = PlayerData[targetid][pHospitalInt];
}

StopRefilling(playerid)
{
    PlayerData[playerid][pGasPump] = -1;
    PlayerData[playerid][pGasStation] = -1;
   	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pRefillPrice] = 0;
}

SetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) if (PlayerData[playerid][pGuns][i] > 0 && PlayerData[playerid][pAmmo][i] > 0) {
	    GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
	}
	return 1;
}

SetAccessories(playerid)
{
    for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) {
	    RemovePlayerAttachedObject(playerid, i);
	}
	if (PlayerData[playerid][pToggleGlasses]) RemovePlayerAttachedObject(playerid, 0);
	else if (PlayerData[playerid][pGlasses] != 0) SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);

	if (PlayerData[playerid][pToggleHat]) RemovePlayerAttachedObject(playerid, 1);
	else if (PlayerData[playerid][pHat] != 0) SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);

    if (PlayerData[playerid][pToggleBandana]) RemovePlayerAttachedObject(playerid, 2);
	else if (PlayerData[playerid][pBandana] != 0) SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);

	if (Inventory_HasItem(playerid, "Backpack")) SetPlayerAttachedObject(playerid, 5, 3026, 1, -0.134207, -0.093048, 0.000000, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
	else RemovePlayerAttachedObject(playerid, 5);
}

SQL_LoadCharacter(playerid, characterid)
{
	if (characterid < 1 || characterid > 3)
		return 0;

	new
		query[160];

	format(query, sizeof(query), "UPDATE `characters` SET `LastLogin` = '%d' WHERE `Username` = '%s' AND `Character` = '%s'", gettime(), PlayerData[playerid][pUsername], PlayerCharacters[playerid][characterid - 1]);
	mysql_tquery(g_iHandle, query);

	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][characterid - 1]);
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_LOAD_CHARACTER);

	return 1;
}

ShowCharacterMenu(playerid)
{
	new str[32];

	if (PlayerData[playerid][pCharacter] != 0)
	{
	    PlayerData[playerid][pCharacter] = 0;

		for (new i = 0; i < 8; i ++) {
  			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		for (new i = 71; i < 81; i ++) {
  			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
	}
	for (new i = 0; i < 8; i ++)
	{
	    if (i < 3) {
	        format(str, sizeof(str), "%s", (!PlayerCharacters[playerid][i][0]) ? ("Slot Vacio") : (PlayerCharacters[playerid][i]));

			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][i + 5], str);
	    }
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	}
	SelectTextDraw(playerid, -1);
}

GetClosestGarbage(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_GARBAGE_BINS; i ++) if (GarbageData[i][garbageExists] && GarbageData[i][garbageCapacity] > 0 && GetPlayerInterior(playerid) == GarbageData[i][garbageInterior] && GetPlayerVirtualWorld(playerid) == GarbageData[i][garbageWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, GarbageData[i][garbagePos][0], GarbageData[i][garbagePos][1], GarbageData[i][garbagePos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestBusiness(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizType] == type && GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestEntrance(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceType] == type && GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestJobPoint(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestJob(playerid, type)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && JobData[i][jobType] == type && GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

GetClosestHospital(playerid)
{
	new
	    Float:fDistance[2] = {99999.0, 0.0},
	    iIndex = -1
	;
	for (new i = 0; i < sizeof(arrHospitalSpawns); i ++)
	{
		fDistance[1] = GetPlayerDistanceFromPoint(playerid, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]);

		if (fDistance[1] < fDistance[0])
		{
		    fDistance[0] = fDistance[1];
		    iIndex = i;
		}
	}
	return iIndex;
}

IsWeaponModel(model) {
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    for (new i = 0; i < sizeof(g_aWeaponModels); i ++) if (g_aWeaponModels[i] == model) {
        return 1;
	}
	return 0;
}

GetWeaponModel(weaponid) {
    new const g_aWeaponModels[] = {
		0, 331, 333, 334, 335, 336, 337, 338, 339, 341, 321, 322, 323, 324,
		325, 326, 342, 343, 344, 0, 0, 0, 346, 347, 348, 349, 350, 351, 352,
		353, 355, 356, 372, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366,
		367, 368, 368, 371
    };
    if (1 <= weaponid <= 46)
        return g_aWeaponModels[weaponid];

	return 0;
}

DropPlayerItem(playerid, itemid, quantity = 1)
{
	if (itemid == -1 || !InventoryData[playerid][itemid][invExists])
	    return 0;

    new
		Float:x,
  		Float:y,
    	Float:z,
		Float:angle,
		string[32];

	strunpack(string, InventoryData[playerid][itemid][invItem]);

	if (InventoryData[playerid][itemid][invQuantity] < 2)
	{
		if (!strcmp(string, "Colt 45") && PlayerData[playerid][pHoldWeapon] == 22)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Desert Eagle") && PlayerData[playerid][pHoldWeapon] == 24)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Escopeta") && PlayerData[playerid][pHoldWeapon] == 25)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Micro SMG") && PlayerData[playerid][pHoldWeapon] == 28)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "MP5") && PlayerData[playerid][pHoldWeapon] == 29)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Tec-9") && PlayerData[playerid][pHoldWeapon] == 32)
			HoldWeapon(playerid, 0);

		else if (!strcmp(string, "AK-47") && PlayerData[playerid][pHoldWeapon] == 30)
			HoldWeapon(playerid, 0);

	 	else if (!strcmp(string, "Rifle") && PlayerData[playerid][pHoldWeapon] == 33)
		 	HoldWeapon(playerid, 0);

		else if (!strcmp(string, "Sniper") && PlayerData[playerid][pHoldWeapon] == 34)
			HoldWeapon(playerid, 0);
	}
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	DropItem(string, ReturnName(playerid, 0), InventoryData[playerid][itemid][invModel], quantity, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));
 	Inventory_Remove(playerid, string, quantity);

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
 	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tiró una \"%s\".", ReturnName(playerid, 0), string);
	return 1;
}

DropItem(item[], player[], model, quantity, Float:x, Float:y, Float:z, interior, world, weaponid = 0, ammo = 0)
{
	new
	    query[300];

	for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (!DroppedItems[i][droppedModel])
	{
	    format(DroppedItems[i][droppedItem], 32, item);
	    format(DroppedItems[i][droppedPlayer], 24, player);

		DroppedItems[i][droppedModel] = model;
		DroppedItems[i][droppedQuantity] = quantity;
		DroppedItems[i][droppedWeapon] = weaponid;
  		DroppedItems[i][droppedAmmo] = ammo;
		DroppedItems[i][droppedPos][0] = x;
		DroppedItems[i][droppedPos][1] = y;
		DroppedItems[i][droppedPos][2] = z;

		DroppedItems[i][droppedInt] = interior;
		DroppedItems[i][droppedWorld] = world;

		if (IsWeaponModel(model)) {
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 93.7, 120.0, 120.0, world, interior);
		} else {
			DroppedItems[i][droppedObject] = CreateDynamicObject(model, x, y, z, 0.0, 0.0, 0.0, world, interior);
		}
 		DroppedItems[i][droppedText3D] = CreateDynamic3DTextLabel(item, COLOR_CYAN, x, y, z, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, world, interior);

		if (strcmp(item, "Demo Soda") != 0)
		{
	 		format(query, sizeof(query), "INSERT INTO `dropped` (`itemName`, `itemPlayer`, `itemModel`, `itemQuantity`, `itemWeapon`, `itemAmmo`, `itemX`, `itemY`, `itemZ`, `itemInt`, `itemWorld`) VALUES('%s', '%s', '%d', '%d', '%d', '%d', '%.4f', '%.4f', '%.4f', '%d', '%d')", item, player, model, quantity, weaponid, ammo, x, y, z, interior, world);
			mysql_tquery(g_iHandle, query, "OnDroppedItem", "d", i);
		}
		return i;
	}
	return -1;
}

Item_Nearest(playerid)
{
    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]))
	{
	    if (GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld])
	        return i;
	}
	return -1;
}

Item_SetQuantity(itemid, amount)
{
	new
	    string[64];

	if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
	    DroppedItems[itemid][droppedQuantity] = amount;

	    format(string, sizeof(string), "UPDATE `dropped` SET `itemQuantity` = %d WHERE `ID` = '%d'", amount, DroppedItems[itemid][droppedID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

Item_Delete(itemid)
{
    static
	    query[64];

    if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
        DroppedItems[itemid][droppedModel] = 0;
		DroppedItems[itemid][droppedQuantity] = 0;
	    DroppedItems[itemid][droppedPos][0] = 0.0;
	    DroppedItems[itemid][droppedPos][1] = 0.0;
	    DroppedItems[itemid][droppedPos][2] = 0.0;
	    DroppedItems[itemid][droppedInt] = 0;
	    DroppedItems[itemid][droppedWorld] = 0;

	    DestroyDynamicObject(DroppedItems[itemid][droppedObject]);
	    DestroyDynamic3DTextLabel(DroppedItems[itemid][droppedText3D]);

	    format(query, sizeof(query), "DELETE FROM `dropped` WHERE `ID` = '%d'", DroppedItems[itemid][droppedID]);
	    mysql_tquery(g_iHandle, query);
	}
	return 1;
}

PickupItem(playerid, itemid)
{
	if (itemid != -1 && DroppedItems[itemid][droppedModel])
	{
	    new id = Inventory_Add(playerid, DroppedItems[itemid][droppedItem], DroppedItems[itemid][droppedModel], DroppedItems[itemid][droppedQuantity]);

	    if (id == -1)
	        return SendErrorMessage(playerid, "No tienes mas espacio en tu inventario.");

	    Item_Delete(itemid);
	}
	return 1;
}

SetFactionMarker(playerid, type, color)
{
    foreach (new i : Player) if (GetFactionType(i) == type) {
    	SetPlayerMarkerForPlayer(i, playerid, color);
	}
	PlayerData[playerid][pMarker] = 1;
	SetTimerEx("ExpireMarker", 300000, false, "d", playerid);
	return 1;
}

Faction_GetName(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		name[32] = "None";

 	if (factionid == -1)
	    return name;

	format(name, 32, FactionData[factionid][factionName]);
	return name;
}

Faction_GetRank(playerid)
{
    new
		factionid = PlayerData[playerid][pFaction],
		rank[32] = "None";

 	if (factionid == -1)
	    return rank;

	format(rank, 32, FactionRanks[factionid][PlayerData[playerid][pFactionRank] - 1]);
	return rank;
}

Arrest_Delete(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
	    static
	        string[64];

        if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		    DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		    DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "DELETE FROM `arrestpoints` WHERE `arrestID` = '%d'", ArrestData[arrestid][arrestID]);
		mysql_tquery(g_iHandle, string);

		ArrestData[arrestid][arrestExists] = false;
		ArrestData[arrestid][arrestID] = 0;
	}
	return 1;
}

Arrest_Create(Float:x, Float:y, Float:z, interior, world)
{
	for (new i = 0; i < MAX_ARREST_POINTS; i ++) if (!ArrestData[i][arrestExists])
	{
	    ArrestData[i][arrestExists] = true;
	    ArrestData[i][arrestPos][0] = x;
	    ArrestData[i][arrestPos][1] = y;
	    ArrestData[i][arrestPos][2] = z;
	    ArrestData[i][arrestInterior] = interior;
	    ArrestData[i][arrestWorld] = world;

	    mysql_tquery(g_iHandle, "INSERT INTO `arrestpoints` (`arrestInterior`) VALUES(0)", "OnArrestCreated", "d", i);
		Arrest_Refresh(i);
		return i;
	}
	return -1;
}

Arrest_Save(arrestid)
{
	static
	    query[220];

	format(query, sizeof(query), "UPDATE `arrestpoints` SET `arrestX` = '%.4f', `arrestY` = '%.4f', `arrestZ` = '%.4f', `arrestInterior` = '%d', `arrestWorld` = '%d' WHERE `arrestID` = '%d'",
	    ArrestData[arrestid][arrestPos][0],
	    ArrestData[arrestid][arrestPos][1],
	    ArrestData[arrestid][arrestPos][2],
	    ArrestData[arrestid][arrestInterior],
	    ArrestData[arrestid][arrestWorld],
	    ArrestData[arrestid][arrestID]
	);
	return mysql_tquery(g_iHandle, query);
}

Arrest_Refresh(arrestid)
{
	if (arrestid != -1 && ArrestData[arrestid][arrestExists])
	{
	    static
	        string[64];

		if (IsValidDynamicPickup(ArrestData[arrestid][arrestPickup]))
		    DestroyDynamicPickup(ArrestData[arrestid][arrestPickup]);

		if (IsValidDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]))
		    DestroyDynamic3DTextLabel(ArrestData[arrestid][arrestText3D]);

		format(string, sizeof(string), "[Arrestar %d]\n{FFFFFF}/arrestar para arrestar al sospechoso.", arrestid);

		ArrestData[arrestid][arrestPickup] = CreateDynamicPickup(1247, 23, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
  		ArrestData[arrestid][arrestText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, ArrestData[arrestid][arrestPos][0], ArrestData[arrestid][arrestPos][1], ArrestData[arrestid][arrestPos][2], 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, ArrestData[arrestid][arrestWorld], ArrestData[arrestid][arrestInterior]);
	}
	return 1;
}

Rack_Save(rackid)
{
	static
	    query[512];

	format(query, sizeof(query), "UPDATE `gunracks` SET `rackHouse` = '%d', `rackX` = '%.4f', `rackY` = '%.4f', `rackZ` = '%.4f', `rackA` = '%.4f', `rackInterior` = '%d', `rackWorld` = '%d', `rackWeapon1` = '%d', `rackWeapon2` = '%d', `rackWeapon3` = '%d', `rackWeapon4` = '%d', `rackAmmo1` = '%d', `rackAmmo2` = '%d', `rackAmmo3` = '%d', `rackAmmo4` = '%d' WHERE `rackID` = '%d'",
	    RackData[rackid][rackHouse],
	    RackData[rackid][rackPos][0],
	    RackData[rackid][rackPos][1],
	    RackData[rackid][rackPos][2],
	    RackData[rackid][rackPos][3],
	    RackData[rackid][rackInterior],
	    RackData[rackid][rackWorld],
	    RackData[rackid][rackWeapons][0],
	    RackData[rackid][rackWeapons][1],
	    RackData[rackid][rackWeapons][2],
	    RackData[rackid][rackWeapons][3],
	    RackData[rackid][rackAmmo][0],
	    RackData[rackid][rackAmmo][1],
	    RackData[rackid][rackAmmo][2],
	    RackData[rackid][rackAmmo][3],
	    RackData[rackid][rackID]
	);
	return mysql_tquery(g_iHandle, query);
}

Rack_Nearest(playerid)
{
	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && IsPlayerInRangeOfPoint(playerid, 3.0, RackData[i][rackPos][0], RackData[i][rackPos][1], RackData[i][rackPos][2]))
	{
		if (GetPlayerInterior(playerid) == RackData[i][rackInterior] && GetPlayerVirtualWorld(playerid) == RackData[i][rackWorld])
		    return i;
	}
	return -1;
}

Rack_Count(houseid)
{
	new count;

	for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (RackData[i][rackExists] && RackData[i][rackHouse] == HouseData[houseid][houseID]) {
	    count++;
	}
	return count;
}

Rack_ShowGuns(playerid, rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
	    new
	        string[128];

		for (new i = 0; i < 4; i ++)
		{
		    if (!RackData[rackid][rackWeapons][i])
		        format(string, sizeof(string), "%s%d: Slot Vacío\n", string, i + 1);

			else format(string, sizeof(string), "%s%d: %s - %d balas\n", string, i + 1, ReturnWeaponName(RackData[rackid][rackWeapons][i]), RackData[rackid][rackAmmo][i]);
		}
		Dialog_Show(playerid, RackWeapons, DIALOG_STYLE_LIST, "Armario de Armas", string, "Seleccionar", "Cancelar");
	}
	return 1;
}

Rack_Delete(rackid)
{
    if (rackid != -1 && RackData[rackid][rackExists])
	{
	    static
	        string[64];

	    format(string, sizeof(string), "DELETE FROM `gunracks` WHERE `rackID` = '%d'", RackData[rackid][rackID]);
	    mysql_tquery(g_iHandle, string);

        for (new i = 0; i < 5; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
			DestroyDynamicObject(RackData[rackid][rackObjects][i]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
		    DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		RackData[rackid][rackExists] = false;
		RackData[rackid][rackID] = 0;
		RackData[rackid][rackHouse] = 0;
	}
	return 1;
}

Rack_Create(playerid, houseid)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_WEAPON_RACKS; i ++) if (!RackData[i][rackExists])
		{
		    x += 1.5 * floatsin(-angle, degrees);
		    y += 1.5 * floatcos(-angle, degrees);

		    RackData[i][rackExists] = true;
		    RackData[i][rackHouse] = (houseid == -1) ? (-1) : (HouseData[houseid][houseID]);

		    RackData[i][rackPos][0] = x;
		    RackData[i][rackPos][1] = y;
		    RackData[i][rackPos][2] = z;
		    RackData[i][rackPos][3] = angle;
		    RackData[i][rackInterior] = GetPlayerInterior(playerid);
		    RackData[i][rackWorld] = GetPlayerVirtualWorld(playerid);

		    Rack_Refresh(i);
		    mysql_tquery(g_iHandle, "INSERT INTO `gunracks` (`rackHouse`) VALUES(0)", "OnRackCreated", "d", i);

		    return i;
		}
	}
	return -1;
}

Rack_RefreshGuns(rackid)
{
    if (rackid != -1 && RackData[rackid][rackExists])
	{
    	new
			Float:x,
	        Float:y,
			Float:z;

		z = RackData[rackid][rackPos][2] + 2.19;

		for (new i = 0; i < 4; i ++) if (IsValidDynamicObject(RackData[rackid][rackObjects][i])) {
		    DestroyDynamicObject(RackData[rackid][rackObjects][i]);

			RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
		}
		for (new i = 0; i < 4; i ++)
		{
		    if (RackData[rackid][rackWeapons][i])
			{
				x = RackData[rackid][rackPos][0] - (0.2 * floatsin(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatsin(-RackData[rackid][rackPos][3] - 90, degrees)));
				y = RackData[rackid][rackPos][1] - (0.2 * floatcos(-RackData[rackid][rackPos][3], degrees) + (0.45 * floatcos(-RackData[rackid][rackPos][3] - 90, degrees)));

		        RackData[rackid][rackObjects][i] = CreateDynamicObject(GetWeaponModel(RackData[rackid][rackWeapons][i]), x, y, z, 94.7, 93.7, (22 <= RackData[rackid][rackWeapons][i] <= 38) ? (RackData[rackid][rackPos][3] + 90.0) : (RackData[rackid][rackPos][3]), RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
			}
			else
			{
			    RackData[rackid][rackObjects][i] = INVALID_OBJECT_ID;
			}
			z = z - 0.69;
		}
	}
	return 1;
}

Rack_Refresh(rackid)
{
	if (rackid != -1 && RackData[rackid][rackExists])
	{
	    static
	        str[64];

		if (IsValidDynamicObject(RackData[rackid][rackObjects][4])) {
		    DestroyDynamicObject(RackData[rackid][rackObjects][4]);
		}
		if (IsValidDynamic3DTextLabel(RackData[rackid][rackText3D])) {
		    DestroyDynamic3DTextLabel(RackData[rackid][rackText3D]);
		}
		format(str, sizeof(str), "[Armario %d]\n{FFFFFF}/armario para usar el armario.", rackid);
		RackData[rackid][rackText3D] = CreateDynamic3DTextLabel(str, COLOR_DARKBLUE, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2] + 1.2, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, RackData[rackid][rackWorld], RackData[rackid][rackInterior]);

		Rack_RefreshGuns(rackid);
        RackData[rackid][rackObjects][4] = CreateDynamicObject(2475, RackData[rackid][rackPos][0], RackData[rackid][rackPos][1], RackData[rackid][rackPos][2], 0.0, 0.0, RackData[rackid][rackPos][3], RackData[rackid][rackWorld], RackData[rackid][rackInterior]);
	}
	return 1;
}

forward Detector_Load();
public Detector_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_METAL_DETECTORS)
	{
    	MetalDetectors[i][detectorExists] = 1;
	    MetalDetectors[i][detectorID] = cache_get_field_int(i, "detectorID");
	    MetalDetectors[i][detectorPos][0] = cache_get_field_float(i, "detectorX");
	    MetalDetectors[i][detectorPos][1] = cache_get_field_float(i, "detectorY");
	    MetalDetectors[i][detectorPos][2] = cache_get_field_float(i, "detectorZ");
	    MetalDetectors[i][detectorPos][3] = cache_get_field_float(i, "detectorAngle");
	    MetalDetectors[i][detectorInterior] = cache_get_field_int(i, "detectorInterior");
	    MetalDetectors[i][detectorWorld] = cache_get_field_int(i, "detectorWorld");

		Detector_Refresh(i);
	}
	return 1;
}

forward Graffiti_Load();
public Graffiti_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GRAFFITI_POINTS)
	{
	    cache_get_field_content(i, "graffitiText", GraffitiData[i][graffitiText], g_iHandle, 64);

    	GraffitiData[i][graffitiExists] = 1;
	    GraffitiData[i][graffitiID] = cache_get_field_int(i, "graffitiID");
	    GraffitiData[i][graffitiPos][0] = cache_get_field_float(i, "graffitiX");
	    GraffitiData[i][graffitiPos][1] = cache_get_field_float(i, "graffitiY");
	    GraffitiData[i][graffitiPos][2] = cache_get_field_float(i, "graffitiZ");
	    GraffitiData[i][graffitiPos][3] = cache_get_field_float(i, "graffitiAngle");
	    GraffitiData[i][graffitiColor] = cache_get_field_int(i, "graffitiColor");

		Graffiti_Refresh(i);
	}
	return 1;
}

forward Speed_Load();
public Speed_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_SPEED_CAMERAS)
	{
	    SpeedData[i][speedExists] = true;
	    SpeedData[i][speedID] = cache_get_field_int(i, "speedID");
	    SpeedData[i][speedRange] = cache_get_field_float(i, "speedRange");
	    SpeedData[i][speedLimit] = cache_get_field_float(i, "speedLimit");
	    SpeedData[i][speedPos][0] = cache_get_field_float(i, "speedX");
	    SpeedData[i][speedPos][1] = cache_get_field_float(i, "speedY");
	    SpeedData[i][speedPos][2] = cache_get_field_float(i, "speedZ");
	    SpeedData[i][speedPos][3] = cache_get_field_float(i, "speedAngle");

	    Speed_Refresh(i);
	}
	return 1;
}

forward Rack_Load();
public Rack_Load()
{
    static
	    rows,
	    fields,
		str[24];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_WEAPON_RACKS)
	{
	    RackData[i][rackExists] = true;
	    RackData[i][rackID] = cache_get_field_int(i, "rackID");
	    RackData[i][rackHouse] = cache_get_field_int(i, "rackHouse");
     	RackData[i][rackPos][0] = cache_get_field_float(i, "rackX");
        RackData[i][rackPos][1] = cache_get_field_float(i, "rackY");
        RackData[i][rackPos][2] = cache_get_field_float(i, "rackZ");
        RackData[i][rackPos][3] = cache_get_field_float(i, "rackA");
        RackData[i][rackInterior] = cache_get_field_int(i, "rackInterior");
		RackData[i][rackWorld] = cache_get_field_int(i, "rackWorld");

		for (new j = 0; j < 4; j ++) {
		    format(str, 24, "rackWeapon%d", j + 1);
		    RackData[i][rackWeapons][j] = cache_get_field_int(i, str);

            format(str, 24, "rackAmmo%d", j + 1);
		    RackData[i][rackAmmo][j] = cache_get_field_int(i, str);
		}
		Rack_Refresh(i);
	}
	return 1;
}

forward Vendor_Load();
public Vendor_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_VENDORS)
	{
	    VendorData[i][vendorExists] = true;
	    VendorData[i][vendorID] = cache_get_field_int(i, "vendorID");
	    VendorData[i][vendorType] = cache_get_field_int(i, "vendorType");
	    VendorData[i][vendorPos][0] = cache_get_field_float(i, "vendorX");
        VendorData[i][vendorPos][1] = cache_get_field_float(i, "vendorY");
        VendorData[i][vendorPos][2] = cache_get_field_float(i, "vendorZ");
        VendorData[i][vendorPos][3] = cache_get_field_float(i, "vendorA");
        VendorData[i][vendorInterior] = cache_get_field_int(i, "vendorInterior");
		VendorData[i][vendorWorld] = cache_get_field_int(i, "vendorWorld");

		Vendor_Refresh(i);
	}
	return 1;
}

forward Garbage_Load();
public Garbage_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GARBAGE_BINS)
	{
	    GarbageData[i][garbageExists] = true;
	    GarbageData[i][garbageID] = cache_get_field_int(i, "garbageID");
	    GarbageData[i][garbageModel] = cache_get_field_int(i, "garbageModel");
	    GarbageData[i][garbageCapacity] = cache_get_field_int(i, "garbageCapacity");
	    GarbageData[i][garbagePos][0] = cache_get_field_float(i, "garbageX");
        GarbageData[i][garbagePos][1] = cache_get_field_float(i, "garbageY");
        GarbageData[i][garbagePos][2] = cache_get_field_float(i, "garbageZ");
        GarbageData[i][garbagePos][3] = cache_get_field_float(i, "garbageA");
        GarbageData[i][garbageInterior] = cache_get_field_int(i, "garbageInterior");
		GarbageData[i][garbageWorld] = cache_get_field_int(i, "garbageWorld");

		Garbage_Refresh(i);
	}
	return 1;
}

forward ATM_Load();
public ATM_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ATM_MACHINES)
	{
	    ATMData[i][atmExists] = true;
	    ATMData[i][atmID] = cache_get_field_int(i, "atmID");
	    ATMData[i][atmPos][0] = cache_get_field_float(i, "atmX");
        ATMData[i][atmPos][1] = cache_get_field_float(i, "atmY");
        ATMData[i][atmPos][2] = cache_get_field_float(i, "atmZ");
        ATMData[i][atmPos][3] = cache_get_field_float(i, "atmA");
        ATMData[i][atmInterior] = cache_get_field_int(i, "atmInterior");
		ATMData[i][atmWorld] = cache_get_field_int(i, "atmWorld");

		ATM_Refresh(i);
	}
	return 1;
}

forward Impound_Load();
public Impound_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_IMPOUND_LOTS)
	{
	    ImpoundData[i][impoundExists] = true;
	    ImpoundData[i][impoundID] = cache_get_field_int(i, "impoundID");
	    ImpoundData[i][impoundLot][0] = cache_get_field_float(i, "impoundLotX");
        ImpoundData[i][impoundLot][1] = cache_get_field_float(i, "impoundLotY");
        ImpoundData[i][impoundLot][2] = cache_get_field_float(i, "impoundLotZ");
        ImpoundData[i][impoundRelease][0] = cache_get_field_float(i, "impoundReleaseX");
        ImpoundData[i][impoundRelease][1] = cache_get_field_float(i, "impoundReleaseY");
        ImpoundData[i][impoundRelease][2] = cache_get_field_float(i, "impoundReleaseZ");
        ImpoundData[i][impoundRelease][3] = cache_get_field_float(i, "impoundReleaseA");

		Impound_Refresh(i);
	}
	return 1;
}

forward Backpack_Load();
public Backpack_Load()
{
    static
	    rows,
	    fields,
		str[64];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BACKPACKS)
	{
	    BackpackData[i][backpackExists] = true;
	    BackpackData[i][backpackID] = cache_get_field_int(i, "backpackID");
	    BackpackData[i][backpackPlayer] = cache_get_field_int(i, "backpackPlayer");
	    BackpackData[i][backpackHouse] = cache_get_field_int(i, "backpackHouse");
	    BackpackData[i][backpackVehicle] = cache_get_field_int(i, "backpackVehicle");
	    BackpackData[i][backpackPos][0] = cache_get_field_float(i, "backpackX");
	    BackpackData[i][backpackPos][1] = cache_get_field_float(i, "backpackY");
	    BackpackData[i][backpackPos][2] = cache_get_field_float(i, "backpackZ");
	    BackpackData[i][backpackInterior] = cache_get_field_int(i, "backpackInterior");
	    BackpackData[i][backpackWorld] = cache_get_field_int(i, "backpackWorld");

	    if (!BackpackData[i][backpackPlayer]) {
	        Backpack_Refresh(i);
		}
	}
	for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists]) {
		format(str, sizeof(str), "SELECT * FROM `backpackitems` WHERE `ID` = '%d'", BackpackData[i][backpackID]);

		mysql_tquery(g_iHandle, str, "OnLoadBackpack", "d", i);
	}
	return 1;
}

forward Gate_Load();
public Gate_Load()
{
    static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_GATES)
	{
	    GateData[i][gateExists] = true;
	    GateData[i][gateOpened] = false;

	    GateData[i][gateID] = cache_get_field_int(i, "gateID");
	    GateData[i][gateModel] = cache_get_field_int(i, "gateModel");
	    GateData[i][gateSpeed] = cache_get_field_float(i, "gateSpeed");
	    GateData[i][gateRadius] = cache_get_field_float(i, "gateRadius");
	    GateData[i][gateTime] = cache_get_field_int(i, "gateTime");
	    GateData[i][gateInterior] = cache_get_field_int(i, "gateInterior");
	    GateData[i][gateWorld] = cache_get_field_int(i, "gateWorld");

	    GateData[i][gatePos][0] = cache_get_field_float(i, "gateX");
	    GateData[i][gatePos][1] = cache_get_field_float(i, "gateY");
	    GateData[i][gatePos][2] = cache_get_field_float(i, "gateZ");
	    GateData[i][gatePos][3] = cache_get_field_float(i, "gateRX");
	    GateData[i][gatePos][4] = cache_get_field_float(i, "gateRY");
	    GateData[i][gatePos][5] = cache_get_field_float(i, "gateRZ");

        GateData[i][gateMove][0] = cache_get_field_float(i, "gateMoveX");
	    GateData[i][gateMove][1] = cache_get_field_float(i, "gateMoveY");
	    GateData[i][gateMove][2] = cache_get_field_float(i, "gateMoveZ");
	    GateData[i][gateMove][3] = cache_get_field_float(i, "gateMoveRX");
	    GateData[i][gateMove][4] = cache_get_field_float(i, "gateMoveRY");
	    GateData[i][gateMove][5] = cache_get_field_float(i, "gateMoveRZ");

        GateData[i][gateLinkID] = cache_get_field_int(i, "gateLinkID");
	    GateData[i][gateFaction] = cache_get_field_int(i, "gateFaction");

	    cache_get_field_content(i, "gatePass", GateData[i][gatePass], g_iHandle, 32);

	    GateData[i][gateObject] = CreateDynamicObject(GateData[i][gateModel], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2], GateData[i][gatePos][3], GateData[i][gatePos][4], GateData[i][gatePos][5], GateData[i][gateWorld], GateData[i][gateInterior]);
	}
	return 1;
}

forward Arrest_Load();
public Arrest_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ARREST_POINTS)
	{
	    ArrestData[i][arrestExists] = true;

	    ArrestData[i][arrestID] = cache_get_field_int(i, "arrestID");
	    ArrestData[i][arrestPos][0] = cache_get_field_float(i, "arrestX");
	    ArrestData[i][arrestPos][1] = cache_get_field_float(i, "arrestY");
	    ArrestData[i][arrestPos][2] = cache_get_field_float(i, "arrestZ");
	    ArrestData[i][arrestInterior] = cache_get_field_int(i, "arrestInterior");
	    ArrestData[i][arrestWorld] = cache_get_field_int(i, "arrestWorld");

	    Arrest_Refresh(i);
	}
	return 1;
}

forward Faction_Load();
public Faction_Load()
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);
	for (new i = 0; i < rows; i ++) if (i < MAX_FACTIONS)
	{
	    FactionData[i][factionExists] = true;
	    FactionData[i][factionID] = cache_get_field_int(i, "factionID");

	    cache_get_field_content(i, "factionName", FactionData[i][factionName], g_iHandle, 32);
	    cache_get_field_content(i, "factionLeader", FactionData[i][factionLeader], g_iHandle, 32);
	    FactionData[i][factionColor] = cache_get_field_int(i, "factionColor");
	    FactionData[i][factionType] = cache_get_field_int(i, "factionType");
	    FactionData[i][factionRanks] = cache_get_field_int(i, "factionRanks");
	    FactionData[i][factionLockerPos][0] = cache_get_field_float(i, "factionLockerX");
	    FactionData[i][factionLockerPos][1] = cache_get_field_float(i, "factionLockerY");
	    FactionData[i][factionLockerPos][2] = cache_get_field_float(i, "factionLockerZ");
	    FactionData[i][factionLockerInt] = cache_get_field_int(i, "factionLockerInt");
	    FactionData[i][factionLockerWorld] = cache_get_field_int(i, "factionLockerWorld");
	    FactionData[i][factionFixPos][0] = cache_get_field_float(i, "factionFixX");
		FactionData[i][factionFixPos][1] = cache_get_field_float(i, "factionFixY");
		FactionData[i][factionFixPos][2] = cache_get_field_float(i, "factionFixZ");
		//Spawning
		FactionData[i][SpawnX] = cache_get_field_float(i, "SpawnX");
	 	FactionData[i][SpawnY] = cache_get_field_float(i, "SpawnY");
   		FactionData[i][SpawnZ] = cache_get_field_float(i, "SpawnZ");
		FactionData[i][SpawnInterior] = cache_get_field_int(i, "SpawnInterior");
  		FactionData[i][SpawnVW] = cache_get_field_int(i, "SpawnVW");

	    for (new j = 0; j < 8; j ++) {
	        format(str, sizeof(str), "factionSkin%d", j + 1);

	        FactionData[i][factionSkins][j] = cache_get_field_int(i, str);
		}
        for (new j = 0; j < 10; j ++) {
	        format(str, sizeof(str), "factionWeapon%d", j + 1);

	        FactionData[i][factionWeapons][j] = cache_get_field_int(i, str);

	        format(str, sizeof(str), "factionAmmo%d", j + 1);

			FactionData[i][factionAmmo][j] = cache_get_field_int(i, str);
		}
		for (new j = 0; j < 15; j ++) {
		    format(str, sizeof(str), "factionRank%d", j + 1);

		    cache_get_field_content(i, str, FactionRanks[i][j], g_iHandle, 32);
		}
		Faction_Refresh(i);
	}
	return 1;
}

forward Plant_Load();
public Plant_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DRUG_PLANTS)
	{
	    PlantData[i][plantExists] = true;
	    PlantData[i][plantID] = cache_get_field_int(i, "plantID");
	    PlantData[i][plantType] = cache_get_field_int(i, "plantType");
	    PlantData[i][plantDrugs] = cache_get_field_int(i, "plantDrugs");
	    PlantData[i][plantPos][0] = cache_get_field_float(i, "plantX");
	    PlantData[i][plantPos][1] = cache_get_field_float(i, "plantY");
	    PlantData[i][plantPos][2] = cache_get_field_float(i, "plantZ");
	    PlantData[i][plantPos][3] = cache_get_field_float(i, "plantA");
	    PlantData[i][plantInterior] = cache_get_field_int(i, "plantInterior");
	    PlantData[i][plantWorld] = cache_get_field_int(i, "plantWorld");

		Plant_Refresh(i);
	}
	return 1;
}

forward Crate_Load();
public Crate_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_CRATES)
	{
	    CrateData[i][crateExists] = true;
	    CrateData[i][crateID] = cache_get_field_int(i, "crateID");
	    CrateData[i][crateType] = cache_get_field_int(i, "crateType");
	    CrateData[i][cratePos][0] = cache_get_field_float(i, "crateX");
	    CrateData[i][cratePos][1] = cache_get_field_float(i, "crateY");
	    CrateData[i][cratePos][2] = cache_get_field_float(i, "crateZ");
	    CrateData[i][cratePos][3] = cache_get_field_float(i, "crateA");
	    CrateData[i][crateInterior] = cache_get_field_int(i, "crateInterior");
	    CrateData[i][crateWorld] = cache_get_field_int(i, "crateWorld");
		CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;

		Crate_Refresh(i);
	}
	return 1;
}

forward Job_Load();
public Job_Load()
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

    for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMIC_JOBS)
	{
	    JobData[i][jobExists] = true;
	    JobData[i][jobID] = cache_get_field_int(i, "jobID");
	    JobData[i][jobType] = cache_get_field_int(i, "jobType");
	    JobData[i][jobPos][0] = cache_get_field_float(i, "jobPosX");
	    JobData[i][jobPos][1] = cache_get_field_float(i, "jobPosY");
	    JobData[i][jobPos][2] = cache_get_field_float(i, "jobPosZ");
	    JobData[i][jobInterior] = cache_get_field_int(i, "jobInterior");
	    JobData[i][jobWorld] = cache_get_field_int(i, "jobWorld");
        JobData[i][jobPoint][0] = cache_get_field_float(i, "jobPointX");
	    JobData[i][jobPoint][1] = cache_get_field_float(i, "jobPointY");
	    JobData[i][jobPoint][2] = cache_get_field_float(i, "jobPointZ");
	    JobData[i][jobDeliver][0] = cache_get_field_float(i, "jobDeliverX");
	    JobData[i][jobDeliver][1] = cache_get_field_float(i, "jobDeliverY");
	    JobData[i][jobDeliver][2] = cache_get_field_float(i, "jobDeliverZ");
	    JobData[i][jobPointInt] = cache_get_field_int(i, "jobPointInt");
	    JobData[i][jobPointWorld] = cache_get_field_int(i, "jobPointWorld");

 	    Job_Refresh(i);
	}
	return 1;
}

forward Entrance_Load();
public Entrance_Load()
{
    static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_ENTRANCES)
	{
	    EntranceData[i][entranceExists] = true;
    	EntranceData[i][entranceID] = cache_get_field_int(i, "entranceID");

		cache_get_field_content(i, "entranceName", EntranceData[i][entranceName], g_iHandle, 32);
		cache_get_field_content(i, "entrancePass", EntranceData[i][entrancePass], g_iHandle, 32);

	    EntranceData[i][entranceIcon] = cache_get_field_int(i, "entranceIcon");
	    EntranceData[i][entranceLocked] = cache_get_field_int(i, "entranceLocked");
	    EntranceData[i][entrancePos][0] = cache_get_field_float(i, "entrancePosX");
	    EntranceData[i][entrancePos][1] = cache_get_field_float(i, "entrancePosY");
	    EntranceData[i][entrancePos][2] = cache_get_field_float(i, "entrancePosZ");
	    EntranceData[i][entrancePos][3] = cache_get_field_float(i, "entrancePosA");
	    EntranceData[i][entranceInt][0] = cache_get_field_float(i, "entranceIntX");
	    EntranceData[i][entranceInt][1] = cache_get_field_float(i, "entranceIntY");
	    EntranceData[i][entranceInt][2] = cache_get_field_float(i, "entranceIntZ");
	    EntranceData[i][entranceInt][3] = cache_get_field_float(i, "entranceIntA");
	    EntranceData[i][entranceInterior] = cache_get_field_int(i, "entranceInterior");
	    EntranceData[i][entranceExterior] = cache_get_field_int(i, "entranceExterior");
	    EntranceData[i][entranceExteriorVW] = cache_get_field_int(i, "entranceExteriorVW");
	    EntranceData[i][entranceType] = cache_get_field_int(i, "entranceType");
	    EntranceData[i][entranceCustom] = cache_get_field_int(i, "entranceCustom");
	    EntranceData[i][entranceWorld] = cache_get_field_int(i, "entranceWorld");

		if (EntranceData[i][entranceType] == 3)
		    CreateForklifts(i);

	    Entrance_Refresh(i);
	}
	return 1;
}

forward Dropped_Load();
public Dropped_Load()
{
	static
	    rows,
	    fields;

    cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DROPPED_ITEMS)
	{
	    DroppedItems[i][droppedID] = cache_get_field_int(i, "ID");

		cache_get_field_content(i, "itemName", DroppedItems[i][droppedItem], g_iHandle, 32);
		cache_get_field_content(i, "itemPlayer", DroppedItems[i][droppedPlayer], g_iHandle, 24);

		DroppedItems[i][droppedModel] = cache_get_field_int(i, "itemModel");
		DroppedItems[i][droppedQuantity] = cache_get_field_int(i, "itemQuantity");
		DroppedItems[i][droppedWeapon] = cache_get_field_int(i, "itemWeapon");
		DroppedItems[i][droppedAmmo] = cache_get_field_int(i, "itemAmmo");
		DroppedItems[i][droppedPos][0] = cache_get_field_float(i, "itemX");
		DroppedItems[i][droppedPos][1] = cache_get_field_float(i, "itemY");
		DroppedItems[i][droppedPos][2] = cache_get_field_float(i, "itemZ");
		DroppedItems[i][droppedInt] = cache_get_field_int(i, "itemInt");
		DroppedItems[i][droppedWorld] = cache_get_field_int(i, "itemWorld");

		if (IsWeaponModel(DroppedItems[i][droppedModel])) {
    	   	DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 93.7, 120.0, 120.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		} else {
			DroppedItems[i][droppedObject] = CreateDynamicObject(DroppedItems[i][droppedModel], DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 0.0, 0.0, 0.0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
		}
		DroppedItems[i][droppedText3D] = CreateDynamic3DTextLabel(DroppedItems[i][droppedItem], COLOR_CYAN, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, DroppedItems[i][droppedWorld], DroppedItems[i][droppedInt]);
	}
	return 1;
}

forward Business_Load();
public Business_Load()
{
    static
	    rows,
	    fields,
		str[64];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_BUSINESSES)
	{
	    BusinessData[i][bizExists] = true;
	    BusinessData[i][bizID] = cache_get_field_int(i, "bizID");

		cache_get_field_content(i, "bizName", BusinessData[i][bizName], g_iHandle, 32);
        cache_get_field_content(i, "bizMessage", BusinessData[i][bizMessage], g_iHandle, 128);

		BusinessData[i][bizOwner] = cache_get_field_int(i, "bizOwner");
		BusinessData[i][bizType] = cache_get_field_int(i, "bizType");
		BusinessData[i][bizPrice] = cache_get_field_int(i, "bizPrice");
		BusinessData[i][bizPos][0] = cache_get_field_float(i, "bizPosX");
		BusinessData[i][bizPos][1] = cache_get_field_float(i, "bizPosY");
		BusinessData[i][bizPos][2] = cache_get_field_float(i, "bizPosZ");
		BusinessData[i][bizPos][3] = cache_get_field_float(i, "bizPosA");
		BusinessData[i][bizInt][0] = cache_get_field_float(i, "bizIntX");
		BusinessData[i][bizInt][1] = cache_get_field_float(i, "bizIntY");
		BusinessData[i][bizInt][2] = cache_get_field_float(i, "bizIntZ");
		BusinessData[i][bizInt][3] = cache_get_field_float(i, "bizIntA");
		BusinessData[i][bizCheck][0] = cache_get_field_float(i, "bizCheckX");
		BusinessData[i][bizCheck][1] = cache_get_field_float(i, "bizCheckY");
		BusinessData[i][bizCheck][2] = cache_get_field_float(i, "bizCheckZ");
		BusinessData[i][bizSpawn][0] = cache_get_field_float(i, "bizSpawnX");
		BusinessData[i][bizSpawn][1] = cache_get_field_float(i, "bizSpawnY");
		BusinessData[i][bizSpawn][2] = cache_get_field_float(i, "bizSpawnZ");
		BusinessData[i][bizSpawn][3] = cache_get_field_float(i, "bizSpawnA");
		BusinessData[i][bizDeliver][0] = cache_get_field_float(i, "bizDeliverX");
		BusinessData[i][bizDeliver][1] = cache_get_field_float(i, "bizDeliverY");
		BusinessData[i][bizDeliver][2] = cache_get_field_float(i, "bizDeliverZ");
		BusinessData[i][bizShipment] = cache_get_field_int(i, "bizShipment");
		BusinessData[i][bizInterior] = cache_get_field_int(i, "bizInterior");
		BusinessData[i][bizExterior] = cache_get_field_int(i, "bizExterior");
		BusinessData[i][bizExteriorVW] = cache_get_field_int(i, "bizExteriorVW");
		BusinessData[i][bizLocked] = cache_get_field_int(i, "bizLocked");
		BusinessData[i][bizVault] = cache_get_field_int(i, "bizVault");
		BusinessData[i][bizProducts] = cache_get_field_int(i, "bizProducts");

		for (new j = 0; j < 20; j ++)
		{
			format(str, 32, "bizPrice%d", j + 1);
			BusinessData[i][bizPrices][j] = cache_get_field_int(i, str);
		}
		Business_Refresh(i);
	}
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists])
	{
		if (BusinessData[i][bizType] == 5) {
			format(str, sizeof(str), "SELECT * FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[i][bizID]);

			mysql_tquery(g_iHandle, str, "Business_LoadCars", "d", i);
		}
		else if (BusinessData[i][bizType] == 6) {
			format(str, sizeof(str), "SELECT * FROM `pumps` WHERE `ID` = '%d'", BusinessData[i][bizID]);

			mysql_tquery(g_iHandle, str, "Pump_Load", "d", i);
		}
	}
	return 1;
}

forward House_Load();
public House_Load()
{
	static
	    rows,
	    fields,
		str[128];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_HOUSES)
	{
		HouseData[i][houseExists] = true;
		HouseData[i][houseLights] = false;

		HouseData[i][houseID] = cache_get_field_int(i, "houseID");
		HouseData[i][houseOwner] = cache_get_field_int(i, "houseOwner");
		HouseData[i][housePrice] = cache_get_field_int(i, "housePrice");

		cache_get_field_content(i, "houseAddress", HouseData[i][houseAddress], g_iHandle, 32);

		HouseData[i][housePos][0] = cache_get_field_float(i, "housePosX");
		HouseData[i][housePos][1] = cache_get_field_float(i, "housePosY");
		HouseData[i][housePos][2] = cache_get_field_float(i, "housePosZ");
		HouseData[i][housePos][3] = cache_get_field_float(i, "housePosA");
		HouseData[i][houseInt][0] = cache_get_field_float(i, "houseIntX");
		HouseData[i][houseInt][1] = cache_get_field_float(i, "houseIntY");
		HouseData[i][houseInt][2] = cache_get_field_float(i, "houseIntZ");
		HouseData[i][houseInt][3] = cache_get_field_float(i, "houseIntA");
		HouseData[i][houseInterior] = cache_get_field_int(i, "houseInterior");
		HouseData[i][houseExterior] = cache_get_field_int(i, "houseExterior");
		HouseData[i][houseExteriorVW] = cache_get_field_int(i, "houseExteriorVW");
        HouseData[i][houseLocked] = cache_get_field_int(i, "houseLocked");
        HouseData[i][houseMoney] = cache_get_field_int(i, "houseMoney");

        for (new j = 0; j < 10; j ++)
		{
            format(str, 24, "houseWeapon%d", j + 1);
            HouseData[i][houseWeapons][j] = cache_get_field_int(i, str);

            format(str, 24, "houseAmmo%d", j + 1);
            HouseData[i][houseAmmo][j] = cache_get_field_int(i, str);
		}
		House_Refresh(i);
	}
	for (new i = 0; i < MAX_HOUSES; i ++) if (HouseData[i][houseExists]) {
		format(str, sizeof(str), "SELECT * FROM `housestorage` WHERE `ID` = '%d'", HouseData[i][houseID]);

		mysql_tquery(g_iHandle, str, "OnLoadStorage", "d", i);

		format(str, sizeof(str), "SELECT * FROM `furniture` WHERE `ID` = '%d'", HouseData[i][houseID]);

		mysql_tquery(g_iHandle, str, "OnLoadFurniture", "d", i);
	}
	return 1;
}

stock Car_GetRealID(carid)
{
	if (carid == -1 || !CarData[carid][carExists] || CarData[carid][carVehicle] == INVALID_VEHICLE_ID)
	    return INVALID_VEHICLE_ID;

	return CarData[carid][carVehicle];
}

stock Car_GetID(vehicleid)
{
	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists] && CarData[i][carVehicle] == vehicleid) {
	    return i;
	}
	return -1;
}

stock Car_Spawn(carid)
{
	if (carid != -1 && CarData[carid][carExists])
	{
		if (IsValidVehicle(CarData[carid][carVehicle]))
		    DestroyVehicle(CarData[carid][carVehicle]);

		if (CarData[carid][carColor1] == -1)
		    CarData[carid][carColor1] = random(127);

		if (CarData[carid][carColor2] == -1)
		    CarData[carid][carColor2] = random(127);

        CarData[carid][carVehicle] = CreateVehicle(CarData[carid][carModel], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2], CarData[carid][carPos][3], CarData[carid][carColor1], CarData[carid][carColor2], (CarData[carid][carOwner] != 0) ? (-1) : (1200000));

        if (CarData[carid][carVehicle] != INVALID_VEHICLE_ID)
        {
            if (CarData[carid][carPaintjob] != -1)
            {
                ChangeVehiclePaintjob(CarData[carid][carVehicle], CarData[carid][carPaintjob]);
			}
			if (CarData[carid][carLocked])
			{
			    new
					engine, lights, alarm, doors, bonnet, boot, objective;

				GetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
			    SetVehicleParamsEx(CarData[carid][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			for (new i = 0; i < 14; i ++)
			{
			    if (CarData[carid][carMods][i]) AddVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][i]);
			}
   			ResetVehicle(CarData[carid][carVehicle]);
			return 1;
		}
	}
	return 0;
}

forward Car_Load();
public Car_Load()
{
	static
	    rows,
	    fields,
		str[128];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if (i < MAX_DYNAMIC_CARS)
	{
	    CarData[i][carExists] = true;
	    CarData[i][carID] = cache_get_field_int(i, "carID");
	    CarData[i][carModel] = cache_get_field_int(i, "carModel");
	    CarData[i][carOwner] = cache_get_field_int(i, "carOwner");
	    CarData[i][carPos][0] = cache_get_field_float(i, "carPosX");
	    CarData[i][carPos][1] = cache_get_field_float(i, "carPosY");
	    CarData[i][carPos][2] = cache_get_field_float(i, "carPosZ");
	    CarData[i][carPos][3] = cache_get_field_float(i, "carPosR");
	    CarData[i][carColor1] = cache_get_field_int(i, "carColor1");
	    CarData[i][carColor2] = cache_get_field_int(i, "carColor2");
	    CarData[i][carPaintjob] = cache_get_field_int(i, "carPaintjob");
	    CarData[i][carLocked] = cache_get_field_int(i, "carLocked");
	    CarData[i][carImpounded] = cache_get_field_int(i, "carImpounded");
	    CarData[i][carImpoundPrice] = cache_get_field_int(i, "carImpoundPrice");
        CarData[i][carFaction] = cache_get_field_int(i, "carFaction");
        CarData[i][carJob] = cache_get_field_int(i, "carJob");

		for (new j = 0; j < 14; j ++)
		{
		    if (j < 5)
		    {
		        format(str, sizeof(str), "carWeapon%d", j + 1);
		        CarData[i][carWeapons][j] = cache_get_field_int(i, str);

		        format(str, sizeof(str), "carAmmo%d", j + 1);
		        CarData[i][carAmmo][j] = cache_get_field_int(i, str);
	        }
	        format(str, sizeof(str), "carMod%d", j + 1);
	        CarData[i][carMods][j] = cache_get_field_int(i, str);
	    }
	    Car_Spawn(i);
	}
	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		format(str, sizeof(str), "SELECT * FROM `carstorage` WHERE `ID` = '%d'", CarData[i][carID]);

		mysql_tquery(g_iHandle, str, "OnLoadCarStorage", "d", i);
	}
	return 1;
}

stock IsVehicleSeatUsed(vehicleid, seat)
{
	foreach (new i : Player) if (IsPlayerInVehicle(i, vehicleid) && GetPlayerVehicleSeat(i) == seat) {
	    return 1;
	}
	return 0;
}

stock RemoveFromVehicle(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
		static
		    Float:fX,
	    	Float:fY,
	    	Float:fZ;

		GetPlayerPos(playerid, fX, fY, fZ);
		SetPlayerPos(playerid, fX, fY, fZ + 1.5);
	}
	return 1;
}

stock GetAvailableSeat(vehicleid, start = 1)
{
	new seats = GetVehicleMaxSeats(vehicleid);

	for (new i = start; i < seats; i ++) if (!IsVehicleSeatUsed(vehicleid, i)) {
	    return i;
	}
	return -1;
}

stock GetVehicleFromBehind(vehicleid)
{
	static
	    Float:fCoords[7];

	GetVehiclePos(vehicleid, fCoords[0], fCoords[1], fCoords[2]);
	GetVehicleZAngle(vehicleid, fCoords[3]);

	for (new i = 1; i != MAX_VEHICLES; i ++) if (i != vehicleid && GetVehiclePos(i, fCoords[4], fCoords[5], fCoords[6]))
	{
		if (floatabs(fCoords[0] - fCoords[4]) < 6 && floatabs(fCoords[1] - fCoords[5]) < 6 && floatabs(fCoords[2] - fCoords[6]) < 6)
			return i;
	}
	return INVALID_VEHICLE_ID;
}

stock GetVehicleBoot(vehicleid, &Float:x, &Float:y, &Float:z)
{
	if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] - (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] - (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

stock GetVehicleHood(vehicleid, &Float:x, &Float:y, &Float:z)
{
    if (!GetVehicleModel(vehicleid) || vehicleid == INVALID_VEHICLE_ID)
	    return (x = 0.0, y = 0.0, z = 0.0), 0;

	static
	    Float:pos[7]
	;
	GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, pos[0], pos[1], pos[2]);
	GetVehiclePos(vehicleid, pos[3], pos[4], pos[5]);
	GetVehicleZAngle(vehicleid, pos[6]);

	x = pos[3] + (floatsqroot(pos[1] + pos[1]) * floatsin(-pos[6], degrees));
	y = pos[4] + (floatsqroot(pos[1] + pos[1]) * floatcos(-pos[6], degrees));
 	z = pos[5];

	return 1;
}

forward HarvestPlant(playerid, plantid);
public HarvestPlant(playerid, plantid)
{
	PlayerData[playerid][pHarvesting] = 0;

	if (Plant_Nearest(playerid) != plantid || GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK || !PlantData[plantid][plantExists])
	    return 0;

	switch (PlantData[plantid][plantType])
	{
	    case 1:
	    {
	        new id = Inventory_Add(playerid, "Marihuana", 1578, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "No tienes más espacio en tu inventario.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s cosechó %d gramos de marihuana.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
		case 2:
	    {
	        new id = Inventory_Add(playerid, "Cocaina", 1575, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "No tienes más espacio en tu inventario.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s cosechó %d gramos de cocaina.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
        case 3:
	    {
	        new id = Inventory_Add(playerid, "Heroina", 1577, PlantData[plantid][plantDrugs]);

	        if (id == -1)
	            return SendErrorMessage(playerid, "No tienes más espacio en tu inventario.");

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s cosechó %d gramos de heroina.", ReturnName(playerid, 0), PlantData[plantid][plantDrugs]);
		}
	}
	Plant_Delete(plantid);
	return 1;
}

forward OpenCrate(playerid, crateid);
public OpenCrate(playerid, crateid)
{
	if (Crate_Nearest(playerid) != crateid || !CrateData[crateid][crateExists] || !IsPlayerSpawned(playerid) || !PlayerData[playerid][pOpeningCrate])
	    return 0;

    PlayerData[playerid][pOpeningCrate] = 0;

	ClearAnimations(playerid);
    TogglePlayerControllable(playerid, 1);

	if (Inventory_Items(playerid) >= MAX_INVENTORY - 4)
	    return SendErrorMessage(playerid, "No tenes espacio en tu inventario para 4 paquetes de droga.");

	Inventory_Add(playerid, "Semillas de Coca", 1575, 20);
	Inventory_Add(playerid, "Semillas de Maria", 1578, 20);
	Inventory_Add(playerid, "Semillas de Opio", 1577, 10);
	Inventory_Add(playerid, "Anabolicos", 1241, 5);

	Crate_Delete(crateid);
	SendServerMessage(playerid, "Encontraste un surtido de anabolicos y semillas de drogas (añadidos al inventario).");
	return 1;
}

forward CraftParts(playerid, crateid);
public CraftParts(playerid, crateid)
{
	if (PlayerData[playerid][pCarryCrate] != crateid || !CrateData[crateid][crateExists] || !IsPlayerSpawned(playerid) || !PlayerData[playerid][pCrafting])
	    return 0;

    PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pCarryCrate] = -1;

    TogglePlayerControllable(playerid, 1);
    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

    RemovePlayerAttachedObject(playerid, 4);
    Log_Write("logs/craft_log.txt", "[%s] %s creó una caja de %s.", ReturnDate(), ReturnName(playerid, 0), Crate_GetType(CrateData[crateid][crateType]));

	switch (CrateData[crateid][crateType])
	{
	    case 1:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 4)
	            return SendErrorMessage(playerid, "No tienes tanto espacio en tu inventario para 4 armas blancas.");

			Inventory_Add(playerid, "Palo de Golf", 333);
			Inventory_Add(playerid, "Cuchillo", 335);
			Inventory_Add(playerid, "Pala", 337);
			Inventory_Add(playerid, "Katana", 339);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Creaste 4 armas blancas (agregadas al inventario).");
		}
	    case 2:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 2)
	            return SendErrorMessage(playerid, "No tienes tanto espacio en tu inventario para 2 pistolas.");

			Inventory_Add(playerid, "Colt 45", 346);
			Inventory_Add(playerid, "Desert Eagle", 348);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Has creado 2 pistolas a partir de sus partes (agregadas al inventario).");
		}
		case 3:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 3)
	            return SendErrorMessage(playerid, "No tienes tanto espacio en tu inventario para 3 subfusiles.");

			Inventory_Add(playerid, "Micro SMG", 352);
			Inventory_Add(playerid, "Tec-9", 372);
			Inventory_Add(playerid, "MP5", 353);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Has creado 3 subfusiles a partir de sus partes (agregados al inventario).");
		}
		case 4:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 1)
	            return SendErrorMessage(playerid, "No tienes tanto espacio en tu inventario para una exopeta.");

			Inventory_Add(playerid, "Escopeta", 349);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Has creado una escopeta a partir de sus partes (agregada al inventario).");
		}
		case 5:
	    {
	        if (Inventory_Items(playerid) >= MAX_INVENTORY - 3)
	            return SendErrorMessage(playerid, "No tienes espacio en tu inventario para 3 rifles.");

			Inventory_Add(playerid, "AK-47", 355);
			Inventory_Add(playerid, "Rifle", 357);
			Inventory_Add(playerid, "Sniper", 358);

			Crate_Delete(crateid);
			SendServerMessage(playerid, "Has creado 3 rifles a partir de sus partes (agregados al inventario).");
		}
	}
	return 1;
}

forward FirstAidUpdate(playerid);
public FirstAidUpdate(playerid)
{
	static
	    Float:health;

	GetPlayerHealth(playerid, health);

    if (!IsPlayerInAnyVehicle(playerid) && GetPlayerAnimationIndex(playerid) != 1508)
    	ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

	if (health >= 95.0)
	{
	    SetPlayerHealth(playerid, 100.0);
	    SendServerMessage(playerid, "Has usado tu kit de primeros auxilios.");

		if (!IsPlayerInAnyVehicle(playerid)) {
	        PlayerData[playerid][pLoopAnim] = true;
			ShowPlayerFooter(playerid, "Pulsa ~y~CORRER~w~ para detener la animacion.");
		}
        PlayerData[playerid][pBleeding] = 0;
		PlayerData[playerid][pBleedTime] = 0;

		PlayerData[playerid][pFirstAid] = false;
		KillTimer(PlayerData[playerid][pAidTimer]);
	}
	else {
	    SetPlayerHealth(playerid, floatadd(health, 4.0));
	}
	return 1;
}

forward RepairCar(playerid, vehicleid);
public RepairCar(playerid, vehicleid)
{
	if (PlayerData[playerid][pJob] != JOB_MECHANIC || !IsPlayerNearHood(playerid, vehicleid)) {
		return 0;
	}
	SetVehicleHealth(vehicleid, 1000.0);
	GameTextForPlayer(playerid, " ", 1, 3);

	PlayerData[playerid][pRepairTime] = gettime() + 60;
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha reparado el vehiculo satisfactoriamente.", ReturnName(playerid, 0));
    CoreVehicles[vehicleid][vehRepairing] = false;
    
	return 1;
}

forward Business_LoadCars(bizid);
public Business_LoadCars(bizid)
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		DealershipCars[bizid][i][vehID] = cache_get_field_int(i, "vehID");
		DealershipCars[bizid][i][vehModel] = cache_get_field_int(i, "vehModel");
		DealershipCars[bizid][i][vehPrice] = cache_get_field_int(i, "vehPrice");
	}
	return 1;
}

forward OnLoadFurniture(houseid);
public OnLoadFurniture(houseid)
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) if ((id = Furniture_GetFreeID()) != -1) {
	    FurnitureData[id][furnitureExists] = true;
	    FurnitureData[id][furnitureHouse] = houseid;

	    cache_get_field_content(i, "furnitureName", FurnitureData[id][furnitureName], g_iHandle, 32);

	    FurnitureData[id][furnitureID] = cache_get_field_int(i, "furnitureID");
	    FurnitureData[id][furnitureModel] = cache_get_field_int(i, "furnitureModel");
	    FurnitureData[id][furniturePos][0] = cache_get_field_float(i, "furnitureX");
	    FurnitureData[id][furniturePos][1] = cache_get_field_float(i, "furnitureY");
	    FurnitureData[id][furniturePos][2] = cache_get_field_float(i, "furnitureZ");
	    FurnitureData[id][furnitureRot][0] = cache_get_field_float(i, "furnitureRX");
	    FurnitureData[id][furnitureRot][1] = cache_get_field_float(i, "furnitureRY");
	    FurnitureData[id][furnitureRot][2] = cache_get_field_float(i, "furnitureRZ");

	    Furniture_Refresh(id);
	}
	return 1;
}

Furniture_GetCount(houseid)
{
	new count;

	for (new i = 0; i < MAX_FURNITURE; i ++) if (FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
	    count++;
	}
	return count;
}

Furniture_GetFreeID()
{
	for (new i = 0; i != MAX_FURNITURE; i ++) if (!FurnitureData[i][furnitureExists]) {
	    return i;
	}
	return -1;
}

Furniture_Refresh(furnitureid)
{
	if (furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
	{
	    if (IsValidDynamicObject(FurnitureData[furnitureid][furnitureObject]))
	        DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);

	    FurnitureData[furnitureid][furnitureObject] = CreateDynamicObject(
			FurnitureData[furnitureid][furnitureModel],
			FurnitureData[furnitureid][furniturePos][0],
			FurnitureData[furnitureid][furniturePos][1],
			FurnitureData[furnitureid][furniturePos][2],
			FurnitureData[furnitureid][furnitureRot][0],
			FurnitureData[furnitureid][furnitureRot][1],
			FurnitureData[furnitureid][furnitureRot][2],
			HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID] + 5000,
			HouseData[FurnitureData[furnitureid][furnitureHouse]][houseInterior]
		);
	}
	return 1;
}

Furniture_Save(furnitureid)
{
	static
	    string[300];

	format(string, sizeof(string), "UPDATE `furniture` SET `furnitureModel` = '%d', `furnitureName` = '%s', `furnitureX` = '%.4f', `furnitureY` = '%.4f', `furnitureZ` = '%.4f', `furnitureRX` = '%.4f', `furnitureRY` = '%.4f', `furnitureRZ` = '%.4f' WHERE `ID` = '%d' AND `furnitureID` = '%d'",
	    FurnitureData[furnitureid][furnitureModel],
	    FurnitureData[furnitureid][furnitureName],
	    FurnitureData[furnitureid][furniturePos][0],
	    FurnitureData[furnitureid][furniturePos][1],
	    FurnitureData[furnitureid][furniturePos][2],
	    FurnitureData[furnitureid][furnitureRot][0],
	    FurnitureData[furnitureid][furnitureRot][1],
	    FurnitureData[furnitureid][furnitureRot][2],
	    HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID],
	    FurnitureData[furnitureid][furnitureID]
	);
	return mysql_tquery(g_iHandle, string);
}

Furniture_Add(houseid, name[], modelid, Float:x, Float:y, Float:z, Float:rx = 0.0, Float:ry = 0.0, Float:rz = 0.0)
{
	static
	    string[64],
		id = -1;

 	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	if ((id = Furniture_GetFreeID()) != -1)
	{
	    FurnitureData[id][furnitureExists] = true;
	    format(FurnitureData[id][furnitureName], 32, name);

        FurnitureData[id][furnitureHouse] = houseid;
	    FurnitureData[id][furnitureModel] = modelid;
	    FurnitureData[id][furniturePos][0] = x;
	    FurnitureData[id][furniturePos][1] = y;
	    FurnitureData[id][furniturePos][2] = z;
	    FurnitureData[id][furnitureRot][0] = rx;
	    FurnitureData[id][furnitureRot][1] = ry;
	    FurnitureData[id][furnitureRot][2] = rz;

	    Furniture_Refresh(id);

		format(string, sizeof(string), "INSERT INTO `furniture` (`ID`) VALUES(%d)", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string, "OnFurnitureCreated", "d", id);

		return id;
	}
	return -1;
}

Furniture_Delete(furnitureid)
{
	static
	    string[72];

	if (furnitureid != -1 && FurnitureData[furnitureid][furnitureExists])
	{
	    format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d' AND `furnitureID` = '%d'", HouseData[FurnitureData[furnitureid][furnitureHouse]][houseID], FurnitureData[furnitureid][furnitureID]);
		mysql_tquery(g_iHandle, string);

		FurnitureData[furnitureid][furnitureExists] = false;
		FurnitureData[furnitureid][furnitureModel] = 0;

		DestroyDynamicObject(FurnitureData[furnitureid][furnitureObject]);
	}
	return 1;
}

forward OnLoadCarStorage(carid);
public OnLoadCarStorage(carid)
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		CarStorage[carid][i][cItemExists] = true;
		CarStorage[carid][i][cItemID] = cache_get_field_int(i, "itemID");
		CarStorage[carid][i][cItemModel] = cache_get_field_int(i, "itemModel");
		CarStorage[carid][i][cItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", str, g_iHandle, sizeof(str));
		strpack(CarStorage[carid][i][cItemName], str, 32 char);
	}
	return 1;
}

forward OnLoadStorage(houseid);
public OnLoadStorage(houseid)
{
	static
	    rows,
	    fields,
		str[32];

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) {
		HouseStorage[houseid][i][hItemExists] = true;
		HouseStorage[houseid][i][hItemID] = cache_get_field_int(i, "itemID");
		HouseStorage[houseid][i][hItemModel] = cache_get_field_int(i, "itemModel");
		HouseStorage[houseid][i][hItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", str, g_iHandle, sizeof(str));
		strpack(HouseStorage[houseid][i][hItemName], str, 32 char);
	}
	return 1;
}

forward OnLoadBackpack(id);
public OnLoadBackpack(id)
{
	static
	    rows,
	    fields,
		itemid = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i != rows; i ++) if ((itemid = Backpack_GetFreeItem()) != -1) {
		BackpackItems[itemid][bItemExists] = true;
		BackpackItems[itemid][bItemBackpack] = id;
		BackpackItems[itemid][bItemID] = cache_get_field_int(i, "itemID");
		BackpackItems[itemid][bItemModel] = cache_get_field_int(i, "itemModel");
		BackpackItems[itemid][bItemQuantity] = cache_get_field_int(i, "itemQuantity");

		cache_get_field_content(i, "itemName", BackpackItems[itemid][bItemName], g_iHandle, 32);
	}
	return 1;
}

House_Save(houseid)
{
	static
	    query[1536];

	format(query, sizeof(query), "UPDATE `houses` SET `houseOwner` = '%d', `housePrice` = '%d', `houseAddress` = '%s', `housePosX` = '%.4f', `housePosY` = '%.4f', `housePosZ` = '%.4f', `housePosA` = '%.4f', `houseIntX` = '%.4f', `houseIntY` = '%.4f', `houseIntZ` = '%.4f', `houseIntA` = '%.4f', `houseInterior` = '%d', `houseExterior` = '%d', `houseExteriorVW` = '%d'",
	    HouseData[houseid][houseOwner],
	    HouseData[houseid][housePrice],
	    SQL_ReturnEscaped(HouseData[houseid][houseAddress]),
	    HouseData[houseid][housePos][0],
	    HouseData[houseid][housePos][1],
	    HouseData[houseid][housePos][2],
	    HouseData[houseid][housePos][3],
	    HouseData[houseid][houseInt][0],
	    HouseData[houseid][houseInt][1],
	    HouseData[houseid][houseInt][2],
	    HouseData[houseid][houseInt][3],
        HouseData[houseid][houseInterior],
        HouseData[houseid][houseExterior],
        HouseData[houseid][houseExteriorVW]
	);
	for (new i = 0; i < 10; i ++) {
		format(query, sizeof(query), "%s, `houseWeapon%d` = '%d', `houseAmmo%d` = '%d'", query, i + 1, HouseData[houseid][houseWeapons][i], i + 1, HouseData[houseid][houseAmmo][i]);
	}
	format(query, sizeof(query), "%s, `houseLocked` = '%d', `houseMoney` = '%d' WHERE `houseID` = '%d'",
	    query,
	    HouseData[houseid][houseLocked],
	    HouseData[houseid][houseMoney],
        HouseData[houseid][houseID]
	);
	return mysql_tquery(g_iHandle, query);
}

/*House_GetCount(playerid)
{
	new count = 0;

    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && House_IsOwner(playerid, i)) {
	    count++;
	}
	return count;
}*/

House_Inside(playerid)
{
	if (PlayerData[playerid][pHouse] != -1)
	{
	    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == PlayerData[playerid][pHouse] && GetPlayerInterior(playerid) == HouseData[i][houseInterior] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}

Gate_Nearest(playerid)
{
    for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && IsPlayerInRangeOfPoint(playerid, GateData[i][gateRadius], GateData[i][gatePos][0], GateData[i][gatePos][1], GateData[i][gatePos][2]))
	{
		if (GetPlayerInterior(playerid) == GateData[i][gateInterior] && GetPlayerVirtualWorld(playerid) == GateData[i][gateWorld])
			return i;
	}
	return -1;
}

Arrest_Nearest(playerid)
{
    for (new i = 0; i != MAX_ARREST_POINTS; i ++) if (ArrestData[i][arrestExists] && IsPlayerInRangeOfPoint(playerid, 4.0, ArrestData[i][arrestPos][0], ArrestData[i][arrestPos][1], ArrestData[i][arrestPos][2]))
	{
		if (GetPlayerInterior(playerid) == ArrestData[i][arrestInterior] && GetPlayerVirtualWorld(playerid) == ArrestData[i][arrestWorld])
			return i;
	}
	return -1;
}

Pump_Nearest(playerid)
{
    for (new i = 0; i != MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && IsPlayerInRangeOfPoint(playerid, 4.0, PumpData[i][pumpPos][0], PumpData[i][pumpPos][1], PumpData[i][pumpPos][2]) && PumpData[i][pumpExists]) {
	    return i;
	}
	return -1;
}

Plant_Nearest(playerid)
{
    for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (PlantData[i][plantExists] && IsPlayerInRangeOfPoint(playerid, 4.0, PlantData[i][plantPos][0], PlantData[i][plantPos][1], PlantData[i][plantPos][2]))
	{
		if (GetPlayerInterior(playerid) == PlantData[i][plantInterior] && GetPlayerVirtualWorld(playerid) == PlantData[i][plantWorld])
			return i;
	}
	return -1;
}

Crate_Highest(crateid)
{
	new
		Float:height = -1.0,
		id = -1;

    for (new i = 0; i != MAX_CRATES; i ++) if (i != id && CrateData[i][crateExists] && CrateData[i][crateVehicle] == INVALID_VEHICLE_ID && CrateData[i][cratePos][0] == CrateData[crateid][cratePos][0] && CrateData[i][cratePos][1] == CrateData[crateid][cratePos][1] && CrateData[i][cratePos][2] > CrateData[crateid][cratePos][2] && !IsCrateInUse(crateid))
	{
	    if (CrateData[i][cratePos][2] > height)
	    {
	        height = CrateData[i][cratePos][2];
	        id = i;
		}
	}
	return id;
}

Crate_Nearest(playerid, Float:radius = 2.5)
{
	if (PlayerData[playerid][pCarryCrate] != -1 && CrateData[PlayerData[playerid][pCarryCrate]][crateExists])
	    return PlayerData[playerid][pCarryCrate];

    for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && IsPlayerInRangeOfPoint(playerid, radius, CrateData[i][cratePos][0], CrateData[i][cratePos][1], CrateData[i][cratePos][2]))
	{
		if (GetPlayerInterior(playerid) == CrateData[i][crateInterior] && GetPlayerVirtualWorld(playerid) == CrateData[i][crateWorld])
			return i;
	}
	return -1;
}

House_Nearest(playerid)
{
    for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]))
	{
		if (GetPlayerInterior(playerid) == HouseData[i][houseExterior] && GetPlayerVirtualWorld(playerid) == HouseData[i][houseExteriorVW])
			return i;
	}
	return -1;
}

House_Refresh(houseid)
{
	if (houseid != -1 && HouseData[houseid][houseExists])
	{
		if (IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
		    DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

		if (IsValidDynamicPickup(HouseData[houseid][housePickup]))
		    DestroyDynamicPickup(HouseData[houseid][housePickup]);

		if (IsValidDynamicMapIcon(HouseData[houseid][houseMapIcon]))
		    DestroyDynamicMapIcon(HouseData[houseid][houseMapIcon]);

		static
		    string[128];

		if (!HouseData[houseid][houseOwner]) {
			format(string, sizeof(string), "[%s]\n%s\nID: %d", FormatNumber(HouseData[houseid][housePrice]), HouseData[houseid][houseAddress], GetHouseByID(HouseData[houseid][houseID]));
            HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
		else {
			format(string, sizeof(string), "%s\nID: %d", HouseData[houseid][houseAddress], GetHouseByID(HouseData[houseid][houseID]));
			HouseData[houseid][houseText3D] = CreateDynamic3DTextLabel(string, COLOR_WHITE, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
		}
        HouseData[houseid][housePickup] = CreateDynamicPickup(1273, 23, HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
        //Comentar para quitar casas
        //HouseData[houseid][houseMapIcon] = CreateDynamicMapIcon(HouseData[houseid][housePos][0], HouseData[houseid][housePos][1], HouseData[houseid][housePos][2], (HouseData[houseid][houseOwner] != 0) ? (32) : (31), 0, HouseData[houseid][houseExteriorVW], HouseData[houseid][houseExterior]);
	}
	return 1;
}

Car_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++)
	{
		if (CarData[i][carExists] && CarData[i][carOwner] == PlayerData[playerid][pID])
   		{
   		    count++;
		}
	}
	return count;
}

House_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_HOUSES; i ++)
	{
		if (HouseData[i][houseExists] && House_IsOwner(playerid, i))
   		{
   		    count++;
		}
	}
	return count;
}

Business_GetCount(playerid)
{
	new
		count = 0;

	for (new i = 0; i != MAX_BUSINESSES; i ++)
	{
		if (BusinessData[i][bizExists] && Business_IsOwner(playerid, i))
   		{
   		    count++;
		}
	}
	return count;
}

Car_IsOwner(playerid, carid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if ((CarData[carid][carExists] && CarData[carid][carOwner] != 0) && CarData[carid][carOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

Car_WeaponStorage(playerid, carid)
{
    if (!CarData[carid][carExists] || CarData[carid][carLocked])
	    return 0;

    static
	    string[164];

	string[0] = 0;

	for (new i = 0; i < 5; i ++)
	{
	    if (22 <= CarData[carid][carWeapons][i] <= 38)
	        format(string, sizeof(string), "%s%s - Municion: %d\n", string, ReturnWeaponName(CarData[carid][carWeapons][i]), CarData[carid][carAmmo][i]);

		else
		    format(string, sizeof(string), "%s%s\n", string, (CarData[carid][carWeapons][i]) ? (ReturnWeaponName(CarData[carid][carWeapons][i])) : ("Slot Vacío"));
	}
	Dialog_Show(playerid, Trunk, DIALOG_STYLE_LIST, "Maletero", string, "Seleccionar", "Cancelar");
	return 1;
}

Car_ShowTrunk(playerid, carid)
{
	static
	    string[MAX_CAR_STORAGE * 32],
		name[32];

	string[0] = 0;

	for (new i = 0; i != MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        format(string, sizeof(string), "%sSlot Vacío\n", string);

		else {
			strunpack(name, CarStorage[carid][i][cItemName]);

			if (CarStorage[carid][i][cItemQuantity] == 1) {
                format(string, sizeof(string), "%s%s\n", string, name);
			}
			else format(string, sizeof(string), "%s%s (%d)\n", string, name, CarStorage[carid][i][cItemQuantity]);
		}
	}
	strcat(string, "Armas");

	PlayerData[playerid][pStorageSelect] = 0;
	Dialog_Show(playerid, CarStorage, DIALOG_STYLE_LIST, "Almacenamiento", string, "Seleccionar", "Cancelar");
	return 1;
}

stock IsNearFactionLocker(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1)
	    return 0;

	if (IsPlayerInRangeOfPoint(playerid, 3.0, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2]) && GetPlayerInterior(playerid) == FactionData[factionid][factionLockerInt] && GetPlayerVirtualWorld(playerid) == FactionData[factionid][factionLockerWorld])
	    return 1;

	return 0;
}
stock IsNearTaller(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1)
	    return 0;

	if (IsPlayerInRangeOfPoint(playerid, 15.0, FactionData[factionid][factionFixPos][0], FactionData[factionid][factionFixPos][1], FactionData[factionid][factionFixPos][2]))
	    return 1;

	return 0;
}
stock GetFactionByID(sqlid)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists] && FactionData[i][factionID] == sqlid)
	    return i;

	return -1;
}

SetFaction(playerid, id)
{
	if (id != -1 && FactionData[id][factionExists])
	{
		PlayerData[playerid][pFaction] = id;
		PlayerData[playerid][pFactionID] = FactionData[id][factionID];
	}
	return 1;
}

SetFactionColor(playerid)
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid != -1)
		return SetPlayerColor(playerid, RemoveAlpha(FactionData[factionid][factionColor]));

	return 0;
}

Faction_Update(factionid)
{
	if (factionid != -1 || FactionData[factionid][factionExists])
	{
	    foreach (new i : Player) if (PlayerData[i][pFaction] == factionid)
		{
 			if (GetFactionType(i) == FACTION_GANG || (GetFactionType(i) != FACTION_GANG && PlayerData[i][pOnDuty]))
			 	SetFactionColor(i);
		}
	}
	return 1;
}

Faction_Refresh(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
	    if (FactionData[factionid][factionLockerPos][0] != 0.0 && FactionData[factionid][factionLockerPos][1] != 0.0 && FactionData[factionid][factionLockerPos][2] != 0.0)
	    {
		    static
		        string[128];

			if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
			    DestroyDynamicPickup(FactionData[factionid][factionPickup]);

			if (IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
			    DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

			FactionData[factionid][factionPickup] = CreateDynamicPickup(1239, 23, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);

			format(string, sizeof(string), "[Locker %d]\n{FFFFFF}/fcaja para acceder al locker.", factionid);
	  		FactionData[factionid][factionText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, FactionData[factionid][factionLockerPos][0], FactionData[factionid][factionLockerPos][1], FactionData[factionid][factionLockerPos][2], 15.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, FactionData[factionid][factionLockerWorld], FactionData[factionid][factionLockerInt]);
		}
	}
	return 1;
}

Faction_Save(factionid)
{
	static
	    query[2090];

	format(query, sizeof(query), "UPDATE `factions` SET `factionName` = '%s', `factionColor` = '%d', `factionType` = '%d', `factionRanks` = '%d', `factionLockerX` = '%.4f', `factionLockerY` = '%.4f', `factionLockerZ` = '%.4f', `factionLockerInt` = '%d', `factionLockerWorld` = '%d', `SpawnX` = '%f', `SpawnY` = '%f', `SpawnZ` = '%f', `SpawnInterior` = '%d', `SpawnVW` = '%d', `factionFixX` = '%.4f', `factionFixY` = '%.4f', `factionFixZ` = '%.4f', `factionLeader` = '%s'",
		SQL_ReturnEscaped(FactionData[factionid][factionName]),
		FactionData[factionid][factionColor],
		FactionData[factionid][factionType],
		FactionData[factionid][factionRanks],
		FactionData[factionid][factionLockerPos][0],
		FactionData[factionid][factionLockerPos][1],
		FactionData[factionid][factionLockerPos][2],
		FactionData[factionid][factionLockerInt],
		FactionData[factionid][factionLockerWorld],

		FactionData[factionid][SpawnX],
		FactionData[factionid][SpawnY],
		FactionData[factionid][SpawnZ],
		FactionData[factionid][SpawnInterior],
		FactionData[factionid][SpawnVW],
		FactionData[factionid][factionFixPos][0],
		FactionData[factionid][factionFixPos][1],
		FactionData[factionid][factionFixPos][2],
		SQL_ReturnEscaped(FactionData[factionid][factionLeader])
	);
	for (new i = 0; i < 10; i ++)
	{
	    if (i < 8)
			format(query, sizeof(query), "%s, `factionSkin%d` = '%d', `factionWeapon%d` = '%d', `factionAmmo%d` = '%d'", query, i + 1, FactionData[factionid][factionSkins][i], i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i]);

		else
			format(query, sizeof(query), "%s, `factionWeapon%d` = '%d', `factionAmmo%d` = '%d'", query, i + 1, FactionData[factionid][factionWeapons][i], i + 1, FactionData[factionid][factionAmmo][i]);
	}
	format(query, sizeof(query), "%s WHERE `factionID` = '%d'",
		query,
		FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}

stock Faction_SaveRanks(factionid)
{
	static
	    query[768];

	format(query, sizeof(query), "UPDATE `factions` SET `factionRank1` = '%s', `factionRank2` = '%s', `factionRank3` = '%s', `factionRank4` = '%s', `factionRank5` = '%s', `factionRank6` = '%s', `factionRank7` = '%s', `factionRank8` = '%s', `factionRank9` = '%s', `factionRank10` = '%s', `factionRank11` = '%s', `factionRank12` = '%s', `factionRank13` = '%s', `factionRank14` = '%s', `factionRank15` = '%s' WHERE `factionID` = '%d'",
	    FactionRanks[factionid][0],
	    FactionRanks[factionid][1],
	    FactionRanks[factionid][2],
	    FactionRanks[factionid][3],
	    FactionRanks[factionid][4],
	    FactionRanks[factionid][5],
	    FactionRanks[factionid][6],
	    FactionRanks[factionid][7],
	    FactionRanks[factionid][8],
	    FactionRanks[factionid][9],
	    FactionRanks[factionid][10],
	    FactionRanks[factionid][11],
	    FactionRanks[factionid][12],
	    FactionRanks[factionid][13],
	    FactionRanks[factionid][14],
	    FactionData[factionid][factionID]
	);
	return mysql_tquery(g_iHandle, query);
}

Faction_Delete(factionid)
{
	if (factionid != -1 && FactionData[factionid][factionExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `factions` WHERE `factionID` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(g_iHandle, string);

		format(string, sizeof(string), "UPDATE `characters` SET `Faction` = '-1' WHERE `Faction` = '%d'", FactionData[factionid][factionID]);
		mysql_tquery(g_iHandle, string);

		foreach (new i : Player)
		{
			if (PlayerData[i][pFaction] == factionid) {
		    	PlayerData[i][pFaction] = -1;
		    	PlayerData[i][pFactionID] = -1;
		    	PlayerData[i][pFactionRank] = -1;
			}
			if (PlayerData[i][pFactionEdit] == factionid) {
			    PlayerData[i][pFactionEdit] = -1;
			}
		}
		if (IsValidDynamicPickup(FactionData[factionid][factionPickup]))
  			DestroyDynamicPickup(FactionData[factionid][factionPickup]);

		if (IsValidDynamic3DTextLabel(FactionData[factionid][factionText3D]))
  			DestroyDynamic3DTextLabel(FactionData[factionid][factionText3D]);

	    FactionData[factionid][factionExists] = false;
	    FactionData[factionid][factionType] = 0;
	    FactionData[factionid][factionID] = 0;
	}
	return 1;
}

stock GetFactionType(playerid)
{
	if (PlayerData[playerid][pFaction] == -1)
	    return 0;

	return (FactionData[PlayerData[playerid][pFaction]][factionType]);
}

Faction_ShowRanks(playerid, factionid)
{
    if (factionid != -1 && FactionData[factionid][factionExists])
	{
		static
		    string[640];

		string[0] = 0;

		for (new i = 0; i < FactionData[factionid][factionRanks]; i ++)
		    format(string, sizeof(string), "%sRango %d: %s\n", string, i + 1, FactionRanks[factionid][i]);

		PlayerData[playerid][pFactionEdit] = factionid;
		Dialog_Show(playerid, EditRanks, DIALOG_STYLE_LIST, FactionData[factionid][factionName], string, "Cambiar", "Cancelar");
	}
	return 1;
}

Faction_Create(name[], type)
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (!FactionData[i][factionExists])
	{
	    format(FactionData[i][factionName], 32, name);

        FactionData[i][factionExists] = true;
        FactionData[i][factionColor] = 0xFFFFFF00;
        FactionData[i][factionType] = type;
        FactionData[i][factionRanks] = 5;

        FactionData[i][factionLockerPos][0] = 0.0;
        FactionData[i][factionLockerPos][1] = 0.0;
        FactionData[i][factionLockerPos][2] = 0.0;
        FactionData[i][factionLockerInt] = 0;
        FactionData[i][factionLockerWorld] = 0;
        format(FactionData[i][factionLeader], 32, "Libre");

        for (new j = 0; j < 8; j ++) {
            FactionData[i][factionSkins][j] = 0;
        }
        for (new j = 0; j < 10; j ++) {
            FactionData[i][factionWeapons][j] = 0;
            FactionData[i][factionAmmo][j] = 0;
	    }
	    for (new j = 0; j < 15; j ++) {
			format(FactionRanks[i][j], 32, "Rango %d", j + 1);
	    }
	    mysql_tquery(g_iHandle, "INSERT INTO `factions` (`factionType`) VALUES(0)", "OnFactionCreated", "d", i);
	    return i;
	}
	return -1;
}

Plant_Delete(plantid)
{
	if (plantid != -1 && PlantData[plantid][plantExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `plants` WHERE `plantID` = '%d'", PlantData[plantid][plantID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
		    DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

		if (IsValidDynamicObject(PlantData[plantid][plantObject]))
		    DestroyDynamicObject(PlantData[plantid][plantObject]);

	    PlantData[plantid][plantExists] = false;
		PlantData[plantid][plantID] = 0;
	    PlantData[plantid][plantDrugs] = 0;
	}
	return 1;
}

Plant_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (!PlantData[i][plantExists])
	    {
	        PlantData[i][plantExists] = true;
	        PlantData[i][plantType] = type;
	        PlantData[i][plantDrugs] = 0;

	        PlantData[i][plantPos][0] = x;
	        PlantData[i][plantPos][1] = y;
	        PlantData[i][plantPos][2] = z;
	        PlantData[i][plantPos][3] = angle;
	        PlantData[i][plantInterior] = GetPlayerInterior(playerid);
	        PlantData[i][plantWorld] = GetPlayerVirtualWorld(playerid);

	        mysql_tquery(g_iHandle, "INSERT INTO `plants` (`plantType`) VALUES(0)", "OnPlantCreated", "d", i);
	        Plant_Refresh(i);
	        return i;
		}
	}
	return -1;
}

Plant_MaxGrams(type)
{
	new grams;

	switch (type)
	{
	    case 1: grams = 40; // Marijuana plant
	    case 2: grams = 30; // Cocaine plant
		case 3: grams = 25; // Heroin plant
		default: grams = 0;
	}
	return grams;
}

Plant_Save(plantid)
{
	static
	    query[256];

	format(query, sizeof(query), "UPDATE `plants` SET `plantType` = '%d', `plantDrugs` = '%d', `plantX` = '%.4f', `plantY` = '%.4f', `plantZ` = '%.4f', `plantA` = '%.4f', `plantInterior` = '%d', `plantWorld` = '%d' WHERE `plantID` = '%d'",
        PlantData[plantid][plantType],
        PlantData[plantid][plantDrugs],
        PlantData[plantid][plantPos][0],
        PlantData[plantid][plantPos][1],
        PlantData[plantid][plantPos][2],
        PlantData[plantid][plantPos][3],
        PlantData[plantid][plantInterior],
        PlantData[plantid][plantWorld],
        PlantData[plantid][plantID]
	);
	return mysql_tquery(g_iHandle, query);
}

Plant_GetType(type)
{
	static
	    str[16];

    switch (type) {
    	case 1: str = "Marihuana";
    	case 2: str = "Cocaina";
	    case 3: str = "Heroina";
	}
	return str;
}

Plant_Refresh(plantid)
{
	if (plantid != -1 && PlantData[plantid][plantExists])
	{
	    static
	        string[128];

		if (IsValidDynamicObject(PlantData[plantid][plantObject]))
		    DestroyDynamicObject(PlantData[plantid][plantObject]);

		if (IsValidDynamic3DTextLabel(PlantData[plantid][plantText3D]))
		    DestroyDynamic3DTextLabel(PlantData[plantid][plantText3D]);

		PlantData[plantid][plantObject] = CreateDynamicObject(3409, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2] - 1.80, 0.0, 0.0, PlantData[plantid][plantPos][3], PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);

		format(string, sizeof(string), "[Planta %d]\n{FFFFFF}%s - %d/%d Gramos", plantid, Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs], Plant_MaxGrams(PlantData[plantid][plantType]));
  		PlantData[plantid][plantText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, PlantData[plantid][plantPos][0], PlantData[plantid][plantPos][1], PlantData[plantid][plantPos][2], 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, PlantData[plantid][plantWorld], PlantData[plantid][plantInterior]);
	}
	return 1;
}

Crate_Refresh(crateid)
{
	if (crateid != -1 && CrateData[crateid][crateExists])
	{
	    static
	        string[128];

		if (IsValidDynamicObject(CrateData[crateid][crateObject]))
		    DestroyDynamicObject(CrateData[crateid][crateObject]);

		if (IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
		    DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

		CrateData[crateid][crateObject] = CreateDynamicObject(964, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2], 0.0, 0.0, CrateData[crateid][cratePos][3], CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);

		if (CrateData[crateid][crateType] != 6) {
			format(string, sizeof(string), "[Caja %d]\n{FFFFFF}%s Partes (pulsa 'F' para agarrar)", crateid, Crate_GetType(CrateData[crateid][crateType]));
		}
		else {
		    format(string, sizeof(string), "[Caja %d]\n{FFFFFF}Semillas de Droga (pulsa 'F' para agarrar)", crateid);
		}
  		CrateData[crateid][crateText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, CrateData[crateid][cratePos][0], CrateData[crateid][cratePos][1], CrateData[crateid][cratePos][2] + 0.5, 10.0, INVALID_VEHICLE_ID, INVALID_PLAYER_ID, 0, CrateData[crateid][crateWorld], CrateData[crateid][crateInterior]);
	}
	return 1;
}

Crate_Delete(crateid)
{
	if (crateid != -1 && CrateData[crateid][crateExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `crates` WHERE `crateID` = '%d'", CrateData[crateid][crateID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(CrateData[crateid][crateText3D]))
		    DestroyDynamic3DTextLabel(CrateData[crateid][crateText3D]);

		if (IsValidDynamicObject(CrateData[crateid][crateObject]))
		    DestroyDynamicObject(CrateData[crateid][crateObject]);

		foreach (new i : Player) if (PlayerData[i][pCarryCrate] == crateid) {
		    PlayerData[i][pCarryCrate] = -1;

		    RemovePlayerAttachedObject(i, 4);
		    SetPlayerSpecialAction(i, SPECIAL_ACTION_NONE);
		}
	    CrateData[crateid][crateExists] = false;
	    CrateData[crateid][crateID] = 0;
	    CrateData[crateid][crateVehicle] = INVALID_VEHICLE_ID;
	}
	return 1;
}

Crate_Drop(playerid, Float:radius = 0.0)
{
    static
		Float:x,
		Float:y,
		Float:z,
		Float:angle,
		id = -1;

	if ((id = PlayerData[playerid][pCarryCrate]) != -1 && CrateData[id][crateExists])
	{
		GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		if (radius != 0.0) {
		    x += radius * floatsin(-angle, degrees);
		    y += radius * floatcos(-angle, degrees);
		}
		CrateData[id][cratePos][0] = x;
		CrateData[id][cratePos][1] = y;
		CrateData[id][cratePos][2] = z - 0.9;
		CrateData[id][cratePos][3] = angle;
		CrateData[id][crateInterior] = GetPlayerInterior(playerid);
		CrateData[id][crateWorld] = GetPlayerVirtualWorld(playerid);

		Crate_Refresh(id);
		Crate_Save(id);
	}
	PlayerData[playerid][pCarryCrate] = -1;
	RemovePlayerAttachedObject(playerid, 4);
	return 1;
}

Crate_Save(crateid)
{
	static
	    query[255];

	format(query, sizeof(query), "UPDATE `crates` SET `crateType` = '%d', `crateX` = '%.4f', `crateY` = '%.4f', `crateZ` = '%.4f', `crateA` = '%.4f', `crateInterior` = '%d', `crateWorld` = '%d' WHERE `crateID` = '%d'",
	    CrateData[crateid][crateType],
	    CrateData[crateid][cratePos][0],
	    CrateData[crateid][cratePos][1],
	    CrateData[crateid][cratePos][2],
	    CrateData[crateid][cratePos][3],
	    CrateData[crateid][crateInterior],
	    CrateData[crateid][crateWorld],
	    CrateData[crateid][crateID]
	);
	return mysql_tquery(g_iHandle, query);
}

Crate_GetType(type)
{
	static
	    str[24];

	switch (type) {
	    case 1: str = "Blancas";
	    case 2: str = "Pistola";
	    case 3: str = "SMG";
	    case 4: str = "Escopeta";
	    case 5: str = "Rifle";
	    case 6: str = "Semillas de Droga";
	    default: str = "Nada";
	}
	return str;
}

Crate_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
	    for (new i = 0; i != MAX_CRATES; i ++) if (!CrateData[i][crateExists])
	    {
         	if (Crate_Nearest(playerid, 2.5) != -1) {
			 	z = floatsub(z, 0.1);
	        }
            CrateData[i][crateExists] = true;
            CrateData[i][crateVehicle] = INVALID_VEHICLE_ID;
            CrateData[i][crateType] = type;

			CrateData[i][cratePos][0] = x;
   			CrateData[i][cratePos][1] = y;
            CrateData[i][cratePos][2] = z - 0.9;
            CrateData[i][cratePos][3] = angle;

            CrateData[i][crateInterior] = GetPlayerInterior(playerid);
            CrateData[i][crateWorld] = GetPlayerVirtualWorld(playerid);

            mysql_tquery(g_iHandle, "INSERT INTO `crates` (`crateInterior`) VALUES(0)", "OnCrateCreated", "d", i);
            Crate_Refresh(i);
            return i;
		}
	}
	return -1;
}

Job_Save(jobid)
{
	static
	    query[512];

	format(query, sizeof(query), "UPDATE `jobs` SET `jobType` = '%d', `jobPosX` = '%.4f', `jobPosY` = '%.4f', `jobPosZ` = '%.4f', `jobInterior` = '%d', `jobWorld` = '%d', `jobPointX` = '%.4f', `jobPointY` = '%.4f', `jobPointZ` = '%.4f', `jobDeliverX` = '%.4f', `jobDeliverY` = '%.4f', `jobDeliverZ` = '%.4f', `jobPointInt` = '%d', `jobPointWorld` = '%d' WHERE `jobID` = '%d'",
	    JobData[jobid][jobType],
	    JobData[jobid][jobPos][0],
	    JobData[jobid][jobPos][1],
	    JobData[jobid][jobPos][2],
	    JobData[jobid][jobInterior],
	    JobData[jobid][jobWorld],
	    JobData[jobid][jobPoint][0],
	    JobData[jobid][jobPoint][1],
	    JobData[jobid][jobPoint][2],
	    JobData[jobid][jobDeliver][0],
	    JobData[jobid][jobDeliver][1],
	    JobData[jobid][jobDeliver][2],
	    JobData[jobid][jobPointInt],
	    JobData[jobid][jobPointWorld],
	    JobData[jobid][jobID]
	);
	return mysql_tquery(g_iHandle, query);
}

Job_GetName(type)
{
	static
	    str[24];

	switch (type)
	{
	    case 1: str = "Camionero";
		case 2: str = "Mecanico";
		case 3: str = "Taxista";
		case 4: str = "Descargador de Carga";
		case 5: str = "Minero";
		case 6: str = "Vendedor de Alimentos";
		case 7: str = "Basurero";
		case 8: str = "Creador de Cajas";
		case 9: str = "Contrabandista de Armas";
	    default: str = "Ninguno";
	}
	return str;
}

Billboard_Save(bbid)
{
	static query[2048];
	format(query, sizeof(query), "UPDATE `billboards` SET `bbName` = '%s', `bbMessage` = '%s', `bbOwner` = '%d', `bbPrice` = '%d', `bbRange` = '%d', `bbPosX` = '%.4f', `bbPosY` = '%.4f', `bbPosZ` = '%.4f' WHERE `bbID` = '%d'",
  	SQL_ReturnEscaped(BillBoardData[bbid][bbName]),
  	SQL_ReturnEscaped(BillBoardData[bbid][bbMessage]),
  	BillBoardData[bbid][bbOwner],
 	BillBoardData[bbid][bbPrice],
  	BillBoardData[bbid][bbRange],
  	BillBoardData[bbid][bbPos][0],
  	BillBoardData[bbid][bbPos][1],
  	BillBoardData[bbid][bbPos][2],
  	BillBoardData[bbid][bbID]
 	);
 	return mysql_tquery(g_iHandle, query);
}

Billboard_Refresh(bizid)
{
	if (bizid != -1 && BillBoardData[bizid][bbExists])
	{
		if (IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
		    DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

		static
		    string[128];

		if (!BillBoardData[bizid][bbOwner]) {
			format(string, sizeof(string), "[%i] - [%s]\n%s", bizid, FormatNumber(BillBoardData[bizid][bbPrice]), BillBoardData[bizid][bbName]);
            BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		}
		else if (BillBoardData[bizid][bbOwner]) {
			format(string, sizeof(string), "[%i]\n%s\n%s", bizid, BillBoardData[bizid][bbName], BillBoardData[bizid][bbMessage]);
            BillBoardData[bizid][bbText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BillBoardData[bizid][bbPos][0], BillBoardData[bizid][bbPos][1], BillBoardData[bizid][bbPos][2], BillBoardData[bizid][bbRange], INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		}
	}
	return 1;
}

Billboard_Create(playerid, price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z;

	if (GetPlayerPos(playerid, x, y, z))
	{
		for (new i = 0; i != MAX_BILLBOARDS; i ++)
		{
	    	if (!BillBoardData[i][bbExists])
		    {
    	        BillBoardData[i][bbExists] = true;
        	    BillBoardData[i][bbOwner] = 0;
            	BillBoardData[i][bbPrice] = price;
            	BillBoardData[i][bbRange] = 10;

				format(BillBoardData[i][bbName], 32, "Unnamed Billboard");

    	        BillBoardData[i][bbPos][0] = x;
    	        BillBoardData[i][bbPos][1] = y;
    	        BillBoardData[i][bbPos][2] = z;

				Billboard_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `billboards` (`bbOwner`) VALUES(0)", "OnBillboardCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Billboard_Delete(bizid)
{
	if (bizid != -1 && BillBoardData[bizid][bbExists])
	{
	    new
	        string[82];

		format(string, sizeof(string), "DELETE FROM `billboards` WHERE `bbID` = '%d'", BillBoardData[bizid][bbID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(BillBoardData[bizid][bbText3D]))
		    DestroyDynamic3DTextLabel(BillBoardData[bizid][bbText3D]);

	    BillBoardData[bizid][bbExists] = false;
	    BillBoardData[bizid][bbOwner] = 0;
	    BillBoardData[bizid][bbID] = 0;
	}
	return 1;
}

Job_Refresh(jobid)
{
	if (jobid != -1 && JobData[jobid][jobExists])
	{
	    for (new i = 0; i < 3; i ++) {
			if (IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
		    	DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

			if (IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
		    	DestroyDynamicPickup(JobData[jobid][jobPickups][i]);
		}
		static
		    string[90];

		format(string, sizeof(string), "[%s]\n{FFFFFF}Escribe /trabajar para adquirir este trabajo!", Job_GetName(JobData[jobid][jobType]));

		if (JobData[jobid][jobType] == 1) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Delivery]\n{FFFFFF}Escribe /repartir para iniciar el delivery.", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == 5) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Minero]\n{FFFFFF}Escribe /minar para empezar a minar.", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

			JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Minero]\n{FFFFFF}Lleva las piedras a este punto.", COLOR_DARKBLUE, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 15.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
		else if (JobData[jobid][jobType] == 7) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Basurero]\n{FFFFFF}Escribe /tirarbasura para tirar tu basura.", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1264, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		else if (JobData[jobid][jobType] == 8) {
			JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Clasificador]\n{FFFFFF}Escribe /clasificar para empezar a clasificar paquetes.", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);

			JobData[jobid][jobText3D][2] = CreateDynamic3DTextLabel("[Clasificador]\n{FFFFFF}Lleva tus paquetes a este punto.", COLOR_DARKBLUE, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2], 15.0);
			JobData[jobid][jobPickups][2] = CreateDynamicPickup(1239, 23, JobData[jobid][jobDeliver][0], JobData[jobid][jobDeliver][1], JobData[jobid][jobDeliver][2]);
		}
        else if (JobData[jobid][jobType] == 9) {
		    JobData[jobid][jobText3D][1] = CreateDynamic3DTextLabel("[Partes de Armas]\n{FFFFFF}Escribe /crearpartes para crear una caja de armas.", COLOR_DARKBLUE, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
			JobData[jobid][jobPickups][1] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPoint][0], JobData[jobid][jobPoint][1], JobData[jobid][jobPoint][2], JobData[jobid][jobPointWorld], JobData[jobid][jobPointInt]);
		}
		JobData[jobid][jobText3D][0] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
        JobData[jobid][jobPickups][0] = CreateDynamicPickup(1239, 23, JobData[jobid][jobPos][0], JobData[jobid][jobPos][1], JobData[jobid][jobPos][2], JobData[jobid][jobWorld], JobData[jobid][jobInterior]);
	}
	return 1;
}

Job_Delete(jobid)
{
	if (jobid != -1 && JobData[jobid][jobExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `jobs` WHERE `jobID` = '%d'", JobData[jobid][jobID]);
		mysql_tquery(g_iHandle, string);

        for (new i = 0; i < 3; i ++) {
			if (IsValidDynamic3DTextLabel(JobData[jobid][jobText3D][i]))
		    	DestroyDynamic3DTextLabel(JobData[jobid][jobText3D][i]);

			if (IsValidDynamicPickup(JobData[jobid][jobPickups][i]))
		    	DestroyDynamicPickup(JobData[jobid][jobPickups][i]);
		}
		JobData[jobid][jobExists] = false;
	    JobData[jobid][jobType] = 0;
	    JobData[jobid][jobID] = 0;
	}
	return 1;
}

Job_Create(playerid, type)
{
	static
	    Float:x,
	    Float:y,
	    Float:z;

	if (GetPlayerPos(playerid, x, y, z))
	{
		for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++)
		{
	    	if (!JobData[i][jobExists])
	    	{
	        	JobData[i][jobExists] = true;
	        	JobData[i][jobType] = type;

				JobData[i][jobPos][0] = x;
	        	JobData[i][jobPos][1] = y;
	        	JobData[i][jobPos][2] = z;
	        	JobData[i][jobPoint][0] = 0.0;
	        	JobData[i][jobPoint][1] = 0.0;
	        	JobData[i][jobPoint][2] = 0.0;
	        	JobData[i][jobDeliver][0] = 0.0;
	        	JobData[i][jobDeliver][1] = 0.0;
	        	JobData[i][jobDeliver][2] = 0.0;

	        	JobData[i][jobInterior] = GetPlayerInterior(playerid);
	        	JobData[i][jobWorld] = GetPlayerVirtualWorld(playerid);

                JobData[i][jobPointInt] = 0;
                JobData[i][jobPointWorld] = 0;

	        	Job_Refresh(i);
	        	mysql_tquery(g_iHandle, "INSERT INTO `jobs` (`jobInterior`) VALUES(0)", "OnJobCreated", "d", i);

	        	return i;
	        }
	    }
	}
	return -1;
}

Car_Create(ownerid, modelid, Float:x, Float:y, Float:z, Float:angle, color1, color2, type = 0)
{
    for (new i = 0; i != MAX_DYNAMIC_CARS; i ++)
	{
		if (!CarData[i][carExists])
   		{
   		    if (color1 == -1)
   		        color1 = random(127);

			if (color2 == -1)
			    color2 = random(127);

   		    CarData[i][carExists] = true;
            CarData[i][carModel] = modelid;
            CarData[i][carOwner] = ownerid;

            CarData[i][carPos][0] = x;
            CarData[i][carPos][1] = y;
            CarData[i][carPos][2] = z;
            CarData[i][carPos][3] = angle;

            CarData[i][carColor1] = color1;
            CarData[i][carColor2] = color2;
            CarData[i][carPaintjob] = -1;
            CarData[i][carLocked] = false;
            CarData[i][carImpounded] = -1;
            CarData[i][carImpoundPrice] = 0;
            CarData[i][carFaction] = type;
            CarData[i][carJob] = type;

            for (new j = 0; j < 14; j ++)
			{
                if (j < 5)
				{
                    CarData[i][carWeapons][j] = 0;
                    CarData[i][carAmmo][j] = 0;
                }
                CarData[i][carMods][j] = 0;
            }
            CarData[i][carVehicle] = CreateVehicle(modelid, x, y, z, angle, color1, color2, -1);

            if (CarData[i][carVehicle] != INVALID_VEHICLE_ID) {
                ResetVehicle(CarData[i][carVehicle]);
            }
            mysql_tquery(g_iHandle, "INSERT INTO `cars` (`carModel`) VALUES(0)", "OnCarCreated", "d", i);
            return i;
		}
	}
	return -1;
}

Car_Delete(carid)
{
    if (carid != -1 && CarData[carid][carExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `cars` WHERE `carID` = '%d'", CarData[carid][carID]);
		mysql_tquery(g_iHandle, string);

		if (IsValidVehicle(CarData[carid][carVehicle]))
			DestroyVehicle(CarData[carid][carVehicle]);

		for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackVehicle] == CarData[carid][carID]) {
		    Backpack_Delete(i);
		}
		Car_RemoveAllItems(carid);

        CarData[carid][carExists] = false;
	    CarData[carid][carID] = 0;
	    CarData[carid][carOwner] = 0;
	    CarData[carid][carVehicle] = 0;
	}
	return 1;
}

Car_Save(carid)
{
	static
	    query[900];

	if (CarData[carid][carVehicle] != INVALID_VEHICLE_ID)
	{
	    for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
	    }
	}
	format(query, sizeof(query), "UPDATE `cars` SET `carModel` = '%d', `carOwner` = '%d', `carPosX` = '%.4f', `carPosY` = '%.4f', `carPosZ` = '%.4f', `carPosR` = '%.4f', `carColor1` = '%d', `carColor2` = '%d', `carPaintjob` = '%d', `carLocked` = '%d'",
        CarData[carid][carModel],
        CarData[carid][carOwner],
        CarData[carid][carPos][0],
        CarData[carid][carPos][1],
        CarData[carid][carPos][2],
        CarData[carid][carPos][3],
        CarData[carid][carColor1],
        CarData[carid][carColor2],
        CarData[carid][carPaintjob],
        CarData[carid][carLocked]
	);
	format(query, sizeof(query), "%s, `carMod1` = '%d', `carMod2` = '%d', `carMod3` = '%d', `carMod4` = '%d', `carMod5` = '%d', `carMod6` = '%d', `carMod7` = '%d', `carMod8` = '%d', `carMod9` = '%d', `carMod10` = '%d', `carMod11` = '%d', `carMod12` = '%d', `carMod13` = '%d', `carMod14` = '%d'",
		query,
		CarData[carid][carMods][0],
		CarData[carid][carMods][1],
		CarData[carid][carMods][2],
		CarData[carid][carMods][3],
		CarData[carid][carMods][4],
		CarData[carid][carMods][5],
		CarData[carid][carMods][6],
		CarData[carid][carMods][7],
		CarData[carid][carMods][8],
		CarData[carid][carMods][9],
		CarData[carid][carMods][10],
		CarData[carid][carMods][11],
		CarData[carid][carMods][12],
		CarData[carid][carMods][13]
	);
	format(query, sizeof(query), "%s, `carImpounded` = '%d', `carImpoundPrice` = '%d', `carFaction` = '%d', `carWeapon1` = '%d', `carWeapon2` = '%d', `carWeapon3` = '%d', `carWeapon4` = '%d', `carWeapon5` = '%d', `carAmmo1` = '%d', `carAmmo2` = '%d', `carAmmo3` = '%d', `carAmmo4` = '%d', `carAmmo5` = '%d', `carJob` = '%d' WHERE `carID` = '%d'",
		query,
		CarData[carid][carImpounded],
		CarData[carid][carImpoundPrice],
		CarData[carid][carFaction],
		CarData[carid][carWeapons][0],
		CarData[carid][carWeapons][1],
		CarData[carid][carWeapons][2],
		CarData[carid][carWeapons][3],
		CarData[carid][carWeapons][4],
		CarData[carid][carAmmo][0],
		CarData[carid][carAmmo][1],
		CarData[carid][carAmmo][2],
		CarData[carid][carAmmo][3],
		CarData[carid][carAmmo][4],
		CarData[carid][carJob],
		CarData[carid][carID]
	);
	return mysql_tquery(g_iHandle, query);
}

Entrance_Delete(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `entrances` WHERE `entranceID` = '%d'", EntranceData[entranceid][entranceID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
		    DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		    DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);

		if (EntranceData[entranceid][entranceType] == 3)
		    DestroyForklifts(entranceid);

	    EntranceData[entranceid][entranceExists] = false;
	    EntranceData[entranceid][entranceID] = 0;
	}
	return 1;
}

Entrance_Save(entranceid)
{
	static
	    query[1024];

	format(query, sizeof(query), "UPDATE `entrances` SET `entranceName` = '%s', `entrancePass` = '%s', `entranceIcon` = '%d', `entranceLocked` = '%d', `entrancePosX` = '%.4f', `entrancePosY` = '%.4f', `entrancePosZ` = '%.4f', `entrancePosA` = '%.4f', `entranceIntX` = '%.4f', `entranceIntY` = '%.4f', `entranceIntZ` = '%.4f', `entranceIntA` = '%.4f', `entranceInterior` = '%d', `entranceExterior` = '%d', `entranceExteriorVW` = '%d', `entranceType` = '%d'",
	    SQL_ReturnEscaped(EntranceData[entranceid][entranceName]),
	    SQL_ReturnEscaped(EntranceData[entranceid][entrancePass]),
	    EntranceData[entranceid][entranceIcon],
	    EntranceData[entranceid][entranceLocked],
	    EntranceData[entranceid][entrancePos][0],
	    EntranceData[entranceid][entrancePos][1],
	    EntranceData[entranceid][entrancePos][2],
	    EntranceData[entranceid][entrancePos][3],
	    EntranceData[entranceid][entranceInt][0],
	    EntranceData[entranceid][entranceInt][1],
	    EntranceData[entranceid][entranceInt][2],
	    EntranceData[entranceid][entranceInt][3],
	    EntranceData[entranceid][entranceInterior],
	    EntranceData[entranceid][entranceExterior],
	    EntranceData[entranceid][entranceExteriorVW],
	    EntranceData[entranceid][entranceType]
	);
	format(query, sizeof(query), "%s, `entranceCustom` = '%d', `entranceWorld` = '%d' WHERE `entranceID` = '%d'",
	    query,
	    EntranceData[entranceid][entranceCustom],
	    EntranceData[entranceid][entranceWorld],
	    EntranceData[entranceid][entranceID]
	);
	return mysql_tquery(g_iHandle, query);
}

IsPlayerNearMine(playerid)
{
	new
	    id = -1;

	if ((id = Job_NearestPoint(playerid, 10.0)) != -1 && JobData[id][jobType] == 5)
		return 1;

	return 0;
}

IsPlayerNearArrest(playerid)
{
	new
	    id = Arrest_Nearest(playerid);

	return (id != -1);
}

IsPlayerInCityHall(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 4)
	    return 1;

	return 0;
}

IsPlayerInWarehouse(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 3)
	    return 1;

	return 0;
}

IsPlayerInBank(playerid)
{
	new
		id = -1;

	if ((id = Entrance_Inside(playerid)) != -1 && EntranceData[id][entranceType] == 2)
	    return 1;

	return 0;
}

Entrance_Inside(playerid)
{
	if (PlayerData[playerid][pEntrance] != -1)
	{
	    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == PlayerData[playerid][pEntrance] && GetPlayerInterior(playerid) == EntranceData[i][entranceInterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceWorld])
	        return i;
	}
	return -1;
}

Entrance_GetLink(playerid)
{
	if (GetPlayerVirtualWorld(playerid) > 0)
	{
	    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == GetPlayerVirtualWorld(playerid) - 7000)
			return EntranceData[i][entranceID];
	}
	return -1;
}

Entrance_Nearest(playerid)
{
    for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[i][entrancePos][0], EntranceData[i][entrancePos][1], EntranceData[i][entrancePos][2]))
	{
		if (GetPlayerInterior(playerid) == EntranceData[i][entranceExterior] && GetPlayerVirtualWorld(playerid) == EntranceData[i][entranceExteriorVW])
			return i;
	}
	return -1;
}

Job_NearestPoint(playerid, Float:radius = 4.0)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, radius, JobData[i][jobPoint][0], JobData[i][jobPoint][1], JobData[i][jobPoint][2])) {
		return i;
	}
	return -1;
}

Job_Nearest(playerid)
{
    for (new i = 0; i != MAX_DYNAMIC_JOBS; i ++) if (JobData[i][jobExists] && IsPlayerInRangeOfPoint(playerid, 2.5, JobData[i][jobPos][0], JobData[i][jobPos][1], JobData[i][jobPos][2]))
	{
		if (GetPlayerInterior(playerid) == JobData[i][jobInterior] && GetPlayerVirtualWorld(playerid) == JobData[i][jobWorld])
			return i;
	}
	return -1;
}

Entrance_Refresh(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		if (IsValidDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]))
		    DestroyDynamic3DTextLabel(EntranceData[entranceid][entranceText3D]);

		if (IsValidDynamicPickup(EntranceData[entranceid][entrancePickup]))
		    DestroyDynamicPickup(EntranceData[entranceid][entrancePickup]);

		if (IsValidDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]))
		    DestroyDynamicMapIcon(EntranceData[entranceid][entranceMapIcon]);

		EntranceData[entranceid][entranceText3D] = CreateDynamic3DTextLabel(EntranceData[entranceid][entranceName], COLOR_DARKBLUE, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
        EntranceData[entranceid][entrancePickup] = CreateDynamicPickup(1559, 23, EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2] + 0.7, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);

		if (EntranceData[entranceid][entranceIcon] != 0)
			EntranceData[entranceid][entranceMapIcon] = CreateDynamicMapIcon(EntranceData[entranceid][entrancePos][0], EntranceData[entranceid][entrancePos][1], EntranceData[entranceid][entrancePos][2], EntranceData[entranceid][entranceIcon], 0, EntranceData[entranceid][entranceExteriorVW], EntranceData[entranceid][entranceExterior]);
	}
	return 1;
}

DestroyForklifts(entranceid)
{
	if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
		for (new i = 0; i < 7; i ++) if (IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
			DestroyVehicle(EntranceData[entranceid][entranceForklift][i]);

        	EntranceData[entranceid][entranceForklift][i] = INVALID_VEHICLE_ID;
        }
        return 1;
	}
	return 0;
}

CreateForklifts(entranceid)
{
    if (entranceid != -1 && EntranceData[entranceid][entranceExists])
	{
        EntranceData[entranceid][entranceForklift][0] = CreateVehicle(530,1300.6760,5.8440,1000.7919,180.2377,114,1,-1); // forklift 1
		EntranceData[entranceid][entranceForklift][1] = CreateVehicle(530,1303.4263,5.8919,1000.7883,181.4835,119,1,-1); // forklift 2
		EntranceData[entranceid][entranceForklift][2] = CreateVehicle(530,1305.7365,5.7953,1000.7904,179.7971,122,1,-1); // forklift 3
		EntranceData[entranceid][entranceForklift][3] = CreateVehicle(530,1308.2925,-8.6468,1000.7963,89.4510,4,1,-1); // forklift 4
		EntranceData[entranceid][entranceForklift][4] = CreateVehicle(530,1308.2974,-10.9627,1000.7974,91.8611,13,1,-1); // forklift 5
		EntranceData[entranceid][entranceForklift][5] = CreateVehicle(530,1308.3057,-13.6396,1000.7997,90.6285,110,1,-1); // forklift 6
		EntranceData[entranceid][entranceForklift][6] = CreateVehicle(530,1308.2751,-16.5108,1000.7980,90.2175,111,1,-1); // forklift 7

		for (new i = 0; i < 7; i ++) if (IsValidVehicle(EntranceData[entranceid][entranceForklift][i])) {
			SetVehicleVirtualWorld(EntranceData[entranceid][entranceForklift][i], EntranceData[entranceid][entranceWorld]);
			LinkVehicleToInterior(EntranceData[entranceid][entranceForklift][i], 18);

			CoreVehicles[EntranceData[entranceid][entranceForklift][i]][vehFuel] = 100;
			CoreVehicles[EntranceData[entranceid][entranceForklift][i]][vehLoadType] = 0;
		}
	}
	return 1;
}

Entrance_Create(playerid, name[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

    if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!EntranceData[i][entranceExists])
		    {
    	        EntranceData[i][entranceExists] = true;
        	    EntranceData[i][entranceIcon] = 0;
        	    EntranceData[i][entranceType] = 0;
        	    EntranceData[i][entranceCustom] = 0;
        	    EntranceData[i][entranceLocked] = 0;

				format(EntranceData[i][entranceName], 32, name);
				EntranceData[i][entrancePass][0] = 0;

    	        EntranceData[i][entrancePos][0] = x;
    	        EntranceData[i][entrancePos][1] = y;
    	        EntranceData[i][entrancePos][2] = z;
    	        EntranceData[i][entrancePos][3] = angle;

                EntranceData[i][entranceInt][0] = x;
                EntranceData[i][entranceInt][1] = y;
                EntranceData[i][entranceInt][2] = z + 10000;
                EntranceData[i][entranceInt][3] = 0.0000;

				EntranceData[i][entranceInterior] = 0;
				EntranceData[i][entranceExterior] = GetPlayerInterior(playerid);
				EntranceData[i][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

				Entrance_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `entrances` (`entranceType`) VALUES(0)", "OnEntranceCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

Business_RemoveVehicle(bizid, modelid)
{
	static
	    query[128];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (DealershipCars[bizid][i][vehModel] == modelid)
	{
	    DealershipCars[bizid][i][vehModel] = 0;
	    DealershipCars[bizid][i][vehPrice] = 0;

	    format(query, sizeof(query), "DELETE FROM `dealervehicles` WHERE `ID` = '%d' AND `vehID` = '%d'", BusinessData[bizid][bizID], DealershipCars[bizid][i][vehID]);
		mysql_tquery(g_iHandle, query);

		return 1;
	}
	return 0;
}

Business_AddVehicle(bizid, modelid, price)
{
	static
	    query[128];

	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++) if (!DealershipCars[bizid][i][vehModel])
	{
	    DealershipCars[bizid][i][vehModel] = modelid;
	    DealershipCars[bizid][i][vehPrice] = price;

	    format(query, sizeof(query), "INSERT INTO `dealervehicles` (`ID`, `vehModel`, `vehPrice`) VALUES('%d', '%d', '%d')", BusinessData[bizid][bizID], modelid, price);
	    mysql_tquery(g_iHandle, query, "OnDealerCarCreated", "dd", bizid, i);

	    return 1;
	}
	return 0;
}

Business_CarMenu(playerid, bizid)
{
 	static
	    cars[MAX_DEALERSHIP_CARS];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (!DealershipCars[bizid][i][vehModel])
			cars[i] = 19300;

		else
		    cars[i] = DealershipCars[bizid][i][vehModel];
	}
	ShowModelSelectionMenu(playerid, "Comprar Autos", MODEL_SELECTION_BUY_CAR, cars, sizeof(cars), -16.0, 0.0, -55.0, 0.9, 1);
	return 1;
}

Business_EditCars(playerid, bizid)
{
	static
	    cars[MAX_DEALERSHIP_CARS];

    for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
	{
		if (!DealershipCars[bizid][i][vehModel])
			cars[i] = 19300;

		else
		    cars[i] = DealershipCars[bizid][i][vehModel];
	}
	ShowModelSelectionMenu(playerid, "Autos de Concesionario", MODEL_SELECTION_DEALER, cars, sizeof(cars), -16.0, 0.0, -55.0, 0.9, 1);
	return 1;
}

forward Pump_Load(bizid);
public Pump_Load(bizid)
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	for (new i = 0; i < rows; i ++) if ((id = Pump_GetFreeID()) != -1)
	{
	    PumpData[id][pumpExists] = true;
	    PumpData[id][pumpBusiness] = bizid;
	    PumpData[id][pumpID] = cache_get_field_int(i, "pumpID");
	    PumpData[id][pumpPos][0] = cache_get_field_float(i, "pumpPosX");
	    PumpData[id][pumpPos][1] = cache_get_field_float(i, "pumpPosY");
	    PumpData[id][pumpPos][2] = cache_get_field_float(i, "pumpPosZ");
	    PumpData[id][pumpPos][3] = cache_get_field_float(i, "pumpPosA");
	    PumpData[id][pumpFuel] = cache_get_field_int(i, "pumpFuel");

	    PumpData[id][pumpObject] = CreateDynamicObject(1676, PumpData[id][pumpPos][0], PumpData[id][pumpPos][1], PumpData[id][pumpPos][2], 0.0, 0.0, PumpData[id][pumpPos][3]);
	    Pump_Refresh(id);
	}
	return 1;
}

Pump_GetFreeID()
{
	for (new i = 0; i < MAX_GAS_PUMPS; i ++) if (!PumpData[i][pumpExists]) {
	    return i;
	}
	return -1;
}

Pump_Delete(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
	    new
	        string[90];

		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `ID` = '%d' AND `pumpID` = '%d'", BusinessData[PumpData[pumpid][pumpBusiness]][bizID], PumpData[pumpid][pumpID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
		    DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		    DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		foreach (new i : Player) if (PlayerData[i][pGasPump] == pumpid) {
		    StopRefilling(i);
		}
	    PumpData[pumpid][pumpExists] = false;
	    PumpData[pumpid][pumpFuel] = 0;
	}
	return 1;
}

Pump_Create(playerid, bizid)
{
    static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle,
		string[64],
		id = -1;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		if ((id = Pump_GetFreeID()) != -1)
  		{
	        x += 5.0 * floatsin(-angle, degrees);
	        y += 5.0 * floatcos(-angle, degrees);

			PumpData[id][pumpExists] = true;
			PumpData[id][pumpBusiness] = bizid;
			PumpData[id][pumpPos][0] = x;
			PumpData[id][pumpPos][1] = y;
			PumpData[id][pumpPos][2] = z;
			PumpData[id][pumpPos][3] = angle;
            PumpData[id][pumpFuel] = 2000;
			PumpData[id][pumpObject] = CreateDynamicObject(1676, x, y, z, 0.0, 0.0, angle);

			format(string, sizeof(string), "INSERT INTO `pumps` (`ID`) VALUES(%d)", BusinessData[bizid][bizID]);
			mysql_tquery(g_iHandle, string, "OnPumpCreated", "d", id);
			return id;
		}
	}
	return -1;
}

Pump_Refresh(pumpid)
{
	if (pumpid != -1 && PumpData[pumpid][pumpExists])
	{
	    static
	        string[128];

		format(string, sizeof(string), "[GAS: %d]\n{FFFFFF}Combustible: %d litros", pumpid, PumpData[pumpid][pumpFuel]);

        if (IsValidDynamic3DTextLabel(PumpData[pumpid][pumpText3D]))
            DestroyDynamic3DTextLabel(PumpData[pumpid][pumpText3D]);

		if (IsValidDynamicObject(PumpData[pumpid][pumpObject]))
		    DestroyDynamicObject(PumpData[pumpid][pumpObject]);

		PumpData[pumpid][pumpText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 15.0);
        PumpData[pumpid][pumpObject] = CreateDynamicObject(1676, PumpData[pumpid][pumpPos][0], PumpData[pumpid][pumpPos][1], PumpData[pumpid][pumpPos][2], 0.0, 0.0, PumpData[pumpid][pumpPos][3]);
	}
	return 1;
}

Pump_Save(pumpid)
{
	static
	    query[256];

	format(query, sizeof(query), "UPDATE `pumps` SET `pumpPosX` = '%.4f', `pumpPosY` = '%.4f', `pumpPosZ` = '%.4f', `pumpPosA` = '%.4f', `pumpFuel` = '%d' WHERE `ID` = '%d' AND `pumpID` = '%d'",
	    PumpData[pumpid][pumpPos][0],
	    PumpData[pumpid][pumpPos][1],
	    PumpData[pumpid][pumpPos][2],
		PumpData[pumpid][pumpPos][3],
	    PumpData[pumpid][pumpFuel],
	    BusinessData[PumpData[pumpid][pumpBusiness]][bizID],
	    PumpData[pumpid][pumpID]
	);
	return mysql_tquery(g_iHandle, query);
}

House_Create(playerid, address[], price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!HouseData[i][houseExists])
		    {
    	        HouseData[i][houseExists] = true;
        	    HouseData[i][houseOwner] = 0;
            	HouseData[i][housePrice] = price;
            	HouseData[i][houseMoney] = 0;

				format(HouseData[i][houseAddress], 32, address);

    	        HouseData[i][housePos][0] = x;
    	        HouseData[i][housePos][1] = y;
    	        HouseData[i][housePos][2] = z;
    	        HouseData[i][housePos][3] = angle;

                HouseData[i][houseInt][0] = 2269.8772;
                HouseData[i][houseInt][1] = -1210.3240;
                HouseData[i][houseInt][2] = 1047.5625;
                HouseData[i][houseInt][3] = 90.0000;

				HouseData[i][houseInterior] = 10;
				HouseData[i][houseExterior] = GetPlayerInterior(playerid);
				HouseData[i][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

				HouseData[i][houseLights] = false;
				HouseData[i][houseLocked] = false;

				House_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `houses` (`houseOwner`) VALUES(0)", "OnHouseCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

House_RemoveFurniture(houseid)
{
	if (HouseData[houseid][houseExists])
	{
	    static
	        string[64];

	    for (new i = 0; i != MAX_FURNITURE; i ++) if (FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
	        FurnitureData[i][furnitureExists] = false;
	        FurnitureData[i][furnitureModel] = 0;
            FurnitureData[i][furnitureHouse] = -1;

	        DestroyDynamicObject(FurnitureData[i][furnitureObject]);
		}
		format(string, sizeof(string), "DELETE FROM `furniture` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

House_Delete(houseid)
{
	if (houseid != -1 && HouseData[houseid][houseExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `houses` WHERE `houseID` = '%d'", HouseData[houseid][houseID]);
		mysql_tquery(g_iHandle, string);

        if (IsValidDynamic3DTextLabel(HouseData[houseid][houseText3D]))
		    DestroyDynamic3DTextLabel(HouseData[houseid][houseText3D]);

		if (IsValidDynamicPickup(HouseData[houseid][housePickup]))
		    DestroyDynamicPickup(HouseData[houseid][housePickup]);

		if (IsValidDynamicMapIcon(HouseData[houseid][houseMapIcon]))
		    DestroyDynamicMapIcon(HouseData[houseid][houseMapIcon]);

        for (new i = 0; i < MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && BackpackData[i][backpackHouse] == HouseData[houseid][houseID]) {
		    Backpack_Delete(i);
		}
		House_RemoveFurniture(houseid);
		House_RemoveAllItems(houseid);

	    HouseData[houseid][houseExists] = false;
	    HouseData[houseid][houseOwner] = 0;
	    HouseData[houseid][houseID] = 0;
	}
	return 1;
}

House_IsOwner(playerid, houseid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

    if ((HouseData[houseid][houseExists] && HouseData[houseid][houseOwner] != 0) && HouseData[houseid][houseOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

Business_ProductMenu(playerid, bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	static
	    string[512];

	switch (BusinessData[bizid][bizType])
	{
	    case 1, 6:
	    {
			format(string, sizeof(string), "Celular - %s\nGPS - %s\nSpray - %s\nMochila - %s\nBotella de Agua - %s\nGaseosa - %s\nTicket de Loteria - %s\nRadio Portatil - %s\nLata de Combustible - %s\nPälanca - %s\nBoombox - %s\nMascara - %s\nPrimeros Auxilios - %s\nKit de Reparacion - %s\nFrasco de NOS - %s\nBat de Baseball - %s\nPizza Congelada - %s\nHamburguesa Congelada - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7]),
				FormatNumber(BusinessData[bizid][bizPrices][8]),
				FormatNumber(BusinessData[bizid][bizPrices][9]),
				FormatNumber(BusinessData[bizid][bizPrices][10]),
				FormatNumber(BusinessData[bizid][bizPrices][11]),
				FormatNumber(BusinessData[bizid][bizPrices][12]),
				FormatNumber(BusinessData[bizid][bizPrices][13]),
				FormatNumber(BusinessData[bizid][bizPrices][14]),
				FormatNumber(BusinessData[bizid][bizPrices][15]),
				FormatNumber(BusinessData[bizid][bizPrices][16]),
				FormatNumber(BusinessData[bizid][bizPrices][17])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Negocio: Modificar Items", string, "Modificar", "Cancelar");
		}
		case 2:
	    {
			format(string, sizeof(string), "Cargador - %s\nCartucho de Munición - %s\nChaleco Blindado - %s\nDesert Eagle - %s\nRemington 870 - %s\nM14 Rifle - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Negocio: Modificar Items", string, "Modificar", "Cancelar");
		}
		case 3:
	    {
			format(string, sizeof(string), "Ropa - %s\nLentes - %s\nGorros - %s\nBandanas - %s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Negocio: Modificar Items", string, "Modificar", "Cancelar");
		}
		case 4, 8:
	    {
			format(string, sizeof(string), "Agua - %s\nGaseosa - %s\nPapas Fritas - %s\nHamburguesa con Queso - %s\nHamburguesa de Pollo - %s\nNuggets de Pollo- %s\nEnsalada - %s",
    			FormatNumber(BusinessData[bizid][bizPrices][0]),
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6])
			);
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Negocio: Modificar Items", string, "Modificar", "Cancelar");
		}
		case 7:
	    {
	        string[0] = 0;

	        for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
	            format(string, sizeof(string), "%s%s - %s\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]));
			}
			Dialog_Show(playerid, EditProduct, DIALOG_STYLE_LIST, "Negocio: Modificar Items", string, "Modificar", "Cancelar");
		}
	}
	return 1;
}

Business_PurchaseMenu(playerid, bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	static
	    string[580];

	switch (BusinessData[bizid][bizType])
	{
	    case 1, 6:
	    {
			format(string, sizeof(string), "Producto\tPrecio\tStock\nCelular\t%s\t%d\nGPS\t%s\nSpray\t%s\nMochila\t%s\nBotella de Agua\t%s\nGaseosa\t%s\nTicket de Loteria\t%s\nRadio Portatil\t%s\nLata de Combustible\t%s\nPalanca\t%s\nBoombox\t%s\nMascara\t%s\nPrimeros Auxilios\t%s\nKit de Reparacion\t%s\nFrasco de NOS\t%s\nBat de Baseball\t%s\nPizza Congelada\t%s\nHamburguesa Congelada\t%s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				BusinessData[bizid][bizProducts],
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6]),
				FormatNumber(BusinessData[bizid][bizPrices][7]),
				FormatNumber(BusinessData[bizid][bizPrices][8]),
				FormatNumber(BusinessData[bizid][bizPrices][9]),
				FormatNumber(BusinessData[bizid][bizPrices][10]),
				FormatNumber(BusinessData[bizid][bizPrices][11]),
				FormatNumber(BusinessData[bizid][bizPrices][12]),
				FormatNumber(BusinessData[bizid][bizPrices][13]),
				FormatNumber(BusinessData[bizid][bizPrices][14]),
				FormatNumber(BusinessData[bizid][bizPrices][15]),
				FormatNumber(BusinessData[bizid][bizPrices][16]),
				FormatNumber(BusinessData[bizid][bizPrices][17])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST_HEADERS, BusinessData[bizid][bizName], string, "Comprar", "Cancelar");
		}
		case 2:
	    {
			format(string, sizeof(string), "Producto\tPrecio\tStock\nCargador\t%s\t%d\nCartucho de Munición\t%s\nChaleco Blindado\t%s\nDesert Eagle\t%s\nRemington 870\t%s\nM14 Rifle\t%s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				BusinessData[bizid][bizProducts],
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST_HEADERS, BusinessData[bizid][bizName], string, "Comprar", "Cancelar");
		}
		case 3:
	    {
			format(string, sizeof(string), "Producto\tPrecio\tStock\nRopa\t%s\t%d\nLentes\t%s\nGorros\t%s\nBandanas\t%s",
				FormatNumber(BusinessData[bizid][bizPrices][0]),
				BusinessData[bizid][bizProducts],
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST_HEADERS, BusinessData[bizid][bizName], string, "Comprar", "Cancelar");
		}
		case 4, 8:
		{
            format(string, sizeof(string), "Producto\tPrecio\tStock\nAgua\t%s\t%d\nGaseosa\t%s\nPapas Fritas\t%s\nHamburguesa con Queso\t%s\nHamburguesa de Pollo\t%s\nNuggets de Pollo\t%s\nEnsalada\t%s",
    			FormatNumber(BusinessData[bizid][bizPrices][0]),
    			BusinessData[bizid][bizProducts],
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5]),
				FormatNumber(BusinessData[bizid][bizPrices][6])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST_HEADERS, BusinessData[bizid][bizName], string, "Comprar", "Cancelar");
		}
		case 7:
	    {
	        string[0] = 0;

	        for (new i = 0; i < sizeof(g_aFurnitureTypes); i ++) {
	            format(string, sizeof(string), "Producto\tPrecio\tStock\n%s%s\t%s\t%d\n", string, g_aFurnitureTypes[i], FormatNumber(BusinessData[bizid][bizPrices][i]), BusinessData[bizid][bizProducts]);
			}
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST_HEADERS, BusinessData[bizid][bizName], string, "Comprar", "Cancelar");
		}
		case 9, 10:
		{
            format(string, sizeof(string), "Producto\tPrecio\tStock\nCerveza\t%s\t%d\nFernet con coca\t%s\nGin Tonic\t%s\nVodka con hielo\t%s\nFantino \t%s\nHamburguesa\t%s",
    			FormatNumber(BusinessData[bizid][bizPrices][0]),
    			BusinessData[bizid][bizProducts],
				FormatNumber(BusinessData[bizid][bizPrices][1]),
				FormatNumber(BusinessData[bizid][bizPrices][2]),
				FormatNumber(BusinessData[bizid][bizPrices][3]),
				FormatNumber(BusinessData[bizid][bizPrices][4]),
				FormatNumber(BusinessData[bizid][bizPrices][5])
			);
			Dialog_Show(playerid, BusinessBuy, DIALOG_STYLE_TABLIST_HEADERS, BusinessData[bizid][bizName], string, "Comprar", "Cancelar");
		}
	}
	return 1;
}

Business_Save(bizid)
{
	static
	    query[2048];

	format(query, sizeof(query), "UPDATE `businesses` SET `bizName` = '%s', `bizMessage` = '%s', `bizOwner` = '%d', `bizType` = '%d', `bizPrice` = '%d', `bizPosX` = '%.4f', `bizPosY` = '%.4f', `bizPosZ` = '%.4f', `bizPosA` = '%.4f', `bizIntX` = '%.4f', `bizIntY` = '%.4f', `bizIntZ` = '%.4f', `bizIntA` = '%.4f', `bizCheckX` = '%.4f', `bizCheckY` = '%.4f', `bizCheckZ` = '%.4f', `bizInterior` = '%d', `bizExterior` = '%d', `bizExteriorVW` = '%d', `bizLocked` = '%d', `bizVault` = '%d', `bizProducts` = '%d'",
		SQL_ReturnEscaped(BusinessData[bizid][bizName]),
		SQL_ReturnEscaped(BusinessData[bizid][bizMessage]),
		BusinessData[bizid][bizOwner],
		BusinessData[bizid][bizType],
		BusinessData[bizid][bizPrice],
		BusinessData[bizid][bizPos][0],
		BusinessData[bizid][bizPos][1],
		BusinessData[bizid][bizPos][2],
		BusinessData[bizid][bizPos][3],
		BusinessData[bizid][bizInt][0],
		BusinessData[bizid][bizInt][1],
		BusinessData[bizid][bizInt][2],
		BusinessData[bizid][bizInt][3],
		BusinessData[bizid][bizCheck][0],
		BusinessData[bizid][bizCheck][1],
		BusinessData[bizid][bizCheck][2],
		BusinessData[bizid][bizInterior],
		BusinessData[bizid][bizExterior],
		BusinessData[bizid][bizExteriorVW],
		BusinessData[bizid][bizLocked],
		BusinessData[bizid][bizVault],
		BusinessData[bizid][bizProducts]
	);
	for (new i = 0; i < 20; i ++) {
		format(query, sizeof(query), "%s, `bizPrice%d` = '%d'", query, i + 1, BusinessData[bizid][bizPrices][i]);
	}
	format(query, sizeof(query), "%s, `bizSpawnX` = '%.4f', `bizSpawnY` = '%.4f', `bizSpawnZ` = '%.4f', `bizSpawnA` = '%.4f', `bizDeliverX` = '%.4f', `bizDeliverY` = '%.4f', `bizDeliverZ` = '%.4f', `bizShipment` = '%d' WHERE `bizID` = '%d'",
		query,
		BusinessData[bizid][bizSpawn][0],
		BusinessData[bizid][bizSpawn][1],
		BusinessData[bizid][bizSpawn][2],
		BusinessData[bizid][bizSpawn][3],
		BusinessData[bizid][bizDeliver][0],
		BusinessData[bizid][bizDeliver][1],
		BusinessData[bizid][bizDeliver][2],
		BusinessData[bizid][bizShipment],
		BusinessData[bizid][bizID]
	);
	return mysql_tquery(g_iHandle, query);
}

Business_Inside(playerid)
{
	if (PlayerData[playerid][pBusiness] != -1)
	{
	    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == PlayerData[playerid][pBusiness] && GetPlayerInterior(playerid) == BusinessData[i][bizInterior] && GetPlayerVirtualWorld(playerid) > 0) {
	        return i;
		}
	}
	return -1;
}

Car_Inside(playerid)
{
	new carid;

	if (IsPlayerInAnyVehicle(playerid) && (carid = Car_GetID(GetPlayerVehicleID(playerid))) != -1)
	    return carid;

	return -1;
}

Car_Nearest(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 0; i != MAX_DYNAMIC_CARS; i ++) if (CarData[i][carExists]) {
		GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

		if (IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ)) {
		    return i;
		}
	}
	return -1;
}

Business_NearestDeliver(playerid)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, 5.0, BusinessData[i][bizDeliver][0], BusinessData[i][bizDeliver][1], BusinessData[i][bizDeliver][2])) {
        return i;
	}
	return -1;
}
//NUEVO buscador pickups de venta
Business_NearestVenta(playerid)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, 5.0, BusinessData[i][bizCheck][0], BusinessData[i][bizCheck][1], BusinessData[i][bizCheck][2])) {
        return i;
	}
	return -1;
}

Business_Nearest(playerid, Float:radius = 2.5)
{
    for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && IsPlayerInRangeOfPoint(playerid, radius, BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]))
	{
		if (GetPlayerInterior(playerid) == BusinessData[i][bizExterior] && GetPlayerVirtualWorld(playerid) == BusinessData[i][bizExteriorVW])
			return i;
	}
	return -1;
}

Business_Refresh(bizid)
{
	if (bizid != -1 && BusinessData[bizid][bizExists])
	{
		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

        if (IsValidDynamicPickup(BusinessData[bizid][bizDeliverPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizDeliverPickup]);

		//Eliminar pickups checkpoints de tiendas tipo dinamicos
		if (IsValidDynamicPickup(BusinessData[bizid][bizPickupV]))
		    DestroyDynamicPickup(BusinessData[bizid][bizPickupV]);

		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizVentaText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizVentaText3D]);

		static
		    string[128],
			pickup;

		if (!BusinessData[bizid][bizOwner]) {
			format(string, sizeof(string), "[%s]\n%s\nID: %d", FormatNumber(BusinessData[bizid][bizPrice]), BusinessData[bizid][bizName], GetBusinessByID(BusinessData[bizid][bizID]));
            BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, 0x33AA33FF, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else
		{
			if (BusinessData[bizid][bizLocked]) {
			    format(string, sizeof(string), "%s (cerrado)\nID : %d", BusinessData[bizid][bizName], GetBusinessByID(BusinessData[bizid][bizID]));
			}
			else {
			    format(string, sizeof(string), "%s\nID : %d", BusinessData[bizid][bizName], GetBusinessByID(BusinessData[bizid][bizID]));
			}
			BusinessData[bizid][bizText3D] = CreateDynamic3DTextLabel(string, (BusinessData[bizid][bizLocked]) ? (COLOR_LIGHTRED) : (COLOR_WHITE), BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		//Iconos de negocios
		switch (BusinessData[bizid][bizType]) {
		    case 1: pickup = 1272;
		    case 2: pickup = 348;
		    case 3: pickup = 1275;
		    case 4: pickup = 19094;
		    case 5: pickup = 1083;
		    case 6: pickup = 1650;
		    case 7: pickup = 2096;
		    case 8: pickup = 1582;
		    case 9: pickup = 1667;
		    case 10: pickup = 1667;
		}
		if (BusinessData[bizid][bizType] == 6) {
        	BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] + 0.3, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else if (BusinessData[bizid][bizType] == 7) {
		    BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2] - 0.6, BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		else {
            BusinessData[bizid][bizPickup] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2], BusinessData[bizid][bizExteriorVW], BusinessData[bizid][bizExterior]);
		}
		if (BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][0] != 0.0 && BusinessData[bizid][bizDeliver][0] != 0.0)
		{
		    format(string, sizeof(string), "%s\n\nPunto de Delivery", BusinessData[bizid][bizName]);

		    BusinessData[bizid][bizPickup] = CreateDynamicPickup(1239, 23, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2]);
		    BusinessData[bizid][bizDeliverText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, BusinessData[bizid][bizDeliver][0], BusinessData[bizid][bizDeliver][1], BusinessData[bizid][bizDeliver][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
		}
		//aparecer checkpoint (con icono) para comprar
		if (BusinessData[bizid][bizCheck][0] != 0.0 && BusinessData[bizid][bizCheck][0] != 0.0 && BusinessData[bizid][bizCheck][0] != 0.0)
		{

		    format(string, sizeof(string), "%s\n\nPunto de Venta", BusinessData[bizid][bizName]);
		    if (BusinessData[bizid][bizType] == 8) {
        		BusinessData[bizid][bizPickupV] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizCheck][0], BusinessData[bizid][bizCheck][1], BusinessData[bizid][bizCheck][2]);
		    	BusinessData[bizid][bizVentaText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, BusinessData[bizid][bizCheck][0], BusinessData[bizid][bizCheck][1], BusinessData[bizid][bizCheck][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
			}
			else if (BusinessData[bizid][bizType] == 10) {
			    BusinessData[bizid][bizPickupV] = CreateDynamicPickup(pickup, 23, BusinessData[bizid][bizCheck][0], BusinessData[bizid][bizCheck][1], BusinessData[bizid][bizCheck][2]);
		    	BusinessData[bizid][bizVentaText3D] = CreateDynamic3DTextLabel(string, COLOR_CLIENT, BusinessData[bizid][bizCheck][0], BusinessData[bizid][bizCheck][1], BusinessData[bizid][bizCheck][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0);
			}
		}
	}
	return 1;
}

Business_Create(playerid, type, price)
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i != MAX_HOUSES; i ++)
		{
	    	if (!BusinessData[i][bizExists])
		    {
    	        BusinessData[i][bizExists] = true;
        	    BusinessData[i][bizOwner] = 0;
            	BusinessData[i][bizPrice] = price;
            	BusinessData[i][bizType] = type;

				format(BusinessData[i][bizName], 32, "Negocio sin Nombre");

    	        BusinessData[i][bizPos][0] = x;
    	        BusinessData[i][bizPos][1] = y;
    	        BusinessData[i][bizPos][2] = z;
    	        BusinessData[i][bizPos][3] = angle;

    	        BusinessData[i][bizSpawn][0] = x;
    	        BusinessData[i][bizSpawn][1] = y;
    	        BusinessData[i][bizSpawn][2] = z;
    	        BusinessData[i][bizSpawn][3] = angle;

    	        BusinessData[i][bizDeliver][0] = 0.0;
    	        BusinessData[i][bizDeliver][1] = 0.0;
    	        BusinessData[i][bizDeliver][2] = 0.0;

				if (type == 1) {
                	BusinessData[i][bizInt][0] = -27.3074;
                	BusinessData[i][bizInt][1] = -30.8741;
                	BusinessData[i][bizInt][2] = 1003.5573;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 4;

					BusinessData[i][bizPrices][0] = 75;
		            BusinessData[i][bizPrices][1] = 125;
		            BusinessData[i][bizPrices][2] = 15;
		            BusinessData[i][bizPrices][3] = 100;
		            BusinessData[i][bizPrices][4] = 3;
		            BusinessData[i][bizPrices][5] = 2;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizPrices][7] = 100;
		            BusinessData[i][bizPrices][8] = 20;
		            BusinessData[i][bizPrices][9] = 10;
		            BusinessData[i][bizPrices][10] = 150;
		            BusinessData[i][bizPrices][11] = 200;
		            BusinessData[i][bizPrices][12] = 160;
                    BusinessData[i][bizPrices][13] = 60;
                    BusinessData[i][bizPrices][14] = 50;
		            BusinessData[i][bizPrices][15] = 5;
		            BusinessData[i][bizPrices][16] = 10;
		            BusinessData[i][bizPrices][17] = 5;
		            BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
					BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);
				}
				else if (type == 2) {
                	BusinessData[i][bizInt][0] = 316.3963;
                	BusinessData[i][bizInt][1] = -169.8375;
                	BusinessData[i][bizInt][2] = 999.6010;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 6;

                    BusinessData[i][bizPrices][0] = 50;
					BusinessData[i][bizPrices][1] = 100;
		            BusinessData[i][bizPrices][2] = 200;
		            BusinessData[i][bizPrices][3] = 400;
		            BusinessData[i][bizPrices][4] = 600;
		            BusinessData[i][bizPrices][5] = 800;
		            BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
					BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);
				}
				else if (type == 3) {
                	BusinessData[i][bizInt][0] = 161.4801;
                	BusinessData[i][bizInt][1] = -96.5368;
                	BusinessData[i][bizInt][2] = 1001.8047;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 18;

					BusinessData[i][bizPrices][0] = 25;
		            BusinessData[i][bizPrices][1] = 15;
		            BusinessData[i][bizPrices][2] = 10;
		            BusinessData[i][bizPrices][3] = 10;
		            BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
					BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);
				}
				else if (type == 4) {
                	BusinessData[i][bizInt][0] = 363.3402;
                	BusinessData[i][bizInt][1] = -74.6679;
                	BusinessData[i][bizInt][2] = 1001.5078;
                	BusinessData[i][bizInt][3] = 315.0000;
					BusinessData[i][bizInterior] = 10;

					BusinessData[i][bizPrices][0] = 2;
		            BusinessData[i][bizPrices][1] = 5;
		            BusinessData[i][bizPrices][2] = 5;
		            BusinessData[i][bizPrices][3] = 10;
		            BusinessData[i][bizPrices][4] = 10;
		            BusinessData[i][bizPrices][5] = 15;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
					BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);
				}
				else if (type == 5) {
				    BusinessData[i][bizInt][0] = 1494.5612;
	            	BusinessData[i][bizInt][1] = 1304.2061;
	            	BusinessData[i][bizInt][2] = 1093.2891;
	            	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 3;
					BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
					BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);
				}
				else if (type == 6) {
                	BusinessData[i][bizInt][0] = -27.3383;
                	BusinessData[i][bizInt][1] = -57.6909;
                	BusinessData[i][bizInt][2] = 1003.5469;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 6;
					BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
					BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

					BusinessData[i][bizPrices][0] = 75;
		            BusinessData[i][bizPrices][1] = 115;
		            BusinessData[i][bizPrices][2] = 15;
		            BusinessData[i][bizPrices][3] = 90;
		            BusinessData[i][bizPrices][4] = 3;
		            BusinessData[i][bizPrices][5] = 2;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizPrices][7] = 90;
		            BusinessData[i][bizPrices][8] = 20;
		            BusinessData[i][bizPrices][9] = 10;
		            BusinessData[i][bizPrices][10] = 140;
		            BusinessData[i][bizPrices][11] = 150;
                    BusinessData[i][bizPrices][12] = 50;
                    BusinessData[i][bizPrices][13] = 40;
		            BusinessData[i][bizPrices][14] = 5;
		            BusinessData[i][bizPrices][15] = 10;
		            BusinessData[i][bizPrices][16] = 5;
		            BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
					BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);
				}
				else if (type == 7) {
					BusinessData[i][bizInt][0] = -2240.4954;
   					BusinessData[i][bizInt][1] = 128.3774;
			   		BusinessData[i][bizInt][2] = 1035.4210;
      				BusinessData[i][bizInt][3] = 270.0000;
					BusinessData[i][bizInterior] = 6;

					BusinessData[i][bizPrices][0] = 75;
		            BusinessData[i][bizPrices][1] = 115;
		            BusinessData[i][bizPrices][2] = 15;
		            BusinessData[i][bizPrices][3] = 95;
		            BusinessData[i][bizPrices][4] = 3;
		            BusinessData[i][bizPrices][5] = 2;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizPrices][7] = 100;
		            BusinessData[i][bizPrices][8] = 20;
		            BusinessData[i][bizPrices][9] = 10;
		            BusinessData[i][bizPrices][10] = 140;
		            BusinessData[i][bizPrices][11] = 190;
		            BusinessData[i][bizPrices][12] = 150;
                    BusinessData[i][bizPrices][13] = 60;
                    BusinessData[i][bizPrices][14] = 50;
		            BusinessData[i][bizPrices][15] = 5;
		            BusinessData[i][bizPrices][16] = 10;
		            BusinessData[i][bizPrices][17] = 5;
		            BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
					BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);
				}
				// Beta de tienda de comida rapida a mundo abierto
				else if (type == 8) {
					BusinessData[i][bizInt][0] = x;
                	BusinessData[i][bizInt][1] = y;
                	BusinessData[i][bizInt][2] = z;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 0;

					BusinessData[i][bizPrices][0] = 2;
		            BusinessData[i][bizPrices][1] = 5;
		            BusinessData[i][bizPrices][2] = 5;
		            BusinessData[i][bizPrices][3] = 10;
		            BusinessData[i][bizPrices][4] = 10;
		            BusinessData[i][bizPrices][5] = 15;
		            BusinessData[i][bizPrices][6] = 10;
		            BusinessData[i][bizExterior] = 0; //ambos se asignan 0 para el exterior
					BusinessData[i][bizExteriorVW] = 0; //ambos se asignan 0 para el exterior
				}
				
				else if (type == 9) {
                	BusinessData[i][bizInt][0] = 501.8523;
   					BusinessData[i][bizInt][1] = -68.2582;
			   		BusinessData[i][bizInt][2] = 998.7578;
      				BusinessData[i][bizInt][3] = 185.5292;
					BusinessData[i][bizInterior] = 11;

					BusinessData[i][bizPrices][0] = 3;
		            BusinessData[i][bizPrices][1] = 8;
		            BusinessData[i][bizPrices][2] = 5;
		            BusinessData[i][bizPrices][3] = 4;
		            BusinessData[i][bizPrices][4] = 1;
		            BusinessData[i][bizPrices][5] = 10;
		            BusinessData[i][bizExterior] = GetPlayerInterior(playerid);
					BusinessData[i][bizExteriorVW] = GetPlayerVirtualWorld(playerid);
				}
				
				// Beta de tienda de comida rapida a mundo abierto
				else if (type == 10) {

					BusinessData[i][bizInt][0] = x;
                	BusinessData[i][bizInt][1] = y;
                	BusinessData[i][bizInt][2] = z;
                	BusinessData[i][bizInt][3] = 0.0000;
					BusinessData[i][bizInterior] = 0;

					BusinessData[i][bizPrices][0] = 3;
		            BusinessData[i][bizPrices][1] = 8;
		            BusinessData[i][bizPrices][2] = 5;
		            BusinessData[i][bizPrices][3] = 4;
		            BusinessData[i][bizPrices][4] = 1;
		            BusinessData[i][bizPrices][5] = 15;
		            BusinessData[i][bizExterior] = 0; //ambos se asignan 0 para el exterior
					BusinessData[i][bizExteriorVW] = 0; //ambos se asignan 0 para el exterior
				}
				

				BusinessData[i][bizLocked] = false;
				BusinessData[i][bizVault] = 0;
				BusinessData[i][bizProducts] = 100;
				BusinessData[i][bizShipment] = 0;

				Business_Refresh(i);
				mysql_tquery(g_iHandle, "INSERT INTO `businesses` (`bizOwner`) VALUES(0)", "OnBusinessCreated", "d", i);
				return i;
			}
		}
	}
	return -1;
}

stock Business_RemoveCars(bizid)
{
	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
	{
	    static
	        string[32];

		for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
		{
  			DealershipCars[bizid][i][vehModel] = 0;
    		DealershipCars[bizid][i][vehPrice] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `dealervehicles` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

stock Business_RemovePumps(bizid)
{
	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 6)
	{
	    static
	        string[32];

	    foreach (new i : Player) if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasStation] == bizid)
	    {
	        StopRefilling(i);
	    }
		for (new i = 0; i != MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == bizid)
		{
  			DestroyDynamicObject(PumpData[i][pumpObject]);
			DestroyDynamic3DTextLabel(PumpData[i][pumpText3D]);

		    PumpData[i][pumpExists] = 0;
		    PumpData[i][pumpFuel] = 0;
		}
		format(string, sizeof(string), "DELETE FROM `pumps` WHERE `ID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);
	}
	return 1;
}

Business_Delete(bizid)
{
	if (bizid != -1 && BusinessData[bizid][bizExists])
	{
	    new
	        string[82];

		format(string, sizeof(string), "DELETE FROM `businesses` WHERE `bizID` = '%d'", BusinessData[bizid][bizID]);
		mysql_tquery(g_iHandle, string);

		foreach (new i : Player) if (PlayerData[i][pShipment] == bizid) {
			PlayerData[i][pShipment] = -1;
			PlayerData[i][pDeliverShipment] = 0;

			DisablePlayerCheckpoint(i);
		}
        if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizText3D]);

		if (IsValidDynamicPickup(BusinessData[bizid][bizPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizPickup]);

		//Nuevo para eliminar datos de tienda

		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizDeliverText3D]);

        if (IsValidDynamicPickup(BusinessData[bizid][bizDeliverPickup]))
		    DestroyDynamicPickup(BusinessData[bizid][bizDeliverPickup]);

		//Eliminar pickups checkpoints de tiendas tipo 8
		if (IsValidDynamicPickup(BusinessData[bizid][bizPickupV]))
		    DestroyDynamicPickup(BusinessData[bizid][bizPickupV]);

		if (IsValidDynamic3DTextLabel(BusinessData[bizid][bizVentaText3D]))
		    DestroyDynamic3DTextLabel(BusinessData[bizid][bizVentaText3D]);

		Business_RemovePumps(bizid);
		Business_RemoveCars(bizid);

	    BusinessData[bizid][bizExists] = false;
	    BusinessData[bizid][bizOwner] = 0;
	    BusinessData[bizid][bizID] = 0;
	}
	return 1;
}

Business_IsOwner(playerid, bizid)
{
	if (!PlayerData[playerid][pLogged] || PlayerData[playerid][pID] == -1)
	    return 0;

	if (BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] == 99999999 && PlayerData[playerid][pAdmin] > 0)
		return 1;

    if ((BusinessData[bizid][bizExists] && BusinessData[bizid][bizOwner] != 0) && BusinessData[bizid][bizOwner] == PlayerData[playerid][pID])
		return 1;

	return 0;
}

forward OpenInventory(playerid);
public OpenInventory(playerid)
{
    if (!IsPlayerConnected(playerid) || !PlayerData[playerid][pCharacter])
	    return 0;

	static
	    items[MAX_INVENTORY],
		amounts[MAX_INVENTORY];

    for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++)
	{
 		if (InventoryData[playerid][i][invExists]) {
   			items[i] = InventoryData[playerid][i][invModel];
   			amounts[i] = InventoryData[playerid][i][invQuantity];
		}
		else {
		    items[i] = -1;
		    amounts[i] = -1;
		}
	}
	PlayerData[playerid][pStorageSelect] = 0;
	return ShowModelSelectionMenu(playerid, "Inventory", MODEL_SELECTION_INVENTORY, items, sizeof(items), 0.0, 0.0, 0.0, 1.0, -1, true, amounts);
}

forward SelectTD(playerid);
public SelectTD(playerid)
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	return SelectTextDraw(playerid, -1);
}

ReturnDate()
{
	static
	    date[36];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	format(date, sizeof(date), "%02d/%02d/%d, %02d:%02d", date[0], date[1], date[2], date[3], date[4]);
	return date;
}

ReturnVehicleHealth(vehicleid)
{
	if (!IsValidVehicle(vehicleid))
	    return 0;

	static
	    Float:amount;

	GetVehicleHealth(vehicleid, amount);
	return floatround(amount, floatround_round);
}

ReturnArmour(playerid)
{
	static
	    Float:amount;

	GetPlayerArmour(playerid, amount);
	return floatround(amount, floatround_round);
}

ReturnHealth(playerid)
{
	static
	    Float:amount;

	GetPlayerHealth(playerid, amount);
	return floatround(amount, floatround_round);
}

ReturnName(playerid, underscore=1)
{
	static
	    name[MAX_PLAYER_NAME + 1];

	GetPlayerName(playerid, name, sizeof(name));

	if (!underscore) {
	    for (new i = 0, len = strlen(name); i < len; i ++) {
	        if (name[i] == '_') name[i] = ' ';
		}
	}
	if (PlayerData[playerid][pMaskOn])
	    format(name, sizeof(name), "Mascara_#%d", PlayerData[playerid][pMaskID]);

	return name;
}

ReturnIP(playerid)
{
	static
	    ip[16];

	GetPlayerIp(playerid, ip, sizeof(ip));
	return ip;
}

ShowStatsForPlayer(playerid, targetid)
{
    new
	    account[24],
	    origin[32],
	    string[128],
		count;

	for (new i = 0; i < MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) {
	    count++;
	}
	if (PlayerData[targetid][pAdmin] > 0) account = "Admin";
 	else if (PlayerData[targetid][pTester] > 0) account = "Tester";
	else account = "Player";

	format(origin, 32, "%.16s", PlayerData[targetid][pOrigin]);

	if (strlen(PlayerData[targetid][pOrigin]) > 16)
		strcat(origin, "...");

	format(string, sizeof(string), "~g~Sexo:~w~ %s~n~~g~Nacimiento:~w~ %s~n~~g~Origen:~w~ %s", (PlayerData[targetid][pGender] == 2) ? ("Mujer") : ("Hombre"), PlayerData[targetid][pBirthdate], origin);
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][42], string);

	format(string, sizeof(string), "%s (ID: %d)", ReturnName(targetid), targetid);
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][43], string);

	//format(string, sizeof(string), "~g~Ping:~w~ %d~n~~g~Packetloss:~w~ %.1f%%~n~~g~Time Online:~w~ %02d:%02d:%02d", GetPlayerPing(targetid), NetStats_PacketLossPercent(targetid), hours, minutes, seconds);
	format(string, sizeof(string), "~g~Horas:~w~ %d~n~~g~Trabajo:~w~ %s~n~~g~Inventario:~w~ %d/%d", PlayerData[targetid][pPlayingHours], Job_GetName(PlayerData[targetid][pJob]), count, MAX_INVENTORY);
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][46], string);

    format(string, sizeof(string), "~g~Dinero:~w~ %s~n~~g~Banco:~w~ %s~n~~g~Ahorros:~w~ %s", FormatNumber(PlayerData[targetid][pMoney]), FormatNumber(PlayerData[targetid][pBankMoney]), FormatNumber(PlayerData[targetid][pSavings]));
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][44], string);

	format(string, sizeof(string), "~g~Cuenta:~w~ %s~n~~g~Tester:~w~ %s~n~~g~Admin:~w~ %s", account, (PlayerData[targetid][pTester]) ? ("Si") : ("No"), (PlayerData[targetid][pAdmin]) ? ("Si") : ("No"));
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][45], string);

	if (!PlayerData[playerid][pDisplayStats])
	{
	    if (targetid != playerid)
		{
		    for (new i = 40; i < 50; i ++) if (i != 47 && i != 48) {
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
		}
		else for (new i = 40; i < 50; i ++) {
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SelectTextDraw(playerid, -1);
		PlayerData[playerid][pDisplayStats] = true;
	}
	else
	{
	    if (PlayerData[playerid][pDisplayStats] == 2) {
	        for (new i = 50; i < 58; i ++) PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    }
	    else for (new i = 40; i < 50; i ++) {
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		CancelSelectTextDraw(playerid);
		PlayerData[playerid][pDisplayStats] = false;
	}
	return 1;
}

Blacklist_Add(ip[], username[], banner[], reason[])
{
	static
	    string[256];

	format(string, sizeof(string), "INSERT INTO `blacklist` (`IP`, `Username`, `BannedBy`, `Reason`, `Date`) VALUES('%s', '%s', '%s', '%s', '%s')",
		SQL_ReturnEscaped(ip),
		SQL_ReturnEscaped(username),
		SQL_ReturnEscaped(banner),
		SQL_ReturnEscaped(reason),
		ReturnDate()
	);
	mysql_tquery(g_iHandle, string);
}

Blacklist_Remove(username[])
{
	static
	    string[128];

	format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(username));
    mysql_tquery(g_iHandle, string);
}

Blacklist_RemoveIP(ip[])
{
	static
	    string[128];

    format(string, sizeof(string), "DELETE FROM `blacklist` WHERE `IP` = '%s'", SQL_ReturnEscaped(ip));
    mysql_tquery(g_iHandle, string);
}

MLowrider(playerid)
{
	Dialog_Show(playerid, MPaintjobLow,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\n{FF0000}Atras","Select","Cancel");
    return 1;
}

//Para autos comunes
MRegularCarDialog(playerid)
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
 	new string[128];
	if(vehmd == 401 || vehmd == 496 || vehmd == 518 || vehmd == 540 || vehmd == 546 || vehmd == 589)
	{string = "Aleron\nCapo\nTecho\nVentilacion\nGuardabarro\nLuces\n{FF0000}Atras";}
	else if(vehmd == 549)
	{string = "Aleron\nCapo\nVentilacion\nGuardabarro\nLuces\n{FF0000}Atras";}
	else if(vehmd == 550)
	{string = "Aleron\nCapo\nTecho\nVentilacion\nLuces\n{FF0000}Atras";}
	else if(vehmd == 585 || vehmd == 603)
	{string = "Aleron\nTecho\nVentilacion\nGuardabarro\nLuces\n{FF0000}Atras";}
	else if(vehmd == 410 || vehmd == 436)
	{string = "Aleron\nTecho\nGuardabarro\nLuces\n{FF0000}Atras";}
	else if(vehmd == 439 || vehmd == 458)
	{string = "Aleron\nVentilacion\nGuardabarro\nLuces\n{FF0000}Atras";}
	else if(vehmd == 551 || vehmd == 492 || vehmd == 529)
	{string = "Aleron\nCapo\nTecho\nGuardabarro\n{FF0000}Atras";}
	else if(vehmd == 489 || vehmd == 505)
	{string = "Aleron\nCapo\nTecho\nLuces\n{FF0000}Atras";}
	else if(vehmd == 516)
	{string = "Aleron\nCapo\nGuardabarro\n{FF0000}Atras";}
	else if(vehmd == 491 || vehmd == 517)
	{string = "Aleron\nVentilacion\nGuardabarro\n{FF0000}Atras";}
	else if(vehmd == 418 || vehmd == 527 || vehmd == 580)
	{string = "Aleron\nTecho\nGuardabarro\n{FF0000}Atras";}
	else if(vehmd == 420 || vehmd == 587)
	{string = "Aleron\nCapo\n{FF0000}Atras";}
	else if(vehmd == 547)
	{string = "Aleron\nVentilacion\n{FF0000}Atras";}
	else if(vehmd == 415)
	{string = "Aleron\nGuardabarro\n{FF0000}Atras";}
	
    Dialog_Show(playerid, MRegularcars,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancel");
    return 1;
}
MMod(playerid)//Alien
{
    Dialog_Show(playerid,MAlien,DIALOG_STYLE_LIST,"Choose one","Right Sideskirt\nLeft Sideskirt\nExhaust\nRoof\nSpoiler\nFront Bumper\nRear Bumper\n{FF0000}Atras","Select","Cancle");
    return 1;
}
MMod1(playerid)//X-Flow
{
	Dialog_Show(playerid,MXflow,DIALOG_STYLE_LIST,"Choose one","Right Sideskirt\nLeft Sideskirt\nExhaust\nRoof\nSpoiler\nFront Bumper\nRear Bumper\n{FF0000}Atras","Select","Cancle");
	return 1;
}
MMod2(playerid)//Chrome
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    new string[128];
	if(vehmd == 576 || vehmd == 575)
	{string = "Right Sideskirt\nLeft Sideskirt\nExhaust\nFront Bumper\nRear Bumper\n{FF0000}Atras";}
	else if(vehmd == 535)
	{string = "Front Bullbars\nRear Bullbars\nExhaust\nFront Bumper\nRight Sideskirt\nLeft Sideskirt\n{FF0000}Atras";}
	else if(vehmd == 567 || vehmd == 536)
	{string = "Exhaust\nRight Sideskirt\nLeft Sideskirt\nRear Bumper\nFront Bumper\n{FF0000}Atras";}
	else if(vehmd == 534)
	{string = "Grill\nBars\nLights\nExhaust\nFront Bumper\nRear Bumper\n{FF0000}Atras";}
	
    Dialog_Show(playerid,MChrome,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancle");
	return 1;
}
MMod3(playerid)//Slamin
{
    new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    new string[128];
    if(vehmd == 575 || vehmd == 576)
	{string = "Exhaust\nFront Bumper\nRear Bumper\n{FF0000}Atras";}
	else if(vehmd == 535)
	{string = "Rear Bullbars\nFront Bullbars\nExhaust\nRight Sideskirt\nLeft Sidedkirt\n{FF0000}Atras";}
	else if(vehmd == 567 || vehmd == 536 || vehmd == 534)
	{string = "Front Bumper\nRear Bumper\nExhaust\n{FF0000}Atras";}
    Dialog_Show(playerid,MSlamin,DIALOG_STYLE_LIST,"Choose one",string,"Select","Cancle");
    return 1;
}

stock Inventory_Clear(playerid)
{
	static
	    string[64];

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (InventoryData[playerid][i][invExists])
	    {
	        InventoryData[playerid][i][invExists] = 0;
	        InventoryData[playerid][i][invModel] = 0;
	        InventoryData[playerid][i][invQuantity] = 0;
		}
	}
	format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d'", PlayerData[playerid][pID]);
	return mysql_tquery(g_iHandle, string);
}

stock Inventory_Set(playerid, item[], model, amount)
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid == -1 && amount > 0)
		Inventory_Add(playerid, item, model, amount);

	else if (amount > 0 && itemid != -1)
	    Inventory_SetQuantity(playerid, item, amount);

	else if (amount < 1 && itemid != -1)
	    Inventory_Remove(playerid, item, -1);

	return 1;
}

stock Inventory_GetItemID(playerid, item[])
{
	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (!InventoryData[playerid][i][invExists])
	        continue;

		if (!strcmp(InventoryData[playerid][i][invItem], item)) return i;
	}
	return -1;
}

stock Inventory_GetFreeID(playerid)
{
	if (Inventory_Items(playerid) >= PlayerData[playerid][pCapacity])
		return -1;

	for (new i = 0; i < MAX_INVENTORY; i ++)
	{
	    if (!InventoryData[playerid][i][invExists])
	        return i;
	}
	return -1;
}

stock Inventory_Items(playerid)
{
    new count;

    for (new i = 0; i != MAX_INVENTORY; i ++) if (InventoryData[playerid][i][invExists]) {
        count++;
	}
	return count;
}

stock Inventory_Count(playerid, item[])
{
	new itemid = Inventory_GetItemID(playerid, item);

	if (itemid != -1)
	    return InventoryData[playerid][itemid][invQuantity];

	return 0;
}

stock Inventory_HasItem(playerid, item[])
{
	return (Inventory_GetItemID(playerid, item) != -1);
}

stock Inventory_SetQuantity(playerid, item[], quantity)
{
	new
	    itemid = Inventory_GetItemID(playerid, item),
	    string[128];

	if (itemid != -1)
	{
	    format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	    mysql_tquery(g_iHandle, string);

	    InventoryData[playerid][itemid][invQuantity] = quantity;
	}
	return 1;
}

stock Inventory_Add(playerid, item[], model, quantity = 1)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = Inventory_GetFreeID(playerid);

	    if (itemid != -1)
	    {
	        InventoryData[playerid][itemid][invExists] = true;
	        InventoryData[playerid][itemid][invModel] = model;
	        InventoryData[playerid][itemid][invQuantity] = quantity;

	        strpack(InventoryData[playerid][itemid][invItem], item, 32 char);

			if (strcmp(item, "Demo Soda") != 0)
			{
				format(string, sizeof(string), "INSERT INTO `inventory` (`ID`, `invItem`, `invModel`, `invQuantity`) VALUES('%d', '%s', '%d', '%d')", PlayerData[playerid][pID], item, model, quantity);
				mysql_tquery(g_iHandle, string, "OnInventoryAdd", "dd", playerid, itemid);
			}
	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` + %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	    mysql_tquery(g_iHandle, string);

	    InventoryData[playerid][itemid][invQuantity] += quantity;
	}
	return itemid;
}

stock Inventory_Remove(playerid, item[], quantity = 1)
{
	new
		itemid = Inventory_GetItemID(playerid, item),
		string[128];

	if (itemid != -1)
	{
	    if (InventoryData[playerid][itemid][invQuantity] > 0)
	    {
	        InventoryData[playerid][itemid][invQuantity] -= quantity;
		}
		if (quantity == -1 || InventoryData[playerid][itemid][invQuantity] < 1)
		{
		    InventoryData[playerid][itemid][invExists] = false;
		    InventoryData[playerid][itemid][invModel] = 0;
		    InventoryData[playerid][itemid][invQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `inventory` WHERE `ID` = '%d' AND `invID` = '%d'", PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && InventoryData[playerid][itemid][invQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `inventory` SET `invQuantity` = `invQuantity` - %d WHERE `ID` = '%d' AND `invID` = '%d'", quantity, PlayerData[playerid][pID], InventoryData[playerid][itemid][invID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

stock RemoveAlpha(color) {
    return (color & ~0xFF);
}

stock CancelDrivingTest(playerid)
{
	if (PlayerData[playerid][pDrivingTest])
	{
 		SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
 		SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

  		SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
  		SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

		DisablePlayerCheckpoint(playerid);
  		SetCameraBehindPlayer(playerid);

		DestroyVehicle(PlayerData[playerid][pTestCar]);
  		PlayerData[playerid][pDrivingTest] = false;
	}
	return 1;
}

stock House_WeaponStorage(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	static
	    string[320];

	string[0] = 0;

	for (new i = 0; i < 10; i ++)
	{
	    if (!HouseData[houseid][houseWeapons][i])
	        format(string, sizeof(string), "%sSlot Vacío\n", string);

		else
			format(string, sizeof(string), "%s%s (Ammo: %d)\n", string, ReturnWeaponName(HouseData[houseid][houseWeapons][i]), HouseData[houseid][houseAmmo][i]);
	}
	Dialog_Show(playerid, HouseWeapons, DIALOG_STYLE_LIST, "Armas", string, "Seleccionar", "Cancelar");
	return 1;
}

stock House_ShowItems(playerid, houseid)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	static
	    string[MAX_HOUSE_STORAGE * 32],
		name[32];

	string[0] = 0;

	for (new i = 0; i != MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        format(string, sizeof(string), "%sSlot Vacío\n", string);

		else {
			strunpack(name, HouseStorage[houseid][i][hItemName]);

			if (HouseStorage[houseid][i][hItemQuantity] == 1) {
			    format(string, sizeof(string), "%s%s\n", string, name);
			}
			else format(string, sizeof(string), "%s%s (%d)\n", string, name, HouseStorage[houseid][i][hItemQuantity]);
		}
	}
	Dialog_Show(playerid, HouseItems, DIALOG_STYLE_LIST, "Items", string, "Seleccionar", "Cancelar");
	return 1;
}

stock House_OpenStorage(playerid, houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		items[2],
		string[MAX_HOUSE_STORAGE * 32];

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++) if (HouseStorage[houseid][i][hItemExists]) {
	    items[0]++;
	}
	for (new i = 0; i < 10; i ++) if (HouseData[houseid][houseWeapons][i]) {
	    items[1]++;
	}
	if (!House_IsOwner(playerid, houseid))
	    format(string, sizeof(string), "Items (%d/%d)\nArmas (%d/10)", items[0], MAX_HOUSE_STORAGE, items[1]);

	else
		format(string, sizeof(string), "Items (%d/%d)\nArmas (%d/10)\nCaja Fuerte (%s)", items[0], MAX_HOUSE_STORAGE, items[1], FormatNumber(HouseData[houseid][houseMoney]));

	Dialog_Show(playerid, HouseStorage, DIALOG_STYLE_LIST, "Almacenamiento de la Casa", string, "Seleccionar", "Cancelar");
	return 1;
}

stock House_GetItemID(houseid, item[])
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        continue;

		if (!strcmp(HouseStorage[houseid][i][hItemName], item)) return i;
	}
	return -1;
}

stock House_GetFreeID(houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	for (new i = 0; i < MAX_HOUSE_STORAGE; i ++)
	{
	    if (!HouseStorage[houseid][i][hItemExists])
	        return i;
	}
	return -1;
}

stock House_AddItem(houseid, item[], model, quantity = 1, slotid = -1)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		itemid = House_GetItemID(houseid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = House_GetFreeID(houseid);

	    if (itemid != -1)
	    {
	        if (slotid != -1)
	            itemid = slotid;

	        HouseStorage[houseid][itemid][hItemExists] = true;
	        HouseStorage[houseid][itemid][hItemModel] = model;
	        HouseStorage[houseid][itemid][hItemQuantity] = quantity;

	        strpack(HouseStorage[houseid][itemid][hItemName], item, 32 char);

			format(string, sizeof(string), "INSERT INTO `housestorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", HouseData[houseid][houseID], item, model, quantity);
			mysql_tquery(g_iHandle, string, "OnStorageAdd", "dd", houseid, itemid);

	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
	    mysql_tquery(g_iHandle, string);

	    HouseStorage[houseid][itemid][hItemQuantity] += quantity;
	}
	return itemid;
}

stock House_RemoveItem(houseid, item[], quantity = 1)
{
    if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	new
		itemid = House_GetItemID(houseid, item),
		string[128];

	if (itemid != -1)
	{
	    if (HouseStorage[houseid][itemid][hItemQuantity] > 0)
	    {
	        HouseStorage[houseid][itemid][hItemQuantity] -= quantity;
		}
		if (quantity == -1 || HouseStorage[houseid][itemid][hItemQuantity] < 1)
		{
		    HouseStorage[houseid][itemid][hItemExists] = false;
		    HouseStorage[houseid][itemid][hItemModel] = 0;
		    HouseStorage[houseid][itemid][hItemQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `housestorage` WHERE `ID` = '%d' AND `itemID` = '%d'", HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && HouseStorage[houseid][itemid][hItemQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `housestorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, HouseData[houseid][houseID], HouseStorage[houseid][itemid][hItemID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

House_RemoveAllItems(houseid)
{
	static
	    query[64];

	for (new i = 0; i != MAX_HOUSE_STORAGE; i ++) {
        HouseStorage[houseid][i][hItemExists] = false;
        HouseStorage[houseid][i][hItemModel] = 0;
        HouseStorage[houseid][i][hItemQuantity] = 0;
	}
	format(query, 64, "DELETE FROM `housestorage` WHERE `ID` = '%d'", HouseData[houseid][houseID]);
	mysql_tquery(g_iHandle, query);

	for (new i = 0; i < 10; i ++) {
	    HouseData[houseid][houseWeapons][i] = 0;
	    HouseData[houseid][houseAmmo][i] = 0;
	}
	return 1;
}

stock Car_GetItemID(carid, item[])
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	for (new i = 0; i < MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        continue;

		if (!strcmp(CarStorage[carid][i][cItemName], item)) return i;
	}
	return -1;
}

stock Car_GetFreeID(carid)
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	for (new i = 0; i < MAX_CAR_STORAGE; i ++)
	{
	    if (!CarStorage[carid][i][cItemExists])
	        return i;
	}
	return -1;
}

stock Car_AddItem(carid, item[], model, quantity = 1, slotid = -1)
{
    if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	new
		itemid = Car_GetItemID(carid, item),
		string[128];

	if (itemid == -1)
	{
	    itemid = Car_GetFreeID(carid);

	    if (itemid != -1)
	    {
	        if (slotid != -1)
	            itemid = slotid;

	        CarStorage[carid][itemid][cItemExists] = true;
	        CarStorage[carid][itemid][cItemModel] = model;
	        CarStorage[carid][itemid][cItemQuantity] = quantity;

	        strpack(CarStorage[carid][itemid][cItemName], item, 32 char);

			format(string, sizeof(string), "INSERT INTO `carstorage` (`ID`, `itemName`, `itemModel`, `itemQuantity`) VALUES('%d', '%s', '%d', '%d')", CarData[carid][carID], item, model, quantity);
			mysql_tquery(g_iHandle, string, "OnCarStorageAdd", "dd", carid, itemid);

	        return itemid;
		}
		return -1;
	}
	else
	{
	    format(string, sizeof(string), "UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` + %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
	    mysql_tquery(g_iHandle, string);

	    CarStorage[carid][itemid][cItemQuantity] += quantity;
	}
	return itemid;
}

stock Car_RemoveItem(carid, item[], quantity = 1)
{
    if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	new
		itemid = Car_GetItemID(carid, item),
		string[128];

	if (itemid != -1)
	{
	    if (CarStorage[carid][itemid][cItemQuantity] > 0)
	    {
	        CarStorage[carid][itemid][cItemQuantity] -= quantity;
		}
		if (quantity == -1 || CarStorage[carid][itemid][cItemQuantity] < 1)
		{
		    CarStorage[carid][itemid][cItemExists] = false;
		    CarStorage[carid][itemid][cItemModel] = 0;
		    CarStorage[carid][itemid][cItemQuantity] = 0;

		    format(string, sizeof(string), "DELETE FROM `carstorage` WHERE `ID` = '%d' AND `itemID` = '%d'", CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
	        mysql_tquery(g_iHandle, string);
		}
		else if (quantity != -1 && CarStorage[carid][itemid][cItemQuantity] > 0)
		{
			format(string, sizeof(string), "UPDATE `carstorage` SET `itemQuantity` = `itemQuantity` - %d WHERE `ID` = '%d' AND `itemID` = '%d'", quantity, CarData[carid][carID], CarStorage[carid][itemid][cItemID]);
            mysql_tquery(g_iHandle, string);
		}
		return 1;
	}
	return 0;
}

Car_RemoveAllItems(carid)
{
	static
	    query[64];

	for (new i = 0; i != MAX_CAR_STORAGE; i ++) {
        CarStorage[carid][i][cItemExists] = false;
        CarStorage[carid][i][cItemModel] = 0;
        CarStorage[carid][i][cItemQuantity] = 0;
	}
	format(query, 64, "DELETE FROM `carstorage` WHERE `ID` = '%d'", CarData[carid][carID]);
	mysql_tquery(g_iHandle, query);

	for (new i = 0; i < 5; i ++) {
	    CarData[carid][carWeapons][i] = 0;
	    CarData[carid][carAmmo][i] = 0;
	}
	return 1;
}

FormatNumber(number, prefix[] = "$")
{
	static
		value[32],
		length;

	format(value, sizeof(value), "%d", (number < 0) ? (-number) : (number));

	if ((length = strlen(value)) > 3)
	{
		for (new i = length, l = 0; --i >= 0; l ++) {
		    if ((l > 0) && (l % 3 == 0)) strins(value, ",", i + 1);
		}
	}
	if (prefix[0] != 0)
	    strins(value, prefix, 0);

	if (number < 0)
		strins(value, "-", 0);

	return value;
}

ResetFaction(playerid)
{
    PlayerData[playerid][pFaction] = -1;
    PlayerData[playerid][pFactionID] = -1;
    PlayerData[playerid][pFactionRank] = 0;
}

forward DragUpdate(playerid, targetid);
public DragUpdate(playerid, targetid)
{
	if (PlayerData[targetid][pDragged] && PlayerData[targetid][pDraggedBy] == playerid)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fAngle;

		GetPlayerPos(playerid, fX, fY, fZ);
		GetPlayerFacingAngle(playerid, fAngle);

		fX -= 3.0 * floatsin(-fAngle, degrees);
		fY -= 3.0 * floatcos(-fAngle, degrees);

		SetPlayerPos(targetid, fX, fY, fZ);
		SetPlayerInterior(targetid, GetPlayerInterior(playerid));
		SetPlayerVirtualWorld(targetid, GetPlayerVirtualWorld(playerid));
	}
	return 1;
}

StopDragging(playerid)
{
	if (PlayerData[playerid][pDragged])
	{
	    PlayerData[playerid][pDragged] = 0;
		PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
		KillTimer(PlayerData[playerid][pDragTimer]);
	}
	return 1;
}

ResetEditing(playerid)
{
    if (PlayerData[playerid][pEditFurniture] != -1)
		Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

	if (PlayerData[playerid][pEditPump] != -1)
	{
		Pump_Refresh(PlayerData[playerid][pEditPump]);
		PlayerData[playerid][pGasStation] = -1;
	}
	PlayerData[playerid][pEditType] = 0;
 	PlayerData[playerid][pEditGate] = -1;
 	PlayerData[playerid][pEditRack] = -1;
	PlayerData[playerid][pEditPump] = -1;
	PlayerData[playerid][pEditFurniture] = -1;
	return 1;
}

ResetPlayer(playerid)
{
	if (PlayerData[playerid][pDrinking])
	    DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);

    if (PlayerData[playerid][pFirstAid])
	    KillTimer(PlayerData[playerid][pAidTimer]);

	if (PlayerData[playerid][pDrivingTest])
	    DestroyVehicle(PlayerData[playerid][pTestCar]);

	if (PlayerData[playerid][pWaypoint])
	{
        PlayerData[playerid][pWaypoint] = 0;
        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
	}
	foreach (new i : Player) if (PlayerData[i][pDraggedBy] == playerid) {
	    StopDragging(i);
	}
	if (PlayerData[playerid][pDragged]) {
	    StopDragging(playerid);
	}
    PlayerData[playerid][pHospital] = -1;
	PlayerData[playerid][pCooking] = 0;
	PlayerData[playerid][pCookingTime] = 0;
	PlayerData[playerid][pCookingHouse] = -1;
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pCarryTrash] = 0;
	PlayerData[playerid][pGasStation] = -1;
	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pHarvesting] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pFuelCan] = 0;
	PlayerData[playerid][pFingerTime] = 0;
	PlayerData[playerid][pFingerItem] = -1;
	PlayerData[playerid][pFirstAid] = 0;
	PlayerData[playerid][pDrinking] = 0;
	PlayerData[playerid][pDrinkTime] = 0;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pPlaceAd] = 0;
	PlayerData[playerid][pAdTime] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pMining] = 0;
	PlayerData[playerid][pMinedRock] = 0;
	PlayerData[playerid][pMineTime] = 0;
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	PlayerData[playerid][pLoadType] = 0;
	PlayerData[playerid][pLoadCrate] = 0;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pUnloading] = -1;
	PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pUsedMagazine] = 0;
	PlayerData[playerid][pSorting] = -1;
	PlayerData[playerid][pSortCrate] = 0;
	PlayerData[playerid][pCP] = 0;
	PlayerData[playerid][pMaskOn] = 0;
	PlayerData[playerid][pHideTags] = 0;
	PlayerData[playerid][pCuffed] = 0;
	PlayerData[playerid][pGraffiti] = -1;
	PlayerData[playerid][pGraffitiTime] = 0;
	PlayerData[playerid][pPicking] = 0;
	PlayerData[playerid][pPickCar] = -1;
	PlayerData[playerid][pPickTime] = 0;
	PlayerData[playerid][pRecargar] = 0;

	if (Inventory_HasItem(playerid, "Mascara")) {
	    Inventory_Remove(playerid, "Mascara");
	}
	ResetNameTag(playerid);

	RemovePlayerAttachedObject(playerid, 4);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	DisablePlayerCheckpoint(playerid);
	GameTextForPlayer(playerid, " ", 1, 3);

	HidePlayerFooter(playerid);
	HoldWeapon(playerid, 0);
}

ResetWeapons(playerid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
		PlayerData[playerid][pGuns][i] = 0;
		PlayerData[playerid][pAmmo][i] = 0;
	}
	return 1;
}

ResetWeapon(playerid, weaponid)
{
	ResetPlayerWeapons(playerid);

	for (new i = 0; i < 13; i ++) {
	    if (PlayerData[playerid][pGuns][i] != weaponid) {
	        GivePlayerWeapon(playerid, PlayerData[playerid][pGuns][i], PlayerData[playerid][pAmmo][i]);
		}
		else {
            PlayerData[playerid][pGuns][i] = 0;
            PlayerData[playerid][pAmmo][i] = 0;
	    }
	}
	return 1;
}

GiveWeaponToPlayer(playerid, weaponid, ammo)
{
	if (weaponid < 0 || weaponid > 46)
	    return 0;

	PlayerData[playerid][pGuns][g_aWeaponSlots[weaponid]] = weaponid;
	PlayerData[playerid][pAmmo][g_aWeaponSlots[weaponid]] += ammo;

	return GivePlayerWeapon(playerid, weaponid, ammo);
}

GiveMoney(playerid, amount)
{
	PlayerData[playerid][pMoney] += amount;
	GivePlayerMoney(playerid, amount);

	return 1;
}

GetPlayerSQLID(playerid)
{
	return (PlayerData[playerid][pID]);
}

GetMoney(playerid)
{
	return (PlayerData[playerid][pMoney]);
}

IsValidPlayerName(const str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] >= '0' && str[i] <= '9') || (str[i] >= 'a' && str[i] <= 'z') || (str[i] >= 'A' && str[i] <= 'Z'))
	        continue;

		if (str[i] == '_' || str[i] == '$' || str[i] == '@' || str[i] == '[' || str[i] == ']')
		    continue;

		else
		    return 0;
	}
	return 1;
}

IsAnIP(str[])
{
	if (!str[0] || str[0] == '\1')
		return 0;

	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if ((str[i] < '0' || str[i] > '9') && str[i] != '.')
	        return 0;

	    if (0 < ((i == 0) ? (strval(str)) : (strval(str[i + 1]))) > 255)
	        return 0;
	}
	return 1;
}

Report_GetCount(playerid)
{
	new count;

    for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (ReportData[i][rExists] && ReportData[i][rPlayer] == playerid)
	    {
	        count++;
		}
	}
	return count;
}

Report_Clear(playerid)
{
    for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (ReportData[i][rExists] && ReportData[i][rPlayer] == playerid)
	    {
	        Report_Remove(i);
		}
	}
	return 1;
}

Report_Add(playerid, const text[], type = 1)
{
	for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (!ReportData[i][rExists])
	    {
	        ReportData[i][rExists] = true;
	        ReportData[i][rType] = type;
	        ReportData[i][rPlayer] = playerid;

	        strpack(ReportData[i][rText], text, 128 char);
			return i;
		}
	}
	return -1;
}

Report_Remove(reportid)
{
	if (reportid != -1 && ReportData[reportid][rExists])
	{
	    ReportData[reportid][rExists] = false;
	    ReportData[reportid][rPlayer] = INVALID_PLAYER_ID;
	}
	return 1;
}

KickEx(playerid)
{
	if (PlayerData[playerid][pKicked])
	    return 0;

	PlayerData[playerid][pKicked] = 1;
	SetTimerEx("KickTimer", 200, false, "d", playerid);

	return 1;
}

forward KickTimer(playerid);
public KickTimer(playerid)
{
	if (PlayerData[playerid][pKicked])
	{
		return Kick(playerid);
	}
	return 0;
}

stock SetDefaultSpawn(playerid)
{
    SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);


	if(PlayerData[playerid][pSpawnPoint] == 0) // Unity
	{
	    SetPlayerPos(playerid, 1715.7720,-1930.9301,13.5677);
	    SetPlayerFacingAngle(playerid, 0.0);
	}
	if(PlayerData[playerid][pSpawnPoint] == 1) // Faction
	{
	    new faction = PlayerData[playerid][pFactionID];
	    if(PlayerData[playerid][pFactionID] == -1)
	    {
	        SendErrorMessage(playerid, "Has sido enviado al spawn civil.");
	        SetPlayerPos(playerid, 1715.7720,-1930.9301,13.5677);
	    	SetPlayerFacingAngle(playerid, 0.0);
		}
		SetPlayerPos(playerid,FactionData[faction][SpawnX],FactionData[faction][SpawnY],FactionData[faction][SpawnZ]);
		SetPlayerInterior(playerid,FactionData[faction][SpawnInterior]);
		SetPlayerVirtualWorld(playerid, FactionData[faction][SpawnVW]);
	}
	if(PlayerData[playerid][pSpawnPoint] == 2)
	{
	    SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
	    SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
	    SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);
	}

	/*#if SERVER_CITY == 1
	    SetPlayerPos(playerid, 1642.1957, -2334.4849, 13.5469);
	    SetPlayerFacingAngle(playerid, 0.0);
	#elseif SERVER_CITY == 2
		SetPlayerPos(playerid, -2425.5615, 337.5465, 37.0018);
		SetPlayerFacingAngle(playerid, 238.0);
	#elseif SERVER_CITY == 3
	    SetPlayerPos(playerid, 1675.7245, 1447.8938, 10.7866);
	    SetPlayerFacingAngle(playerid, 270.0);
	#endif*/

	SetCameraBehindPlayer(playerid);
	TogglePlayerControllable(playerid, 1);
	return 1;
}

stock RespawnPlayer(playerid)
{
	if (IsPlayerInAnyVehicle(playerid))
	{
        new
		    Float:x,
		    Float:y,
	    	Float:z;

	    GetPlayerPos(playerid, x, y, z);
	    SetPlayerPos(playerid, x, y, z + 1);
	}
	SpawnPlayer(playerid);
	SetDefaultSpawn(playerid);
	return 1;
}

stock IsPlayerIdle(playerid) {
	new
	    index = GetPlayerAnimationIndex(playerid);

	return ((index == 1275) || (1181 <= index <= 1192));
}

stock IsPlayerNearDynamicObject(playerid, objectid, Float:range = 5.0) {

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	GetDynamicObjectPos(objectid, fX, fY, fZ);

	return (IsPlayerInRangeOfPoint(playerid, range, fX, fY, fZ));
}

stock IsPlayerSpawned(playerid)
{
	if (playerid < 0 || playerid >= MAX_PLAYERS)
	    return 0;

	return (!PlayerData[playerid][pKilled]) && (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING && GetPlayerState(playerid) != PLAYER_STATE_NONE && GetPlayerState(playerid) != PLAYER_STATE_WASTED);
}

stock GetVehicleMaxSeats(vehicleid)
{
    static const g_arrMaxSeats[] = {
		4, 2, 2, 2, 4, 4, 1, 2, 2, 4, 2, 2, 2, 4, 2, 2, 4, 2, 4, 2, 4, 4, 2, 2, 2, 1, 4, 4, 4, 2,
		1, 7, 1, 2, 2, 0, 2, 7, 4, 2, 4, 1, 2, 2, 2, 4, 1, 2, 1, 0, 0, 2, 1, 1, 1, 2, 2, 2, 4, 4,
		2, 2, 2, 2, 1, 1, 4, 4, 2, 2, 4, 2, 1, 1, 2, 2, 1, 2, 2, 4, 2, 1, 4, 3, 1, 1, 1, 4, 2, 2,
		4, 2, 4, 1, 2, 2, 2, 4, 4, 2, 2, 1, 2, 2, 2, 2, 2, 4, 2, 1, 1, 2, 1, 1, 2, 2, 4, 2, 2, 1,
		1, 2, 2, 2, 2, 2, 2, 2, 2, 4, 1, 1, 1, 2, 2, 2, 2, 7, 7, 1, 4, 2, 2, 2, 2, 2, 4, 4, 2, 2,
		4, 4, 2, 1, 2, 2, 2, 2, 2, 2, 4, 4, 2, 2, 1, 2, 4, 4, 1, 0, 0, 1, 1, 2, 1, 2, 2, 1, 2, 4,
		4, 2, 4, 1, 0, 4, 2, 2, 2, 2, 0, 0, 7, 2, 2, 1, 4, 4, 4, 2, 2, 2, 2, 2, 4, 2, 0, 0, 0, 4,
		0, 0
	};
	new
	    model = GetVehicleModel(vehicleid);

	if (400 <= model <= 611)
	    return g_arrMaxSeats[model - 400];

	return 0;
}

stock GetNearestVehicle(playerid)
{
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehiclePos(i, fX, fY, fZ))
	{
	    if (IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ)) return i;
	}
	return INVALID_VEHICLE_ID;
}

stock IsPlayerNearPlayer(playerid, targetid, Float:radius)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetPlayerPos(targetid, fX, fY, fZ);

	return (GetPlayerInterior(playerid) == GetPlayerInterior(targetid) && GetPlayerVirtualWorld(playerid) == GetPlayerVirtualWorld(targetid)) && IsPlayerInRangeOfPoint(playerid, radius, fX, fY, fZ);
}

stock IsPlayerNearBoot(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleBoot(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.5, fX, fY, fZ);
}

stock IsPlayerNearHood(playerid, vehicleid)
{
	static
		Float:fX,
		Float:fY,
		Float:fZ;

	GetVehicleHood(vehicleid, fX, fY, fZ);

	return (GetPlayerVirtualWorld(playerid) == GetVehicleVirtualWorld(vehicleid)) && IsPlayerInRangeOfPoint(playerid, 3.0, fX, fY, fZ);
}

stock SendNearbyMessage(playerid, Float:radius, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 16)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 16); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit CONST.alt 4
		#emit SUB
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (IsPlayerNearPlayer(i, playerid, radius)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (IsPlayerNearPlayer(i, playerid, radius)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendAdminAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendFactionAlert(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 1 || PlayerData[i][pFactionMod] > 0) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendTesterMessage(color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string

		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

        foreach (new i : Player)
		{
			if ((!PlayerData[i][pDisableTester]) && (PlayerData[i][pTester] >= 1 || PlayerData[i][pAdmin] > 0)) {
  				SendClientMessage(i, color, string);
			}
		}
		return 1;
	}
	foreach (new i : Player)
	{
		if ((!PlayerData[i][pDisableTester]) && (PlayerData[i][pTester] >= 1 || PlayerData[i][pAdmin] > 0)) {
			SendClientMessage(i, color, str);
		}
	}
	return 1;
}

stock SendFactionMessageEx(type, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] != -1 && GetFactionType(i) == type && !PlayerData[i][pDisableFaction]) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendFactionMessage(factionid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid && !PlayerData[i][pDisableFaction]) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendJobMessage(jobid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (PlayerData[i][pJob] == jobid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pJob] == jobid) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendVehicleMessage(vehicleid, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (GetPlayerVehicleID(i) == vehicleid) {
 		SendClientMessage(i, color, string);
	}
	return 1;
}

stock SendRadioMessage(frequency, color, const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    string[144]
	;
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	if (args > 12)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 12); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 144
		#emit PUSH.C string
		#emit PUSH.C args

		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		foreach (new i : Player) if (Inventory_HasItem(i, "Radio Portatil") && PlayerData[i][pChannel] == frequency) {
		    SendClientMessage(i, color, string);
		}
		return 1;
	}
	foreach (new i : Player) if (Inventory_HasItem(i, "Radio Portatil") && PlayerData[i][pChannel] == frequency) {
 		SendClientMessage(i, color, str);
	}
	return 1;
}

stock SendClientMessageEx(playerid, color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	/*
     *  Custom function that uses #emit to format variables into a string.
     *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) == 3)
	{
	    SendClientMessage(playerid, color, text);
	}
	else
	{
		while (--args >= 3)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit PUSH.S 8
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessage(playerid, color, str);

		#emit RETN
	}
	return 1;
}

stock SendClientMessageToAllEx(color, const text[], {Float, _}:...)
{
	static
	    args,
	    str[144];

	/*
     *  Custom function that uses #emit to format variables into a string.
     *  This code is very fragile; touching any code here will cause crashing!
	*/
	if ((args = numargs()) == 2)
	{
	    SendClientMessageToAll(color, text);
	}
	else
	{
		while (--args >= 2)
		{
			#emit LCTRL 5
			#emit LOAD.alt args
			#emit SHL.C.alt 2
			#emit ADD.C 12
			#emit ADD
			#emit LOAD.I
			#emit PUSH.pri
		}
		#emit PUSH.S text
		#emit PUSH.C 144
		#emit PUSH.C str
		#emit LOAD.S.pri 8
		#emit ADD.C 4
		#emit PUSH.pri
		#emit SYSREQ.C format
		#emit LCTRL 5
		#emit SCTRL 4

		SendClientMessageToAll(color, str);

		#emit RETN
	}
	return 1;
}

stock Log_Write(const path[], const str[], {Float,_}:...)
{
	static
	    args,
	    start,
	    end,
	    File:file,
	    string[1024]
	;
	if ((start = strfind(path, "/")) != -1) {
	    strmid(string, path, 0, start + 1);

	    if (!fexist(string))
	        return printf("** Advertencia: El directorio \"%s\" no existe.", string);
	}
	#emit LOAD.S.pri 8
	#emit STOR.pri args

	file = fopen(path, io_append);

	if (!file)
	    return 0;

	if (args > 8)
	{
		#emit ADDR.pri str
		#emit STOR.pri start

	    for (end = start + (args - 8); end > start; end -= 4)
		{
	        #emit LREF.pri end
	        #emit PUSH.pri
		}
		#emit PUSH.S str
		#emit PUSH.C 1024
		#emit PUSH.C string
		#emit PUSH.C args
		#emit SYSREQ.C format

		fwrite(file, string);
		fwrite(file, "\r\n");
		fclose(file);

		#emit LCTRL 5
		#emit SCTRL 4
		#emit RETN
	}
	fwrite(file, str);
	fwrite(file, "\r\n");
	fclose(file);

	return 1;
}

IsValidRoleplayName(const name[]) {
	if (!name[0] || strfind(name, "_") == -1)
	    return 0;

	else for (new i = 0, len = strlen(name); i != len; i ++) {
	    if ((i == 0) && (name[i] < 'A' || name[i] > 'Z'))
	        return 0;

		else if ((i != 0 && i < len  && name[i] == '_') && (name[i + 1] < 'A' || name[i + 1] > 'Z'))
		    return 0;

		else if ((name[i] < 'A' || name[i] > 'Z') && (name[i] < 'a' || name[i] > 'z') && name[i] != '_' && name[i] != '.')
		    return 0;
	}
	return 1;
}

CreateTextDraws(playerid) {
    /*PlayerData[playerid][pTextdraws][0] = CreatePlayerTextDraw(playerid, 240.000000, 161.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][0], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][0], 0.409999, 9.699998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][0], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][0], 0x00000088);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][0], 411.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][0], 0);

	PlayerData[playerid][pTextdraws][1] = CreatePlayerTextDraw(playerid, 259.000000, 161.000000, "Characters");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][1], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][1], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][1], 0.480000, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][1], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][1], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][1], 0);

	PlayerData[playerid][pTextdraws][2] = CreatePlayerTextDraw(playerid, 260.000000, 186.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][2], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][2], 0.400000, 1.500000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][2], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][2], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][2], 390.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][2], 1);

	PlayerData[playerid][pTextdraws][3] = CreatePlayerTextDraw(playerid, 260.000000, 203.500000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][3], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][3], 0.400000, 1.500000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][3], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][3], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][3], 390.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][3], 1);

	PlayerData[playerid][pTextdraws][4] = CreatePlayerTextDraw(playerid, 260.000000, 221.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][4], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][4], 0.400000, 1.500000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][4], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][4], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][4], 390.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][4], 1);

	PlayerData[playerid][pTextdraws][5] = CreatePlayerTextDraw(playerid, 323.000000, 188.000000, "Slot Vacío");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][5], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][5], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][5], 0.310000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][5], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][5], 0);

	PlayerData[playerid][pTextdraws][6] = CreatePlayerTextDraw(playerid, 323.000000, 206.000000, "Slot Vacío");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][6], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][6], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][6], 0.310000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][6], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][6], 0);

	PlayerData[playerid][pTextdraws][7] = CreatePlayerTextDraw(playerid, 323.000000, 223.000000, "Slot Vacío");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][7], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][7], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][7], 0.310000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][7], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][7], 0);*/

	PlayerData[playerid][pTextdraws][0] = CreatePlayerTextDraw(playerid, 239.000000, 156.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][0], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][0], 0.519999, 11.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][0], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][0], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][0], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][0], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][0], 416.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][0], 0);

	PlayerData[playerid][pTextdraws][1] = CreatePlayerTextDraw(playerid, 326.000000, 158.000000, "Mis Personajes");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][1], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][1], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][1], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][1], 0.330000, 1.199998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][1], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][1], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][1], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][1], 0);

	PlayerData[playerid][pTextdraws][2] = CreatePlayerTextDraw(playerid, 263.000000, 181.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][2], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][2], 0.489998, 1.299998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][2], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][2], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][2], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][2], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][2], 393.000000, 12.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][2], 1);

	PlayerData[playerid][pTextdraws][3] = CreatePlayerTextDraw(playerid, 263.000000, 204.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][3], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][3], 0.490000, 1.299998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][3], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][3], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][3], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][3], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][3], 393.000000, 12.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][3], 1);

	PlayerData[playerid][pTextdraws][4] = CreatePlayerTextDraw(playerid, 263.000000, 227.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][4], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][4], 0.490000, 1.299996);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][4], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][4], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][4], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][4], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][4], 393.000000, 12.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][4], 1);

	PlayerData[playerid][pTextdraws][5] = CreatePlayerTextDraw(playerid, 324.000000, 182.000000, "Slot Vacio");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][5], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][5], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][5], 0.309998, 0.999998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][5], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][5], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][5], 0);

	PlayerData[playerid][pTextdraws][6] = CreatePlayerTextDraw(playerid, 324.000000, 205.000000, "Slot Vacio");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][6], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][6], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][6], 0.309998, 0.999998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][6], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][6], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][6], 0);

	PlayerData[playerid][pTextdraws][7] = CreatePlayerTextDraw(playerid, 324.000000, 228.000000, "Slot Vacio");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][7], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][7], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][7], 0.309998, 0.999998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][7], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][7], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][7], 0);

	PlayerData[playerid][pTextdraws][8] = CreatePlayerTextDraw(playerid, 0.000000, 0.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][8], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][8], 0.000000, 480.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][8], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][8], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][8], 1482184789);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][8], 640.000000, 42.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][8], 0);

	/*PlayerData[playerid][pTextdraws][8] = CreatePlayerTextDraw(playerid, 320.000000, 164.000000, "Load Character");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][8], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][8], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][8], 0.350000, 0.999999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][8], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][8], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][8], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][8], 0);

	PlayerData[playerid][pTextdraws][9] = CreatePlayerTextDraw(playerid, 320.000000, 194.000000, "Delete Character");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][9], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][9], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][9], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][9], 0.350000, 0.999999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][9], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][9], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][9], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][9], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][9], 0);

	PlayerData[playerid][pTextdraws][10] = CreatePlayerTextDraw(playerid, 320.000000, 225.000000, "Go Back");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][10], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][10], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][10], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][10], 0.350000, 0.999999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][10], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][10], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][10], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][10], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][10], 0);*/

	PlayerData[playerid][pTextdraws][11] = CreatePlayerTextDraw(playerid, 432.000000, 140.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][11], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][11], 0.800000, 8.299997);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][11], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][11], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][11], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][11], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][11], 199.000000, 64.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][11], 0);

	PlayerData[playerid][pTextdraws][12] = CreatePlayerTextDraw(playerid, 235.000000, 140.000000, "Identificacion Personal");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][12], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][12], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][12], 0.409999, 1.499999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][12], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][12], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][12], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][12], 0);

	PlayerData[playerid][pTextdraws][13] = CreatePlayerTextDraw(playerid, 209.000000, 159.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][13], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][13], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][13], 0.240000, -0.299999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][13], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][13], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][13], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][13], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][13], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][13], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][13], 52.000000, 51.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 98);

	PlayerData[playerid][pTextdraws][14] = CreatePlayerTextDraw(playerid, 271.000000, 159.000000, "~r~Nombre:~w~ Nombre Personaje");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][14], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][14], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][14], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][14], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][14], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][14], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][14], 0);

	PlayerData[playerid][pTextdraws][15] = CreatePlayerTextDraw(playerid, 271.000000, 179.000000, "~r~Nacimiento:~w~ Especifica...");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][15], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][15], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][15], 0.240000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][15], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][15], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][15], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][15], 0);

	PlayerData[playerid][pTextdraws][16] = CreatePlayerTextDraw(playerid, 271.000000, 169.000000, "~r~Genero:~w~ Hombre");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][16], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][16], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][16], 0.240000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][16], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][16], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][16], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][16], 0);

	PlayerData[playerid][pTextdraws][17] = CreatePlayerTextDraw(playerid, 271.000000, 189.000000, "~r~Origen:~w~ Especifica...");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][17], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][17], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][17], 0.240000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][17], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][17], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][17], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][17], 0);

	PlayerData[playerid][pTextdraws][18] = CreatePlayerTextDraw(playerid, 368.000000, 202.000000, "Continuar");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][18], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][18], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][18], 0.380000, 1.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][18], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][18], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][18], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][18], 0);

	PlayerData[playerid][pTextdraws][19] = CreatePlayerTextDraw(playerid, 272.000000, 171.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][19], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][19], 0.290000, 0.599999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][19], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][19], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][19], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][19], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][19], 369.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][19], 1);

	PlayerData[playerid][pTextdraws][20] = CreatePlayerTextDraw(playerid, 272.000000, 182.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][20], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][20], 0.290000, 0.599999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][20], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][20], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][20], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][20], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][20], 369.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][20], 1);

	PlayerData[playerid][pTextdraws][21] = CreatePlayerTextDraw(playerid, 272.000000, 192.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][21], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][21], 0.290000, 0.599999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][21], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][21], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][21], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][21], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][21], 369.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][21], 1);

	PlayerData[playerid][pTextdraws][22] = CreatePlayerTextDraw(playerid, 367.000000, 205.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][22], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][22], 0.289999, 0.699999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][22], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][22], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][22], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][22], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][22], 424.000000, 15.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][22], 1);

	PlayerData[playerid][pTextdraws][23] = CreatePlayerTextDraw(playerid, 433.000000, 150.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][23], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][23], 0.800000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][23], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][23], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][23], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][23], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][23], 211.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][23], 0);

	PlayerData[playerid][pTextdraws][24] = CreatePlayerTextDraw(playerid, 246.000000, 149.000000, "Personalizacion de Personaje");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][24], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][24], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][24], 0.370000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][24], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][24], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][24], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][24], 0);

	PlayerData[playerid][pTextdraws][25] = CreatePlayerTextDraw(playerid, 433.000000, 162.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][25], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][25], 0.800000, 10.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][25], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][25], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][25], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][25], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][25], 211.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][25], 0);

	PlayerData[playerid][pTextdraws][26] = CreatePlayerTextDraw(playerid, 291.000000, 172.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][26], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][26], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][26], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][26], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][26], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][26], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][26], 351.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][26], 1);

	PlayerData[playerid][pTextdraws][27] = CreatePlayerTextDraw(playerid, 303.000000, 171.500000, "Lentes");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][27], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][27], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][27], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][27], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][27], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][27], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][27], 0);

	PlayerData[playerid][pTextdraws][28] = CreatePlayerTextDraw(playerid, 291.000000, 196.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][28], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][28], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][28], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][28], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][28], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][28], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][28], 351.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][28], 1);

	PlayerData[playerid][pTextdraws][29] = CreatePlayerTextDraw(playerid, 310.000000, 195.500000, "Gorros");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][29], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][29], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][29], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][29], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][29], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][29], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][29], 0);

	PlayerData[playerid][pTextdraws][30] = CreatePlayerTextDraw(playerid, 291.000000, 220.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][30], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][30], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][30], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][30], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][30], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][30], 136);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][30], 351.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][30], 1);

	PlayerData[playerid][pTextdraws][31] = CreatePlayerTextDraw(playerid, 301.000000, 219.500000, "Bandanas");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][31], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][31], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][31], 0.290000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][31], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][31], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][31], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][31], 0);

	PlayerData[playerid][pTextdraws][32] = CreatePlayerTextDraw(playerid, 357.000000, 237.000000, "Continuar");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][32], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][32], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][32], 0.439999, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][32], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][32], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][32], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][32], 0);

	PlayerData[playerid][pTextdraws][33] = CreatePlayerTextDraw(playerid, 356.000000, 240.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][33], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][33], 0.840000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][33], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][33], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][33], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][33], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][33], 424.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][33], 1);

	PlayerData[playerid][pTextdraws][34] = CreatePlayerTextDraw(playerid, 623.000000, 396.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][34], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][34], 0.760000, 4.299999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][34], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][34], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][34], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][34], 85);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][34], 512.000000, 28.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][34], 0);

	PlayerData[playerid][pTextdraws][35] = CreatePlayerTextDraw(playerid, 518.000000, 397.000000, "~r~Combustible:~w~ 0%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][35], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][35], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][35], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][35], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][35], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][35], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][35], 0);

	PlayerData[playerid][pTextdraws][36] = CreatePlayerTextDraw(playerid, 518.000000, 406.200012, "~r~Velocidad:~w~ 0 mph");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][36], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][36], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][36], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][36], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][36], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][36], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][36], 0);

	PlayerData[playerid][pTextdraws][37] = CreatePlayerTextDraw(playerid, 518.000000, 415.500000, "~r~Estado:~w~ 0/100%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][37], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][37], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][37], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][37], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][37], 0);

	PlayerData[playerid][pTextdraws][38] = CreatePlayerTextDraw(playerid, 518.000000, 425.000000, "~r~Ventanas:~w~ Up");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][38], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][38], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][38], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][38], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][38], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][38], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][38], 0);

    PlayerData[playerid][pTextdraws][39] = CreatePlayerTextDraw(playerid, 327.000000, 424.000000, "~r~Footer text.");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][39], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][39], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][39], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][39], 0.460000, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][39], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][39], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][39], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][39], 0);

	PlayerData[playerid][pTextdraws][40] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][40], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][40], 0.570000, 12.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][40], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][40], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][40], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][40], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][40], 190.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][40], 0);

	PlayerData[playerid][pTextdraws][41] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][41], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][41], 0.910000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][41], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][41], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][41], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][41], -188);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][41], 190.000000, -9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][41], 0);

	PlayerData[playerid][pTextdraws][42] = CreatePlayerTextDraw(playerid, 199.000000, 174.000000, "~g~Sexo:~w~ Male~n~~g~Nacimiento:~w~ 17/02/1993~n~~g~Origen:~w~ United States");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][42], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][42], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][42], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][42], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][42], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][42], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][42], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][42], 0);

	PlayerData[playerid][pTextdraws][43] = CreatePlayerTextDraw(playerid, 195.000000, 159.500000, "Emmet Jones (ID: 4)");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][43], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][43], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][43], 0.310000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][43], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][43], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][43], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][43], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][43], 0);

	PlayerData[playerid][pTextdraws][44] = CreatePlayerTextDraw(playerid, 199.000000, 212.000000, "~g~Dinero:~w~ $0~n~~g~Banco:~w~ $0~n~~g~Ahorros:~w~ $0");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][44], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][44], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][44], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][44], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][44], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][44], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][44], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][44], 0);

	PlayerData[playerid][pTextdraws][45] = CreatePlayerTextDraw(playerid, 339.000000, 174.000000, "~g~Cuenta:~w~ Jugador~n~~g~Tester:~w~ No~n~~g~Admin:~w~ No");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][45], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][45], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][45], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][45], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][45], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][45], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][45], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][45], 0);

	PlayerData[playerid][pTextdraws][46] = CreatePlayerTextDraw(playerid, 340.000000, 212.000000, "~g~Ping:~w~ 0~n~~g~Packetloss:~w~ 0.0%~n~~g~Tiempo Conectado:~w~ 00:00:00");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][46], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][46], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][46], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][46], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][46], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][46], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][46], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][46], 0);

	PlayerData[playerid][pTextdraws][47] = CreatePlayerTextDraw(playerid, 200.000000, 254.000000, "Personajes");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][47], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][47], 0.329999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][47], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][47], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][47], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][47], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][47], 278.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][47], 1);

	PlayerData[playerid][pTextdraws][48] = CreatePlayerTextDraw(playerid, 296.000000, 254.000000, "Inventario");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][48], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][48], 0.329999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][48], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][48], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][48], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][48], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][48], 372.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][48], 1);

	PlayerData[playerid][pTextdraws][49] = CreatePlayerTextDraw(playerid, 389.000000, 254.000000, "Cerrar");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][49], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][49], 0.329999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][49], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][49], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][49], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][49], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][49], 453.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][49], 1);

	PlayerData[playerid][pTextdraws][50] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][50], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][50], 0.569998, 8.999999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][50], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][50], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][50], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][50], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][50], 190.000000, 1.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][50], 0);

	PlayerData[playerid][pTextdraws][51] = CreatePlayerTextDraw(playerid, 470.000000, 160.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][51], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][51], 0.910000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][51], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][51], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][51], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][51], -188);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][51], 190.000000, -9.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][51], 0);

	PlayerData[playerid][pTextdraws][52] = CreatePlayerTextDraw(playerid, 198.000000, 177.000000, "~g~Nombre:~w~ Emmet Jackson~n~~g~Cuenta:~w~ Jugador~n~~g~Creado:~w~ hace 23 dias~n~~g~Ultima Conexion:~w~ hace 22 dias");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][52], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][52], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][52], 0.310000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][52], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][52], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][52], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][52], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][52], 0);

	PlayerData[playerid][pTextdraws][53] = CreatePlayerTextDraw(playerid, 195.000000, 159.500000, "#1: Emmet Jones");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][53], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][53], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][53], 0.310000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][53], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][53], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][53], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][53], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][53], 0);

	PlayerData[playerid][pTextdraws][54] = CreatePlayerTextDraw(playerid, 397.000000, 174.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][54], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][54], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][54], 0.579999, 4.699997);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][54], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][54], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][54], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][54], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][54], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][54], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][54], 53.000000, 48.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][54], 1);

	PlayerData[playerid][pTextdraws][55] = CreatePlayerTextDraw(playerid, 389.000000, 227.000000, "Salir Menu");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][55], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][55], 0.329997, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][55], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][55], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][55], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][55], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][55], 453.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][55], 1);

	PlayerData[playerid][pTextdraws][56] = CreatePlayerTextDraw(playerid, 200.000000, 227.000000, "<< Atras");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][56], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][56], 0.329998, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][56], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][56], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][56], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][56], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][56], 278.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][56], 1);

	PlayerData[playerid][pTextdraws][57] = CreatePlayerTextDraw(playerid, 290.000000, 227.000000, "Borrar Usuario");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][57], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][57], 0.309998, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][57], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][57], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][57], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][57], -222);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][57], 375.000000, 27.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][57], 1);

	PlayerData[playerid][pTextdraws][58] = CreatePlayerTextDraw(playerid, 424.000000, 151.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][58], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][58], 0.600000, 8.699998);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][58], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][58], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][58], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][58], 202.000000, 11.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][58], 0);

	PlayerData[playerid][pTextdraws][59] = CreatePlayerTextDraw(playerid, 206.000000, 151.000000, "Tutorial: Punto de Spawn");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][59], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][59], 0.319999, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][59], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][59], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][59], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][59], 420.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][59], 0);

	PlayerData[playerid][pTextdraws][60] = CreatePlayerTextDraw(playerid, 208.000000, 164.000000, "Aqui es donde apareceras cuando el tutorial~n~termine. Recomendamos que pidas ayuda~n~despues del spawn.");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][60], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][60], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][60], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][60], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][60], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][60], 0);

	PlayerData[playerid][pTextdraws][61] = CreatePlayerTextDraw(playerid, 208.000000, 197.000000, "Para pedir ayuda escribe ~g~~h~/ayudame~w~. Un tester~n~te va a ayudar si hay alguno on~n~duty.");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][61], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][61], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][61], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][61], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][61], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][61], 0);

	PlayerData[playerid][pTextdraws][62] = CreatePlayerTextDraw(playerid, 644.000000, 1.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][62], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][62], 0.530000, 51.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][62], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][62], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][62], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][62], 119);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][62], -6.000000, 30.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][62], 0);

	PlayerData[playerid][pTextdraws][63] = CreatePlayerTextDraw(playerid, 579.000000, 122.000000, "100%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][63], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][63], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][63], 0.290000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][63], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][63], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][63], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][63], 0);

	PlayerData[playerid][pTextdraws][64] = CreatePlayerTextDraw(playerid, 579.000000, 155.000000, "100%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][64], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][64], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][64], 0.290000, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][64], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][64], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][64], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][64], 0);

	PlayerData[playerid][pTextdraws][65] = CreatePlayerTextDraw(playerid, 536.000000, 108.000000, "hambre");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][65], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][65], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][65], 0.539999, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][65], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][65], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][65], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][65], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][65], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][65], 51.000000, 37.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][65], 2702);
	PlayerTextDrawSetPreviewRot(playerid, PlayerData[playerid][pTextdraws][65], 0.0000, 90.0000, 90.0000);

	PlayerData[playerid][pTextdraws][66] = CreatePlayerTextDraw(playerid, 537.000000, 140.000000, "sed");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][66], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][66], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][66], 0.539999, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][66], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][66], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][66], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][66], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][66], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][66], 51.000000, 37.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][66], 1543);
	PlayerTextDrawSetPreviewRot(playerid, PlayerData[playerid][pTextdraws][66], 0.0000, 0.0000, 0.0000);

    PlayerData[playerid][pTextdraws][67] = CreatePlayerTextDraw(playerid, 535.000000, 172.000000, "chaleco");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][67], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][67], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][67], 0.539999, 1.399999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][67], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][67], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][67], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][67], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][67], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][67], 52.000000, 39.000000);
	PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][67], 19142);
	PlayerTextDrawSetPreviewRot(playerid, PlayerData[playerid][pTextdraws][67], -20.0, -90.0, 0.0);

	PlayerData[playerid][pTextdraws][68] = CreatePlayerTextDraw(playerid, 577.000000, 186.000000, "100%");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][68], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][68], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][68], 0.289999, 0.899999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][68], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][68], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][68], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][68], 0);

	PlayerData[playerid][pTextdraws][69] = CreatePlayerTextDraw(playerid, 13.000000, 431.000000, "~b~Waypoint:~w~ Calculando...");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][69], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][69], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][69], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][69], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][69], 0);

	PlayerData[playerid][pTextdraws][70] = CreatePlayerTextDraw(playerid, 499.000000, 101.000000, "~g~Tiempo de Prision:~w~ 00:00:00");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][70], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][70], 0.270000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][70], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][70], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][70], 0);

	PlayerData[playerid][pTextdraws][71] = CreatePlayerTextDraw(playerid, 240.000000, 161.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][71], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][71], 0.519999, 9.099995);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][71], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][71], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][71], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][71], 102);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][71], 421.000000, 40.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][71], 0);

	PlayerData[playerid][pTextdraws][72] = CreatePlayerTextDraw(playerid, 326.000000, 161.000000, "Richard Jackson");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][72], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][72], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][72], 2);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][72], 0.330000, 1.199999);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][72], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][72], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][72], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][72], 0);

	PlayerData[playerid][pTextdraws][73] = CreatePlayerTextDraw(playerid, 233.000000, 173.000000, "skin");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][73], 0);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][73], 5);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][73], 0.619999, 1.400000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][73], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][73], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][73], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][73], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][73], 0);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][73], 59.000000, 59.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][73], 0);

	PlayerData[playerid][pTextdraws][74] = CreatePlayerTextDraw(playerid, 280.000000, 179.000000, "~b~Fecha:~w~ 17/02/1998");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][74], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][74], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][74], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][74], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][74], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][74], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][74], 0);

	PlayerData[playerid][pTextdraws][75] = CreatePlayerTextDraw(playerid, 280.000000, 189.500000, "~b~Origen:~w~ Texas, USA");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][75], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][75], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][75], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][75], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][75], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][75], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][75], 0);

	PlayerData[playerid][pTextdraws][76] = CreatePlayerTextDraw(playerid, 280.000000, 200.000000, "~b~Creacion:~w~ hace 2 meses");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][76], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][76], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][76], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][76], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][76], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][76], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][76], 0);

	PlayerData[playerid][pTextdraws][77] = CreatePlayerTextDraw(playerid, 281.000000, 210.000000, "~b~Jugado:~w~hace 3 meses");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][77], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][77], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][77], 0.300000, 1.100000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][77], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][77], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][77], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][77], 0);

	PlayerData[playerid][pTextdraws][78] = CreatePlayerTextDraw(playerid, 301.000000, 231.000000, "Spawn");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][78], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][78], 0.360000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][78], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][78], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][78], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][78], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][78], 340.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][78], 1);

	PlayerData[playerid][pTextdraws][79] = CreatePlayerTextDraw(playerid, 345.000000, 231.000000, "Borrar");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][79], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][79], 0.360000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][79], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][79], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][79], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][79], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][79], 382.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][79], 1);

	PlayerData[playerid][pTextdraws][80] = CreatePlayerTextDraw(playerid, 387.000000, 231.000000, "Atras");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][80], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][80], 0.360000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][80], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][80], 0);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawSetShadow(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawUseBox(playerid, PlayerData[playerid][pTextdraws][80], 1);
	PlayerTextDrawBoxColor(playerid, PlayerData[playerid][pTextdraws][80], -205);
	PlayerTextDrawTextSize(playerid, PlayerData[playerid][pTextdraws][80], 415.000000, 20.000000);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][80], 1);

	PlayerData[playerid][pTextdraws][81] = CreatePlayerTextDraw(playerid, 553.000000, 99.000000, "~b~~h~Objetivos:~w~ 0/10");
	PlayerTextDrawAlignment(playerid, PlayerData[playerid][pTextdraws][81], 2);
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][81], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][81], 0.390000, 1.200000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][81], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][81], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][81], 0);

	PlayerData[playerid][pTextdraws][82] = CreatePlayerTextDraw(playerid, 37.000000, 315.000000, "~b~Cargado:~w~ Retail Supplies~n~~b~Loaded Crates:~w~ 6/6");
	PlayerTextDrawBackgroundColor(playerid, PlayerData[playerid][pTextdraws][82], 255);
	PlayerTextDrawFont(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawLetterSize(playerid, PlayerData[playerid][pTextdraws][82], 0.280000, 1.000000);
	PlayerTextDrawColor(playerid, PlayerData[playerid][pTextdraws][82], -1);
	PlayerTextDrawSetOutline(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawSetProportional(playerid, PlayerData[playerid][pTextdraws][82], 1);
	PlayerTextDrawSetSelectable(playerid, PlayerData[playerid][pTextdraws][82], 0);
}

stock ShowPlayerFooter(playerid, string[], time = 5000) {
	if (PlayerData[playerid][pShowFooter]) {
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][39]);
	    KillTimer(PlayerData[playerid][pFooterTimer]);
	}
	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][39], string);
	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][39]);

	PlayerData[playerid][pShowFooter] = true;
	PlayerData[playerid][pFooterTimer] = SetTimerEx("HidePlayerFooter", time, false, "d", playerid);
}

forward HidePlayerFooter(playerid);
public HidePlayerFooter(playerid) {

	if (!PlayerData[playerid][pShowFooter])
	    return 0;

	PlayerData[playerid][pShowFooter] = false;
	return PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][39]);
}

ResetStatistics(playerid)
{
	for (new i = 0; i < 3; i ++) {
	    PlayerCharacters[playerid][i][0] = 0;

	    for (new j = 0; j < 9; j ++) {
	    	AccessoryData[playerid][i][j] = 0.0;
	    }
	}
	for (new i = 0; i != MAX_INVENTORY; i ++) {
	    InventoryData[playerid][i][invExists] = false;
	    InventoryData[playerid][i][invModel] = 0;
	    InventoryData[playerid][i][invQuantity] = 0;
	}
	for (new i = 0; i < 12; i ++) {
	    PlayerData[playerid][pGuns][i] = 0;
	    PlayerData[playerid][pAmmo][i] = 0;
	}
	for (new i = 0; i != MAX_HOUSE_FURNITURE; i ++) {
	    ListedFurniture[playerid][i] = -1;
	}
	for (new i = 0; i < MAX_LISTED_ITEMS; i ++) {
	    NearestItems[playerid][i] = -1;
	}
	for (new i = 0; i != MAX_CONTACTS; i ++) {
	    ContactData[playerid][i][contactExists] = false;
	    ContactData[playerid][i][contactID] = 0;
	    ContactData[playerid][i][contactNumber] = 0;
	    ListedContacts[playerid][i] = -1;
	}
	for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) {
	    LocationData[playerid][i][locationExists] = false;
	    LocationData[playerid][i][locationID] = 0;
	}
	for (new i = 0; i != MAX_PLAYER_TICKETS; i ++) {
	    TicketData[playerid][i][ticketID] = 0;
		TicketData[playerid][i][ticketExists] = false;
		TicketData[playerid][i][ticketFee] = 0;
	}
	BoomboxData[playerid][boomboxPlaced] = 0;
	BoomboxData[playerid][boomboxPos][0] = 0.0;
	BoomboxData[playerid][boomboxPos][1] = 0.0;
	BoomboxData[playerid][boomboxPos][2] = 0.0;

	PlayerData[playerid][pID] = -1;
	PlayerData[playerid][pAccount] = 0;
	PlayerData[playerid][pLogged] = 0;
	PlayerData[playerid][pLoginAttempts] = 0;
	PlayerData[playerid][pCreated] = 0;
	PlayerData[playerid][pGender] = 1;
	PlayerData[playerid][pBirthdate][0] = 0;
	PlayerData[playerid][pOrigin][0] = 0;
	PlayerData[playerid][pSkin] = 98;
    PlayerData[playerid][pEditType] = 0;
    PlayerData[playerid][pGlasses] = 0;
    PlayerData[playerid][pHat] = 0;
    PlayerData[playerid][pBandana] = 0;
    PlayerData[playerid][pPos] = 0.0;
    PlayerData[playerid][pInterior] = 0;
    PlayerData[playerid][pWorld] = 0;
    PlayerData[playerid][pCharacter] = 0;
    PlayerData[playerid][pKilled] = 0;
    PlayerData[playerid][pHospital] = -1;
    PlayerData[playerid][pHospitalInt] = -1;
    PlayerData[playerid][pHospitalTime] = 0;
    PlayerData[playerid][pRepairTime] = 0;
    PlayerData[playerid][pMoney] = 250;
    PlayerData[playerid][pBankMoney] = 250;
    PlayerData[playerid][pSpawnPoint] = 0;
    PlayerData[playerid][pSavings] = 0;
    PlayerData[playerid][pAdmin] = 0;
	PlayerData[playerid][pShowFooter] = 0;
	PlayerData[playerid][pReportTime] = 0;
	PlayerData[playerid][pHelpTime] = 0;
	PlayerData[playerid][pSpectator] = INVALID_PLAYER_ID;
	PlayerData[playerid][pJailTime] = 0;
	PlayerData[playerid][pKicked] = 0;
	PlayerData[playerid][pMuted] = 0;
	PlayerData[playerid][pSpamCount] = 0;
	PlayerData[playerid][pCommandCount] = 0;
	PlayerData[playerid][pDisplayStats] = 0;
	PlayerData[playerid][pToggleGlasses] = 0;
	PlayerData[playerid][pToggleHat] = 0;
	PlayerData[playerid][pToggleBandana] = 0;
	PlayerData[playerid][pToggleArmor] = 0;
    PlayerData[playerid][pLastShot] = INVALID_PLAYER_ID;
    PlayerData[playerid][pShotTime] = 0;
	PlayerData[playerid][pInventoryItem] = 0;
	PlayerData[playerid][pStorageItem] = 0;
	PlayerData[playerid][pStorageSelect] = 0;
	PlayerData[playerid][pProductModify] = 0;
	PlayerData[playerid][pTester] = 0;
	PlayerData[playerid][pTutorial] = 0;
	PlayerData[playerid][pTutorialTime] = 0;
	PlayerData[playerid][pTutorialStage] = 0;
	PlayerData[playerid][pHouse] = -1;
	PlayerData[playerid][pBusiness] = -1;
	PlayerData[playerid][pEntrance] = -1;
	PlayerData[playerid][pGasPump] = -1;
	PlayerData[playerid][pGasStation] = -1;
    PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pEditPump] = -1;
	PlayerData[playerid][pEditFurniture] = -1;
	PlayerData[playerid][pEditGate] = -1;
	PlayerData[playerid][pEditRack] = -1;
	PlayerData[playerid][pSelectFurniture] = 0;
	PlayerData[playerid][pRefill] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pRefillPrice] = 0;
	PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pHouseOffered] = -1;
	PlayerData[playerid][pHouseValue] = 0;
	PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pBusinessOffered] = -1;
	PlayerData[playerid][pBusinessValue] = 0;
	PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pCarOffered] = -1;
	PlayerData[playerid][pCarValue] = 0;
	PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pShakeType] = 0;
	PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDNIOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFoodType] = 0;
	PlayerData[playerid][pFoodPrice] = 0;
	PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pFactionOffered] = -1;
	PlayerData[playerid][pPhone] = 0;
	PlayerData[playerid][pPhoneOff] = 0;
	PlayerData[playerid][pLottery] = 0;
	PlayerData[playerid][pLotteryB] = 0;
	PlayerData[playerid][pHunger] = 100;
	PlayerData[playerid][pThirst] = 100;
	PlayerData[playerid][pHungerTime] = 0;
	PlayerData[playerid][pThirstTime] = 0;
	PlayerData[playerid][pCooking] = 0;
	PlayerData[playerid][pCookingTime] = 0;
	PlayerData[playerid][pPlayingHours] = 0;
	PlayerData[playerid][pMinutes] = 0;
	PlayerData[playerid][pArmorStatus] = 0;
	PlayerData[playerid][pArmorShown] = 0;
	PlayerData[playerid][pClothesType] = 0;
	PlayerData[playerid][pDrivingTest] = 0;
	PlayerData[playerid][pTestStage] = 0;
	PlayerData[playerid][pTestWarns] = 0;
	PlayerData[playerid][pFurnitureType] = 0;
	PlayerData[playerid][pJob] = 0;
	PlayerData[playerid][pTaxiFee] = 0;
	PlayerData[playerid][pTaxiTime] = 0;
	PlayerData[playerid][pTaxiPlayer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTaxiDuty] = 0;
	PlayerData[playerid][pFirstAid] = 0;
	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMining] = 0;
	PlayerData[playerid][pMineTime] = 0;
	PlayerData[playerid][pMineCount] = 0;
	PlayerData[playerid][pMinedRock] = 0;
	PlayerData[playerid][pCarryTrash] = 0;
	PlayerData[playerid][pCarryCrate] = -1;
	PlayerData[playerid][pCrafting] = 0;
	PlayerData[playerid][pOpeningCrate] = 0;
	PlayerData[playerid][pHarvesting] = 0;
	PlayerData[playerid][pFaction] = -1;
	PlayerData[playerid][pFactionID] = -1;
	PlayerData[playerid][pFactionRank] = 0;
	PlayerData[playerid][pFactionEdit] = -1;
	PlayerData[playerid][pSelectedSlot] = -1;
	PlayerData[playerid][pOnDuty] = 0;
	PlayerData[playerid][pTazer] = 0;
	PlayerData[playerid][pBeanBag] = 0;
	PlayerData[playerid][pStunned] = 0;
	PlayerData[playerid][pCuffed] = 0;
    PlayerData[playerid][pDragged] = 0;
    PlayerData[playerid][pDraggedBy] = INVALID_PLAYER_ID;
	PlayerData[playerid][pPrisoned] = 0;
	PlayerData[playerid][pInjured] = 0;
	PlayerData[playerid][pWarrants] = 0;
    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
    PlayerData[playerid][pTrackTime] = 0;
	PlayerData[playerid][pCP] = 0;
	PlayerData[playerid][pBroadcast] = 0;
	PlayerData[playerid][pNewsGuest] = INVALID_PLAYER_ID;
	PlayerData[playerid][pMuteTime] = 0;
	PlayerData[playerid][pTransfer] = INVALID_PLAYER_ID;
	PlayerData[playerid][pWaypoint] = 0;
	PlayerData[playerid][pWaypointPos][0] = 0.0;
	PlayerData[playerid][pWaypointPos][1] = 0.0;
	PlayerData[playerid][pWaypointPos][2] = 0.0;
	PlayerData[playerid][pFuelCan] = 0;
	PlayerData[playerid][pDisableOOC] = 0;
	PlayerData[playerid][pDisablePM] = 0;
	PlayerData[playerid][pDisableFaction] = 0;
	PlayerData[playerid][pDisableTester] = 0;
	PlayerData[playerid][pDisableBC] = 0;
	PlayerData[playerid][pNameChange][0] = 0;
	PlayerData[playerid][pDrugTime] = 0;
	PlayerData[playerid][pDrugUsed] = 0;
	PlayerData[playerid][pFingerTime] = 0;
	PlayerData[playerid][pFingerItem] = 0;
	PlayerData[playerid][pWeapon] = 0;
	PlayerData[playerid][pBackpackLoot] = -1;
	PlayerData[playerid][pChannel] = 0;
	PlayerData[playerid][pEmergency] = 0;
	PlayerData[playerid][pPlaceAd] = 0;
	PlayerData[playerid][pRangeBooth] = -1;
	PlayerData[playerid][pTargets] = 0;
	PlayerData[playerid][pTargetLevel] = 0;
	PlayerData[playerid][pVendorTime] = 0;
	PlayerData[playerid][pLoopAnim] = 0;
	PlayerData[playerid][pExecute] = 0;
	PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
	PlayerData[playerid][pTakeItems] = INVALID_PLAYER_ID;
	PlayerData[playerid][pDrinkBar] = INVALID_PLAYER_BAR_ID;
	PlayerData[playerid][pDrinking] = 0;
	PlayerData[playerid][pDrinkTime] = 0;
	PlayerData[playerid][pTaxiCalled] = 0;
	PlayerData[playerid][pSpeedTime] = 0;
	PlayerData[playerid][pMarker] = 0;
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	PlayerData[playerid][pLoadType] = 0;
	PlayerData[playerid][pLoadCrate] = 0;
	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pUnloading] = -1;
	PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	PlayerData[playerid][pShipment] = -1;
	PlayerData[playerid][pDeliverShipment] = 0;
	PlayerData[playerid][pHoldWeapon] = 0;
	PlayerData[playerid][pUsedMagazine] = 0;
	PlayerData[playerid][pAdvertise][0] = 0;
	PlayerData[playerid][pFreeze] = 0;
	PlayerData[playerid][pTask] = 0;
    PlayerData[playerid][pBankTask] = 0;
    PlayerData[playerid][pStoreTask] = 0;
    PlayerData[playerid][pTestTask] = 0;
    PlayerData[playerid][pSorting] = -1;
    PlayerData[playerid][pSortCrate] = 0;
    PlayerData[playerid][pHUD] = 1;
    PlayerData[playerid][pTesterDuty] = 0;
    PlayerData[playerid][pAdminDuty] = 0;
    PlayerData[playerid][pSeekHelp] = 0;
    PlayerData[playerid][pMaskID] = random(90000) + 10000;
    PlayerData[playerid][pMaskOn] = 0;
    PlayerData[playerid][pFactionMod] = 0;
    PlayerData[playerid][pCapacity] = 35;
    PlayerData[playerid][pPlayRadio] = 0;
    PlayerData[playerid][pGraffiti] = -1;
    PlayerData[playerid][pGraffitiTime] = 0;
    PlayerData[playerid][pGraffitiColor] = 0;
    PlayerData[playerid][pEditGraffiti] = -1;
    PlayerData[playerid][pAdminHide] = 0;
    PlayerData[playerid][pDetectorTime] = 0;
    PlayerData[playerid][pPicking] = 0;
    PlayerData[playerid][pPickCar] = -1;
	PlayerData[playerid][pPickTime] = 0;
    PlayerData[playerid][pNameTag] = Text3D:INVALID_3DTEXT_ID;
    PlayerData[playerid][pRecargar] = 0;
    PlayerData[playerid][pFakeDNI] = 0;
    ResetWarnings(playerid);
}

ResetNameTag(playerid)
{
    foreach (new i : Player) {
		ShowPlayerNameTagForPlayer(i, playerid, 1);
	}
	if (IsValidDynamic3DTextLabel(PlayerData[playerid][pNameTag]))
	    DestroyDynamic3DTextLabel(PlayerData[playerid][pNameTag]);

    PlayerData[playerid][pNameTag] = Text3D:INVALID_3DTEXT_ID;
    return 1;
}

ResetWarnings(playerid)
{
    PlayerData[playerid][pWarnings] = 0;
   	PlayerData[playerid][pWarn1][0] = 0;
    PlayerData[playerid][pWarn2][0] = 0;
}

GetNumberOwner(number)
{
	foreach (new i : Player) if (PlayerData[i][pPhone] == number && Inventory_HasItem(i, "Celular")) {
		return i;
	}
	return INVALID_PLAYER_ID;
}

IsPlayerInsideTaxi(playerid)
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (GetVehicleModel(vehicleid) == 420 || GetVehicleModel(vehicleid) == 438)
	{
	    foreach (new i : Player)
		{
			if ((i != playerid) && (PlayerData[i][pJob] == JOB_TAXI && PlayerData[i][pTaxiDuty] && GetPlayerState(i) == PLAYER_STATE_DRIVER) && GetPlayerVehicleID(i) == vehicleid)
				return 1;
		}
	}
	return 0;
}

SelectCharacter(playerid, id)
{
	PlayerData[playerid][pCharacter] = id;

	if (!PlayerCharacters[playerid][id - 1][0])
	    return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Crear Personaje", "Escribe el nombre de tu personaje aqui:\n\nAdvertencia: Tu nombre tiene que ser Nombre_Apellido y no puede ser muy largo (24 letras max).", "Crear", "Cancelar");

	static
	    query[200];

	PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][72], PlayerCharacters[playerid][id - 1]);

	format(query, sizeof(query), "SELECT `Skin`, `Birthdate`, `Origin`, `CreateDate`, `LastLogin` FROM `characters` WHERE `Character` = '%s'", PlayerCharacters[playerid][id - 1]);
	mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_SHOW_CHARACTER);

	return 1;
}

IsNumeric(const str[])
{
	for (new i = 0, l = strlen(str); i != l; i ++)
	{
	    if (i == 0 && str[0] == '-')
			continue;

	    else if (str[i] < '0' || str[i] > '9')
			return 0;
	}
	return 1;
}

ReturnWeaponName(weaponid)
{
	static
		name[32];

	GetWeaponName(weaponid, name, sizeof(name));

	if (!weaponid)
	    name = "None";

	else if (weaponid == 18)
	    name = "Molotov Cocktail";

	else if (weaponid == 44)
	    name = "Nightvision";

	else if (weaponid == 45)
	    name = "Infrared";

	return name;
}

ReturnVehicleModelName(model)
{
	new
	    name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

stock ReturnVehicleName(vehicleid)
{
	new
		model = GetVehicleModel(vehicleid),
		name[32] = "None";

    if (model < 400 || model > 611)
	    return name;

	format(name, sizeof(name), g_arrVehicleNames[model - 400]);
	return name;
}

GetVehicleModelByName(const name[])
{
	if (IsNumeric(name) && (strval(name) >= 400 && strval(name) <= 611))
	    return strval(name);

	for (new i = 0; i < sizeof(g_arrVehicleNames); i ++)
	{
	    if (strfind(g_arrVehicleNames[i], name, true) != -1)
	    {
	        return i + 400;
		}
	}
	return 0;
}

GetVehicleDriver(vehicleid) {
	foreach (new i : Player) {
		if (GetPlayerState(i) == PLAYER_STATE_DRIVER && GetPlayerVehicleID(i) == vehicleid) return i;
	}
	return INVALID_PLAYER_ID;
}

stock IsWindowedVehicle(vehicleid)
{
	static const g_aWindowStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1,
	    1, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 1, 0, 1, 1, 0, 0, 0, 0,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 1, 1,
		1, 0, 1, 1, 0, 1, 0, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
	new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aWindowStatus[modelid - 400]);
}

stock IsNewsVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 488, 582: return 1;
	}
	return 0;
}

stock IsACruiser(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
	    case 523, 427, 490, 528, 596..599, 601: return 1;
	}
	return 0;
}

stock IsDoorVehicle(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 400..424, 426..429, 431..440, 442..445, 451, 455, 456, 458, 459, 466, 467, 470, 474, 475:
		    return 1;

		case 477..480, 482, 483, 486, 489, 490..492, 494..496, 498..500, 502..508, 514..518, 524..529, 533..536:
		    return 1;

		case 540..547, 549..552, 554..562, 565..568, 573, 575, 576, 578..580, 582, 585, 587..589, 596..605, 609:
			return 1;
	}
	return 0;
}

stock IsSpeedoVehicle(vehicleid)
{
	if (GetVehicleModel(vehicleid) == 509 || GetVehicleModel(vehicleid) == 510 || GetVehicleModel(vehicleid) == 481 || !IsEngineVehicle(vehicleid)) {
	    return 0;
	}
	return 1;
}

stock IsLoadableVehicle(vehicleid)
{
	new modelid = GetVehicleModel(vehicleid);

	if (GetVehicleTrailer(vehicleid))
	    modelid = GetVehicleModel(GetVehicleTrailer(vehicleid));

	switch (modelid) {
	    case 609, 403, 414, 456, 498, 499, 514, 515, 435, 591: return 1;
	}
	return 0;
}

stock GetMaxCrates(vehicleid)
{
	new crates;

	switch (GetVehicleModel(vehicleid)) {
	    case 498, 609: crates = 10;
	    case 414: crates = 8;
	    case 456, 499: crates = 6;
	    case 435, 591: crates = 15;
	}
	return crates;
}

stock IsCrateInUse(crateid)
{
	if (CrateData[crateid][crateVehicle] != INVALID_VEHICLE_ID && IsValidVehicle(CrateData[crateid][crateVehicle])) {
	    return 1;
	}
	foreach (new i : Player) if (PlayerData[i][pCarryCrate] == crateid && GetPlayerSpecialAction(i) == SPECIAL_ACTION_CARRY) {
	    return 1;
	}
	return 0;
}

stock GetVehicleCrates(vehicleid)
{
	if (!IsValidVehicle(vehicleid) || !IsLoadableVehicle(vehicleid))
		return 0;

	new crates;

	for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
	    crates++;
	}
 	return crates;
}

stock IsABoat(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 430, 446, 452, 453, 454, 472, 473, 484, 493, 595: return 1;
	}
	return 0;
}

stock IsABike(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 448, 461..463, 468, 521..523, 581, 586, 481, 509, 510: return 1;
	}
	return 0;
}

stock IsAPlane(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 460, 464, 476, 511, 512, 513, 519, 520, 553, 577, 592, 593: return 1;
	}
	return 0;
}

stock IsAHelicopter(vehicleid)
{
	switch (GetVehicleModel(vehicleid)) {
		case 417, 425, 447, 465, 469, 487, 488, 497, 501, 548, 563: return 1;
	}
	return 0;
}

stock IsEngineVehicle(vehicleid)
{
	static const g_aEngineStatus[] = {
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 1,
	    1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 1, 1, 1, 1,
	    1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0
	};
    new modelid = GetVehicleModel(vehicleid);

    if (modelid < 400 || modelid > 611)
        return 0;

    return (g_aEngineStatus[modelid - 400]);
}

stock Float:GetPlayerSpeed(playerid)
{
	static Float:velocity[3];

	if (IsPlayerInAnyVehicle(playerid))
	    GetVehicleVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);
	else
	    GetPlayerVelocity(GetPlayerVehicleID(playerid), velocity[0], velocity[1], velocity[2]);

	return floatsqroot((velocity[0] * velocity[0]) + (velocity[1] * velocity[1]) + (velocity[2] * velocity[2])) * 100.0;
}

stock GetGateByID(sqlid)
{
	for (new i = 0; i != MAX_GATES; i ++) if (GateData[i][gateExists] && GateData[i][gateID] == sqlid)
	    return i;

	return -1;
}

stock GetHouseByID(sqlid)
{
	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && HouseData[i][houseID] == sqlid)
	    return i;

	return -1;
}

stock GetBusinessByID(sqlid)
{
	for (new i = 0; i != MAX_BUSINESSES; i ++) if (BusinessData[i][bizExists] && BusinessData[i][bizID] == sqlid)
	    return i;

	return -1;
}

stock GetEntranceByID(sqlid)
{
	for (new i = 0; i != MAX_ENTRANCES; i ++) if (EntranceData[i][entranceExists] && EntranceData[i][entranceID] == sqlid)
	    return i;

	return -1;
}

stock GetElapsedTime(time, &hours, &minutes, &seconds)
{
	hours = 0;
	minutes = 0;
	seconds = 0;

	if (time >= 3600)
	{
		hours = (time / 3600);
		time -= (hours * 3600);
	}
	while (time >= 60)
	{
	    minutes++;
	    time -= 60;
	}
	return (seconds = time);
}

stock GetDuration(time)
{
	new
	    str[32];

	if (time < 0 || time == gettime()) {
	    format(str, sizeof(str), "Nunca");
	    return str;
	}
	else if (time < 60)
		format(str, sizeof(str), "%d segundos", time);

	else if (time >= 0 && time < 60)
		format(str, sizeof(str), "%d seconds", time);

	else if (time >= 60 && time < 3600)
		format(str, sizeof(str), (time >= 120) ? ("%d minutos") : ("%d minuto"), time / 60);

	else if (time >= 3600 && time < 86400)
		format(str, sizeof(str), (time >= 7200) ? ("%d horas") : ("%d hora"), time / 3600);

	else if (time >= 86400 && time < 2592000)
 		format(str, sizeof(str), (time >= 172800) ? ("%d dias") : ("%d dia"), time / 86400);

	else if (time >= 2592000 && time < 31536000)
 		format(str, sizeof(str), (time >= 5184000) ? ("%d meses") : ("%d mes"), time / 2592000);

	else if (time >= 31536000)
		format(str, sizeof(str), (time >= 63072000) ? ("%d años") : ("%d año"), time / 31536000);

	strcat(str, "");

	return str;
}

stock GetEngineStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (engine != 1)
		return 0;

	return 1;
}

stock GetHoodStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (bonnet != 1)
		return 0;

	return 1;
}

stock GetTrunkStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (boot != 1)
		return 0;

	return 1;
}

stock GetLightStatus(vehicleid)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	if (lights != 1)
		return 0;

	return 1;
}

stock SetEngineStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, status, lights, alarm, doors, bonnet, boot, objective);
}

stock SetLightStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, status, alarm, doors, bonnet, boot, objective);
}

stock SetTrunkStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, status, objective);
}

stock SetHoodStatus(vehicleid, status)
{
	static
	    engine,
	    lights,
	    alarm,
	    doors,
	    bonnet,
	    boot,
	    objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	return SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, status, boot, objective);
}

stock EsHoraPar(hora)
{
	for(new i; i < 24; i+=2)
	{
	    if(i == hora)
	        return 1;
	}
	return 0;
}

stock CheckSubsidioSQL()
{
	new
	    Hora_, Min;

	gettime(Hora_, Min);

	//if((Min == 10) || (Min == 20) || (Min == 30) || (Min == 40) || (Min == 50) || (Min == 00))
    if(EsHoraPar(Hora_) == 1 && Min == 0)
	{
		SendClientMessageToAll(0x000000FF,"____________________________ {FFFFFF}Atención - Anuncio del gobierno {000000}____________________________");
		SendClientMessageToAll(0x92CFB4FF,"Se estan entregando los subsidios, presentarse en el banco municipal entre los próximos 20 minutos.");
		mysql_tquery(g_iHandle,"UPDATE `characters` SET `SubsidioCheck` = '1'");
		foreach (new i : Player)
		{
			PlayerData[i][pSubsidioCheck] = 1;
		}
		return 1;
	}
	
	//else if ((Min == 5) || (Min == 15) || (Min == 25) || (Min == 35) || (Min == 45) || (Min == 55))
	else if (Min > 20)
	{
		mysql_tquery(g_iHandle,"UPDATE `characters` SET `SubsidioCheck` = '0'");
		foreach (new i : Player)
		{
			PlayerData[i][pSubsidioCheck] = 0;
		}
		return 1;
	}
	return 0;
}

public OnObjectMoved(objectid)
{
	for (new i = 0; i < MAX_BOOTHS; i ++) if (g_BoothUsed[i] && g_BoothObject[i] == objectid) {
	    DestroyObject(g_BoothObject[i]);

	    return SetTimerEx("UpdateBooth", 3000, false, "dd", Booth_GetPlayer(i), i);
	}
	return 1;
}

forward OnQueryExecute(playerid, query[]);
public OnQueryExecute(playerid, query[])
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (strfind(query, "SELECT", true) != -1)
		Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Success: MySQL returned %d rows from your query.\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", rows);

	else
		Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Success: Query executed successfully (affected rows: %d).\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", cache_affected_rows());

	PlayerData[playerid][pExecute] = 0;
	return 1;
}

public OnQueryError(errorid, error[], callback[], query[], connectionHandle)
{
	foreach (new i : Player)
	{
		if (PlayerData[i][pAdmin] >= 6 && PlayerData[i][pExecute])
		{
	    	PlayerData[i][pExecute] = 0;
	    	Dialog_Show(i, ExecuteQuery, DIALOG_STYLE_INPUT, "Execute Query", "Error: \"%s\"\n\nPlease specify the MySQL query to execute below:", "Execute", "Back", error);
		}
	}
 	printf("** [MySQL]: %s", error);
	Log_Write("logs/mysql_log.txt", "[%s] %s: %s", ReturnDate(), (callback[0]) ? (callback) : ("n/a"), error);
	return 1;
}

forward OnQueryFinished(extraid, threadid);
public OnQueryFinished(extraid, threadid)
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields
	;
	switch (threadid)
	{
	    case THREAD_CREATE_CHAR:
	    {
	        PlayerData[extraid][pID] = cache_insert_id(g_iHandle);
	        PlayerData[extraid][pLogged] = 1;

			SQL_SaveCharacter(extraid);

			PlayerData[extraid][pID] = -1;
			PlayerData[extraid][pLogged] = 0;
	    }
		case THREAD_CHECK_ACCOUNT:
		{
		    cache_get_data(rows, fields, g_iHandle);

		    if (rows)
			{
			    static
			        loginDate[36];

			    cache_get_row(0, 0, loginDate, g_iHandle);

				format(PlayerData[extraid][pLoginDate], 36, loginDate);
		        Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "Conectado", "Bienvenido de vuelta a Green Latin Roleplay!\n\nTu ultima conexion fue en: %s.\n\nEscribe tu contraseña para entrar:", "Conectarse", "Cancelar", PlayerData[extraid][pLoginDate]);
			}
			else
			{
			    Dialog_Show(extraid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Conectado", "Bienvenido a Green Latin Roleplay, %s.\n\nTodavia no te has registrado. Escribe la contraseña deseada para tu cuenta:", "Registrar", "Cancelar", ReturnName(extraid));
			}
    	}
    	case THREAD_LOGIN:
   		{
    	    cache_get_data(rows, fields, g_iHandle);

    	    if (!rows)
    	    {
    	        PlayerData[extraid][pLoginAttempts]++;

    	        if (PlayerData[extraid][pLoginAttempts] >= 3)
    	        {
    	            SendClientMessage(extraid, COLOR_LIGHTRED, "Has sido expulsado del servidor. Razon: Muchos intentos de conexion.");
    	            KickEx(extraid);
				}
				else
				{
		        	Dialog_Show(extraid, LoginScreen, DIALOG_STYLE_PASSWORD, "Conectado", "Bienvenido de vuelta a Green Latin Roleplay!\n\nTu ultima conexion fue en: %s.\n\nEscribe tu contraseña para entrar:", "Conectarse", "Cancelar", PlayerData[extraid][pLoginDate]);
    	        	SendClientMessageEx(extraid, COLOR_LIGHTRED, "Contraseña incorrecta (%d/3 intentos).", PlayerData[extraid][pLoginAttempts]);
				}
			}
			else
			{
				static
					query[128];

				// Update the last login date.
                format(query, sizeof(query), "UPDATE `accounts` SET `IP` = '%s', `LoginDate` = '%s' WHERE `Username` = '%s'", PlayerData[extraid][pIP], ReturnDate(), PlayerData[extraid][pUsername]);
				mysql_tquery(g_iHandle, query);

    			// Load the character data.
				format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s' LIMIT 3", PlayerData[extraid][pUsername]);
				mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CHARACTERS);
			}
		}
		case THREAD_CHARACTERS:
		{
			cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows; i ++) {
			    cache_get_field_content(i, "Character", PlayerCharacters[extraid][i], g_iHandle, MAX_PLAYER_NAME);
		    }
		    SendServerMessage(extraid, "Te has conectado a tu cuenta satisfactoriamente.");
            ShowCharacterMenu(extraid);
		}
		case THREAD_LOAD_CHARACTER:
		{
		    static
		        string[128];

		    cache_get_data(rows, fields, g_iHandle);

			foreach (new i : Player)
			{
			    if (PlayerData[i][pCharacter] == PlayerData[extraid][pCharacter] && !strcmp(ReturnName(i), PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1]) && i != extraid)
       			{
       			    ShowCharacterMenu(extraid);
				   	SendErrorMessage(extraid, "Este personaje ya esta conectado.");
				}
			}
			switch (SetPlayerName(extraid, PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1]))
			{
			    case -1: {
					SendClientMessageEx(extraid, COLOR_LIGHTRED, "Este nombre ya esta en uso.");
				}
				default:
				{
				    if (!rows) {
				        return 0;
					}
					static
					    query[128]
					;
			        PlayerData[extraid][pID] = cache_get_field_int(0, "ID");
			        PlayerData[extraid][pCreated] = cache_get_field_int(0, "Created");
			        PlayerData[extraid][pGender] = cache_get_field_int(0, "Gender");

					cache_get_field_content(0, "Birthdate", PlayerData[extraid][pBirthdate], g_iHandle, 24);
			        cache_get_field_content(0, "Origin", PlayerData[extraid][pOrigin], g_iHandle, 32);
			        cache_get_field_content(0, "Fakedni", PlayerData[extraid][pFakeDNI], g_iHandle, 32);

			        PlayerData[extraid][pSkin] = cache_get_field_int(0, "Skin");
			        PlayerData[extraid][pPos][0] = cache_get_field_float(0, "PosX");
			        PlayerData[extraid][pPos][1] = cache_get_field_float(0, "PosY");
			        PlayerData[extraid][pPos][2] = cache_get_field_float(0, "PosZ");
			        PlayerData[extraid][pPos][3] = cache_get_field_float(0, "PosA");
			        PlayerData[extraid][pHealth] = cache_get_field_float(0, "Health");
			        PlayerData[extraid][pInterior] = cache_get_field_int(0, "Interior");
			        PlayerData[extraid][pWorld] = cache_get_field_int(0, "World");
			        PlayerData[extraid][pHospital] = cache_get_field_int(0, "Hospital");
                    PlayerData[extraid][pHospitalInt] = cache_get_field_int(0, "HospitalInt");
			        PlayerData[extraid][pMoney] = cache_get_field_int(0, "Money");
			        PlayerData[extraid][pBankMoney] = cache_get_field_int(0, "BankMoney");
			        PlayerData[extraid][pOwnsBillboard] = cache_get_field_int(0, "OwnsBillboard");
					PlayerData[extraid][pSavings] = cache_get_field_int(0, "Savings");
			        PlayerData[extraid][pAdmin] = cache_get_field_int(0, "Admin");
			        PlayerData[extraid][pJailTime] = cache_get_field_int(0, "JailTime");
			        PlayerData[extraid][pMuted] = cache_get_field_int(0, "Muted");
			        PlayerData[extraid][pTester] = cache_get_field_int(0, "Tester");
			        PlayerData[extraid][pHouse] = cache_get_field_int(0, "House");
			        PlayerData[extraid][pBusiness] = cache_get_field_int(0, "Business");
			        PlayerData[extraid][pEntrance] = cache_get_field_int(0, "Entrance");
			        PlayerData[extraid][pPhone] = cache_get_field_int(0, "Phone");
			        PlayerData[extraid][pLottery] = cache_get_field_int(0, "Lottery");
			        PlayerData[extraid][pLottery] = cache_get_field_int(0, "LotteryB");
			        PlayerData[extraid][pHunger] = cache_get_field_int(0, "Hunger");
			        PlayerData[extraid][pThirst] = cache_get_field_int(0, "Thirst");
			        PlayerData[extraid][pPlayingHours] = cache_get_field_int(0, "PlayingHours");
			        PlayerData[extraid][pMinutes] = cache_get_field_int(0, "Minutes");
			        PlayerData[extraid][pArmorStatus] = cache_get_field_float(0, "ArmorStatus");
			        PlayerData[extraid][pJob] = cache_get_field_int(0, "Job");
			        PlayerData[extraid][pFactionID] = cache_get_field_int(0, "Faction");
			        PlayerData[extraid][pFactionRank] = cache_get_field_int(0, "FactionRank");
			        PlayerData[extraid][pPrisoned] = cache_get_field_int(0, "Prisoned");
			        PlayerData[extraid][pInjured] = cache_get_field_int(0, "Injured");
			        PlayerData[extraid][pWarrants] = cache_get_field_int(0, "Warrants");
			        PlayerData[extraid][pChannel] = cache_get_field_int(0, "Channel");
			        PlayerData[extraid][pBleeding] = cache_get_field_int(0, "Bleeding");
			        PlayerData[extraid][pAdminHide] = cache_get_field_int(0, "AdminHide");
			        PlayerData[extraid][pWarnings] = cache_get_field_int(0, "Warnings");
			        PlayerData[extraid][pMaskID] = cache_get_field_int(0, "MaskID");
			        PlayerData[extraid][pFactionMod] = cache_get_field_int(0, "FactionMod");
			        PlayerData[extraid][pCapacity] = cache_get_field_int(0, "Capacity");
			        PlayerData[extraid][pSpawnPoint] = cache_get_field_int(0, "SpawnPoint");

					cache_get_field_content(0, "Warn1", PlayerData[extraid][pWarn1], g_iHandle, 32);
					cache_get_field_content(0, "Warn2", PlayerData[extraid][pWarn2], g_iHandle, 32);

			        for (new i = 0; i < 13; i ++) {
			            format(query, sizeof(query), "Gun%d", i + 1);
			            PlayerData[extraid][pGuns][i] = cache_get_field_int(0, query);

			            format(query, sizeof(query), "Ammo%d", i + 1);
			            PlayerData[extraid][pAmmo][i] = cache_get_field_int(0, query);
			        }
			        PlayerData[extraid][pGlasses] = cache_get_field_int(0, "Glasses");
					PlayerData[extraid][pHat] = cache_get_field_int(0, "Hat");
					PlayerData[extraid][pBandana] = cache_get_field_int(0, "Bandana");

					cache_get_field_content(0, "GlassesPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][0][0], AccessoryData[extraid][0][1], AccessoryData[extraid][0][2], AccessoryData[extraid][0][3], AccessoryData[extraid][0][4], AccessoryData[extraid][0][5], AccessoryData[extraid][0][6], AccessoryData[extraid][0][7], AccessoryData[extraid][0][8]);

					cache_get_field_content(0, "HatPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][1][0], AccessoryData[extraid][1][1], AccessoryData[extraid][1][2], AccessoryData[extraid][1][3], AccessoryData[extraid][1][4], AccessoryData[extraid][1][5], AccessoryData[extraid][1][6], AccessoryData[extraid][1][7], AccessoryData[extraid][1][8]);

					cache_get_field_content(0, "BandanaPos", string, g_iHandle);
					sscanf(string, "p<|>fffffffff", AccessoryData[extraid][2][0], AccessoryData[extraid][2][1], AccessoryData[extraid][2][2], AccessoryData[extraid][2][3], AccessoryData[extraid][2][4], AccessoryData[extraid][2][5], AccessoryData[extraid][2][6], AccessoryData[extraid][2][7], AccessoryData[extraid][2][8]);

					if (!PlayerData[extraid][pMaskID])
					    PlayerData[extraid][pMaskID] = random(90000) + 10000;

					if (!PlayerData[extraid][pCapacity])
					    PlayerData[extraid][pCapacity] = 35;

				    for (new i = 0; i < 81; i ++) {
				        if (i < 8 || (i >= 71 && i <= 80)) PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
					}
				    if (PlayerData[extraid][pTester] > 0)
			    	{
						SendClientMessage(extraid, COLOR_CYAN, "[SERVER]:{FFFFFF} Te has conectado como tester.");
				    }
				    if (PlayerData[extraid][pAdmin] > 0)
				    {
				        SendAdminAction(extraid, "Te has conectado como admin nivel %d.", PlayerData[extraid][pAdmin]);
				    }
				    PlayerData[extraid][pLogged] = 1;

                    format(query, sizeof(query), "SELECT * FROM `inventory` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_INVENTORY);

                    format(query, sizeof(query), "SELECT * FROM `contacts` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_CONTACTS);

                    format(query, sizeof(query), "SELECT * FROM `tickets` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_TICKETS);

                    format(query, sizeof(query), "SELECT * FROM `gps` WHERE `ID` = '%d'", PlayerData[extraid][pID]);
					mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_LOAD_LOCATIONS);

                    if(PlayerData[extraid][pOwnsBillboard] == 0)
                    {
                        PlayerData[extraid][pOwnsBillboard] = -1;
					}
					if (PlayerData[extraid][pFactionID] != -1) {
					    PlayerData[extraid][pFaction] = GetFactionByID(PlayerData[extraid][pFactionID]);

					    if (PlayerData[extraid][pFaction] == -1) {
					        ResetFaction(extraid);
						}
					}
				    if (!PlayerData[extraid][pCreated])
				    {
				        new
				            str[48];

						format(str, sizeof(str), "~r~Nombre:~w~ %s", ReturnName(extraid));
				        PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][14], str);

				        for (new i = 11; i < 23; i ++) {
				            PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);
						}
						PlayerData[extraid][pSkin] = 98;

						PlayerData[extraid][pOrigin][0] = '\0';
						PlayerData[extraid][pBirthdate][0] = '\0';

						SendServerMessage(extraid, "Ahora tienes que llenar los datos de tu DNI.");
						SetPlayerInterior(extraid, 3);

						SetPlayerPos(extraid, 364.958312, 173.570709, 990.610534);
						SetPlayerCameraPos(extraid, 364.958312, 173.570709, 1010.610534);
						SetPlayerCameraLookAt(extraid, 364.458343, 173.576049, 1010.389343);
				    }
				    else
				    {
        				SetSpawnInfo(extraid, 0, PlayerData[extraid][pSkin], PlayerData[extraid][pPos][0], PlayerData[extraid][pPos][1], PlayerData[extraid][pPos][2], 0.0, 0, 0, 0, 0, 0, 0);

				        TogglePlayerSpectating(extraid, 0);
				        TogglePlayerControllable(extraid, 0);

				        CancelSelectTextDraw(extraid);
				        SetTimerEx("SpawnTimer", 1000, false, "d", extraid);
					}
				}
			}
		}
		case THREAD_VERIFY_PASS:
		{
		    cache_get_data(rows, fields, g_iHandle);

		    if (rows)
				Dialog_Show(extraid, NewPass, DIALOG_STYLE_PASSWORD, "Nueva Contraseña", "Escribe tu contraseña nueva.\n\nNota: Usa una cuenta fuerte para tener mejor seguridad.", "Cambiar", "Cancelar");

			else
				SendErrorMessage(extraid, "Colocaste una contraseña incorrecta.");
		}
		case THREAD_FIND_USERNAME:
		{
		    static
		        query[128];

			cache_get_data(rows, fields, g_iHandle);

			if (rows)
			{
				new
				    name[MAX_PLAYER_NAME + 1];

				cache_get_row(0, 0, name, g_iHandle);

				if (strcmp(name, PlayerData[extraid][pUsername], false) != 0)
				{
					format(PlayerData[extraid][pUsername], sizeof(name), name);
					SetPlayerName(extraid, name);
				}
		    }
		    format(query, sizeof(query), "SELECT `LoginDate` FROM `accounts` WHERE `Username` = '%s'", PlayerData[extraid][pUsername]);
			mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CHECK_ACCOUNT);
		}
		case THREAD_LOAD_INVENTORY:
		{
		    static
		        name[32];

		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_INVENTORY; i ++) {
			    InventoryData[extraid][i][invExists] = true;
			    InventoryData[extraid][i][invID] = cache_get_field_int(i, "invID");
			    InventoryData[extraid][i][invModel] = cache_get_field_int(i, "invModel");
                InventoryData[extraid][i][invQuantity] = cache_get_field_int(i, "invQuantity");

				cache_get_field_content(i, "invItem", name, g_iHandle, sizeof(name));
				strpack(InventoryData[extraid][i][invItem], name, 32 char);
			}
		}
		case THREAD_LOAD_CONTACTS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_CONTACTS; i ++) {
				cache_get_field_content(i, "contactName", ContactData[extraid][i][contactName], g_iHandle, 32);

				ContactData[extraid][i][contactExists] = true;
			    ContactData[extraid][i][contactID] = cache_get_field_int(i, "contactID");
			    ContactData[extraid][i][contactNumber] = cache_get_field_int(i, "contactNumber");
			}
		}
		case THREAD_LOAD_LOCATIONS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_GPS_LOCATIONS; i ++) {
				cache_get_field_content(i, "locationName", LocationData[extraid][i][locationName], g_iHandle, 32);

				LocationData[extraid][i][locationExists] = true;
			    LocationData[extraid][i][locationID] = cache_get_field_int(i, "locationID");
			    LocationData[extraid][i][locationPos][0] = cache_get_field_float(i, "locationX");
			    LocationData[extraid][i][locationPos][1] = cache_get_field_float(i, "locationY");
			    LocationData[extraid][i][locationPos][2] = cache_get_field_float(i, "locationZ");
			}
		}
		case THREAD_LOAD_TICKETS:
		{
		    cache_get_data(rows, fields, g_iHandle);

			for (new i = 0; i < rows && i < MAX_PLAYER_TICKETS; i ++) {
				cache_get_field_content(i, "ticketReason", TicketData[extraid][i][ticketReason], g_iHandle, 64);
				cache_get_field_content(i, "ticketDate", TicketData[extraid][i][ticketDate], g_iHandle, 36);

				TicketData[extraid][i][ticketExists] = true;
			    TicketData[extraid][i][ticketID] = cache_get_field_int(i, "ticketID");
			    TicketData[extraid][i][ticketFee] = cache_get_field_int(i, "ticketFee");
			}
		}
		case THREAD_BAN_LOOKUP:
		{
		    new
		        reason[128],
				date[36],
				username[24];

		    cache_get_data(rows, fields, g_iHandle);

		    if (rows) {
		        cache_get_field_content(0, "Username", username, g_iHandle);
		        cache_get_field_content(0, "Date", date, g_iHandle);
				cache_get_field_content(0, "Reason", reason, g_iHandle);

				if (!strcmp(username, "null", true) || !username[0])
				{
				    Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Baneado", "Tu IP ha sido baneada de este servidor.\n\nIP: %s\nFecha: %s\nRazon: %s\n\nPara pedir una apelacion a desbaneo, ve a nuestro foro.", "Cerrar", "", PlayerData[extraid][pIP], date, reason);
					KickEx(extraid);
				}
				else
				{
				    Dialog_Show(extraid, ShowOnly, DIALOG_STYLE_MSGBOX, "Baneado", "Estas baneado de este servidor.\n\nNombre: %s\nFecha: %s\nRazon: %s\n\nPara pedir una apelacion a desbaneo, ve a nuestro foro.", "Cerrar", "", PlayerData[extraid][pUsername], date, reason);
					KickEx(extraid);
				}
		    }
		}
		case THREAD_SHOW_CHARACTER:
		{
			cache_get_data(rows, fields, g_iHandle);

			if (rows)
			{
			    static
			        skin,
			        birthdate[16],
			        origin[32],
					string[128];

			    skin = cache_get_field_int(0, "Skin");

				cache_get_field_content(0, "Birthdate", birthdate, g_iHandle);
				cache_get_field_content(0, "Origin", origin, g_iHandle);

				PlayerTextDrawSetPreviewModel(extraid, PlayerData[extraid][pTextdraws][73], skin);

				if (!strlen(birthdate)) {
				    birthdate = "No Especificado";
				}
				if (!strlen(origin)) {
				    origin = "No Especificado";
				}
				format(string, sizeof(string), "~b~Nacimiento:~w~ %s", birthdate);
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][74], string);

				format(string, sizeof(string), "~b~Origen:~w~ %s", origin);
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][75], string);

				format(string, sizeof(string), "~b~Creacion:~w~ %s", GetDuration(gettime() - cache_get_field_int(0, "CreateDate")));
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][76], string);

				format(string, sizeof(string), "~b~Jugado:~w~ %s", GetDuration(gettime() - cache_get_field_int(0, "LastLogin")));
				PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][77], string);

				for (new i = 0; i < 8; i ++) {
				    PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
				}
			    for (new i = 71; i < 81; i ++) {
			        PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);
				}
			}
		}
	}
	return 1;
}

forward OnViewCharges(extraid, name[]);
public OnViewCharges(extraid, name[])
{
	if (GetFactionType(extraid) != FACTION_POLICE)
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(extraid, "No results found for charges on \"%s\".", name);

	static
	    string[1024],
		desc[128],
		date[36];

	string[0] = 0;

	for (new i = 0; i < rows; i ++) {
	    cache_get_field_content(i, "Description", desc, g_iHandle);
	    cache_get_field_content(i, "Date", date, g_iHandle);

	    format(string, sizeof(string), "%s%s (%s)\n", string, desc, date);
	}
	format(desc, sizeof(desc), "Charges: %s", name);
	Dialog_Show(extraid, ChargeList, DIALOG_STYLE_LIST, desc, string, "Close", "");
	return 1;
}

stock SetCameraData(playerid)
{
    #if SERVER_CITY == 1
	    SetPlayerPos(playerid, 2096.8398,-1879.4764,15.000);
		SetPlayerCameraPos(playerid, 2096.8398,-1879.4764,30);
		SetPlayerCameraLookAt(playerid, 2080.5161,-1759.1907,13.5656);
	#elseif SERVER_CITY == 2
	    SetPlayerPos(playerid, -1553.776367, 844.732299, 32.268722);
		SetPlayerCameraPos(playerid, -1553.776367, 844.732299, 52.268722);
		SetPlayerCameraLookAt(playerid, -1554.276245, 844.740234, 52.250732);
    #elseif SERVER_CITY == 3
	    SetPlayerPos(playerid, 2069.442138, 977.235412, 6.572320);
		SetPlayerCameraPos(playerid, 2069.442138, 977.235412, 26.572320);
		SetPlayerCameraLookAt(playerid, 2069.452148, 977.702697, 26.557329);
	#endif

	return 1;
}

forward AccountCheck(playerid);
public AccountCheck(playerid)
{
    //SetPlayerPos(playerid, -1988.752075, -72.294998, 38.647026);
	//SetPlayerCameraPos(playerid, -1988.752075, -72.294998, 58.647026);
	//SetPlayerCameraLookAt(playerid, -2006.489868, -72.107597, 55.977474);

	SetCameraData(playerid);
	SQL_CheckAccount(playerid);
	return 1;
}

forward OnResolveUsername(extraid, character[]);
public OnResolveUsername(extraid, character[])
{
    new
		rows,
		fields,
		name[24];

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
 		return SendErrorMessage(extraid, "No hay cuenta vinculada a ese nombre.");

	cache_get_row(0, 0, name, g_iHandle);
	SendServerMessage(extraid, "La cuenta de %s es %s.", character, name);

	return 1;
}

forward OnLoginDate(extraid, username[]);
public OnLoginDate(extraid, username[])
{
    if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
	    date[36];

	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    cache_get_row(0, 0, date, g_iHandle);

	    SendServerMessage(extraid, "La ultima conexion de %s fue en %s.", username, date);
	}
	else {
	    SendErrorMessage(extraid, "Usuario incorrecto.");
	}
	return 1;
}

forward OnCarStorageAdd(carid, itemid);
public OnCarStorageAdd(carid, itemid)
{
	CarStorage[carid][itemid][cItemID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnStorageAdd(houseid, itemid);
public OnStorageAdd(houseid, itemid)
{
	HouseStorage[houseid][itemid][hItemID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnDealerCarCreated(bizid, slotid);
public OnDealerCarCreated(bizid, slotid)
{
	DealershipCars[bizid][slotid][vehID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnFurnitureCreated(furnitureid);
public OnFurnitureCreated(furnitureid)
{
	FurnitureData[furnitureid][furnitureID] = cache_insert_id(g_iHandle);
	Furniture_Save(furnitureid);
	return 1;
}

forward OnContactAdd(playerid, id);
public OnContactAdd(playerid, id)
{
	ContactData[playerid][id][contactID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnInventoryAdd(playerid, itemid);
public OnInventoryAdd(playerid, itemid)
{
	InventoryData[playerid][itemid][invID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnBanLookup(playerid, username[]);
public OnBanLookup(playerid, username[])
{
	if (!IsPlayerConnected(playerid))
	    return 0;

	static
	    rows,
	    fields,
	    reason[128],
	    date[36];

	cache_get_data(rows, fields, g_iHandle);

	if (rows) {
	    cache_get_field_content(0, "Reason", reason, g_iHandle);
	    cache_get_field_content(0, "Date", date, g_iHandle);

		SendServerMessage(playerid, "%s fue baneado el %s, razon: %s", username, date, reason);
	}
	else {
	    SendErrorMessage(playerid, "%s no esta baneado de este servidor.", username);
	}
	return 1;
}

forward OnVerifyNameChange(playerid, newname[]);
public OnVerifyNameChange(playerid, newname[])
{
	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	    return SendErrorMessage(playerid, "El nombre \"%s\" ya esta en uso.", newname);

	foreach (new i : Player) if (!strcmp(ReturnName(i), newname, true)) {
	    return SendErrorMessage(playerid, "El nombre \"%s\" ya esta en uso.", newname);
	}
	format(PlayerData[playerid][pNameChange], 24, newname);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s esta pidiendo un cambio de nombre a %s (usa \"/aceptarnombre\" o \"/rechazarnombre\").", ReturnName(playerid, 0), newname);
	SendServerMessage(playerid, "Tu pedido de cambio de nombre fue enviado a los admins.");

	return 1;
}

forward OnDeleteCharacter(playerid, name[]);
public OnDeleteCharacter(playerid, name[])
{
	static
	    rows,
	    fields,
		query[128],
		id = -1;

    cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "El nombre \"%s\" no esta vinculado a ninguna cuenta.", name);

	if (cache_get_field_int(0, "Admin") > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "No estas autorizado a eliminar el personaje de un administrador de rango superior.");

	id = cache_get_field_int(0, "ID");

	if (id) {
	    format(query, sizeof(query), "DELETE FROM `contacts` WHERE `ID` = '%d'", id);
     	mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", id);
		mysql_tquery(g_iHandle, query);

		format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `ID` = '%d'", id);
  		mysql_tquery(g_iHandle, query);

  		SendServerMessage(playerid, "Has eliminado a \"%s\" satisfactoriamente.", name);
	}
	return 1;
}

forward OnDeleteAccount(playerid, name[]);
public OnDeleteAccount(playerid, name[])
{
	static
	    rows,
	    fields,
		id = -1;

	cache_get_data(rows, fields, g_iHandle);

	if (!rows)
	    return SendErrorMessage(playerid, "La cuenta \"%s\" no existe.", name);

	static
	    query[128];

	for (new i = 0; i < rows; i ++)
	{
	    if ((id = cache_get_field_int(i, "ID")))
		{
	        format(query, sizeof(query), "DELETE FROM `contacts` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

	        format(query, sizeof(query), "DELETE FROM `gps` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

	        format(query, sizeof(query), "DELETE FROM `inventory` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);

            format(query, sizeof(query), "DELETE FROM `tickets` WHERE `ID` = '%d'", id);
	        mysql_tquery(g_iHandle, query);
		}
	}
	format(query, sizeof(query), "DELETE FROM `accounts` WHERE `Username` = '%s'", name);
    mysql_tquery(g_iHandle, query);

    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s'", name);
    mysql_tquery(g_iHandle, query);

    SendServerMessage(playerid, "Has eliminado a \"%s\" de la base de datos.", name);
    return 1;
}

forward OnNameChange(playerid, userid, newname[]);
public OnNameChange(playerid, userid, newname[])
{
	if (!IsPlayerConnected(playerid) || !IsPlayerConnected(userid))
	    return 0;

	static
	    rows,
	    fields;

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	    return SendErrorMessage(playerid, "El nombre \"%s\" ya esta en uso.", newname);

    new
		oldname[MAX_PLAYER_NAME];

	GetPlayerName(userid, oldname, sizeof(oldname));
	ChangeName(userid, newname);

    for (new i = 0, l = strlen(oldname); i != l; i ++) {
	    if (oldname[i] == '_') oldname[i] = ' ';
	}
	for (new i = 0, l = strlen(newname); i != l; i ++) {
	    if (newname[i] == '_') newname[i] = ' ';
	}
	SendServerMessage(playerid, "Has cambiado el nombre de %s a %s.", oldname, newname);
	SendServerMessage(userid, "%s ha cambiado tu nombre a %s.", ReturnName(playerid, 0), newname);

	Log_Write("logs/name_log.txt", "[%s] %s cambio el nombre de %s a %s.", ReturnDate(), ReturnName(playerid), oldname, newname);
	return 1;
}

forward OnTicketCreated(playerid, ticketid);
public OnTicketCreated(playerid, ticketid)
{
	TicketData[playerid][ticketid][ticketID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnRackCreated(rackid);
public OnRackCreated(rackid)
{
	if (rackid == -1 || !RackData[rackid][rackExists])
	    return 0;

	RackData[rackid][rackID] = cache_insert_id(g_iHandle);
	Rack_Save(rackid);

	return 1;
}

forward OnGateCreated(gateid);
public OnGateCreated(gateid)
{
	if (gateid == -1 || !GateData[gateid][gateExists])
	    return 0;

	GateData[gateid][gateID] = cache_insert_id(g_iHandle);
	Gate_Save(gateid);

	return 1;
}

forward OnBusinessCreated(bizid);
public OnBusinessCreated(bizid)
{
	if (bizid == -1 || !BusinessData[bizid][bizExists])
	    return 0;

	BusinessData[bizid][bizID] = cache_insert_id(g_iHandle);
	Business_Save(bizid);

	return 1;
}

forward OnEntranceCreated(entranceid);
public OnEntranceCreated(entranceid)
{
	if (entranceid == -1 || !EntranceData[entranceid][entranceExists])
	    return 0;

	EntranceData[entranceid][entranceID] = cache_insert_id(g_iHandle);
	EntranceData[entranceid][entranceWorld] = EntranceData[entranceid][entranceID] + 7000;

	Entrance_Save(entranceid);

	return 1;
}

forward OnCarCreated(carid);
public OnCarCreated(carid)
{
	if (carid == -1 || !CarData[carid][carExists])
	    return 0;

	CarData[carid][carID] = cache_insert_id(g_iHandle);
	Car_Save(carid);

	return 1;
}

forward OnPumpCreated(pumpid);
public OnPumpCreated(pumpid)
{
    PumpData[pumpid][pumpID] = cache_insert_id(g_iHandle);
	Pump_Save(pumpid);

	return 1;
}

forward OnArrestCreated(arrestid);
public OnArrestCreated(arrestid)
{
	if (arrestid == -1 || !ArrestData[arrestid][arrestExists])
	    return 0;

	ArrestData[arrestid][arrestID] = cache_insert_id(g_iHandle);
	Arrest_Save(arrestid);

	return 1;
}

forward OnPlantCreated(plantid);
public OnPlantCreated(plantid)
{
	if (plantid == -1 || !PlantData[plantid][plantExists])
	    return 0;

	PlantData[plantid][plantID] = cache_insert_id(g_iHandle);
	Plant_Save(plantid);

	return 1;
}

forward OnCrateCreated(crateid);
public OnCrateCreated(crateid)
{
	if (crateid == -1 || !CrateData[crateid][crateExists])
	    return 0;

	CrateData[crateid][crateID] = cache_insert_id(g_iHandle);
	Crate_Save(crateid);

	return 1;
}

forward OnFactionCreated(factionid);
public OnFactionCreated(factionid)
{
	if (factionid == -1 || !FactionData[factionid][factionExists])
	    return 0;

	FactionData[factionid][factionID] = cache_insert_id(g_iHandle);

	Faction_Save(factionid);
	Faction_SaveRanks(factionid);

	return 1;
}

forward OnBackpackCreated(id);
public OnBackpackCreated(id)
{
	if (id == -1 || !BackpackData[id][backpackExists])
	    return 0;

	BackpackData[id][backpackID] = cache_insert_id(g_iHandle);
	Backpack_Save(id);

	return 1;
}

forward OnATMCreated(atmid);
public OnATMCreated(atmid)
{
    if (atmid == -1 || !ATMData[atmid][atmExists])
		return 0;

	ATMData[atmid][atmID] = cache_insert_id(g_iHandle);
 	ATM_Save(atmid);

	return 1;
}

forward OnImpoundCreated(impoundid);
public OnImpoundCreated(impoundid)
{
	if (impoundid == -1 || !ImpoundData[impoundid][impoundExists])
	    return 0;

	ImpoundData[impoundid][impoundID] = cache_insert_id(g_iHandle);
	Impound_Save(impoundid);

	return 1;
}

forward OnGraffitiCreated(id);
public OnGraffitiCreated(id)
{
	GraffitiData[id][graffitiID] = cache_insert_id(g_iHandle);
	Graffiti_Save(id);

	return 1;
}

forward OnDetectorCreated(id);
public OnDetectorCreated(id)
{
	MetalDetectors[id][detectorID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnGarbageCreated(garbageid);
public OnGarbageCreated(garbageid)
{
	if (garbageid == -1 || !GarbageData[garbageid][garbageExists])
	    return 0;

	GarbageData[garbageid][garbageID] = cache_insert_id(g_iHandle);
	Garbage_Save(garbageid);

	return 1;
}

forward OnVendorCreated(vendorid);
public OnVendorCreated(vendorid)
{
	if (vendorid == -1 || !VendorData[vendorid][vendorExists])
	    return 0;

	VendorData[vendorid][vendorID] = cache_insert_id(g_iHandle);
	Vendor_Save(vendorid);

	return 1;
}

forward OnSpeedCreated(speedid);
public OnSpeedCreated(speedid)
{
	if (speedid == -1 || !SpeedData[speedid][speedExists])
	    return 0;

	SpeedData[speedid][speedID] = cache_insert_id(g_iHandle);
	Speed_Save(speedid);

	return 1;
}

forward OnHouseCreated(houseid);
public OnHouseCreated(houseid)
{
	if (houseid == -1 || !HouseData[houseid][houseExists])
	    return 0;

	HouseData[houseid][houseID] = cache_insert_id(g_iHandle);
	House_Save(houseid);

	return 1;
}

forward OnDroppedItem(itemid);
public OnDroppedItem(itemid)
{
	if (itemid == -1 || !DroppedItems[itemid][droppedModel])
	    return 0;

	DroppedItems[itemid][droppedID] = cache_insert_id(g_iHandle);
	return 1;
}

forward OnJobCreated(jobid);
public OnJobCreated(jobid)
{
	if (jobid == -1 || !JobData[jobid][jobExists])
	    return 0;

	JobData[jobid][jobID] = cache_insert_id(g_iHandle);
	Job_Save(jobid);

	return 1;
}

forward OnCharacterLookup(extraid, id, character[]);
public OnCharacterLookup(extraid, id, character[])
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
	    string[128];

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	{
	    static
	        admin,
	        skin,
	        createDate,
	        lastLogin;

		admin = cache_get_field_int(0, "Admin");
		skin = cache_get_field_int(0, "Skin");

		createDate = cache_get_field_int(0, "CreateDate");
		lastLogin = cache_get_field_int(0, "LastLogin");

		format(string, sizeof(string), "~g~Nombre:~w~ %s~n~~g~Cuenta:~w~ %s~n~~g~Creado:~w~ %s~n~~g~Ultima Conexion:~w~ %s", character, (admin > 0) ? ("Admin") : ("Player"), GetDuration(gettime() - createDate), GetDuration(gettime() - lastLogin));
		PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][52], string);

		format(string, sizeof(string), "#%d: %s", id, character);
		PlayerTextDrawSetString(extraid, PlayerData[extraid][pTextdraws][53], string);

		PlayerTextDrawSetPreviewModel(extraid, PlayerData[extraid][pTextdraws][54], skin);

		for (new i = 40; i < 58; i ++)
  		{
    		if (i >= 50)
      			PlayerTextDrawShow(extraid, PlayerData[extraid][pTextdraws][i]);

			else if (i < 50)
   				PlayerTextDrawHide(extraid, PlayerData[extraid][pTextdraws][i]);
   		}
		SelectTextDraw(extraid, -1);

		PlayerData[extraid][pDisplayStats] = 2;
		PlayerData[extraid][pCharacterMenu] = id;
	}
	return 1;
}

forward OnCharacterCheck(extraid, character[]);
public OnCharacterCheck(extraid, character[])
{
	if (!IsPlayerConnected(extraid))
	    return 0;

	static
	    rows,
	    fields,
		query[150];

	cache_get_data(rows, fields, g_iHandle);

	if (rows)
	{
	    Dialog_Show(extraid, CreateChar, DIALOG_STYLE_INPUT, "Crear Personaje", "Error: El nombre \"%s\" ya esta en uso!\n\nEscribe el nombre de tu personaje:\n\nAdvertencia: Tu nombre tiene que ser Nombre_Apellido y no puede ser muy largo (24 letras max).", "Create", "Cancel", character);
	}
	else
	{
		format(query, sizeof(query), "INSERT INTO `characters` (`Username`, `Character`, `CreateDate`) VALUES('%s', '%s', '%d')", PlayerData[extraid][pUsername], character, gettime());
		mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", extraid, THREAD_CREATE_CHAR);

		format(PlayerCharacters[extraid][PlayerData[extraid][pCharacter] - 1], MAX_PLAYER_NAME + 1, character);
		SendServerMessage(extraid, "Creaste el personaje \"%s\" exitosamente.", character);

		ShowCharacterMenu(extraid);
		PlayerData[extraid][pLogged] = 0;
	}
	return 1;
}

stock FlashTextDraw(playerid, PlayerText:textid, delay = 500)
{
	PlayerTextDrawHide(playerid, textid);

	SetTimerEx("FlashShowTextDraw", delay, false, "dd", playerid, _:textid);

	return 1;
}

stock FlashTextDrawEx(playerid, PlayerText:textid, amount = 1)
{
	PlayerTextDrawHide(playerid, textid);

	SetTimerEx("FlashShowTextDrawEx", 500, false, "ddd", playerid, _:textid, amount);

	return 1;
}

forward FlashShowTextDrawEx(playerid, PlayerText:textid, amount);
public FlashShowTextDrawEx(playerid, PlayerText:textid, amount)
{
    if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
	    PlayerTextDrawShow(playerid, textid);

	    if (amount > 0) return SetTimerEx("HideTextDrawEx", 500, false, "ddd", playerid, _:textid, amount);
	}
	return 1;
}

forward HideTextDrawEx(playerid, PlayerText:textid, amount);
public HideTextDrawEx(playerid, PlayerText:textid, amount)
{
    if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
	    PlayerTextDrawHide(playerid, textid);

	    if (amount > 0) return SetTimerEx("FlashShowTextDrawEx", 500, false, "ddd", playerid, _:textid, --amount);
	}
	return 1;
}

forward FlashShowTextDraw(playerid, PlayerText:textid);
public FlashShowTextDraw(playerid, PlayerText:textid)
{
	if ((IsPlayerConnected(playerid) && PlayerData[playerid][pLogged] && PlayerData[playerid][pCharacter] != 0 && PlayerData[playerid][pHospital] == -1) && IsPlayerSpawned(playerid)) {
	    PlayerTextDrawShow(playerid, textid);
	}
	return 1;
}

stock RestartCheck()
{
	static
	    time[3],
		string[32];

	if (g_ServerRestart == 1 && !g_RestartTime)
	{
		foreach (new i : Player) {
		    SQL_SaveCharacter(i);
		    SetPlayerName(i, PlayerData[i][pUsername]);
		}
		for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) 
		{
 			Faction_Save(i);
		}
		SendRconCommand("gmx");
	}
	else if (g_ServerRestart == 1) {
		GetElapsedTime(g_RestartTime--, time[0], time[1], time[2]);

		format(string, 32, "~r~Reinicio del Servidor:~w~ %02d:%02d", time[1], time[2]);
	    TextDrawSetString(gServerTextdraws[3], string);
	}
	return 1;
}

stock TotalledCheck()
{
	static
	    Float:fHealth;

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && GetVehicleHealth(i, fHealth) && fHealth < 300.0) {
	    SetVehicleHealth(i, 300.0);
	    SetEngineStatus(i, false);
	}
	return 1;
}

forward MinuteCheck();
public MinuteCheck()
{
	static
	    Float:hp;

    foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] && !PlayerData[i][pCharacter])
	        continue;

        PlayerData[i][pMinutes]++;

        if (PlayerData[i][pMinutes] >= 60)
       	{
       	    new paycheck = random(100) + 100;

        	PlayerData[i][pMinutes] = 0;

			PlayerData[i][pPlayingHours]++;
			PlayerData[i][pBankMoney] += paycheck;

			if(PlayerData[i][pOwnsBillboard] >= 0)
			{
			    if(PlayerData[i][pBankMoney] >= BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice])
			    {
				    SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
	         		SendClientMessageEx(i, COLOR_WHITE, "Tu paga de {33CC33}%s{FFFFFF} ha sido agregada a tu cuenta bancaria.", FormatNumber(paycheck));
	         		SendClientMessageEx(i, COLOR_WHITE, "{33CC33}%s{FFFFFF} ha sido reducido de tu cuenta bancaria por pagos de publicidad", FormatNumber(BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice]));
					SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
					PlayerData[i][pBankMoney] -= BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice];
					Tax_AddMoney(BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice]);
					return 1;
				}
                if(PlayerData[i][pBankMoney] < BillBoardData[PlayerData[i][pOwnsBillboard]][bbPrice])
			    {
			        SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
	         		SendClientMessageEx(i, COLOR_WHITE, "Tu paga de {33CC33}%s{FFFFFF} ha sido agregada a tu cuenta bancaria.", FormatNumber(paycheck));
	         		SendClientMessageEx(i, COLOR_LIGHTRED, "Ya no podes pagar la publicidad, el cartel vuelve a estar disponible");
					SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
					BillBoardData[PlayerData[i][pOwnsBillboard]][bbOwner] = 0;
					Billboard_Save(PlayerData[i][pOwnsBillboard]);
					Billboard_Refresh(PlayerData[i][pOwnsBillboard]);
					PlayerData[i][pOwnsBillboard] = -1;
				}
				return 1;
			}

         	SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
         	SendClientMessageEx(i, COLOR_WHITE, "Tu paga de {33CC33}%s{FFFFFF} ha sido agregada a tu cuenta bancaria.", FormatNumber(paycheck));
			SendClientMessage(i, COLOR_GREY, "-----------------------------------------------------------");
		}

		if (PlayerData[i][pInjured])
		{
		    GetPlayerHealth(i, hp);
		    SetPlayerHealth(i, hp - 10.0);
		}
	}
	for (new i = 0; i != MAX_DRUG_PLANTS; i ++) if (PlantData[i][plantExists] && PlantData[i][plantDrugs] < Plant_MaxGrams(PlantData[i][plantType])) {
	    PlantData[i][plantDrugs]++;

	    Plant_Refresh(i);
	    Plant_Save(i);
	}
	CheckSubsidioSQL();
	return 1;
}

forward PlayerCheck();
public PlayerCheck()
{
	static
		str[128],
		Float:health,
		id = -1;

	TotalledCheck();
	RestartCheck();

	foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] && !PlayerData[i][pCharacter])
	        continue;

		if (PlayerData[i][pTutorial] > 0)
		{
		    PlayerData[i][pTutorialTime]--;

		    if (PlayerData[i][pTutorialTime] < 1)
		    {
		        switch (PlayerData[i][pTutorial])
		        {
		            case 1:
		            {
		                PlayerData[i][pTutorial] = 2;
		                PlayerData[i][pTutorialTime] = 15;

		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Escuela de manejo");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "Esta es la ~g~~h~Escuela de Manejo~w~. Aca podes tomar~n~tus pruebas de manejo. Para pasar la prueba,~n~tienes que evitar obstaculos.");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Es necesaria una licencia para manejar en~n~este estado. Manejar aturdidamente o sin~n~licencia alertara a la policia!");

						#if SERVER_CITY == 1
                            SetPlayerPos(i, 1967.677978, -1991.190795, -3.260505);
							InterpolateCameraPos(i, 1642.303344, -2327.007568, 15.672925, 1967.677978, -1991.190795, 16.739494, 2000);
							InterpolateCameraLookAt(i, 1642.292968, -2327.523193, 15.546875, 1968.177246, -1991.205078, 16.651542, 2000);
                        #elseif SERVER_CITY == 2
			                SetPlayerPos(i, -2026.765991, -84.237663, 21.766628);
							InterpolateCameraPos(i, -2399.519287, 321.964355, 37.035743, -2026.765991, -84.237663, 41.766628, 2000);
							InterpolateCameraLookAt(i, -2399.951416, 322.215942, 37.015625, -2026.787597, -84.917533, 41.520622, 2000);
						#elseif SERVER_CITY == 3
			                SetPlayerPos(i, 1168.088500, 1381.582641, -3.185750);
							InterpolateCameraPos(i, 1711.642089, 1448.227294, 13.340233, 1168.088500, 1381.582641, 16.814249, 2000);
							InterpolateCameraLookAt(i, 1711.144897, 1448.224365, 13.289665, 1168.084472, 1381.082641, 16.674325, 2000);
						#endif
			        }
                    case 2:
		            {
		                PlayerData[i][pTutorial] = 3;
		                PlayerData[i][pTutorialTime] = 15;

		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Concesionario");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "Este es el ~g~~h~Concesionario~w~. Puedes comprar ~n~cualquier auto privado para ~n~vos, por un precio especifico.");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Recuerda ~b~~h~/estacionar~w~ tu vehiculo! Tu vehiculo sera ~n~embargado si no esta estacionado ~n~correctamente.");

						#if SERVER_CITY == 1
						    SetPlayerPos(i, 546.784729, -1256.438354, 15.406070);
							InterpolateCameraPos(i, 1967.677978, -1991.190795, 16.739494, 546.784729, -1256.438354, 35.406070, 2000);
							InterpolateCameraLookAt(i, 1968.177246, -1991.205078, 16.651542, 546.749816, -1256.937133, 35.216030, 2000);
						#elseif SERVER_CITY == 2
			                SetPlayerPos(i, -2006.275146, 287.903869, 28.095851);
							InterpolateCameraPos(i, -2026.765991, -84.237663, 41.766628, -2006.275146, 287.903869, 48.095851, 2000);
							InterpolateCameraLookAt(i, -2026.787597, -84.917533, 41.520622, -2005.739257, 287.892669, 47.936939, 2000);
						#elseif SERVER_CITY == 3
                   			SetPlayerPos(i, 1635.780761, 1828.321289, 5.649860);
							InterpolateCameraPos(i, 1168.088500, 1381.582641, 16.814249, 1635.780761, 1828.321289, 25.649860, 2000);
							InterpolateCameraLookAt(i, 1168.084472, 1381.082641, 16.674325, 1636.280517, 1828.325683, 25.5048842, 2000);
						#endif
				    }
		            case 3:
		            {
		                PlayerData[i][pTutorial] = 4;
		                PlayerData[i][pTutorialTime] = 15;

		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Trabajos");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "Hay muchos trabajos por la~n~ciudad para elegir, este siendo el trabajo de ~n~~r~~h~Camionero~w~.");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Los trabajos te daran ingreso de dinero. ~n~Usa ~g~~h~/trabajos~w~ para encontrar tu trabajo~n~preferido!");

						#if SERVER_CITY == 1
						    SetPlayerPos(i, 2420.203857, -2089.423095, -1.058326);
							InterpolateCameraPos(i, 556.450866, -1260.044677, 20.433259, 2420.203857, -2089.423095, 18.941673, 2000);
							InterpolateCameraLookAt(i, 556.276916, -1260.619628, 20.427263, 2420.703613, -2089.426269, 18.879707, 2000);
						#elseif SERVER_CITY == 2
			                SetPlayerPos(i, -1683.220336, -7.236631, -4.830643);
							InterpolateCameraPos(i, -2006.275146, 287.903869, 48.095851, -1683.220336, -7.236631, 15.169356, 2000);
							InterpolateCameraLookAt(i, -2005.739257, 287.892669, 47.936939, -1682.866577, -6.893327, 15.087323, 2000);
						#elseif SERVER_CITY == 3
			                SetPlayerPos(i, 1012.894348, 2137.586425, -4.546604);
							InterpolateCameraPos(i, 1635.780761, 1828.321289, 25.649860, 1012.894348, 2137.586425, 15.453395, 2000);
							InterpolateCameraLookAt(i, 1636.280517, 1828.325683, 25.504884, 1013.393859, 2137.540283, 15.364944, 2000);
						#endif
			        }
		            case 4:
		            {
		                PlayerData[i][pTutorial] = 5;
		                PlayerData[i][pTutorialTime] = 15;

		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Bienes Raices");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "Hay muchas oportunidades de bienes raices en~n~San Andreas. Para comprar una casa, escribe ~n~~g~~h~/comprar~w~en el icono.");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Tambien podes comprar muebles y guardar tus~n~cosas dentro de la casa. Escribe ~g~~h~/ayuda~w~ para ~n~saber los comandos necesarios.");

						#if SERVER_CITY == 1
						    SetPlayerPos(i, 1149.126586, -744.422912, 84.984420);
							InterpolateCameraPos(i, 2420.203857, -2089.423095, 18.941673, 1149.126586, -744.422912, 104.984420, 2000);
							InterpolateCameraLookAt(i, 2420.703613, -2089.426269, 18.879707, 1148.626708, -744.411132, 104.823509, 2000);
						#elseif SERVER_CITY == 2
			                SetPlayerPos(i, -2507.954101, 1125.971801, 44.563232);
							InterpolateCameraPos(i, 1683.220336, -7.236631, 15.169356, -2507.954101, 1125.971801, 64.563232, 2000);
							InterpolateCameraLookAt(i, -1682.866577, -6.893327, 15.087323, -2507.928710, 1126.796386, 64.145462, 2000);
						#elseif SERVER_CITY == 3
			                SetPlayerPos(i, 1380.143676, 2532.807373, -2.440540);
							InterpolateCameraPos(i, 1012.894348, 2137.586425, 15.453395, 1380.143676, 2532.807373, 17.559459, 2000);
							InterpolateCameraLookAt(i, 1013.393859, 2137.540283, 15.364944, 1380.643676, 2532.810302, 17.450519, 2000);
						#endif
			        }
		            case 5:
		            {
		                PlayerData[i][pTutorial] = 6;
		                PlayerData[i][pTutorialTime] = 15;

		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Negocios");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "Los negocios tambien te dan un ingreso.~n~Podes ajustar las caracteristicas del~n~negocio, commo los precios y un mensaje.");//and even~n~hire employees to work for you!");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Este negocio es una ~p~~h~Tienda minorista~w~. Podes~n~comprar objetos escribiendo ~g~~h~/comprar~w~.~n~Escribe ~g~~h~/ayuda ~w~para mas comandos.");

						#if SERVER_CITY == 1
                            SetPlayerPos(i, 1315.212036, -916.465942, 24.322559);
							InterpolateCameraPos(i, 1149.126586, -744.422912, 104.984420, 1315.212036, -916.465942, 44.322559, 2000);
							InterpolateCameraLookAt(i, 1148.626708, -744.411132, 104.82350, 1315.211059, -915.965942, 44.212619, 2000);
						#elseif SERVER_CITY == 2
			                SetPlayerPos(i, -2442.177734, 726.758605, 21.054706);
							InterpolateCameraPos(i, -2507.954101, 1125.971801, 64.563232, -2442.177734, 726.758605, 41.054706, 2000);
							InterpolateCameraLookAt(i, -2507.928710, 1126.796386, 64.145462, -2442.179931, 727.221496, 40.933773, 2000);
						#elseif SERVER_CITY == 3
                   			SetPlayerPos(i, 2160.811035, 1992.461425, -1.797470);
							InterpolateCameraPos(i, 1380.143676, 2532.807373, 17.559459, 2160.811035, 1992.461425, 18.202529, 2000);
							InterpolateCameraLookAt(i, 1380.643676, 2532.810302, 17.450519, 2161.310546, 1992.449707, 18.108432, 2000);
						#endif
			        }
			        case 6:
		            {
		                PlayerData[i][pTutorial] = 7;
		                PlayerData[i][pTutorialTime] = 15;

		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Hambre y Sed");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "El hambre y sed son mostrados~n~en la parte derecha de la pantalla. Despues~n~de un rato te dará hambre.");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Este es un negocio de ~y~Comida Rapida~w~. Podes ~n~comprar comida aqui. Tambien podes comprar ~n~comida y bebida en un ~y~Minorista.");

						SetPlayerInterior(i, 10);
						SetPlayerPos(i, 365.013977, -73.615165, 983.073730);
						SetPlayerCameraPos(i, 365.013977, -73.615165, 1003.073730);
						SetPlayerCameraLookAt(i, 365.426818, -73.318977, 1003.007812);
			        }
		            case 7:
		            {
		                PlayerData[i][pTutorial] = 8;
		                PlayerData[i][pTutorialTime] = 15;

						SetPlayerInterior(i, 0);
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][59], "Tutorial: Conclusion");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][60], "El tutorial ha terminado. Recuerda, si~n~necesitas ayuda, escribe ~g~~h~/ayudame~n~~w~y espera la ayuda.");
		                PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][61], "Green Latin ~r~Roleplay~w~ te desea una agradable ~n~estadia y jugabilidad~n~Apareceras en un momento.");

						#if SERVER_CITY == 1
                            SetPlayerPos(i, 1226.481567, -1144.220336, 31.174240);
							InterpolateCameraPos(i, 1202.077392, -929.400634, 47.784023, 1226.481567, -1144.220336, 51.174240, 2000);
							InterpolateCameraLookAt(i, 1202.008300, -928.905456, 47.673583, 1225.981567, -1144.216186, 51.160247, 2000);
						#elseif SERVER_CITY == 2
			                SetPlayerPos(i, -2016.094970, -306.215942, 55.449806);
							InterpolateCameraPos(i, -2336.783935, -187.118865, 44.045051, -2016.094970, -306.215942, 75.449806, 2000);
							InterpolateCameraLookAt(i, -2336.785400, -186.618865, 43.885139, -2016.088867, -305.735107, 75.390838, 2000);
						#elseif SERVER_CITY == 3
			                SetPlayerPos(i, 2115.572753, 2113.175292, 6.203048);
							InterpolateCameraPos(i, 1871.407104, 2052.714599, 20.308364, 2115.572753, 2113.175292, 26.203048, 2000);
							InterpolateCameraLookAt(i, 1871.404663, 2053.214599, 20.169441, 2115.072753, 2113.184326, 26.153575, 2000);
						#endif
			        }
		            case 8:
		            {
		                for (new j = 58; j < 62; j ++) {
		                    PlayerTextDrawHide(i, PlayerData[i][pTextdraws][j]);
						}
						SetDefaultSpawn(i);
		                ShowHungerTextdraw(i, 1);

		                PlayerData[i][pCreated] = 1;
		                PlayerData[i][pTask] = 1;

		                PlayerData[i][pTutorial] = 0;
		                PlayerData[i][pTutorialTime] = 0;
		                GiveMoney(i, 1250);

		                SendServerMessage(i, "Escribe /tareas para ver tus tareas por completar.");
		            }
		        }
		    }
		}
		if (GetPlayerSpecialAction(i) == SPECIAL_ACTION_USEJETPACK && !PlayerData[i][pJetpack])
		{
	    	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s aparecio un jetpack con hacks.", ReturnName(i, 0));
	    	Log_Write("logs/cheat_log.txt", "[%s] %s aparecio un jetpack con hacks.", ReturnDate(), ReturnName(i, 0));
		}
		if (GetPlayerSpeed(i) > 210 && PlayerData[i][pAdmin] < 1)
		{
		    if (!IsAPlane(GetPlayerVehicleID(i)) && GetPlayerState(i) != PLAYER_STATE_PASSENGER)
		    {
		        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s posible uso de speed hack (%.0f mph).", ReturnName(i, 0), GetPlayerSpeed(i));
		        Log_Write("logs/cheat_log.txt", "[%s] %s posible uso de speed hack (%.0f mph).", ReturnDate(), ReturnName(i, 0), GetPlayerSpeed(i));
			}
		}
		if(PlayerData[i][pChannel] == 911 && GetFactionType(i) != FACTION_POLICE)
		{
		    PlayerData[i][pChannel] = 0;
		}
		if (PlayerData[i][pPicking])
		{
			if ((id = PlayerData[i][pPickCar]) != -1)
			{
			    if (Car_Nearest(i) != id)
			    {
			        PlayerData[i][pPicking] = 0;
			        PlayerData[i][pPickCar] = -1;
			        PlayerData[i][pPickTime] = 0;
				}
				else
				{
				    PlayerData[i][pPickTime]++;

				    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Abriendo... %d", 60 - PlayerData[i][pPickTime]);
					GameTextForPlayer(i, str, 1000, 3);

					if (PlayerData[i][pPickTime] >= 60)
					{
                        static
					        engine, lights, alarm, doors, bonnet, boot, objective;

	    				GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);
					    SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);

                        PlayerData[i][pPicking] = 0;
                        PlayerData[i][pPickCar] = -1;
                        PlayerData[i][pPickTime] = 0;

                        CarData[id][carLocked] = 0;
						Car_Save(id);

					    SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** %s ha abierto con ganzua la puerta del auto.", ReturnName(i, 0));
					    ShowPlayerFooter(i, "Has ~g~abierto~w~ el vehiculo!");
					}
				}
		    }
		}
		if (!PlayerData[i][pKilled] && PlayerData[i][pHospital] != -1)
		{
			PlayerData[i][pHospitalTime]++;

			format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Recuperandose... %d", 15 - PlayerData[i][pHospitalTime]);
			GameTextForPlayer(i, str, 1000, 3);

			ApplyAnimation(i, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

			if (PlayerData[i][pHospitalTime] >= 15)
			{
       			SetPlayerPos(i, -204.5867, -1740.7955, 675.7687);
			    SetPlayerFacingAngle(i, 0.0000);

			    TogglePlayerControllable(i, 1);
			    SetCameraBehindPlayer(i);

			    SetPlayerVirtualWorld(i, PlayerData[i][pHospital] + 5000);
			    SendServerMessage(i, "Te has recuperado en el hospital mas cercano.");

			    GameTextForPlayer(i, " ", 1, 3);
			    ShowHungerTextdraw(i, 1);

			    PlayerData[i][pHospitalInt] = PlayerData[i][pHospital];
			    PlayerData[i][pHospital] = -1;
			    PlayerData[i][pHospitalTime] = 0;
			}
		}
		else if (PlayerData[i][pMuted] && PlayerData[i][pMuteTime] > 0)
		{
		    PlayerData[i][pMuteTime]--;

		    if (!PlayerData[i][pMuteTime])
		    {
				PlayerData[i][pMuted] = 0;
				PlayerData[i][pMuteTime] = 0;
		    }
		}
		else if (PlayerData[i][pGraffiti] != -1 && PlayerData[i][pGraffitiTime] > 0)
		{
			if (Graffiti_Nearest(i) != PlayerData[i][pGraffiti])
			{
			    PlayerData[i][pGraffiti] = -1;
                PlayerData[i][pGraffitiTime] = 0;
			}
			else
			{
	            PlayerData[i][pGraffitiTime]--;

	            if (PlayerData[i][pGraffitiTime] < 1)
				{
				    strunpack(str, PlayerData[i][pGraffitiText]);
	                format(GraffitiData[PlayerData[i][pGraffiti]][graffitiText], 64, str);

				    GraffitiData[PlayerData[i][pGraffiti]][graffitiColor] = PlayerData[i][pGraffitiColor];

					Graffiti_Refresh(PlayerData[i][pGraffiti]);
				    Graffiti_Save(PlayerData[i][pGraffiti]);

				    ClearAnimations(i, 1);
					SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** %s tira la lata de spray.", ReturnName(i, 0));

	                PlayerData[i][pGraffiti] = -1;
	                PlayerData[i][pGraffitiTime] = 0;
				}
			}
		}
		else if (PlayerData[i][pSpamCount] > 0)
		{
		    PlayerData[i][pSpamCount]--;
		}
		else if (PlayerData[i][pCommandCount] > 0)
		{
		    PlayerData[i][pCommandCount]--;
		}
		else if (PlayerData[i][pVendorTime] > 0)
		{
		    PlayerData[i][pVendorTime]--;
		}
		else if (PlayerData[i][pDrinkTime] > 0)
		{
		    PlayerData[i][pDrinkTime]--;
		}
		else if (PlayerData[i][pAdTime] > 0)
		{
		    PlayerData[i][pAdTime]--;
		}
		else if (PlayerData[i][pSpeedTime] > 0)
		{
		    PlayerData[i][pSpeedTime]--;
		}
		else if (PlayerData[i][pBleeding] && PlayerData[i][pBleedTime] > 0)
		{
		    if (--PlayerData[i][pBleedTime] == 0)
		    {
		        SetPlayerHealth(i, ReturnHealth(i) - 3.0);
			    PlayerData[i][pBleedTime] = 10;

			    CreateBlood(i);
			    SetTimerEx("HidePlayerBox", 500, false, "dd", i, _:ShowPlayerBox(i, 0xFF000066));
			}
		}
		else if (PlayerData[i][pFingerTime] > 0)
		{
		    PlayerData[i][pFingerTime]--;

		    if (!PlayerData[i][pFingerTime] && DroppedItems[PlayerData[i][pFingerItem]][droppedModel] && IsPlayerInRangeOfPoint(i, 1.5, DroppedItems[PlayerData[i][pFingerItem]][droppedPos][0], DroppedItems[PlayerData[i][pFingerItem]][droppedPos][1], DroppedItems[PlayerData[i][pFingerItem]][droppedPos][2]))
		    {
		        SendServerMessage(i, "El escaner detecto las huellas de %s.", DroppedItems[PlayerData[i][pFingerItem]][droppedPlayer]);
                PlayerData[i][pFingerItem] = -1;
			}
		}
		else if (PlayerData[i][pDrugUsed] != 0 && PlayerData[i][pDrugTime] > 0)
		{
		    if (--PlayerData[i][pDrugTime] && 1 <= PlayerData[i][pDrugUsed] <= 3 && GetPlayerDrunkLevel(i) < 5000) {
		        SetPlayerDrunkLevel(i, 10000);

				PlayerTextDrawShow(i, PlayerData[i][pTextdraws][8]);

				if (PlayerData[i][pDrugUsed] == 3) {
				    SetPlayerWeather(i, -67);
				    SetPlayerTime(i, 12, 12); // Set the time (the drug weather is buggy at night)
				}
			}
		    if (1 <= PlayerData[i][pDrugUsed] <= 3 && ReturnHealth(i) <= 95) {
		    	SetPlayerHealth(i, ReturnHealth(i) + 5);
			}
		    if (!PlayerData[i][pDrugTime])
		    {
		        new
	        		time[3];

        		gettime(time[0], time[1], time[2]);
				SetPlayerTime(i, time[0], time[1]);

		        SetPlayerDrunkLevel(i, 500);
				PlayerTextDrawHide(i, PlayerData[i][pTextdraws][8]);

				PlayerData[i][pDrugUsed] = 0;
		        SendServerMessage(i, "Los efectos de las drogas han cedido.");
		        if(marihuanatimer[i]) KillTimer(marihuanatimer[i]);
		        if(ConEstado[i] == true)
		        {
		        	Delete3DTextLabel(estado[i]);
         			ConEstado[i] = false;
         			SendServerMessage(i, "Se te quitó tu /estado.");
         		}
		    }
		}
		else if (PlayerData[i][pStunned] > 0)
		{
            PlayerData[i][pStunned]--;

			if (GetPlayerAnimationIndex(i) != 388)
            	ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);

            if (!PlayerData[i][pStunned])
            {
                TogglePlayerControllable(i, 1);
                ShowPlayerFooter(i, "No estas más ~r~aturdido.");
			}
		}
		else if (PlayerData[i][pJailTime] > 0)
		{
		    static
		        hours,
		        minutes,
		        seconds;

		    PlayerData[i][pJailTime]--;

			GetElapsedTime(PlayerData[i][pJailTime], hours, minutes, seconds);

			format(str, sizeof(str), "~g~Tiempo de prision:~w~ %02d:%02d:%02d", hours, minutes, seconds);
			PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][70], str);

		    if (!PlayerData[i][pJailTime])
		    {
		        PlayerData[i][pPrisoned] = 0;

		        SetDefaultSpawn(i);
		        ShowHungerTextdraw(i, 1);

				SendServerMessage(i, "Has sido liberado de la carcel.");
		        PlayerTextDrawHide(i, PlayerData[i][pTextdraws][70]);
			}
		}
		else if (PlayerData[i][pTrackTime] > 0 && IsPlayerConnected(PlayerData[i][pMDCPlayer]) && GetFactionType(i) == FACTION_POLICE)
		{
		    PlayerData[i][pTrackTime]--;

		    if (!PlayerData[i][pTrackTime])
		    {
		        if ((id = House_Inside(PlayerData[i][pMDCPlayer])) != -1)
				{
				    PlayerData[i][pCP] = 1;

				    SetPlayerCheckpoint(i, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2], 3.0);
		            SendServerMessage(i, "La ultima localizacion de %s fue en \"%s\" (marcado en el radar).", ReturnName(PlayerData[i][pMDCPlayer], 0), HouseData[id][houseAddress]);
		        }
		        else if ((id = Business_Inside(PlayerData[i][pMDCPlayer])) != -1)
		        {
		            PlayerData[i][pCP] = 1;

		            SetPlayerCheckpoint(i, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2], 3.0);
		            SendServerMessage(i, "La ultima localizacion de %s fue en \"%s\" (marcado en el radar).", ReturnName(PlayerData[i][pMDCPlayer], 0), BusinessData[id][bizName]);
		        }
		        else if (GetPlayerInterior(PlayerData[i][pMDCPlayer]) == 0)
		        {
		            static
		                Float:fX,
		                Float:fY,
		                Float:fZ;

		            GetPlayerPos(PlayerData[i][pMDCPlayer], fX, fY, fZ);
		            PlayerData[i][pCP] = 1;

                    SetPlayerCheckpoint(i, fX, fY, fZ, 3.0);
		            SendServerMessage(i, "La ultima localizacion de %s fue en \"%s\" (marcado en el radar).", ReturnName(PlayerData[i][pMDCPlayer], 0), GetLocation(fX, fY, fZ));
		        }
		        else
		        {
		            SendServerMessage(i, "Imposible localizar a %s; esta fuera de rango (adentro de un interior).", ReturnName(PlayerData[i][pMDCPlayer], 0));
				}
			}
		}
		else if (PlayerData[i][pCooking] && IsPlayerSpawned(i))
		{
		    PlayerData[i][pCookingTime]--;

		    if (House_Inside(i) == PlayerData[i][pCookingHouse])
		    {
			    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~~h~Cocinando...~w~ %d segundos", PlayerData[i][pCookingTime]);
			    GameTextForPlayer(i, str, 1200, 3);
			}
		    if (PlayerData[i][pCookingTime] < 1)
		    {
		        if (House_Inside(i) != PlayerData[i][pCookingHouse])
		        {
		            SendServerMessage(i, "Dejaste la comida sin atender y se quemó.");
		        }
		        else
				{
					switch (PlayerData[i][pCooking])
		        	{
                    	case 1:
		            	{
		               	    id = Inventory_Add(i, "Hamburguesa Cocida", 2703, 1);

		               	    if (id == -1)
		               	        return SendErrorMessage(i, "No tienes espacio en tu inventario.");

		                	SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** El microondas suena, ya hueles tu hamburguesa! (( %s ))", ReturnName(i, 0));
		                	SendServerMessage(i, "La hamburguesa cocida fue agregada al inventario.");
		            	}
			            case 2:
			            {
			                id = Inventory_Add(i, "Pizza Cocida", 2702, 6);

			                if (id == -1)
		               	        return SendErrorMessage(i, "No tienes espacio en tu inventario.");

		    	            SendNearbyMessage(i, 30.0, COLOR_PURPLE, "** La pizza esta lista! (( %s ))", ReturnName(i, 0));
		    	            SendServerMessage(i, "La pizza cocida fue agregada al inventario.");
		        	    }
					}
				}
                PlayerData[i][pCooking] = 0;
                PlayerData[i][pCookingTime] = 0;
                PlayerData[i][pCookingHouse] = -1;
		    }
		}
		else if (PlayerData[i][pDrivingTest] && IsPlayerInVehicle(i, PlayerData[i][pTestCar]))
		{
		    if (!IsPlayerInRangeOfPoint(i, 100.0, g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[i][pTestStage]][2]))
			{
		        CancelDrivingTest(i);
				SendClientMessage(i, COLOR_LIGHTRED, "[ADVERTENCIA]:{FFFFFF} Has fracasado la prueba por abandonar la zona.");
    		}
			else if (GetPlayerSpeed(i) >= 55.0)
   			{
				if (++PlayerData[i][pTestWarns] < 3)
				{
    				SendClientMessageEx(i, COLOR_LIGHTRED, "[ADVERTENCIA]:{FFFFFF} Estas yendo muy rapido, baja la velocidad! (%d/3)", PlayerData[i][pTestWarns]);
        		}
	       		else
				{
    				CancelDrivingTest(i);
        			SendClientMessage(i, COLOR_LIGHTRED, "[ADVERTENCIA]:{FFFFFF} Has fallado la prueba por ir muy rapido!");
			    }
			}
		}
		else if (IsPlayerInsideTaxi(i))
		{
		    PlayerData[i][pTaxiTime]++;

		    if (PlayerData[i][pTaxiTime] == 15)
		    {
		        PlayerData[i][pTaxiTime] = 0;
		        PlayerData[i][pTaxiFee] += 10;
		    }
		    format(str, sizeof(str), "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~$%d...~w~ %d segundos", PlayerData[i][pTaxiFee], PlayerData[i][pTaxiTime]);

			GameTextForPlayer(i, str, 1100, 3);
			GameTextForPlayer(GetVehicleDriver(GetPlayerVehicleID(i)), str, 1100, 3);
		}
		if (PlayerData[i][pCreated] && !PlayerData[i][pTutorial] && !PlayerData[i][pJailTime] && !PlayerData[i][pInjured] && PlayerData[i][pHospital] == -1 && PlayerData[i][pCreated] && IsPlayerSpawned(i))
		{
		    GetPlayerHealth(i, health);

		    if (++ PlayerData[i][pHungerTime] >= 300)
			{
				if (PlayerData[i][pHunger] > 0)
				{
    	        	PlayerData[i][pHunger]--;
    		    }
        		else if (PlayerData[i][pHunger] <= 0)
				{
    	        	SetPlayerHealth(i, health - 10);
        	    	FlashTextDraw(i, PlayerData[i][pTextdraws][65]);
        		}
        		PlayerData[i][pHungerTime] = 0;
        	}
	        if (++ PlayerData[i][pThirstTime] >= 280)
			{
				if (PlayerData[i][pThirst] > 0)
				{
    	        	PlayerData[i][pThirst]--;
				}
				else if (PlayerData[i][pThirst] <= 0)
				{
		        	SetPlayerHealth(i, health - 5);
        	    	FlashTextDraw(i, PlayerData[i][pTextdraws][66]);
        		}
        		PlayerData[i][pThirstTime] = 0;
			}
		}
		if ((id = Boombox_Nearest(i)) != INVALID_PLAYER_ID && PlayerData[i][pBoombox] != id && strlen(BoomboxData[id][boomboxURL]) && !IsPlayerInAnyVehicle(i))
		{
		    strunpack(str, BoomboxData[id][boomboxURL]);
		    PlayerData[i][pBoombox] = id;

		    StopAudioStreamForPlayer(i);
		    PlayAudioStreamForPlayer(i, str, BoomboxData[id][boomboxPos][0], BoomboxData[id][boomboxPos][1], BoomboxData[id][boomboxPos][2], 30.0, 1);
		}
		else if (PlayerData[i][pBoombox] != INVALID_PLAYER_ID && !IsPlayerInRangeOfPoint(i, 30.0, BoomboxData[PlayerData[i][pBoombox]][boomboxPos][0], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][1], BoomboxData[PlayerData[i][pBoombox]][boomboxPos][2]))
		{
		    PlayerData[i][pBoombox] = INVALID_PLAYER_ID;
		    StopAudioStreamForPlayer(i);
		}
		if (PlayerData[i][pInjured] == 1 && GetPlayerAnimationIndex(i) != 388)
		{
			ApplyAnimation(i, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
		}
        if (PlayerData[i][pHealthTime] > 0)
        {
            PlayerData[i][pHealthTime]--;
		}
		if (PlayerData[i][pRangeBooth] != -1 && !IsPlayerInRangeOfPoint(i, 3.0, arrBoothPositions[PlayerData[i][pRangeBooth]][0], arrBoothPositions[PlayerData[i][pRangeBooth]][1], arrBoothPositions[PlayerData[i][pRangeBooth]][2]))
		{
			Booth_Leave(i);
		}
		format(str, sizeof(str), "%d%c", PlayerData[i][pHunger], '%');
		PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][63], str);

		format(str, sizeof(str), "%d%c", PlayerData[i][pThirst], '%');
		PlayerTextDrawSetString(i, PlayerData[i][pTextdraws][64], str);
	}
	return 1;
}

forward UpdateTime();
public UpdateTime()
{
	static
	    time[3],
	    string[32];

	gettime(time[0], time[1], time[2]);

	if (time[0] >= 12)
		format(string, 32, "%02d:%02d PM", (time[0] == 12) ? (12) : (time[0] - 12), time[1]);

	else if (time[0] < 12)
		format(string, 32, "%02d:%02d AM", (time[0] == 0) ? (12) : (time[0]), time[1]);

	TextDrawSetString(gServerTextdraws[0], string);

	foreach (new i : Player) if (PlayerData[i][pDrugUsed] != 3) {
		SetPlayerTime(i, time[0], time[1]);
	}
	SetTimer("UpdateTime",30000, false);
}

forward RefuelCheck();
public RefuelCheck()
{
	new
	    string[128];

	foreach (new i : Player)
	{
	    if (!PlayerData[i][pLogged] || PlayerData[i][pRefill] == INVALID_VEHICLE_ID)
	        continue;

        if (PlayerData[i][pRefill] != INVALID_VEHICLE_ID && PlayerData[i][pGasPump] != -1)
		{
		    PlayerData[i][pRefillPrice]++;

		    CoreVehicles[PlayerData[i][pRefill]][vehFuel] ++;
		    PumpData[PlayerData[i][pGasPump]][pumpFuel] --;

		    if (PumpData[PlayerData[i][pGasPump]][pumpExists])
			{
			    format(string, sizeof(string), "[GAS: %d]\n{FFFFFF}Combustible: %d litros", PlayerData[i][pGasPump], PumpData[PlayerData[i][pGasPump]][pumpFuel]);
			    UpdateDynamic3DTextLabelText(PumpData[PlayerData[i][pGasPump]][pumpText3D], COLOR_DARKBLUE, string);
			}
			if (CoreVehicles[PlayerData[i][pRefill]][vehFuel] >= 100 || GetEngineStatus(PlayerData[i][pRefill]) || !PumpData[PlayerData[i][pGasPump]][pumpExists] || PumpData[PlayerData[i][pGasPump]][pumpFuel] < 0)
			{
			    CoreVehicles[PlayerData[i][pRefill]][vehFuel] = 100;

			    GiveMoney(i, -PlayerData[i][pRefillPrice]);
			    SendServerMessage(i, "Has llenado el tanque por $%d.", PlayerData[i][pRefillPrice]);

			    if (PumpData[PlayerData[i][pGasPump]][pumpExists])
				{
					if (PumpData[PlayerData[i][pGasPump]][pumpFuel] < 0)
						PumpData[PlayerData[i][pGasPump]][pumpFuel] = 0;

					BusinessData[PlayerData[i][pGasStation]][bizVault] += PlayerData[i][pRefillPrice];
					Business_Save(PlayerData[i][pGasStation]);

					Pump_Save(PlayerData[i][pGasPump]);
				}
				StopRefilling(i);
			}
		}
	}
	return 1;
}

forward FuelUpdate();
public FuelUpdate()
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsEngineVehicle(i) && GetEngineStatus(i))
	{
	    if (CoreVehicles[i][vehFuel] > 0)
	    {
	        CoreVehicles[i][vehFuel]--;

			if (CoreVehicles[i][vehFuel] >= 1 && CoreVehicles[i][vehFuel] <= 5)
			{
			    SendClientMessage(GetVehicleDriver(i), COLOR_LIGHTRED, "[ADVERTENCIA]:{FFFFFF} Este vehiculo tiene poco combustible. Llenalo pronto!");
			}
		}
		if (CoreVehicles[i][vehFuel] <= 0)
		{
		    CoreVehicles[i][vehFuel] = 0;
		    SetEngineStatus(i, false);
		}
	}
}

public OnVehicleDeath(vehicleid)
{
	if (CoreVehicles[vehicleid][vehTemporary])
	{
	    CoreVehicles[vehicleid][vehTemporary] = false;
	    DestroyVehicle(vehicleid);
	}
	for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
	    Crate_Delete(i);
	}
	return 1;
}

public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	SetVehicleColor(vehicleid, color1, color2);
	return 1;
}

public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	SetVehiclePaintjob(vehicleid, paintjobid);
	return 1;
}

public OnVehicleMod(playerid, vehicleid, componentid)
{
	new
		id = Car_GetID(vehicleid),
		slot = GetVehicleComponentType(componentid);

	if (id != -1)
	{
	    CarData[id][carMods][slot] = componentid;
	    Car_Save(id);
	}
	return 1;
}

public OnVehicleSpawn(vehicleid)
{
	vehiclecallsign[vehicleid] = 0;
    if (CoreVehicles[vehicleid][vehTemporary])
	{
	    CoreVehicles[vehicleid][vehTemporary] = false;
	    DestroyVehicle(vehicleid);
	}
    for (new i = 0; i != MAX_CRATES; i ++) if (CrateData[i][crateExists] && CrateData[i][crateVehicle] == vehicleid) {
	    Crate_Delete(i);
	}
	if (IsValidObject(CoreVehicles[vehicleid][vehCrate]) && GetVehicleModel(vehicleid) == 530)
	    DestroyObject(CoreVehicles[vehicleid][vehCrate]);

	ResetVehicle(vehicleid);
	return 1;
}

public OnRconLoginAttempt(ip[], password[], success)
{
	if (!success)
	{
	    foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], ip, true) && PlayerData[i][pAdmin] < 6) {
	        Kick(i);
	    }
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: Intento de logueo en RCON fallido por \"%s\".", ip);
	    Log_Write("logs/rcon_log.txt", "[%s] Intento de logueo en RCON fallido por \"%s\".", ReturnDate(), ip);
	}
	else
	{
	    foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], ip, true) && PlayerData[i][pAdmin] < 6) {
	        Blacklist_Add(ip, PlayerData[i][pUsername], "Server", "Unauthorized RCON");

	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s fue baneado por un login de RCON sin autorizacion.", ReturnName(i, 0));
	    	Log_Write("logs/rcon_log.txt", "[%s] %s (%s) fue baneado por un login de RCON sin autorizacion.", ReturnDate(), ReturnName(i, 0), ip);

			break;
		}
	}
	return 1;
}

public OnPlayerStreamIn(playerid, forplayerid)
{
    if (PlayerData[playerid][pMaskOn])
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	else
	    ShowPlayerNameTagForPlayer(forplayerid, playerid, 1);

	return 1;
}

forward OnPlayerUseItem(playerid, itemid, name[]);
public OnPlayerUseItem(playerid, itemid, name[])
{
    if (IsFurnitureItem(name))
	{
        new id = House_Inside(playerid);

        if (id == -1)
            return SendErrorMessage(playerid, "Tienes que estar dentro de una casa para colocarle muebles.");

		if (!House_IsOwner(playerid, id))
		    return SendErrorMessage(playerid, "Solo puedes colocar muebles en tu casa.");

		static
		    Float:x,
		    Float:y,
		    Float:z,
		    Float:angle;

        GetPlayerPos(playerid, x, y, z);
        GetPlayerFacingAngle(playerid, angle);

        x += 5.0 * floatsin(-angle, degrees);
        y += 5.0 * floatcos(-angle, degrees);

		if (Furniture_GetCount(id) > MAX_HOUSE_FURNITURE)
		    return SendErrorMessage(playerid, "Solo puedes tener %d muebles en tu casa.", MAX_HOUSE_FURNITURE);

		new furniture = Furniture_Add(id, name, InventoryData[playerid][itemid][invModel], x, y, z, 0.0, 0.0, angle);

		if (furniture == -1)
		    return SendErrorMessage(playerid, "El servidor ha alcanzado el limite de muebles.");

		Inventory_Remove(playerid, name);
		PlayerData[playerid][pEditFurniture] = furniture;

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha colocado su \"%s\".", ReturnName(playerid, 0), name);
		EditDynamicObject(playerid, FurnitureData[furniture][furnitureObject]);
	}
	else if (!strcmp(name, "Cargador", true)) {
	    cmd_recargar(playerid, "\1");
	}
	else if (!strcmp(name, "Boombox", true)) {
	    cmd_boombox(playerid, "place");
	}
	else if (!strcmp(name, "Backpack", true)) {
	    cmd_mochila(playerid, "\1");
	}
	else if (!strcmp(name, "Primeros Auxilios", true)) {
        cmd_usarkit(playerid, "\1");
    }
    else if (!strcmp(name, "Celular", true)) {
        cmd_celular(playerid, "\1");
    }
    else if (!strcmp(name, "Walkie-Talkie", true)) {
        SendSyntaxMessage(playerid, "Use \"/pr [text]\" to chat with your radio.");
    }
    else if (!strcmp(name, "Lata de Combustible", true)) {
        cmd_llenar(playerid, "\1");
    }
    else if (!strcmp(name, "Kit de Reparacion", true)) {
        cmd_reparar(playerid, "\1");
    }
    else if (!strcmp(name, "Garrafa de NOS", true)) {
        cmd_nitro(playerid, "\1");
    }
    else if (!strcmp(name, "Bote de Spray", true)) {
        cmd_pintar(playerid, "\1");
    }
    else if (!strcmp(name, "Aparato GPS", true)) {
        cmd_gps(playerid, "\1");
    }
    else if (!strcmp(name, "Marihuana", true)) {
        cmd_usardroga(playerid, "Marihuana");
    }
    else if (!strcmp(name, "Cocaina", true)) {
        cmd_usardroga(playerid, "cocaina");
    }
    else if (!strcmp(name, "Heroina", true)) {
        cmd_usardroga(playerid, "heroina");
    }
    else if (!strcmp(name, "Anabolicos", true)) {
        cmd_usardroga(playerid, "anabolicos");
    }
    else if (!strcmp(name, "Gaseosa", true)) {
        SendClientMessage(playerid, COLOR_WHITE, "Usa el comando /beber");
    }
    else if (!strcmp(name, "Botella de Agua", true)) {
        SendClientMessage(playerid, COLOR_WHITE, "Usa el comando /beber");
    }
    else if (!strcmp(name, "Pizza Congelada", true)) {
        cmd_cocinar(playerid, "pizza");
    }
    else if (!strcmp(name, "Hamburguesa Congelada", true)) {
        cmd_cocinar(playerid, "burger");
    }
    else if (!strcmp(name, "Chaleco Blindado", true)) {
        cmd_chaleco(playerid, "\1");
    }
    else if (!strcmp(name, "Caja de Municion", true)) {
        cmd_municion(playerid, "\1");
    }
    else if (!strcmp(name, "Colt 45", true)) {
        EquipWeapon(playerid, "Colt 45");
    }
    else if (!strcmp(name, "Desert Eagle", true)) {
        EquipWeapon(playerid, "Desert Eagle");
    }
    else if (!strcmp(name, "Escopeta", true)) {
        EquipWeapon(playerid, "Escopeta");
    }
    else if (!strcmp(name, "Micro SMG", true)) {
        EquipWeapon(playerid, "Micro SMG");
    }
    else if (!strcmp(name, "Tec-9", true)) {
        EquipWeapon(playerid, "Tec-9");
    }
    else if (!strcmp(name, "MP5", true)) {
        EquipWeapon(playerid, "MP5");
    }
    else if (!strcmp(name, "AK-47", true)) {
        EquipWeapon(playerid, "AK-47");
    }
    else if (!strcmp(name, "M4", true)) {
        EquipWeapon(playerid, "M4");
    }
    else if (!strcmp(name, "Rifle", true)) {
        EquipWeapon(playerid, "Rifle");
    }
    else if (!strcmp(name, "Sniper", true)) {
        EquipWeapon(playerid, "Sniper");
    }
    else if (!strcmp(name, "Palo de Golf", true)) {
        EquipWeapon(playerid, "Palo de Golf");
    }
    else if (!strcmp(name, "Cuchillo", true)) {
        EquipWeapon(playerid, "Cuchillo");
    }
    else if (!strcmp(name, "Pala", true)) {
        EquipWeapon(playerid, "Pala");
    }
    else if (!strcmp(name, "Katana", true)) {
        EquipWeapon(playerid, "Katana");
    }
    else if (!strcmp(name, "Semillas de Maria", true)) {
        cmd_plantar(playerid, "Weed");
    }
    else if (!strcmp(name, "Semillas de Coca", true)) {
        cmd_plantar(playerid, "Cocaine");
    }
    else if (!strcmp(name, "Semillas de Opio", true)) {
        cmd_plantar(playerid, "Heroin");
    }
    else if (!strcmp(name, "Pizza Cocida", true))
	{
        if (PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "Ahora no tienes hambre.");

        if (!IsPlayerAttachedObjectSlotUsed(playerid, 4))
		{
		    SetPlayerAttachedObject(playerid, 4, 2702, 6, 0.173041, 0.049197, 0.056789, 0.000000, 274.166107, 299.057983, 1.000000, 1.000000, 1.000000);
			SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, 4);
		}
        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 15 > 100) ? (100) : (PlayerData[playerid][pHunger] + 15);
		Inventory_Remove(playerid, "Pizza Cocida");

		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma una porcion de pizza y la come.", ReturnName(playerid, 0));
    }
    else if (!strcmp(name, "Hamburguesa Cocida", true))
	{
	    if (PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "Ahora no tienes hambre.");

		if (!IsPlayerAttachedObjectSlotUsed(playerid, 4))
		{
		    SetPlayerAttachedObject(playerid, 4, 2703, 6, 0.078287, 0.019677, -0.001004, 0.000000, 0.000000, 0.000000, 1.000000, 1.000000, 1.000000);
			SetTimerEx("RemoveAttachedObject", 3000, false, "dd", playerid, 4);
		}
        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);
		Inventory_Remove(playerid, "Hamburguesa Cocida");

		ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma una hamburguesa y la come.", ReturnName(playerid, 0));
    }
    else if (!strcmp(name, "Pollo", true))
	{
	    if (PlayerData[playerid][pHunger] > 90)
            return SendErrorMessage(playerid, "Ahora no tienes hambre.");

        PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);
		Inventory_Remove(playerid, "Pollo");

		ApplyAnimation(playerid, "VENDING", "VEND_Eat_P", 4.1, 0, 0, 0, 0, 0, 1);
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma un pedazo de pollo y lo come.", ReturnName(playerid, 0));
    }
    return 1;
}

public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	if ((weaponid >= 22 && weaponid <= 38) && hittype == BULLET_HIT_TYPE_OBJECT && PlayerData[playerid][pRangeBooth] != -1 && hitid == g_BoothObject[PlayerData[playerid][pRangeBooth]])
 	{
 	    static
	        string[128];

		PlayerPlaySound(playerid, 6401, 0.0, 0.0, 0.0);

		PlayerData[playerid][pTargets]++;
		DestroyObject(g_BoothObject[PlayerData[playerid][pRangeBooth]]);

		format(string, sizeof(string), "~b~Targets:~w~ %d/10", PlayerData[playerid][pTargets]);
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][81], string);

		SetTimerEx("UpdateBooth", 3000, false, "dd", playerid, PlayerData[playerid][pRangeBooth]);
	}
	if (weaponid == 23 && PlayerData[playerid][pTazer] && GetFactionType(playerid) == FACTION_POLICE) {
	    PlayerPlaySoundEx(playerid, 6003);
	}
	if ((weaponid >= 22 && weaponid <= 38) && hittype == BULLET_HIT_TYPE_PLAYER && hitid != INVALID_PLAYER_ID)
	{
	    if (PlayerData[hitid][pRangeBooth] != -1 || PlayerData[hitid][pHospital] != -1)
	        return 0;

		if (PlayerData[hitid][pDrugUsed] == 2)
		{
		    new
				Float:damage = floatdiv(g_arrWeaponDamage[weaponid], 2),
				Float:health;

		    GetPlayerHealth(hitid, health);
		    SetPlayerHealth(hitid, floatsub(health, damage));

		    return 0;
		}
	}
	if ((22 <= weaponid <= 38) && (GetPlayerWeaponState(playerid) == WEAPONSTATE_LAST_BULLET && GetPlayerAmmo(playerid) == 1) && !IsPlayerAttachedObjectSlotUsed(playerid, 4))
 	{
  		switch (weaponid) {
 	        case 22: Inventory_Add(playerid, "Colt 45", 346);
 	        case 24: Inventory_Add(playerid, "Desert Eagle", 348);
 	        case 25: Inventory_Add(playerid, "Escopeta", 349);
 	        case 28: Inventory_Add(playerid, "Micro SMG", 352);
 	        case 29: Inventory_Add(playerid, "MP5", 353);
 	        case 30: Inventory_Add(playerid, "AK-47", 355);
 	        case 31: Inventory_Add(playerid, "AK-47", 356);
 	        case 32: Inventory_Add(playerid, "Tec-9", 372);
 	        case 33: Inventory_Add(playerid, "Rifle", 357);
 	        case 34: Inventory_Add(playerid, "Sniper", 358);
		}
 	    ResetWeapon(playerid, weaponid);

 	    HoldWeapon(playerid, weaponid);
 	    SendServerMessage(playerid, "Tienes que colocarle un cargador al arma (usa 'H' para recargar o 'N' para guardarla).");
 	    PlayerData[playerid][pRecargar] = 1;
	}
	return 1;
}

public OnPlayerTakeDamage(playerid, issuerid, Float:amount, weaponid)
{
	if (PlayerData[playerid][pFirstAid])
	{
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Tu kit de primeros auxilios ya no tiene efecto, sufriste daños.");

        PlayerData[playerid][pFirstAid] = 0;
		KillTimer(PlayerData[playerid][pAidTimer]);
	}
	return 1;
}

public OnPlayerGiveDamage(playerid, damagedid, Float:amount, weaponid)
{
	if (damagedid != INVALID_PLAYER_ID)
	{
		PlayerData[damagedid][pLastShot] = playerid;
		PlayerData[damagedid][pShotTime] = gettime();

		if (IsBleedableWeapon(weaponid) && !PlayerData[damagedid][pBleeding] && ReturnArmour(damagedid) < 1 && PlayerData[playerid][pRangeBooth] == -1 && PlayerData[damagedid][pHospital] == -1)
		{
		    if (!PlayerHasTazer(playerid) && !PlayerHasBeanBag(playerid))
		    {
			    PlayerData[damagedid][pBleeding] = 1;
			    PlayerData[damagedid][pBleedTime] = 10;

				CreateBlood(damagedid);
			    SetTimerEx("HidePlayerBox", 500, false, "dd", damagedid, _:ShowPlayerBox(damagedid, 0xFF000066));
			}
		}
		if (PlayerData[playerid][pDrugUsed] == 4 && (weaponid >= 0 && weaponid <= 15))
		{
		    SetPlayerHealth(damagedid, ReturnHealth(damagedid) - 6);
		}
        if (GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pTazer] && PlayerData[damagedid][pStunned] < 1 && weaponid == 23)
        {
			if (GetPlayerState(damagedid) != PLAYER_STATE_ONFOOT)
			    return SendErrorMessage(playerid, "El jugador tiene que estar parado para poder aturdirlo.");

            if (GetPlayerDistanceFromPlayer(playerid, damagedid) > 10.0)
                return SendErrorMessage(playerid, "Tenes que estar mas cerca para aturdir al jugador.");

            new
                string[64];

			format(string, sizeof(string), "Has sido ~r~aturdido~w~ por %s.", ReturnName(playerid, 0));

            PlayerData[damagedid][pStunned] = 10;
            TogglePlayerControllable(damagedid, 0);

            ApplyAnimation(damagedid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
            ShowPlayerFooter(damagedid, string);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s aturdió a %s con su tazer.", ReturnName(playerid, 0), ReturnName(damagedid, 0));
        }
        if (GetFactionType(playerid) == FACTION_POLICE && PlayerData[playerid][pBeanBag] && PlayerData[damagedid][pStunned] < 1 && weaponid == 25)
        {
			if (GetPlayerState(damagedid) != PLAYER_STATE_ONFOOT)
			    return SendErrorMessage(playerid, "El jugador tiene que estar parado para poder aturdirlo.");

            if (GetPlayerDistanceFromPlayer(playerid, damagedid) > 10.0)
                return SendErrorMessage(playerid, "Tenes que estar mas cerca para aturdir al jugador.");

            new
                string[64];

			format(string, sizeof(string), "Has sido ~r~aturdido~w~ por %s.", ReturnName(playerid, 0));

            PlayerData[damagedid][pStunned] = 10;
            TogglePlayerControllable(damagedid, 0);

            ApplyAnimation(damagedid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
            ShowPlayerFooter(damagedid, string);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s aturdió a %s con su escopeta de balas de goma.", ReturnName(playerid, 0), ReturnName(damagedid, 0));
        }
	}
	return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
	if (killerid != INVALID_PLAYER_ID)
	{
	    if (1 <= reason <= 46)
			Log_Write("logs/kill_log.txt", "[%s] %s mato a %s (%s).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), ReturnWeaponName(reason));

		else
			Log_Write("logs/kill_log.txt", "[%s] %s mato a %s (razon %d).", ReturnDate(), ReturnName(killerid), ReturnName(playerid), reason);

		if (reason == 50 && killerid != INVALID_PLAYER_ID)
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s mato a %s usando HK.", ReturnName(killerid, 0), ReturnName(playerid, 0));

        if (reason == 29 && killerid != INVALID_PLAYER_ID && GetPlayerState(killerid) == PLAYER_STATE_DRIVER)
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s mato a %s usando Drive-By.", ReturnName(killerid, 0), ReturnName(playerid, 0));
	}
	if(marihuanatimer[playerid]) KillTimer(marihuanatimer[playerid]);
	if(marihuanaestado[playerid]) KillTimer(marihuanaestado[playerid]);
	PlayerData[playerid][pBleeding] = 0;
	PlayerData[playerid][pBleedTime] = 0;
	return 1;
}

public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
	if (PlayerData[playerid][pTutorial] || PlayerData[playerid][pHospital] != -1 || !IsPlayerSpawned(playerid) || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured])
	    return 0;

    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED && newkeys & KEY_JUMP && !(oldkeys & KEY_JUMP))
		ApplyAnimation(playerid, "GYMNASIUM", "gym_jog_falloff", 4.0, 0, 1, 1, 0, 0, 1);
		
	if (newkeys & KEY_CROUCH && IsPlayerInAnyVehicle(playerid))
	{
		cmd_abrir(playerid, "\1");
	}
	if (newkeys & KEY_CROUCH && IsPlayerInRangeOfPoint(playerid, 1.5, -226.4219, 1408.4594, 26.7734) && PlayerData[playerid][pTutorialStage] == 1)
	{
	    DisablePlayerCheckpoint(playerid);

		PlayerData[playerid][pTutorialStage] = 2;
	    SendClientMessage(playerid, COLOR_SERVER, "Pulsa 'N' para agarrar objetos mientras estas agachado.");
	}
	if (newkeys & KEY_YES && IsPlayerSpawned(playerid))
	{
	    if (PlayerData[playerid][pJailTime] > 0)
			return SendErrorMessage(playerid, "No podes abrir tu inventario cuando estas en jail.");

		if (PlayerData[playerid][pCuffed] > 0 || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		    return SendErrorMessage(playerid, "No podes abrir el inventario en este momento.");

		OpenInventory(playerid);
	}
	if (newkeys & KEY_SPRINT && IsPlayerSpawned(playerid) && PlayerData[playerid][pLoopAnim])
	{
	    ClearAnimations(playerid);
		HidePlayerFooter(playerid);

	    PlayerData[playerid][pLoopAnim] = false;
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pDrinking])
	{
	    if (GetPlayerAnimationIndex(playerid) != 15 && GetPlayerAnimationIndex(playerid) != 16 && !PlayerData[playerid][pDrinkTime])
     	{
		    if (GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) <= 0.0)
		    {
	    	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
				DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);

				PlayerData[playerid][pDrinking] = 0;
				SendServerMessage(playerid, "Terminaste de tomar de la botella.");
		    }
	    	else
	    	{
	    	    PlayerData[playerid][pDrinkTime] = 2;

	    	    switch (PlayerData[playerid][pDrinking])
	    	    {
					case 1: PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 5 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 5);
                    case 2: PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 5 >= 100) ? (100) : (PlayerData[playerid][pThirst] + 5);
				}
			    SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], GetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar]) - 10.0);
			}
		}
	}
	if (newkeys & KEY_FIRE && PlayerData[playerid][pMining] && IsPlayerNearMine(playerid))
	{
	    if (PlayerData[playerid][pMineTime] > 0 || PlayerData[playerid][pMinedRock])
	        return 1;

		new id = Job_NearestPoint(playerid);

		if (id != -1)
		{
		    PlayerData[playerid][pMineTime] = 1;
		    SetTimerEx("MineTime", 400, false, "d", playerid);

		    if (PlayerData[playerid][pMineCount] < 5)
	    	{
	    	    PlayerData[playerid][pMineCount]++;

	        	ApplyAnimation(playerid, "BASEBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
            	ApplyAnimation(playerid, "BASEBALL", "BAT_4", 4.0, 0, 1, 1, 0, 0, 1);
			}
			else
			{
			    PlayerData[playerid][pMinedRock] = 1;
			    PlayerData[playerid][pMineCount] = 0;

			    RemovePlayerAttachedObject(playerid, 4);

			    ApplyAnimation(playerid, "BSKTBALL", "null", 4.0, 0, 1, 1, 0, 0, 1);
            	ApplyAnimation(playerid, "BSKTBALL", "BBALL_pickup", 4.0, 0, 1, 1, 0, 0, 1);

			    SetPlayerAttachedObject(playerid, 4, 2936, 5, 0.044377, 0.029049, 0.161334, 265.922912, 9.904896, 21.765972, 0.500000, 0.500000, 0.500000);
				SendServerMessage(playerid, "Conseguiste una piedra, llevala al punto.");

				SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 2.5);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			}
	    }
	}
	else if (newkeys & KEY_CTRL_BACK)
	{
	    if (PlayerData[playerid][pUsedMagazine])
	    {
	        new weaponid = PlayerData[playerid][pHoldWeapon];
	        if(PlayerData[playerid][pRecargar] == 0)
	        {
		        switch (weaponid)
		        {
				    case 22:
				    {
				        HoldWeapon(playerid, 0);
					    PlayerPlaySoundEx(playerid, 36401);

				        Inventory_Remove(playerid, "Colt 45");
						PlayReloadAnimation(playerid, weaponid);

						GiveWeaponToPlayer(playerid, weaponid, 17);
					}
					case 24:
				    {
				        HoldWeapon(playerid, 0);
					    PlayerPlaySoundEx(playerid, 36401);

				        Inventory_Remove(playerid, "Desert Eagle");
						PlayReloadAnimation(playerid, weaponid);

						GiveWeaponToPlayer(playerid, weaponid, 7);
					}
					case 25:
				    {
				        HoldWeapon(playerid, 0);
					    PlayerPlaySoundEx(playerid, 36401);

				        Inventory_Remove(playerid, "Escopeta");
						PlayReloadAnimation(playerid, weaponid);

						GiveWeaponToPlayer(playerid, weaponid, 8);
					}
					case 28:
				    {
				        HoldWeapon(playerid, 0);
					    PlayerPlaySoundEx(playerid, 36401);

				        Inventory_Remove(playerid, "Micro SMG");
						PlayReloadAnimation(playerid, weaponid);

						GiveWeaponToPlayer(playerid, weaponid, 50);
					}
					case 29:
	       			{
				        HoldWeapon(playerid, 0);
					    PlayerPlaySoundEx(playerid, 36401);

				        Inventory_Remove(playerid, "MP5");
						PlayReloadAnimation(playerid, weaponid);

						GiveWeaponToPlayer(playerid, weaponid, 30);
					}
					case 32:
				    {
				        HoldWeapon(playerid, 0);
					    PlayerPlaySoundEx(playerid, 36401);

				        Inventory_Remove(playerid, "Tec-9");
						PlayReloadAnimation(playerid, weaponid);

						GiveWeaponToPlayer(playerid, weaponid, 50);
					}
					case 30:
				    {
				        HoldWeapon(playerid, 0);
					    PlayerPlaySoundEx(playerid, 36401);

				        Inventory_Remove(playerid, "AK-47");
						PlayReloadAnimation(playerid, weaponid);

						GiveWeaponToPlayer(playerid, weaponid, 30);
					}
					case 31:
				    {
				        HoldWeapon(playerid, 0);
					    PlayerPlaySoundEx(playerid, 36401);

				        Inventory_Remove(playerid, "M4");
						PlayReloadAnimation(playerid, weaponid);

						GiveWeaponToPlayer(playerid, weaponid, 31);
					}
					case 33:
				    {
				        HoldWeapon(playerid, 0);
					    PlayerPlaySoundEx(playerid, 36401);

				        Inventory_Remove(playerid, "Rifle");
						PlayReloadAnimation(playerid, weaponid);

						GiveWeaponToPlayer(playerid, weaponid, 5);
					}
			        case 34:
				    {
				        HoldWeapon(playerid, 0);
					    PlayerPlaySoundEx(playerid, 36401);

				        Inventory_Remove(playerid, "Sniper");
						PlayReloadAnimation(playerid, weaponid);

						GiveWeaponToPlayer(playerid, weaponid, 5);
					}
				}
			}
		}
		else if(PlayerData[playerid][pRecargar] == 1 && PlayerData[playerid][pUsedMagazine] == 0)
		{
		    new weaponid = PlayerData[playerid][pHoldWeapon];
			switch (weaponid)
	        {
			    case 22:
			    {
			    	if (!Inventory_HasItem(playerid, "Cargador"))
	    				return SendErrorMessage(playerid, "No tienes ningun cargador.");
	    			Inventory_Remove(playerid, "Cargador");
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Colt 45");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 17);
					PlayerData[playerid][pRecargar] = 0;
				}
				case 24:
			    {
			    	if (!Inventory_HasItem(playerid, "Cargador"))
	    				return SendErrorMessage(playerid, "No tienes ningun cargador.");
	    			Inventory_Remove(playerid, "Cargador");
				    HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Desert Eagle");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 7);
					PlayerData[playerid][pRecargar] = 0;
				}
				case 25:
			    {
				   	if (!Inventory_HasItem(playerid, "Cargador"))
	    				return SendErrorMessage(playerid, "No tienes ningun cargador.");
	    			Inventory_Remove(playerid, "Cargador");
				    HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

				    Inventory_Remove(playerid, "Escopeta");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 8);
					PlayerData[playerid][pRecargar] = 0;
				}
				case 28:
			    {
			    	if (!Inventory_HasItem(playerid, "Cargador"))
	    				return SendErrorMessage(playerid, "No tienes ningun cargador.");
	    			Inventory_Remove(playerid, "Cargador");
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Micro SMG");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 50);
					PlayerData[playerid][pRecargar] = 0;
				}
				case 29:
	       		{
	       			if (!Inventory_HasItem(playerid, "Cargador"))
	    				return SendErrorMessage(playerid, "No tienes ningun cargador.");
	    			Inventory_Remove(playerid, "Cargador");
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "MP5");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 30);
					PlayerData[playerid][pRecargar] = 0;
				}
				case 32:
			    {
				   	if (!Inventory_HasItem(playerid, "Cargador"))
	    				return SendErrorMessage(playerid, "No tienes ningun cargador.");
	    			Inventory_Remove(playerid, "Cargador");
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Tec-9");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 50);
					PlayerData[playerid][pRecargar] = 0;
				}
				case 30:
			    {
			    	if (!Inventory_HasItem(playerid, "Cargador"))
	    				return SendErrorMessage(playerid, "No tienes ningun cargador.");
	    			Inventory_Remove(playerid, "Cargador");
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

				    Inventory_Remove(playerid, "AK-47");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 30);
					PlayerData[playerid][pRecargar] = 0;
				}
				case 31:
			    {
			    	if (!Inventory_HasItem(playerid, "Cargador"))
	    				return SendErrorMessage(playerid, "No tienes ningun cargador.");
	    			Inventory_Remove(playerid, "Cargador");
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

				    Inventory_Remove(playerid, "M4");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 31);
					PlayerData[playerid][pRecargar] = 0;
				}
				case 33:
			    {
			    	if (!Inventory_HasItem(playerid, "Cargador"))
	    				return SendErrorMessage(playerid, "No tienes ningun cargador.");
	    			Inventory_Remove(playerid, "Cargador");
				    HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

			        Inventory_Remove(playerid, "Rifle");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 5);
					PlayerData[playerid][pRecargar] = 0;
				}
		        case 34:
			    {
			    	if (!Inventory_HasItem(playerid, "Cargador"))
	    				return SendErrorMessage(playerid, "No tienes ningun cargador.");
	    			Inventory_Remove(playerid, "Cargador");
			        HoldWeapon(playerid, 0);
				    PlayerPlaySoundEx(playerid, 36401);

				    Inventory_Remove(playerid, "Sniper");
					PlayReloadAnimation(playerid, weaponid);

					GiveWeaponToPlayer(playerid, weaponid, 5);
					PlayerData[playerid][pRecargar] = 0;
				}
			}
			return 1;
	    }
	}
	else if (newkeys & KEY_NO && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT)
	{
	    static
	        string[320];

		if (PlayerData[playerid][pTutorialStage] == 2 && IsPlayerInRangeOfPoint(playerid, 1.5, -226.4219, 1408.4594, 26.7734) && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
		{
		    Inventory_Add(playerid, "Demo Soda", 1543);
		    DestroyPlayerObject(playerid, PlayerData[playerid][pTutorialObject]);

            PlayerData[playerid][pTutorialStage] = 3;
 		    SendClientMessage(playerid, COLOR_SERVER, "Pulsa 'Y' para abrir tu inventario y seleccionar la gaseosa.");
		    return 1;
		}
		if (PlayerData[playerid][pHoldWeapon] > 0)
		{
		    if (PlayerData[playerid][pUsedMagazine])
      			Inventory_Add(playerid, "Cargador", 19995);

		    HoldWeapon(playerid, 0);
		    PlayerData[playerid][pRecargar] = 0;
		    return SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guarda su arma descargada.", ReturnName(playerid, 0));
		}
		if (PlayerData[playerid][pLoadCrate])
		{
		    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i))
			{
			    if (!IsLoadableVehicle(i))
			        return SendErrorMessage(playerid, "No puedes cargar cajas en este vehiculo.");

			    if (CoreVehicles[i][vehLoadType] != 0 && CoreVehicles[i][vehLoadType] != PlayerData[playerid][pLoadType])
			        return SendErrorMessage(playerid, "Este vehiculo ya esta cargado con algo.");

			    if (CoreVehicles[i][vehLoads] >= 6)
			        return SendErrorMessage(playerid, "Este vehiculo solo puede tener 6 cajas.");

				CoreVehicles[i][vehLoads]++;
				CoreVehicles[i][vehLoadType] = PlayerData[playerid][pLoadType];

                ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
                SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s deja una caja en su %s.", ReturnName(playerid, 0), ReturnVehicleName(i));

                if (CoreVehicles[i][vehLoads] == 6)
                {
                    DisablePlayerCheckpoint(playerid);

					if (PlayerData[playerid][pShipment] != -1)
					{
					    PlayerData[playerid][pDeliverShipment] = 1;

					    SendServerMessage(playerid, "Has cargado todas las cajas. Escribe /descargar en el punto.");
					    SetPlayerCheckpoint(playerid, BusinessData[PlayerData[playerid][pShipment]][bizDeliver][0], BusinessData[PlayerData[playerid][pShipment]][bizDeliver][1], BusinessData[PlayerData[playerid][pShipment]][bizDeliver][2], 3.0);
					}
					else switch (PlayerData[playerid][pLoadType])
                    {
                    	case 1: SendServerMessage(playerid, "Has cargado todas las cajas. Escribe /descargar en cualquier minorista.");
                        case 2: SendServerMessage(playerid, "Has cargado todas las cajas. Escribe /descargar en cualquier negocio de armas.");
                        case 3: SendServerMessage(playerid, "Has cargado todas las cajas. Escribe /descargar en cualquier negocio de ropa.");
                        case 4: SendServerMessage(playerid, "Has cargado todas las cajas. Escribe /descargar en cualquier restaurante de comida rapida.");
                        case 5: SendServerMessage(playerid, "Has cargado todas las cajas. Escribe /descargar en cualquier estacion de servicio.");
                        case 6: SendServerMessage(playerid, "Has cargado todas las cajas. Escribe /descargar en cualquier negocio de muebles.");
					}
					PlayerData[playerid][pLoading] = 0;
					PlayerData[playerid][pLoadType] = 0;
                }
                PlayerData[playerid][pLoadCrate] = 0;

				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				return 1;
			}
		}
		for (new i = 0; i != MAX_BACKPACKS; i ++) if (BackpackData[i][backpackExists] && !BackpackData[i][backpackPlayer] && IsPlayerInRangeOfPoint(playerid, 2.0, BackpackData[i][backpackPos][0], BackpackData[i][backpackPos][1], BackpackData[i][backpackPos][2])) {
		    return Backpack_Items(playerid, i);
		}
        if (PlayerData[playerid][pCarryTrash])
		{
			for (new i = 1; i != MAX_VEHICLES; i ++) if (GetVehicleModel(i) == 408 && IsPlayerNearBoot(playerid, i))
			{
			    if (CoreVehicles[i][vehTrash] >= 15)
			        return SendErrorMessage(playerid, "Este vehiculo no puede tener mas basura (limite: 15).");

				CoreVehicles[i][vehTrash]++;

				RemovePlayerAttachedObject(playerid, 4);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s cargo una bolsa de basura en el Trashmaster.", ReturnName(playerid, 0));

				PlayerData[playerid][pCarryTrash] = 0;
				break;
			}
		}

		if (PlayerData[playerid][pCarryCrate] != -1)
		{
			for (new i = 1; i != MAX_VEHICLES; i ++) if (IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
			{
			    if (GetVehicleCrates(i) >= GetMaxCrates(i))
			        return SendErrorMessage(playerid, "Este vehiculo no puede tener mas cajas (limite: %d).", GetMaxCrates(i));

				CrateData[PlayerData[playerid][pCarryCrate]][crateVehicle] = i;
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

				RemovePlayerAttachedObject(playerid, 4);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s cargo una caja en su %s.", ReturnName(playerid, 0), ReturnVehicleName(i));

				PlayerData[playerid][pCarryCrate] = -1;
				ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);
				break;
			}
		}
		else if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_DUCK)
		{
		    new
				count = 0,
				id = Item_Nearest(playerid);

		    if (id != -1)
		    {
		        string = "";

		        for (new i = 0; i < MAX_DROPPED_ITEMS; i ++) if (count < MAX_LISTED_ITEMS && DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2]) && GetPlayerInterior(playerid) == DroppedItems[i][droppedInt] && GetPlayerVirtualWorld(playerid) == DroppedItems[i][droppedWorld]) {
		            NearestItems[playerid][count++] = i;

		            strcat(string, DroppedItems[i][droppedItem]);
		            strcat(string, "\n");
		        }
		        if (count == 1)
		        {
				    if (DroppedItems[id][droppedWeapon] != 0)
					{
				        if (PlayerData[playerid][pPlayingHours] < 2)
							return SendErrorMessage(playerid, "Tienes que tener dos horas jugadas para poder usar armas.");

    	   				GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

    	                Item_Delete(id);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s agarro una %s del piso.", ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
                        Log_Write("logs/droppick.txt", "[%s] %s agarro una %s del piso.", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));

					}
					else if (PickupItem(playerid, id))
					{
			    		format(string, sizeof(string), "~g~%s~w~ agregado al inventario!", DroppedItems[id][droppedItem]);
			    		ShowPlayerFooter(playerid, string);
						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s agarro un/a \"%s\" del piso.", ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
						Log_Write("logs/droppick.txt", "[%s] %s agarro un/a \"%s\" del piso.", ReturnDate(), ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
					}
					else
						SendErrorMessage(playerid, "No tienes mas espacio en el inventario.");
				}
				else Dialog_Show(playerid, PickupItems, DIALOG_STYLE_LIST, "Agarrar Items", string, "Agarrar", "Cancelar");
			}
		}
	}
	else if (newkeys & KEY_SECONDARY_ATTACK)
	{
		static
		    id = -1;

		if ((id = Vendor_Nearest(playerid)) != -1)
		{
		    switch (VendorData[id][vendorType])
		    {
		        case 1:
		        {
					if (GetMoney(playerid) < 3)
					    return SendErrorMessage(playerid, "No tienes suficiente dinero.");

					if (PlayerData[playerid][pVendorTime] > 0)
					    return SendErrorMessage(playerid, "Tienes que esperar antes de comprarle a otro vendedor.");

					if (Inventory_Count(playerid, "Hamburguesa Cocida") >= 5)
					    return SendErrorMessage(playerid, "Ya tienes muchas hamburguesas en tu inventario.");

					id = Inventory_Add(playerid, "Hamburguesa Cocida", 2703);

					if (id != -1)
					{
					    PlayerData[playerid][pVendorTime] = 3;

					    GiveMoney(playerid, -3);
					    ApplyAnimation(playerid, "DEALER", "shop_pay", 4.0, 0, 0, 0, 0, 0);

					    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s compro una hamburguesa al vendedor por $3.", ReturnName(playerid, 0));
						ShowPlayerFooter(playerid, "Tu ~p~hamburguesa~w~ fue agregada al inventario.");
					}
				}
				case 2:
		        {
					if (GetMoney(playerid) < 2)
					    return SendErrorMessage(playerid, "No tienes suficiente dinero.");

					if (PlayerData[playerid][pVendorTime] > 0)
					    return SendErrorMessage(playerid, "Tienes que esperar antes de comprarle a otro vendedor.");

					if (Inventory_Count(playerid, "Gaseosa") >= 10)
					    return SendErrorMessage(playerid, "Ya tienes muchas botellas de gasesosa en el inventario.");

					id = Inventory_Add(playerid, "Gaseosa", 1543);

					if (id != -1)
					{
                        PlayerData[playerid][pVendorTime] = 3;

					    GiveMoney(playerid, -2);
					    ApplyAnimation(playerid, "VENDING", "VEND_USE", 4.0, 0, 0, 0, 0, 0);

					    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s compro una gaseosa por $2.", ReturnName(playerid, 0));
						ShowPlayerFooter(playerid, "Tu ~p~gaseosa~w~ fue agregada al inventario.");
					}
				}
			}
		}
		if (PlayerData[playerid][pRangeBooth] != -1)
		{
		    Booth_Leave(playerid);
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha dejado la cabina de tiro.", ReturnName(playerid, 0));
		}
		else for (new i = 0; i < MAX_BOOTHS; i ++) if (!g_BoothUsed[i] && IsPlayerInRangeOfPoint(playerid, 1.5, arrBoothPositions[i][0], arrBoothPositions[i][1], arrBoothPositions[i][2]))
		{
		    g_BoothUsed[i] = true;
		    PlayerData[playerid][pRangeBooth] = i;

		    UpdateWeapons(playerid);
		    ResetPlayerWeapons(playerid);

		    GivePlayerWeapon(playerid, 24, 15000);

			Booth_Refresh(playerid);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][81], "~b~Targets:~w~ 0/10");

			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][81]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha entrado en la cabina de tiro.", ReturnName(playerid, 0));
			return 1;
		}
		if (PlayerData[playerid][pTutorialStage] == 5 && IsPlayerInRangeOfPoint(playerid, 1.5, -228.8403, 1401.1831, 27.7656))
		{
		    for (new i = 0; i < 100; i ++) {
		        SendClientMessage(playerid, -1, "");
			}
		    SetDefaultSpawn(playerid);
		    Dialog_Show(playerid, TutorialConfirm, DIALOG_STYLE_MSGBOX, "Tutorial", "Quieres ver el tutorial principal del servidor?", "Si", "No");
		}
		if (IsPlayerInRangeOfPoint(playerid, 2.5, -204.5334, -1735.3131, 675.7687) && PlayerData[playerid][pHospitalInt] != -1)
		{
			SetPlayerPos(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][0], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][1], arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][2]);
			SetPlayerFacingAngle(playerid, arrHospitalSpawns[PlayerData[playerid][pHospitalInt]][3]);

			SetPlayerInterior(playerid, 0);
			SetPlayerVirtualWorld(playerid, 0);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHospitalInt] = -1;
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 272.2939, 1388.8876, 11.1342))
		{
		    SetPlayerPosEx(playerid, 1206.8619, -1314.3546, 797.0880);
		    SetPlayerFacingAngle(playerid, 270.0000);

		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, PRISON_WORLD);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 1206.8619, -1314.3546, 796.7880) && GetPlayerVirtualWorld(playerid) == PRISON_WORLD && !PlayerData[playerid][pJailTime])
		{
		    if (PlayerData[playerid][pFreeze])
			{
		        TogglePlayerControllable(playerid, 1);
		        KillTimer(PlayerData[playerid][pFreezeTimer]);
			}
		    SetPlayerPos(playerid, 272.2939, 1388.8876, 11.1342);
		    SetPlayerFacingAngle(playerid, 270.0000);

		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 1211.1923, -1354.3439, 796.7456) && GetPlayerVirtualWorld(playerid) == PRISON_WORLD)
		{
		    if (PlayerData[playerid][pFreeze])
			{
		        TogglePlayerControllable(playerid, 1);
		        KillTimer(PlayerData[playerid][pFreezeTimer]);
			}
		    SetPlayerPos(playerid, 201.8927, 1437.1788, 10.5950);
		    SetPlayerFacingAngle(playerid, 180.0000);

		    SetPlayerInterior(playerid, 0);
		    SetPlayerVirtualWorld(playerid, 0);

		    SetCameraBehindPlayer(playerid);
		}
		else if (IsPlayerInRangeOfPoint(playerid, 2.5, 201.8927, 1437.1788, 10.5950))
		{
		    SetPlayerPosEx(playerid, 1211.1923, -1354.3439, 797.0456);
		    SetPlayerFacingAngle(playerid, 0.0000);

		    SetPlayerInterior(playerid, 5);
		    SetPlayerVirtualWorld(playerid, PRISON_WORLD);

		    SetCameraBehindPlayer(playerid);
		}
		for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) if (IsPlayerInRangeOfPoint(playerid, 3.0, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2]))
		{
			SetPlayerPos(playerid, -204.5648, -1736.1201, 675.7687);
			SetPlayerFacingAngle(playerid, 180.0000);

			SetPlayerInterior(playerid, 3);
			SetPlayerVirtualWorld(playerid, i + 5000);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHospitalInt] = i;

		    return 1;
	    }
	    if ((id = House_Nearest(playerid)) != -1)
	    {
	        if (HouseData[id][houseLocked])
	            return SendErrorMessage(playerid, "No puedes entrar a una casa cerrada.");

			SetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
			SetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

			SetPlayerInterior(playerid, HouseData[id][houseInterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseID] + 5000);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = HouseData[id][houseID];
			return 1;
		}
		if ((id = House_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]))
	    {
			SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
			SetPlayerFacingAngle(playerid, HouseData[id][housePos][3] - 180.0);

			SetPlayerInterior(playerid, HouseData[id][houseExterior]);
			SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pHouse] = -1;
			return 1;
		}
        if ((id = Business_Nearest(playerid)) != -1)
	    {
	        if (BusinessData[id][bizLocked])
	            return SendErrorMessage(playerid, "Este negocio esta cerrado por su dueño.");

			if (PlayerData[playerid][pTask] && !PlayerData[playerid][pStoreTask])
			{
			    PlayerData[playerid][pStoreTask] = 1;
			    Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Negocio Minorista", "Este negocio es un minorista. Puedes comprar muchos objetos con el comando /comprar.\nHay muchas cosas utiles que puedes comprar aqui, las cuales se añadiran a tu inventario.\n\nEl objeto mas util es el GPS, te permitira encontrar lo que mas necesitas.\nPuedes salir de cualquier negocio pulsando la letra 'F'.", "Cerrar", "");

			    if (IsTaskCompleted(playerid))
				{
    				PlayerData[playerid][pTask] = 0;
					ShowPlayerFooter(playerid, "Has ~g~completado~w~ todas tus tareas!");
				}
			}
			

			//Solo cambia de interior y vw si el tipo de negocio es el generado (antes del 8 en adelante, alias tienda mundo abierto)
			if (BusinessData[id][bizType] < 8 || BusinessData[id][bizType] == 9)
			{
				SetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
				SetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);
				SetPlayerInterior(playerid, BusinessData[id][bizInterior]);
				SetPlayerVirtualWorld(playerid, BusinessData[id][bizID] + 6000); //Entra al negocio con un mundo virtual = ID del de base de datos + 6000 para disimular
			}
			

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pBusiness] = BusinessData[id][bizID];

			if (strlen(BusinessData[id][bizMessage]) && strcmp(BusinessData[id][bizMessage], "NULL", true)) {
			    SendClientMessage(playerid, COLOR_DARKBLUE, BusinessData[id][bizMessage]);
			}
			return 1;
		}
		if ((id = Business_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]))
	    {
			SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
			SetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3] - 180.0);

			SetPlayerInterior(playerid, BusinessData[id][bizExterior]);
			SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pBusiness] = -1;
			return 1;
		}
		if ((id = Entrance_Nearest(playerid)) != -1)
	    {
	        if (EntranceData[id][entranceLocked])
	            return SendErrorMessage(playerid, "Esta entrada está cerrada en este momento.");

            if (PlayerData[playerid][pTask])
			{
				if (EntranceData[id][entranceType] == 2 && !PlayerData[playerid][pBankTask])
				{
			    	PlayerData[playerid][pBankTask] = 1;
			    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Bancos", "Este es uno de los bancos de San Andreas. Puedes manejar tus cuentas bancarias aqui.\nCada jugador tiene una cuenta comun y una cuenta extra de ahorro para guardar mas dinero.\n\nUsa /banco dentro de él para usar cualquiera de tus cuentas.\nSi estas cerca de una maquina de ATM, usa /atm.", "Cerrar", "");

				    if (IsTaskCompleted(playerid))
					{
				        PlayerData[playerid][pTask] = 0;
						ShowPlayerFooter(playerid, "Has ~g~completado~w~ todas tus tareas!");
					}
				}
				else if (EntranceData[id][entranceType] == 1 && !PlayerData[playerid][pTestTask])
				{
			    	PlayerData[playerid][pTestTask] = 1;
			    	Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_MSGBOX, "Escuela de Conducir", "En la escuela de conducir puedes intentar sacar la licencia de conducir.\nTienes que evitar golpear obstaculos, dañar mucho el vehiculo o subir mucho la velocidad.\n\nEs necesario tener una licencia para poder conducir en San Andreas.\nConducir sin licencias puede llevar a problemas con las fuerzas de la ley.", "Cerrar", "");

				    if (IsTaskCompleted(playerid))
					{
				        PlayerData[playerid][pTask] = 0;
						ShowPlayerFooter(playerid, "Has ~g~completado~w~ todas tus tareas!");
					}
				}
			}
			if (EntranceData[id][entranceCustom])
				SetPlayerPosEx(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

			else
			    SetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);

			SetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

			SetPlayerInterior(playerid, EntranceData[id][entranceInterior]);
			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceWorld]);

			SetCameraBehindPlayer(playerid);

			PlayerData[playerid][pEntrance] = EntranceData[id][entranceID];
			return 1;
		}
		if ((id = Entrance_Inside(playerid)) != -1 && IsPlayerInRangeOfPoint(playerid, 2.5, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]))
	    {
	        if (EntranceData[id][entranceCustom])
				SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

			else
			    SetPlayerPosEx(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);

			SetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3] - 180.0);

			SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);
			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);

			SetCameraBehindPlayer(playerid);
			PlayerData[playerid][pEntrance] = Entrance_GetLink(playerid);
			return 1;
		}
		if ((id = Crate_Nearest(playerid)) != -1 && PlayerData[playerid][pCarryCrate] == -1 && !IsCrateInUse(id))
		{
		    // If the crate is within a stack, this function below
		    // will get the highest crate on the stack.

		    if ((id = Crate_Highest(id)) == -1)
		        id = Crate_Nearest(playerid);

		    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

            PlayerData[playerid][pCarryCrate] = id;
            SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s se agacha y toma una caja.", ReturnName(playerid, 0));
			SendServerMessage(playerid, "Has agarrado una caja. Cargala en un vehiculo pulsando 'N'.");

			DestroyDynamicObject(CrateData[id][crateObject]);
			DestroyDynamic3DTextLabel(CrateData[id][crateText3D]);

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
			CrateData[id][crateObject] = INVALID_OBJECT_ID;
			return 1;
		}
		if (PlayerData[playerid][pCarryCrate] != -1 && GetPlayerState(playerid) == PLAYER_STATE_ONFOOT && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY && !PlayerData[playerid][pCrafting])
		{
		    ApplyAnimation(playerid, "CARRY", "null", 4.0, 0, 0, 0, 0, 0);
		    ApplyAnimation(playerid, "CARRY", "putdwn", 4.0, 0, 0, 0, 0, 0);

			Crate_Drop(playerid, 1.5);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tiró una caja.", ReturnName(playerid, 0));

			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			return 1;
		}
	}
	return 1;
}
forward PutInsideVehicle(playerid, vehicleid);
public PutInsideVehicle(playerid, vehicleid)
{
	if (!PlayerData[playerid][pDrivingTest])
	    return 0;

	RemoveFromVehicle(vehicleid);
    PutPlayerInVehicle(playerid, vehicleid, 0);
    return 1;
}

public OnPlayerExitVehicle(playerid, vehicleid)
{
    if (IsPlayerNPC(playerid))
	    return 1;

	if (PlayerData[playerid][pTaxiDuty])
	{
        foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
	        LeaveTaxi(i, playerid);
	    }
	    SetPlayerColor(playerid, DEFAULT_COLOR);

        PlayerData[playerid][pTaxiDuty] = false;
        SendServerMessage(playerid, "Ya no estas en servicio de taxi!");
	}
    if (PlayerData[playerid][pDrivingTest])
	{
	    SetTimerEx("PutInsideVehicle", 500, false, "dd", playerid, vehicleid);
		Dialog_Show(playerid, LeaveTest, DIALOG_STYLE_MSGBOX, "Abandono de Prueba", "Advertencia: Seguro que quieres abandonar la prueba de manejo?", "Si", "No");
	}
	if (PlayerData[playerid][pJob] == JOB_UNLOADER && GetVehicleModel(vehicleid) == 530)
	{
	    CoreVehicles[vehicleid][vehLoadType] = 0;
		DestroyObject(CoreVehicles[vehicleid][vehCrate]);

		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
		DisablePlayerCheckpoint(playerid);
	}
	return 1;
}

public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
    if (IsPlayerNPC(playerid))
	    return 1;

	if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || PlayerData[playerid][pInjured] || PlayerData[playerid][pFirstAid]) {
	    ClearAnimations(playerid);

	    return 0;
	}
	new id = Car_GetID(vehicleid);

	if (!ispassenger && id != -1 && CarData[id][carFaction] > 0 && GetFactionType(playerid) != CarData[id][carFaction]) {
	    ClearAnimations(playerid);
	    return SendErrorMessage(playerid, "No tienes las llaves de este vehiculo.");
	}
	if (!ispassenger && id != -1 && CarData[id][carJob] > 0 && PlayerData[playerid][pJob] != CarData[id][carJob]){
	    ClearAnimations(playerid);	
	    return SendErrorMessage(playerid, "No tienes las llaves de este vehiculo.");
	}
	return 1;
}

public OnPlayerEnterCheckpoint(playerid)
{

	if (PlayerData[playerid][pTutorialStage])
	{
	    DisablePlayerCheckpoint(playerid);
		return 1;
	}
	if(TruckingCheck[playerid] >= 1 && PlayerData[playerid][pUnloading] == -1)
	{
	    if (!IsPlayerInAnyVehicle(playerid))
		{
		    SendErrorMessage(playerid, "No estas en un vehiculo");
		    return 1;
		}
		new vehicleid = GetPlayerVehicleID(playerid);
		if (!IsLoadableVehicle(vehicleid))
  		{
  			SendErrorMessage(playerid, "No estas en un vehiculo de reparto.");
  		}
	    new string[180];
        format(string, sizeof(string), "Has ganado $%d por tus repartos!", TruckingCheck[playerid]);
        GiveMoney(playerid, TruckingCheck[playerid]);
        TruckingCheck[playerid] = 0;
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, string);
		DisablePlayerCheckpoint(playerid);
		RespawnVehicle(vehicleid);
	}
	if (PlayerData[playerid][pCP])
	{
	    DisablePlayerCheckpoint(playerid);
	    PlayerData[playerid][pCP] = 0;
	}
	if (PlayerData[playerid][pTask])
	{
	    new id = -1;

		if ((id = Entrance_Nearest(playerid)) != -1 && EntranceData[id][entranceType] == 2 && !PlayerData[playerid][pBankTask])
		    ShowPlayerFooter(playerid, "Pulsa ~y~'F'~w~ para entrar al banco.");

        if ((id = Business_Nearest(playerid)) != -1 && BusinessData[id][bizType] == 1 && !PlayerData[playerid][pStoreTask])
		    ShowPlayerFooter(playerid, "Pulsa ~y~'F'~w~ para entrar al minorista.");

        if ((id = Entrance_Nearest(playerid)) != -1 && EntranceData[id][entranceType] == 1 && !PlayerData[playerid][pTestTask])
		    ShowPlayerFooter(playerid, "Pulsa ~y~'F'~w~ para entrar a la escuela de manejo.");

		DisablePlayerCheckpoint(playerid);
	}
	if (PlayerData[playerid][pDrivingTest])
	{
	    PlayerData[playerid][pTestStage]++;

	    if (PlayerData[playerid][pTestStage] < sizeof(g_arrDrivingCheckpoints)) {
			SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][0], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][1], g_arrDrivingCheckpoints[PlayerData[playerid][pTestStage]][2], 3.0);
		}
		else
		{
		    static
		        Float:health;

		    GetVehicleHealth(GetPlayerVehicleID(playerid), health);

		    if (health < 950.0)
				SendErrorMessage(playerid, "Fallaste la prueba de manejo - el vehiculo fue dañado!");

		    else
			{
		        GiveMoney(playerid, -50);
		        ShowPlayerFooter(playerid, "Has pagado ~r~$50~w~ por la prueba.");

		        Inventory_Add(playerid, "Permiso de Conducir", 1581);
		        SendServerMessage(playerid, "Has aprobado la prueba de conducir, has obtenido una licencia.");
		    }
  			CancelDrivingTest(playerid);
		}
	}
	else
	{
	    new
			vehicleid = GetPlayerVehicleID(playerid),
			Float:health;

		if (PlayerData[playerid][pWaypoint])
		{
		    PlayerData[playerid][pWaypoint] = 0;

		    DisablePlayerCheckpoint(playerid);
		    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][69]);
		}
		else if (PlayerData[playerid][pJob] == JOB_COURIER && !IsPlayerInAnyVehicle(playerid))
		{
			if (PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadCrate] && Job_NearestPoint(playerid) != -1)
			{
			    PlayerData[playerid][pLoadCrate] = 1;

		        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
				ShowPlayerFooter(playerid, "Pulsa ~y~'N'~w~ cerca de un camion para cargar la caja.");
			}
			else if (PlayerData[playerid][pUnloading] != -1)
			{
				if (!PlayerData[playerid][pLoadCrate])
				{
				    PlayerData[playerid][pLoadCrate] = 1;
				    ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);

			        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

					SetPlayerCheckpoint(playerid, BusinessData[PlayerData[playerid][pUnloading]][bizPos][0], BusinessData[PlayerData[playerid][pUnloading]][bizPos][1], BusinessData[PlayerData[playerid][pUnloading]][bizPos][2], 1.0);
					ShowPlayerFooter(playerid, "Entrega la caja en el ~r~punto.");

					CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads]--;
				}
				else
				{
				    static
				        Float:fX,
				        Float:fY,
				        Float:fZ,
						string[64];

				    PlayerData[playerid][pLoadCrate] = 0;
				    ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);

				    RemovePlayerAttachedObject(playerid, 4);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
					if(PlayerData[playerid][pDeliverShipment] == 0)
					{
						switch (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType])
						{
							case 1:
							{
								TruckingCheck[playerid] += 35;
						        //GiveMoney(playerid, 35);
						        ShowPlayerFooter(playerid, "~g~$35~w~ ha sido agregado a tu cheque.");
						    }
						    case 2:
							{
							    TruckingCheck[playerid] += 40;
						        //GiveMoney(playerid, 40);
						        ShowPlayerFooter(playerid, "~g~$40~w~ ha sido agregado a tu cheque.");
						    }
						    case 3:
							{
							    TruckingCheck[playerid] += 30;
						        //GiveMoney(playerid, 30);
						        ShowPlayerFooter(playerid, "~g~$30~w~ ha sido agregado a tu cheque.");
						    }
						    case 4:
							{
							    TruckingCheck[playerid] += 35;
						        //GiveMoney(playerid, 35);
						        ShowPlayerFooter(playerid, "~g~$35~w~ ha sido agregado a tu cheque.");
						    }
						    case 5:
							{
							    TruckingCheck[playerid] += 40;
						        //GiveMoney(playerid, 40);
						        ShowPlayerFooter(playerid, "~g~$40~w~ ha sido agregado a tu cheque.");
						    }
						    case 6:
							{
							    TruckingCheck[playerid] += 35;
						        //GiveMoney(playerid, 35);
						        ShowPlayerFooter(playerid, "~g~$35~w~ ha sido agregado a tu cheque.");
						    }
						}
					}
					else
					{
						switch (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType])
						{
							case 1:
							{
								TruckingCheck[playerid] += 50;
						        //GiveMoney(playerid, 35);
						        ShowPlayerFooter(playerid, "~g~$50~w~ ha sido agregado a tu cheque.");
						    }
						    case 2:
							{
							    TruckingCheck[playerid] += 55;
						        //GiveMoney(playerid, 40);
						        ShowPlayerFooter(playerid, "~g~$55~w~ ha sido agregado a tu cheque.");
						    }
						    case 3:
							{
							    TruckingCheck[playerid] += 45;
						        //GiveMoney(playerid, 30);
						        ShowPlayerFooter(playerid, "~g~$45~w~ ha sido agregado a tu cheque.");
						    }
						    case 4:
							{
							    TruckingCheck[playerid] += 50;
						        //GiveMoney(playerid, 35);
						        ShowPlayerFooter(playerid, "~g~$50~w~ ha sido agregado a tu cheque.");
						    }
						    case 5:
							{
							    TruckingCheck[playerid] += 55;
						        //GiveMoney(playerid, 40);
						        ShowPlayerFooter(playerid, "~g~$55~w~ ha sido agregado a tu cheque.");
						    }
						    case 6:
							{
							    TruckingCheck[playerid] += 50;
						        //GiveMoney(playerid, 35);
						        ShowPlayerFooter(playerid, "~g~$50~w~ ha sido agregado a tu cheque.");
						    }
						}
					}
					if (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType] == 5)
					{
						for (new i = 0; i < MAX_GAS_PUMPS; i ++) if (PumpData[i][pumpExists] && PumpData[i][pumpBusiness] == PlayerData[playerid][pUnloading]) {
						    PumpData[i][pumpFuel] += 100;

			                format(string, sizeof(string), "[Bomba de Gas: %d]\n{FFFFFF}Combustible: %d liters", i, PumpData[i][pumpFuel]);
						    UpdateDynamic3DTextLabelText(PumpData[i][pumpText3D], COLOR_DARKBLUE, string);

						    Pump_Save(i);
						}
					}
					else
					{
						BusinessData[PlayerData[playerid][pUnloading]][bizProducts] += 20;
						Business_Save(PlayerData[playerid][pUnloading]);
					}
					if (CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads] > 0)
					{
					    GetVehicleBoot(PlayerData[playerid][pUnloadVehicle], fX, fY, fZ);
					    SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
					}
					else
					{
					    CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoads] = 0;
					    CoreVehicles[PlayerData[playerid][pUnloadVehicle]][vehLoadType] = 0;

				     	PlayerData[playerid][pUnloading] = -1;
					    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;

						DisablePlayerCheckpoint(playerid);
					    SendServerMessage(playerid, "Has entregado todas las cajas del vehiculo.");
					    SendServerMessage(playerid, "Entrega el camion al punto para recibir una paga.");
					    SetPlayerCheckpoint(playerid, 2521.0376, -2090.3279, 13.4125, 5.0);

					    if (PlayerData[playerid][pShipment] != -1)
					    {
					        foreach (new i : Player) if (Business_IsOwner(i, PlayerData[playerid][pShipment])) {
					            SendServerMessage(playerid, "%s ha entregado tu envío a %s.", ReturnName(playerid, 0), BusinessData[PlayerData[playerid][pShipment]][bizName]);
							}
							BusinessData[PlayerData[playerid][pShipment]][bizShipment] = 0;
							Business_Save(PlayerData[playerid][pShipment]);

          					PlayerData[playerid][pShipment] = -1;
          					PlayerData[playerid][pDeliverShipment] = 0;
					    }
					}
				}
			}
		}
		else if (PlayerData[playerid][pJob] == JOB_MINER && PlayerData[playerid][pMinedRock] && GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY)
		{
		    new money = random(20) + 5;

			SendServerMessage(playerid, "Has ganado $%d por la piedra.", money);
			GiveMoney(playerid, money);

			PlayerData[playerid][pMinedRock] = 0;
			PlayerData[playerid][pMineCount] = 0;

			DisablePlayerCheckpoint(playerid);
			RemovePlayerAttachedObject(playerid, 4);

			SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
	    else if (PlayerData[playerid][pJob] == JOB_UNLOADER && IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
	    {
	        GetVehicleHealth(vehicleid, health);

	        CoreVehicles[vehicleid][vehLoadType] = 0;
	        DestroyObject(CoreVehicles[vehicleid][vehCrate]);

			CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
			DisablePlayerCheckpoint(playerid);

			if (health < CoreVehicles[vehicleid][vehLoadHealth]) {
			    SendErrorMessage(playerid, "Has dañado a la caja durante el viaje.");
			}
			else {
				SendServerMessage(playerid, "Has descargado la caja por $20.");
				GiveMoney(playerid, 20);
			}
		}
		else if (PlayerData[playerid][pJob] == JOB_SORTER && PlayerData[playerid][pSorting] != -1)
		{
		    if (PlayerData[playerid][pSortCrate])
		    {
		        PlayerData[playerid][pSortCrate] = 0;

		        RemovePlayerAttachedObject(playerid, 4);
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		        ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
		        SetPlayerCheckpoint(playerid, JobData[PlayerData[playerid][pSorting]][jobPoint][0], JobData[PlayerData[playerid][pSorting]][jobPoint][1], JobData[PlayerData[playerid][pSorting]][jobPoint][2], 1.0);

				GiveMoney(playerid, 10);
				ShowPlayerFooter(playerid, "Has ganado ~g~$10~w~ por el paquete.");
			}
			else
			{
                SetPlayerAttachedObject(playerid, 4, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

				ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
				SetPlayerCheckpoint(playerid, JobData[PlayerData[playerid][pSorting]][jobDeliver][0], JobData[PlayerData[playerid][pSorting]][jobDeliver][1], JobData[PlayerData[playerid][pSorting]][jobDeliver][2], 1.0);

                PlayerData[playerid][pSortCrate] = 1;
				ShowPlayerFooter(playerid, "Entrega el paquete en el ~r~punto.");
			}
		}
	}
	return 1;
}

public OnPlayerStateChange(playerid, newstate, oldstate)
{
    if (IsPlayerNPC(playerid))
	    return 1;

	new vehicleid = GetPlayerVehicleID(playerid);

	if (newstate == PLAYER_STATE_WASTED && PlayerData[playerid][pJailTime] < 1)
	{
	    for (new i = 34; i < 39; i ++) {
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    }
	    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][82]);

	    ShowHungerTextdraw(playerid, 0);
	    PlayerData[playerid][pHealth] = 100.0;

	    ResetWeapons(playerid);
	    ResetPlayer(playerid);

	    PlayerData[playerid][pKilled] = 1;

	    if (!PlayerData[playerid][pInjured])
		{
	        PlayerData[playerid][pInjured] = 1;

	        PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
	    	PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	    	GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
	    	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);
		}
		else
		{
		    TextDrawHideForPlayer(playerid, gServerTextdraws[2]);

			PlayerData[playerid][pInjured] = 0;
			PlayerData[playerid][pHospital] = GetClosestHospital(playerid);
		}
		if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID)
		{
		    SendClientMessage(PlayerData[playerid][pCallLine], COLOR_YELLOW, "[TELEFONO]:{FFFFFF} La línea se cortó...");
		    CancelCall(playerid);
		}
		if (PlayerData[playerid][pCarryCrate] != -1)
		{
			Crate_Drop(playerid);
		}
	}
	else if (oldstate == PLAYER_STATE_DRIVER)
	{
	    if (GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CARRY || GetPlayerSpecialAction(playerid) == SPECIAL_ACTION_CUFFED)
	        return RemoveFromVehicle(playerid);

	    for (new i = 34; i < 39; i ++)
			PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

		PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][82]);
	}
	else if (newstate == PLAYER_STATE_DRIVER)
	{
	    new id = Car_GetID(vehicleid);

		if (id != -1 && CarData[id][carFaction] > 0 && GetFactionType(playerid) != CarData[id][carFaction]) {
		    RemovePlayerFromVehicle(playerid);

	    	return SendErrorMessage(playerid, "No tienes las llaves de este vehiculo.");
		}
		if (id != -1 && CarData[id][carJob] > 0 && PlayerData[playerid][pJob] != CarData[id][carJob]) {
		    RemovePlayerFromVehicle(playerid);

	    	return SendErrorMessage(playerid, "No tienes las llaves de este vehiculo.");
		}
		if (PlayerData[playerid][pJob] == JOB_GARBAGE && GetVehicleModel(vehicleid) == 408 && CoreVehicles[vehicleid][vehTrash] > 0)
		{
		    new pointid = -1;

		    if ((pointid = GetClosestJobPoint(playerid, 7)) != -1)
		    {
			    PlayerData[playerid][pCP] = 1;
			    SetPlayerCheckpoint(playerid, JobData[pointid][jobPoint][0], JobData[pointid][jobPoint][1], JobData[pointid][jobPoint][2], 2.5);

		    	SendServerMessage(playerid, "Este vehiculo esta cargado con %d bolsas de basura (punto establecido para volcado).", CoreVehicles[vehicleid][vehTrash]);
		    }
		}
		if (PlayerData[playerid][pJob] == JOB_COURIER && IsLoadableVehicle(vehicleid) && CoreVehicles[vehicleid][vehLoads] > 0)
		{
		    if (PlayerData[playerid][pLoading])
		    {
				DisablePlayerCheckpoint(playerid);
				PlayerData[playerid][pLoading] = 0;
			}
			static
			    string[64];

		    switch (CoreVehicles[vehicleid][vehLoadType])
			{
				case 1: format(string, sizeof(string), "~b~Cargado:~w~ Suministros de Minorista~n~~b~Cajas Cargadas:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
		        case 2: format(string, sizeof(string), "~b~Cargado:~w~ Ammunition~n~~b~Cajas Cargadas:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 3: format(string, sizeof(string), "~b~Cargado:~w~ Ropa~n~~b~Cajas Cargadas:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 4: format(string, sizeof(string), "~b~Cargado:~w~ Comida~n~~b~Cajas Cargadas:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 5: format(string, sizeof(string), "~b~Cargado:~w~ Combustible~n~~b~Cajas Cargadas:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
                case 6: format(string, sizeof(string), "~b~Cargado:~w~ Muebles~n~~b~Cajas Cargadas:~w~ %d/6", CoreVehicles[vehicleid][vehLoads]);
			}
		    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][82]);
		    PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][82], string);
		}
	    if (IsVehicleImpounded(vehicleid))
	    {
	        RemovePlayerFromVehicle(playerid);
	        SendErrorMessage(playerid, "Este vehículo esta incautado y no puedes usarlo.");
	    }
		else if (!IsEngineVehicle(vehicleid))
		{
			SetEngineStatus(vehicleid, true);
		}
		else
		{
			if (!GetEngineStatus(vehicleid))
			{
			    if (CoreVehicles[vehicleid][vehFuel] < 1)
	    			ShowPlayerFooter(playerid, "No hay ~r~combustible~w~ en este vehiculo.");

				else if (ReturnVehicleHealth(vehicleid) <= 300)
	    			ShowPlayerFooter(playerid, "Este vehiculo esta ~r~destruido~w~ y necesita reparacion.");

  				else ShowPlayerFooter(playerid, "Escribe ~r~/motor~w~ para encender el motor.");
			}
			if (IsDoorVehicle(vehicleid) && !Inventory_HasItem(playerid, "Permiso de Conducir") && !PlayerData[playerid][pDrivingTest])
			{
   				SendClientMessage(playerid, COLOR_LIGHTRED, "[ADVERTENCIA]:{FFFFFF} Estas manejando sin una licencia de conducir.");
			}
		}
	    if (IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo]) for (new i = 34; i < 39; i ++) {
			PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SetPlayerArmedWeapon(playerid, 0);
	}
	if ((oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER) && PlayerData[playerid][pPlayRadio])
	{
	    PlayerData[playerid][pPlayRadio] = 0;
	    StopAudioStreamForPlayer(playerid);
	}
	if (newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    if (PlayerData[playerid][pBoombox] != INVALID_PLAYER_ID)
	    {
	        PlayerData[playerid][pBoombox] = INVALID_PLAYER_ID;
			StopAudioStreamForPlayer(playerid);
	    }
	    if (IsEngineVehicle(vehicleid) && CoreVehicles[vehicleid][vehRadio])
	    {
	        static
	            url[128];

			strunpack(url, CoreVehicles[vehicleid][vehURL]);

			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, url);

			PlayerData[playerid][pPlayRadio] = 1;
		}
	    foreach (new i : Player) if (PlayerData[i][pSpectator] == playerid) {
     		PlayerSpectateVehicle(i, GetPlayerVehicleID(playerid));
		}
		if (PlayerData[playerid][pInjured] == 1)
		{
		    RemoveFromVehicle(playerid);
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER)
	{
	    switch (GetPlayerWeapon(playerid))
	    {
	        case 22, 25, 28..33:
	    		SetPlayerArmedWeapon(playerid, GetPlayerWeapon(playerid));

			default:
				SetPlayerArmedWeapon(playerid, 0);
		}
	}
	else if (oldstate == PLAYER_STATE_DRIVER || oldstate == PLAYER_STATE_PASSENGER)
	{
	    foreach (new i : Player) if (PlayerData[i][pSpectator] == playerid) {
     		PlayerSpectatePlayer(i, playerid);
		}
	}
	if (newstate == PLAYER_STATE_PASSENGER && IsPlayerInsideTaxi(playerid))
	{
	    new driverid = GetVehicleDriver(GetPlayerVehicleID(playerid));

	    PlayerData[playerid][pTaxiFee] = 5;
	    PlayerData[playerid][pTaxiTime] = 0;
	    PlayerData[playerid][pTaxiPlayer] = driverid;

	    SendServerMessage(driverid, "%s entró a tu taxi como pasajero.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "Has entrado al taxi de %s.", ReturnName(driverid, 0));
	}
 	if (oldstate == PLAYER_STATE_PASSENGER && PlayerData[playerid][pTaxiTime] != 0 && PlayerData[playerid][pTaxiPlayer] != INVALID_PLAYER_ID)
	{
	    LeaveTaxi(playerid, PlayerData[playerid][pTaxiPlayer]);
	}
	return 1;
}

public OnPlayerUpdate(playerid)
{
	static str[64], id = -1, keys[3], vehicleid;

	if (PlayerData[playerid][pKicked])
		return 0;

	if (GetPlayerWeapon(playerid) > 1 && (PlayerData[playerid][pHoldWeapon] > 0 || PlayerData[playerid][pMining] > 0))
	    SetPlayerArmedWeapon(playerid, 0);

	if (IsPlayerInAnyVehicle(playerid))
		vehicleid = GetPlayerVehicleID(playerid);
	else
	    vehicleid = INVALID_VEHICLE_ID;

	GetPlayerKeys(playerid, keys[0], keys[1], keys[2]);

	if (GetPlayerWeapon(playerid) != PlayerData[playerid][pWeapon])
	{
	    PlayerData[playerid][pWeapon] = GetPlayerWeapon(playerid);

		if (PlayerData[playerid][pWeapon] >= 1 && PlayerData[playerid][pWeapon] <= 45 && PlayerData[playerid][pWeapon] != 40 && PlayerData[playerid][pWeapon] != 2 && PlayerData[playerid][pGuns][g_aWeaponSlots[PlayerData[playerid][pWeapon]]] != GetPlayerWeapon(playerid) && !PlayerHasTazer(playerid) && !PlayerHasBeanBag(playerid) && PlayerData[playerid][pRangeBooth] == -1 && PlayerData[playerid][pCharacter] > 0)
		{
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s fue baneado por hacks de armas (%s).", ReturnName(playerid, 0), ReturnWeaponName(PlayerData[playerid][pWeapon]));
			Log_Write("logs/cheat_log.txt", "[%s] %s fue baneado por hacks de armas (%s).", ReturnDate(), ReturnName(playerid), ReturnWeaponName(PlayerData[playerid][pWeapon]));

			Blacklist_Add(PlayerData[playerid][pIP], PlayerData[playerid][pUsername], "Anticheat", "Weapon Hacks");
			Kick(playerid);

			return 0;
		}
	}
	if (GetPlayerMoney(playerid) != PlayerData[playerid][pMoney])
	{
	    ResetPlayerMoney(playerid);
	    GivePlayerMoney(playerid, PlayerData[playerid][pMoney]);
	}
	if (GetPlayerScore(playerid) != PlayerData[playerid][pPlayingHours])
	{
		SetPlayerScore(playerid, PlayerData[playerid][pPlayingHours]);
	}
	if (PlayerData[playerid][pWaypoint])
	{
	    format(str, sizeof(str), "~b~Waypoint:~w~ %s (%.2f metros)", PlayerData[playerid][pLocation], GetPlayerDistanceFromPoint(playerid, PlayerData[playerid][pWaypointPos][0], PlayerData[playerid][pWaypointPos][1], PlayerData[playerid][pWaypointPos][2]));
		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][69], str);
	}
	if (PlayerData[playerid][pMaskOn])
	{
		if (!PlayerData[playerid][pHideTags])
	    {
            foreach (new i : Player) {
				ShowPlayerNameTagForPlayer(i, playerid, 0);
			}
		    format(str, sizeof(str), "Mascara_#%d", PlayerData[playerid][pMaskID]);

	        PlayerData[playerid][pHideTags] = 1;
	        PlayerData[playerid][pNameTag] = CreateDynamic3DTextLabel(str, COLOR_WHITE, 0.0, 0.0, 0.2, 8.0, playerid, INVALID_VEHICLE_ID, 0, -1, -1);
	    }
	}
	if (!PlayerData[playerid][pMaskOn] && PlayerData[playerid][pHideTags])
	{
	    foreach (new i : Player) {
			ShowPlayerNameTagForPlayer(i, playerid, 1);
		}
		ResetNameTag(playerid);
	}
	if (IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    if (IsSpeedoVehicle(vehicleid) && !PlayerData[playerid][pDisableSpeedo])
	    {
		    static
		        Float:fDamage,
		        Float:fSpeed,
		        Float:fVelocity[3];

	  		GetVehicleHealth(vehicleid, fDamage);
	  		GetVehicleVelocity(vehicleid, fVelocity[0], fVelocity[1], fVelocity[2]);

	  		fDamage = floatdiv(1000 - fDamage, 10) * 1.42999; // 1.33334;
 	  		fSpeed = floatmul(floatsqroot((fVelocity[0] * fVelocity[0]) + (fVelocity[1] * fVelocity[1]) + (fVelocity[2] * fVelocity[2])), 100.0);

			if (fDamage < 0.0) fDamage = 0.0;
			else if (fDamage > 100.0) fDamage = 100.0;

	        format(str, sizeof(str), "~r~GAS:~w~ %d%c", CoreVehicles[vehicleid][vehFuel], '%');
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][35], str);

			format(str, sizeof(str), "~r~Velocidad:~w~ %.0f k/h", fSpeed);
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][36], str);

			format(str, sizeof(str), "~r~Dano:~w~ %.0f/100%%", (fDamage > 100.0) ? (100.0) : (fDamage));
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][37], str);

	        format(str, sizeof(str), "~r~Ventanas:~w~ %s", (CoreVehicles[vehicleid][vehWindowsDown]) ? ("Bajas") : ("Altas"));
			PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][38], str);
		}
		for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
		{
			static
			    tires[4];

			GetVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], tires[3]);

			if (tires[3] != 1111) {
			    UpdateVehicleDamageStatus(vehicleid, tires[0], tires[1], tires[2], 1111);
			}
			break;
		}
	}
	switch (PlayerData[playerid][pHouseLights])
	{
	    case 0:
	    {
	        if ((id = House_Inside(playerid)) != -1 && !HouseData[id][houseLights])
			{
	        	PlayerData[playerid][pHouseLights] = true;
	            PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][62]);
	        }
	        else PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][62]);
	    }
	    case 1:
	    {
	        if ((id = House_Inside(playerid)) == -1 || (id != -1 && HouseData[id][houseLights]))
			{
	            PlayerData[playerid][pHouseLights] = false;
                PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][62]);
	        }
	    }
	}
	if (PlayerData[playerid][pDrinking] && GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DRINK_SPRUNK && !IsPlayerInAnyVehicle(playerid))
	{
 		DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
 		PlayerData[playerid][pDrinking] = 0;
	}
	if ((id = Speed_Nearest(playerid)) != -1 && GetPlayerSpeed(playerid) > SpeedData[id][speedLimit] && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsEngineVehicle(vehicleid) && !PlayerData[playerid][pSpeedTime])
	{
	    if (!IsACruiser(vehicleid) && !IsABoat(vehicleid) && !IsAPlane(vehicleid) && !IsAHelicopter(vehicleid))
	    {
	 		new price = 100 + floatround(GetPlayerSpeed(playerid) - SpeedData[id][speedLimit]);

	   		format(str, sizeof(str), "Exceso de velocidad (%.0f/%.0f k/h)", GetPlayerSpeed(playerid), SpeedData[id][speedLimit]);
	        SetTimerEx("HidePlayerBox", 500, false, "dd", playerid, _:ShowPlayerBox(playerid, 0xFFFFFF66));

			if (Ticket_Add(playerid, price, str) != -1)
			{
	    		format(str, sizeof(str), "Has recibido una multa de ~r~%s~w~ por exceso de velocidad.", FormatNumber(price));
	     		ShowPlayerFooter(playerid, str);
			}
			PlayerData[playerid][pSpeedTime] = 5;
		}
	}
	if (Detector_Nearest(playerid) != -1)
	{
		if (IsPlayerArmed(playerid) && gettime() > PlayerData[playerid][pDetectorTime])
		{
			PlayerData[playerid][pDetectorTime] = gettime() + 5;

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** El detector de metales suena. (( %s ))", ReturnName(playerid, 0));
			PlayerPlaySoundEx(playerid, 43000);
		}
	}
	if ((keys[0] & KEY_FIRE) && GetPlayerWeapon(playerid) == 42)
	{
        static
	        Float:fX,
	        Float:fY,
	        Float:fZ;

	    for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	    {
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if ((IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 4.0, fX, fY, fZ)) && ++ g_aFireExtinguished[i] == 32)
   			{
   			    SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

      			DestroyDynamicObject(g_aFireObjects[i]);
	        	g_aFireExtinguished[i] = 0;
			}
		}
	}
	if ((keys[0] & KEY_FIRE) && (GetVehicleModel(GetPlayerVehicleID(playerid)) == 407 || GetVehicleModel(GetPlayerVehicleID(playerid)) == 544))
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ,
			Float:fVector[3],
			Float:fCamera[3];

	    GetPlayerCameraFrontVector(playerid, fVector[0], fVector[1], fVector[2]);
	    GetPlayerCameraPos(playerid, fCamera[0], fCamera[1], fCamera[2]);

	    for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	    {
			GetDynamicObjectPos(g_aFireObjects[i], fX, fY, fZ);

			if (IsValidDynamicObject(g_aFireObjects[i]) && IsPlayerInRangeOfPoint(playerid, 3050, fX, fY, fZ))
			{
				if (++g_aFireExtinguished[i] == 64 && DistanceCameraTargetToLocation(fCamera[0], fCamera[1], fCamera[2], fX, fY, fZ + 2.5, fVector[0], fVector[1], fVector[2]) < 12.0)
   				{
   			    	SetTimerEx("DestroyWater", 2000, false, "d", CreateDynamicObject(18744, fX, fY, fZ - 0.2, 0.0, 0.0, 0.0));

	      			DestroyDynamicObject(g_aFireObjects[i]);
		        	g_aFireExtinguished[i] = 0;
				}
		  	}
	    }
	}
	return 1;
}

public OnPlayerConnect(playerid)
{
	//Agregar jugadores en status
	connectedPlayers = connectedPlayers + 1;
	//Agregar tiempo subsidio
	

	if (IsPlayerNPC(playerid))
	    return 1;

	if ((GetTickCount() - PlayerData[playerid][pLeaveTime]) < 2000 && !strcmp(ReturnIP(playerid), PlayerData[playerid][pLeaveIP]))
	{
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s (%s) fue expulsado por posible hack de spawn.", ReturnName(playerid), ReturnIP(playerid));
	    Kick(playerid);
		return 1;
	}
	new
		str[128];

	ResetPlayerWeapons(playerid);
	SetPlayerArmedWeapon(playerid, 0);

	PreloadAnimations(playerid);

	if (g_ServerRestart) {
		TextDrawShowForPlayer(playerid, gServerTextdraws[3]);
	}
	for (new i = 0; i != MAX_PLAYER_ATTACHED_OBJECTS; i ++) {
	    RemovePlayerAttachedObject(playerid, i);
	}

	// Pizzeria Idlewood
	RemoveBuildingForPlayer(playerid, 5530, 2112.9375, -1797.0938, 19.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 1522, 2105.9219, -1807.2500, 12.5156, 0.25);
	RemoveBuildingForPlayer(playerid, 5418, 2112.9375, -1797.0938, 19.3359, 0.25);
	
	// Gas pumps
	RemoveBuildingForPlayer(playerid, 1676, 1941.6563, -1767.2891, 14.1406, 6000.00);
	RemoveBuildingForPlayer(playerid, 3465, 2120.8203, 914.7188, 11.2578, 6000.00);
	RemoveBuildingForPlayer(playerid, 1686, -1610.6172, -2721.0000, 47.9297, 6000.00);

	// LS mall
	RemoveBuildingForPlayer(playerid, 6130, 1117.5859, -1490.0078, 32.7188, 10.0);
	RemoveBuildingForPlayer(playerid, 6255, 1117.5859, -1490.0078, 32.7188, 10.0);
	RemoveBuildingForPlayer(playerid, 762, 1175.3594, -1420.1875, 19.8828, 0.25);
	RemoveBuildingForPlayer(playerid, 615, 1166.3516, -1417.6953, 13.9531, 0.25);

	// Sprunk machines
 	RemoveBuildingForPlayer(playerid, 1302, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1209, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 955, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 956, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1775, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1776, 0.0, 0.0, 0.0, 6000.0);
    RemoveBuildingForPlayer(playerid, 1977, 0.0, 0.0, 0.0, 6000.0);

	// Fire station
	RemoveBuildingForPlayer(playerid, 717, 1703.9922, -1150.1484, 23.0938, 0.25);
    RemoveBuildingForPlayer(playerid, 717, 1721.2344, -1150.1484, 23.0938, 0.25);
    RemoveBuildingForPlayer(playerid, 1300, 1715.4922, -1037.9766, 23.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 1294, 1734.9531, -1156.9922, 27.3516, 0.25);
    RemoveBuildingForPlayer(playerid, 717, 1738.7813, -1150.1484, 23.0938, 0.25);
    RemoveBuildingForPlayer(playerid, 1227, 1789.7734, -1116.0625, 23.8906, 0.25);
    RemoveBuildingForPlayer(playerid, 1227, 1789.9063, -1112.6406, 23.8906, 0.25);
    RemoveBuildingForPlayer(playerid, 717, 1726.0000, -1064.8828, 23.1563, 0.25);
    RemoveBuildingForPlayer(playerid, 4640, 1728.7891, -1065.0938, 24.5000, 0.25);
    RemoveBuildingForPlayer(playerid, 1300, 1730.6328, -1033.6719, 23.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 4598, 1737.2031, -1052.8203, 23.3359, 0.25);
    RemoveBuildingForPlayer(playerid, 4599, 1738.1875, -1044.9922, 22.9844, 0.25);
    RemoveBuildingForPlayer(playerid, 1300, 1747.8594, -1063.2969, 23.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 717, 1758.3828, -1066.3594, 23.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 1300, 1758.0781, -1064.5547, 23.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 717, 1765.1563, -1042.5234, 23.1797, 0.25);
    RemoveBuildingForPlayer(playerid, 1300, 1764.8594, -1040.7188, 23.2656, 0.25);
    RemoveBuildingForPlayer(playerid, 4641, 1788.5391, -1026.3516, 24.5000, 0.25);

	// Prison exterior
	RemoveBuildingForPlayer(playerid, 3682, 247.9297, 1461.8594, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 192.2734, 1456.1250, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3682, 199.7578, 1397.8828, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 166.7891, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 221.5703, 1374.9688, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 212.0781, 1426.0313, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 218.2578, 1467.5391, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1435.1953, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1410.5391, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1385.8906, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3291, 246.5625, 1361.2422, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3290, 190.9141, 1371.7734, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 183.7422, 1444.8672, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 222.5078, 1444.6953, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 221.1797, 1390.2969, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3288, 223.1797, 1421.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3683, 133.7422, 1459.6406, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3289, 207.5391, 1371.2422, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 220.6484, 1355.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 221.7031, 1404.5078, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 210.4141, 1444.8438, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3424, 262.5078, 1465.2031, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 220.6484, 1355.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1356.9922, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 190.9141, 1371.7734, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1392.1563, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 207.5391, 1371.2422, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1394.1328, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1392.1563, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 205.6484, 1394.1328, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 207.3594, 1390.5703, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1387.8516, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 199.7578, 1397.8828, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 221.5703, 1374.9688, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 221.1797, 1390.2969, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 203.9531, 1409.9141, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 199.3828, 1407.1172, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 204.6406, 1409.8516, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1404.2344, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 206.5078, 1400.6563, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 221.7031, 1404.5078, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 207.3594, 1409.0000, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3257, 223.1797, 1421.1875, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 212.0781, 1426.0313, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 166.7891, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1426.9141, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1361.2422, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1385.8906, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1410.5391, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 183.7422, 1444.8672, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 210.4141, 1444.8438, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3258, 222.5078, 1444.6953, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 16086, 232.2891, 1434.4844, 13.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 192.2734, 1456.1250, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 183.0391, 1455.7500, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3636, 133.7422, 1459.6406, 17.0938, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 196.0234, 1462.0156, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 198.0000, 1462.0156, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 196.0234, 1462.0156, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 180.2422, 1460.3203, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 180.3047, 1461.0078, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3256, 218.2578, 1467.5391, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 199.5859, 1463.7266, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 181.1563, 1463.7266, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 185.9219, 1462.8750, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 202.3047, 1462.8750, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 189.5000, 1462.8750, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3255, 246.5625, 1435.1953, 9.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1451.8281, 27.4922, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1458.1094, 23.7813, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 255.5313, 1454.5469, 19.1484, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1456.1328, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 253.8203, 1458.1094, 10.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 3259, 262.5078, 1465.2031, 9.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1468.2109, 18.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 3673, 247.9297, 1461.8594, 33.4141, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 254.6797, 1464.6328, 22.4688, 0.25);
	RemoveBuildingForPlayer(playerid, 3674, 247.5547, 1471.0938, 35.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 255.5313, 1472.9766, 19.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 252.8125, 1473.8281, 11.4063, 0.25);
	RemoveBuildingForPlayer(playerid, 3675, 252.1250, 1473.8906, 16.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 16089, 342.1250, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16090, 315.7734, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16091, 289.7422, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16087, 358.6797, 1430.4531, 11.6172, 0.25);
	RemoveBuildingForPlayer(playerid, 16088, 368.4297, 1431.0938, 5.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 16092, 394.1563, 1431.0938, 5.2734, 0.25);

	//      INTERIORES (CASAS)      //
	// Int 8 Ex
	RemoveBuildingForPlayer(playerid, 2288, 2373.3828, -1130.4531, 1051.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2368.6094, -1122.5078, 1052.0469, 0.25);
	// Int 9 Ex
	RemoveBuildingForPlayer(playerid, 2108, 2192.0547, -1219.5234, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2194.3359, -1219.5234, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2328, 2189.4531, -1210.1719, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2190.2188, -1209.3828, 1049.4453, 0.25);
	// Int 14 Ex
	RemoveBuildingForPlayer(playerid, 1703, 2322.2266, -1142.4766, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2323.9297, -1142.2578, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2326.5234, -1140.5703, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2323.4375, -1139.5469, 1049.4766, 0.25);
	RemoveBuildingForPlayer(playerid, 2257, 2320.4141, -1134.6328, 1053.8281, 0.25);
	RemoveBuildingForPlayer(playerid, 2254, 2328.1484, -1134.6172, 1054.0625, 0.25);


	RemoveBuildingForPlayer(playerid, 2865, 2499.5000, -1712.2188, 1014.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2821, 2500.9297, -1710.3516, 1014.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 1509, 2501.1953, -1710.6953, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 2277, 2494.7578, -1705.3281, 1018.8984, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 2500.8906, -1706.5703, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1512, 2501.1172, -1705.4766, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1509, 2501.1953, -1706.8594, 1015.0547, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 2501.2969, -1707.2344, 1014.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 1520, 2501.2969, -1707.3594, 1014.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2830, 2491.8359, -1702.9375, 1014.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2306, 2491.8359, -1701.2813, 1017.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2306, 2494.0156, -1701.3125, 1017.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2247, 2494.1172, -1700.3359, 1018.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 14478, 2494.4297, -1698.3359, 1014.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 1740, 2495.2891, -1704.4922, 1017.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2816, 2494.8047, -1702.5156, 1018.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 2272, 2496.2188, -1702.5234, 1018.5859, 0.25);
	RemoveBuildingForPlayer(playerid, 14477, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 14490, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 14491, 2501.0703, -1697.6172, 1016.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 2252, 2493.0469, -1697.1875, 1014.5703, 0.25);
	RemoveBuildingForPlayer(playerid, 2827, 2497.6563, -1697.0703, 1014.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 14489, 2490.4453, -1694.8672, 1015.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2028, 2491.3438, -1694.7656, 1013.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 232.6328, 1110.5938, 1079.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 232.6563, 1108.8281, 1079.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 234.6016, 1109.3828, 1079.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 235.6016, 1112.2422, 1079.9688, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 234.7188, 1117.4609, 1083.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 234.6172, 1119.2266, 1083.9766, 0.25);
	RemoveBuildingForPlayer(playerid, 2520, 237.3438, 1119.1641, 1083.9609, 0.25);
	RemoveBuildingForPlayer(playerid, 2522, 234.6953, 1120.1563, 1083.9297, 0.25);
	RemoveBuildingForPlayer(playerid, 14721, 240.4609, 1114.3906, 1083.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 26.1563, 1343.2969, 1083.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2251, 266.4531, 303.3672, 998.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 14867, 270.2813, 302.5547, 999.6797, 0.25);
	RemoveBuildingForPlayer(playerid, 1720, 272.9063, 304.7891, 998.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 14870, 273.1641, 303.1719, 1000.9141, 0.25);
	RemoveBuildingForPlayer(playerid, 2251, 273.9922, 303.3672, 998.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 14868, 274.1328, 304.5078, 1001.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 948, 266.5703, 306.4453, 998.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 14866, 270.1172, 307.6094, 998.7578, 0.25);
	RemoveBuildingForPlayer(playerid, 14869, 273.8125, 305.0156, 998.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2194.5469, -1226.4844, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2191.8750, -1225.3594, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2191.8750, -1223.5938, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2194.5469, -1221.7969, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2194.6953, -1223.1172, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2278, 2194.6406, -1221.5859, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2095, 2186.2109, -1219.1563, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2186.2500, -1220.3203, 1048.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2189.5000, -1220.3203, 1048.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2095, 2189.6250, -1219.1563, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2196.8828, -1219.9688, 1050.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2199.1875, -1219.0078, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2187.2422, -1215.6719, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2188.4453, -1217.1797, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2188.4688, -1213.0234, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2196.1484, -1214.6797, 1050.3125, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2197.2734, -1216.6250, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2197.2500, -1212.8516, 1048.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2198.5859, -1213.1484, 1050.2969, 0.25);
	RemoveBuildingForPlayer(playerid, 2828, 2198.5391, -1212.8359, 1048.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2199.9375, -1212.8516, 1048.5469, 0.25);
	RemoveBuildingForPlayer(playerid, 2832, 2181.5000, -1206.5234, 1049.0625, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2181.6250, -1207.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2132, 2181.6328, -1205.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2181.6250, -1206.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2131, 2184.6250, -1207.8594, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2183.5625, -1204.2344, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2184.6641, -1204.1719, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2299, 2187.6250, -1212.1563, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2826, 2186.4531, -1210.5625, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2185.7109, -1209.4063, 1048.7734, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2185.3984, -1209.9609, 1050.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2328, 2186.4375, -1210.1719, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2188.1563, -1209.1406, 1050.2422, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2185.8047, -1205.2656, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2187.8516, -1207.1250, 1050.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2069, 2188.2109, -1207.5703, 1048.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2189.8984, -1207.8438, 1050.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2192.0547, -1209.7109, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2108, 2194.3359, -1209.7109, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2826, 2190.5781, -1204.4297, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1702, 2191.5781, -1206.9375, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2857, 2193.0938, -1204.2813, 1048.5078, 0.25);
	RemoveBuildingForPlayer(playerid, 1818, 2193.1250, -1205.1328, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1702, 2196.1484, -1205.3828, 1048.0391, 0.25);
	RemoveBuildingForPlayer(playerid, 2260, 2196.7188, -1206.4922, 1050.1641, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2181.5625, -1203.5000, 1049.0703, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2181.6250, -1203.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2181.6250, -1201.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2181.6250, -1202.4219, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2184.6016, -1203.8906, 1048.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2185.8047, -1202.6094, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2121, 2183.3281, -1202.3750, 1048.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2131, 2183.3750, -1200.8672, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 15043, 2189.1641, -1203.6484, 1048.0313, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2190.5469, -1201.5625, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2244, 2188.0000, -1200.8516, 1048.2891, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2188.2656, -1200.8438, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2126, 2192.4063, -1200.5234, 1048.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2811, 2192.8359, -1200.0391, 1048.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 15040, 2193.2031, -1199.1094, 1050.1328, 0.25);
	RemoveBuildingForPlayer(playerid, 2100, 2195.2500, -1200.4844, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 2023, 2305.5547, -1212.6406, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1768, 2305.8281, -1210.3750, 1048.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2076, 2308.7578, -1209.7188, 1051.2500, 0.25);
	RemoveBuildingForPlayer(playerid, 1818, 2308.8438, -1208.9141, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1717, 2305.7813, -1207.8125, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 1764, 2310.9844, -1209.1797, 1048.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2100, 2311.5547, -1206.6719, 1048.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 15052, 2313.8438, -1212.7344, 1049.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 15056, 2313.8438, -1212.7344, 1049.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2312.9609, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1146.3125, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2315.4219, -1145.0703, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2086, 2314.2734, -1144.8984, 1050.0859, 0.25);
	RemoveBuildingForPlayer(playerid, 2123, 2314.2969, -1143.6250, 1050.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1144.0859, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2335.3594, -1144.0703, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2336.3516, -1144.0781, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2337.3203, -1144.0781, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1143.1016, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1143.0938, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 1741, 2312.6484, -1140.7891, 1053.3750, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1142.1094, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1141.1172, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1140.9688, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1142.1094, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1141.1094, 1049.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2338.4531, -1141.3672, 1053.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2270, 2340.2734, -1141.7109, 1054.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 15050, 2330.3281, -1140.3047, 1051.9063, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1140.1328, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1139.8672, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2334.4297, -1139.6250, 1049.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 15049, 2334.3281, -1139.5859, 1051.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1139.8750, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2337.3281, -1140.1172, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2090, 2309.5156, -1139.3438, 1053.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1139.1406, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2333.3281, -1138.8281, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2335.3672, -1138.8359, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2336.5391, -1138.7891, 1053.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1138.1563, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2337.3281, -1138.1328, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2319.2500, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2329.5000, -1137.8750, 1050.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1137.1641, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2334.4219, -1137.5859, 1050.3359, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2337.3125, -1137.1484, 1049.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2310.6641, -1136.3047, 1053.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1136.1719, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2331.3359, -1135.1875, 1049.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2335.2656, -1136.4063, 1054.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2336.5156, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2337.8047, -1135.3516, 1054.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1136.1641, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2337.3203, -1135.1797, 1049.6719, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2339.2031, -1135.0156, 1053.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 1731, 2363.5703, -1134.3359, 1052.3516, 0.25);
	RemoveBuildingForPlayer(playerid, 2077, 2357.5469, -1134.1875, 1050.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2361.2969, -1134.1484, 1049.8594, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2367.5625, -1135.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2367.5625, -1134.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2367.5625, -1133.3906, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2077, 2357.5469, -1131.5234, 1050.6875, 0.25);
	RemoveBuildingForPlayer(playerid, 2271, 2357.8594, -1132.8828, 1051.2813, 0.25);
	RemoveBuildingForPlayer(playerid, 2087, 2360.2969, -1129.9766, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2103, 2360.8281, -1130.1406, 1051.0156, 0.25);
	RemoveBuildingForPlayer(playerid, 2279, 2369.8125, -1135.4375, 1052.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2370.5781, -1134.0313, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2371.7500, -1133.5938, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2278, 2372.1875, -1135.4297, 1052.1250, 0.25);
	RemoveBuildingForPlayer(playerid, 2075, 2370.8281, -1132.8750, 1053.4609, 0.25);
	RemoveBuildingForPlayer(playerid, 2030, 2371.2266, -1132.9219, 1050.2734, 0.25);
	RemoveBuildingForPlayer(playerid, 2812, 2371.2969, -1133.0156, 1050.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2371.7500, -1131.8594, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2125, 2370.5781, -1131.8594, 1050.1797, 0.25);
	RemoveBuildingForPlayer(playerid, 2141, 2374.5000, -1135.3906, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2132, 2374.5000, -1131.3906, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2374.5078, -1134.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2134, 2374.5078, -1133.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2339, 2374.5078, -1130.3828, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 2225, 2369.1797, -1125.8047, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2260, 2369.7188, -1123.8594, 1052.0781, 0.25);
	RemoveBuildingForPlayer(playerid, 2331, 2367.3672, -1123.1563, 1050.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 2302, 2364.5547, -1122.9688, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2333, 2367.5703, -1122.1484, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2255, 2361.5703, -1122.1484, 1052.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1734, 2364.8828, -1122.0469, 1053.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2811, 2372.7031, -1128.9141, 1049.8203, 0.25);
	RemoveBuildingForPlayer(playerid, 15061, 2371.6094, -1128.1875, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 15062, 2371.6094, -1128.1875, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2370.1250, -1125.2344, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2370.3906, -1124.4375, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2372.0938, -1124.2188, 1049.8516, 0.25);
	RemoveBuildingForPlayer(playerid, 2828, 2374.2578, -1129.2578, 1050.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2084, 2374.4688, -1129.2109, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2374.6797, -1122.5313, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2281, 2375.6641, -1128.1016, 1051.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2374.9766, -1125.2344, 1049.8672, 0.25);
	RemoveBuildingForPlayer(playerid, 2280, 2375.6484, -1122.3828, 1051.9922, 0.25);
	RemoveBuildingForPlayer(playerid, 15035, 2205.9375, -1073.9922, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2259, 2316.3125, -1024.5156, 1051.3203, 0.25);
	RemoveBuildingForPlayer(playerid, 2242, 2321.4609, -1019.7500, 1049.3672, 0.25);
	RemoveBuildingForPlayer(playerid, 2078, 2318.2578, -1017.6016, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2203, 2312.1641, -1014.5547, 1050.4219, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1014.5547, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2830, 2312.1406, -1013.6719, 1050.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1013.5625, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2241, 2322.4453, -1026.4453, 1050.5000, 0.25);
	RemoveBuildingForPlayer(playerid, 2244, 2322.3594, -1019.8906, 1049.4844, 0.25);
	RemoveBuildingForPlayer(playerid, 2112, 2322.6563, -1026.4219, 1049.5938, 0.25);
	RemoveBuildingForPlayer(playerid, 2105, 2323.0156, -1026.8594, 1050.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 2224, 2322.6953, -1019.0859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2261, 2322.4609, -1015.4297, 1051.1563, 0.25);
	RemoveBuildingForPlayer(playerid, 2165, 2323.3750, -1015.8984, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 1714, 2323.7500, -1014.8594, 1053.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 1755, 2325.2734, -1025.0625, 1049.1406, 0.25);
	RemoveBuildingForPlayer(playerid, 2229, 2325.6406, -1017.2813, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2107, 2326.0703, -1016.6719, 1050.6641, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2325.5313, -1015.0938, 1053.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 15060, 2326.6641, -1022.1953, 1049.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2104, 2327.1719, -1017.2109, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2088, 2327.4766, -1015.0938, 1053.6953, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2312.3750, -1012.5703, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2303, 2312.3594, -1011.5859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2313.8906, -1011.5781, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2314.9844, -1012.6797, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2115, 2314.9922, -1011.4063, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2832, 2315.0547, -1011.2813, 1050.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2315.9297, -1011.5859, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2831, 2312.1875, -1010.6563, 1050.2656, 0.25);
	RemoveBuildingForPlayer(playerid, 2136, 2312.3594, -1010.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2313.8906, -1010.5391, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2315.9297, -1010.5469, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1009.5938, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2079, 2314.9844, -1009.2969, 1049.8359, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2324.3359, -1012.2188, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2333, 2323.4922, -1009.7266, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2323.7891, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2324.7813, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2331, 2323.4453, -1009.2813, 1053.9531, 0.25);
	RemoveBuildingForPlayer(playerid, 2298, 2325.0625, -1010.7188, 1053.7031, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2325.7813, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 1822, 2326.6250, -1012.2188, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2326.7734, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2312.3672, -1008.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2138, 2314.3281, -1007.6328, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2305, 2312.3672, -1007.6250, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2135, 2313.3359, -1007.6250, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1008.6016, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1735, 2318.8047, -1007.9688, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2139, 2317.3438, -1007.6094, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2194, 2322.3594, -1008.4453, 1054.9453, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2325.0391, -1006.9453, 1054.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2528, 2321.2656, -1006.0313, 1053.7266, 0.25);
	RemoveBuildingForPlayer(playerid, 2249, 2323.0156, -1005.8828, 1054.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2526, 2318.3750, -1003.0703, 1053.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 2523, 2322.2500, -1003.0703, 1053.7188, 0.25);
	RemoveBuildingForPlayer(playerid, 2227, 2370.2344, -1120.5859, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1742, 2366.6953, -1119.2500, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1703, 2371.6016, -1121.5078, 1049.8438, 0.25);
	RemoveBuildingForPlayer(playerid, 2227, 2375.5859, -1120.9922, 1049.8750, 0.25);
	RemoveBuildingForPlayer(playerid, 1760, 2327.8047, -1021.0313, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 2295, 2328.7891, -1015.8281, 1049.1953, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2328.8359, -1023.6016, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2329.0469, -1022.6953, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2229, 2329.0703, -1017.2813, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 2295, 2329.2578, -1015.8281, 1053.7891, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2327.7578, -1009.5938, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2106, 2327.7266, -1006.9453, 1054.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1011.0078, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1011.9922, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2291, 2329.1875, -1010.0234, 1049.2109, 0.25);
	RemoveBuildingForPlayer(playerid, 2285, 2328.9766, -1007.6406, 1051.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2869, 2329.2891, -1025.8672, 1049.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 2829, 2329.4688, -1023.6250, 1050.0078, 0.25);
	RemoveBuildingForPlayer(playerid, 2868, 2329.7656, -1023.0156, 1050.0000, 0.25);
	RemoveBuildingForPlayer(playerid, 2117, 2329.6953, -1022.5859, 1049.2031, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2330.3672, -1023.5156, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1739, 2330.3672, -1022.6875, 1050.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 2243, 2329.2969, -1018.0313, 1049.3984, 0.25);
	RemoveBuildingForPlayer(playerid, 2096, 2330.2266, -1012.9688, 1053.7109, 0.25);
	RemoveBuildingForPlayer(playerid, 2240, 2330.7422, -1010.7813, 1054.2578, 0.25);
	RemoveBuildingForPlayer(playerid, 2096, 2330.2266, -1009.1875, 1053.7109, 0.25);

	//CNN
	RemoveBuildingForPlayer(playerid, 4025, 1777.8359, -1773.9063, 12.5234, 0.25);
	RemoveBuildingForPlayer(playerid, 4215, 1777.5547, -1775.0391, 36.7500, 0.25);
	RemoveBuildingForPlayer(playerid, 4019, 1777.8359, -1773.9063, 12.5234, 0.25);
	//Mecanicos
	RemoveBuildingForPlayer(playerid, 4606, 1825.0000, -1413.9297, 12.5547, 0.25);
	RemoveBuildingForPlayer(playerid, 4594, 1825.0000, -1413.9297, 12.5547, 0.25);
	//LSPD
	RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1709.6406, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1689.9844, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1547.5703, -1661.0313, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 620, 1541.4531, -1642.0313, 13.0469, 0.25);
	RemoveBuildingForPlayer(playerid, 647, 1541.7422, -1638.9141, 14.4375, 0.25);
	
	////////gasolineras exterior by macia espinoza///////////////////////////
	RemoveBuildingForPlayer(playerid, 4194, 1360.3828, -1840.6172, 26.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 4226, 1359.2813, -1796.4688, 24.3438, 0.25);
	RemoveBuildingForPlayer(playerid, 4193, 1360.3828, -1840.6172, 26.8047, 0.25);
	RemoveBuildingForPlayer(playerid, 4023, 1359.2813, -1796.4688, 24.3438, 0.25);
	 // Gasolinera St.Maria Beach - Grotti
	RemoveBuildingForPlayer(playerid, 1268, 218.2266, -1434.5625, 24.6406, 0.25);
	RemoveBuildingForPlayer(playerid, 6350, 247.3906, -1454.8281, 37.7344, 0.25);
	RemoveBuildingForPlayer(playerid, 1259, 218.2266, -1434.5625, 24.6406, 0.25);
	// Gasolinera Ganton
	RemoveBuildingForPlayer(playerid, 5224, 2385.1875, -1906.5156, 18.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1527, 2392.3594, -1914.5703, 14.7422, 0.25);
	RemoveBuildingForPlayer(playerid, 5168, 2385.1875, -1906.5156, 18.4453, 0.25);
	RemoveBuildingForPlayer(playerid, 1522, 2396.3047, -1899.6172, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1522, 2399.3281, -1899.6172, 12.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 1687, 2398.3906, -1910.9609, 21.2266, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 2401.9141, -1901.5625, 13.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 2401.9141, -1905.1094, 13.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 643, 2401.9141, -1908.4531, 13.0234, 0.25);
	//Mercado Negro
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1354.9453, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1349.6953, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1344.4453, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1418.4219, -1357.2344, 12.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1422.2344, -1357.2891, 13.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 1265, 1426.7344, -1357.1797, 13.0234, 0.25);
	RemoveBuildingForPlayer(playerid, 4711, 1392.1875, -1336.8047, 15.9844, 0.25);
	RemoveBuildingForPlayer(playerid, 1617, 1403.3750, -1299.2734, 17.1094, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1339.1953, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1333.9453, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1321.3516, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1316.1016, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1310.8516, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1411, 1417.3125, -1305.6016, 14.1172, 0.25);
	RemoveBuildingForPlayer(playerid, 1617, 1417.0156, -1282.8906, 16.8906, 0.25);
	//Burger Shot Bomberos
	RemoveBuildingForPlayer(playerid, 4585, 1451.9922, -1067.3984, 112.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 4626, 1451.9922, -1067.3984, 112.5391, 0.25);
	RemoveBuildingForPlayer(playerid, 4743, 1451.9922, -1067.3984, 112.5391, 0.25);
	//Fin Removes
	CancelSelectTextDraw(playerid);

	GetPlayerIp(playerid, PlayerData[playerid][pIP], 16);
	GetPlayerName(playerid, PlayerData[playerid][pUsername], MAX_PLAYER_NAME + 1);

	ResetStatistics(playerid);
	CreateTextDraws(playerid);

	format(str, sizeof(str), "SELECT * FROM `blacklist` WHERE `Username` = '%s' OR `IP` = '%s'", ReturnName(playerid), PlayerData[playerid][pIP]);
	mysql_tquery(g_iHandle, str, "OnQueryFinished", "dd", playerid, THREAD_BAN_LOOKUP);
	return 1;
}

public OnPlayerDisconnect(playerid, reason)
{
	//Agregar jugadores en status
	connectedPlayers = connectedPlayers - 1;
	PlayerData[playerid][pLeaveTime] = GetTickCount();

	format(PlayerData[playerid][pLeaveIP], 16, PlayerData[playerid][pIP]);

 	TerminateConnection(playerid);
	return 1;
}

Server_Save()
{
	new
	    File:file = fopen("server.ini", io_write),
	    str[128];

	format(str, sizeof(str), "TaxMoney = %d\n", g_TaxVault);
	return (fwrite(file, str), fclose(file));
}

Server_Load()
{
	new File:file = fopen("server.ini", io_read);

	if (file) {
		g_TaxVault = file_parse_int(file, "TaxMoney");

		fclose(file);
	}
	return 1;
}

public OnGameModeInit()
{
	static
	    arrVirtualWorlds[2000],
		id = -1;

	WeatherRotator();

	SQL_Connect();
	ManualVehicleEngineAndLights();
	new rcon[80];
	format(rcon, sizeof(rcon), "hostname %s", SERVER_NAME);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "weburl %s", SERVER_URL);
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "mapname Los Santos");
	SendRconCommand(rcon);
	format(rcon, sizeof(rcon), "language Español");
	SendRconCommand(rcon);
	SetGameModeText(SERVER_REVISION);
	UsePlayerPedAnims();
    Streamer_SetVisibleItems(STREAMER_TYPE_OBJECT, 950);
	if (mysql_errno(g_iHandle) != 0)
	    return 0;
	
	Server_Load();
    mysql_tquery(g_iHandle, "SELECT * FROM `billboards`", "Billboard_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `houses`", "House_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `businesses`", "Business_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `dropped`", "Dropped_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `entrances`", "Entrance_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `cars`", "Car_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `jobs`", "Job_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `crates`", "Crate_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `plants`", "Plant_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `factions`", "Faction_Load", "");
	mysql_tquery(g_iHandle, "SELECT * FROM `arrestpoints`", "Arrest_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `gates`", "Gate_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `backpacks`", "Backpack_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `impoundlots`", "Impound_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `atm`", "ATM_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `garbage`", "Garbage_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `vendors`", "Vendor_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `gunracks`", "Rack_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `speedcameras`", "Speed_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `graffiti`", "Graffiti_Load", "");
    mysql_tquery(g_iHandle, "SELECT * FROM `detectors`", "Detector_Load", "");

    SetModelPreviewRotation(18875, 90.0, 180.0, 0.0);
    SetModelPreviewRotation(2703, -105.0, 0.0, -15.0);
    SetModelPreviewRotation(2702, 90.0, 90.0, 0.0);
    SetModelPreviewRotation(2814, -90.0, 0.0, -90.0);
    SetModelPreviewRotation(2768, -15.0, 0.0, -160.0);
    SetModelPreviewRotation(19142, -20.0, -90.0, 0.0);
    SetModelPreviewRotation(1581, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(2958, -10.0, -15.0, 0.0);
    SetModelPreviewRotation(1575, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(1577, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(1578, 0.0, 0.0, 180.0);
    SetModelPreviewRotation(18634, 90.0, 90.0, 0.0);
    SetModelPreviewRotation(2043, 0.0, 0.0, 90.0);
    SetModelPreviewRotation(1484, -15.0, 30.0, 0.0);
    SetModelPreviewRotation(2226, 0.0, 0.0, 180.0);

	for (new i = 0; i < sizeof(arrVirtualWorlds); i ++) {
	    arrVirtualWorlds[i] = i + 7000;
	}
	CreateDynamicPickup(1581, 23, -2033.0439, -117.4885, 1035.1719);
	CreateDynamic3DTextLabel("[Prueba de Manejo]\n{FFFFFF}Escribe /examenmanejo para iniciar la prueba.", COLOR_DARKBLUE, -2033.0439, -117.4885, 1035.1719, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

	CreateDynamicPickup(1239, 23, 1260.3976, -20.0215, 1001.0234);
	CreateDynamic3DTextLabel("[Descarga de Carga]\n{FFFFFF}Escribe /cargarcaja para cargar el camion.", COLOR_YELLOW, 1260.3976, -20.0215, 1001.0234, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    CreateDynamicPickupEx(1239, 23, 361.2687, 171.5613, 1008.3828, 100.0, arrVirtualWorlds);
	CreateDynamic3DTextLabel("[Multas]\n{FFFFFF}Escribe /multas para pagar tus tickets.", COLOR_DARKBLUE, 361.2687, 171.5613, 1008.3828, 10.0);

	CreateDynamicPickupEx(1239, 23, 361.8299, 173.5183, 1008.3828, 100.0, arrVirtualWorlds);
	CreateDynamic3DTextLabel("[Cambio de Nombre]\n{FFFFFF}Escribe /cambiarnombre para cambiar tu nombre.", COLOR_DARKBLUE, 361.8299, 173.5183, 1008.3828, 10.0);

	CreateDynamicPickupEx(1239, 23, 361.1653, 175.8127, 1008.3828, 100.0, arrVirtualWorlds);
	CreateDynamic3DTextLabel("[Embargos]\n{FFFFFF}Escribe /liberarvehiculo.", COLOR_DARKBLUE, 361.1653, 175.8127, 1008.3828, 10.0);

	CreateDynamicPickup(1559, 23, 272.2939, 1388.8876, 11.8342);
	CreateDynamic3DTextLabel("Prision de San Andreas", COLOR_DARKBLUE, 272.2939, 1388.8876, 11.1342, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1);

    CreateDynamicPickup(1559, 23, 1211.1923, -1354.3439, 797.4456);
	CreateDynamic3DTextLabel("Patio de Prision", COLOR_DARKBLUE, 1211.1923, -1354.3439, 796.7456, 10.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, PRISON_WORLD, 5);

	for (new i = 0; i < sizeof(arrBoothPositions); i ++) {
	    CreateDynamic3DTextLabel("[Campo de Tiro]\n{FFFFFF}Pulsa 'F' para usar esta cabina.", COLOR_DARKBLUE, arrBoothPositions[i][0], arrBoothPositions[i][1], arrBoothPositions[i][2], 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, -1, 7);
	}
	for (new i = 0; i < sizeof(arrHospitalSpawns); i ++) {
	    CreateDynamicMapIcon(arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2], 22, 0);

		CreatePickup(1559, 23, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2] + 0.7);
		Create3DTextLabel("General Hospital", COLOR_DARKBLUE, arrHospitalSpawns[i][0], arrHospitalSpawns[i][1], arrHospitalSpawns[i][2], 15.0, 0);

		CreatePickup(1240, 23, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2]);
		Create3DTextLabel("[Entrega del Hospital]\n{FFFFFF}/dejarpaciente para dejar al paciente.", COLOR_DARKBLUE, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2], 15.0, 0);
	}
	// Textdraws
	gServerTextdraws[0] = TextDrawCreate(547.000000, 23.000000, "12:00 PM");
	TextDrawBackgroundColor(gServerTextdraws[0], 255);
	TextDrawFont(gServerTextdraws[0], 1);
	TextDrawLetterSize(gServerTextdraws[0], 0.360000, 1.499999);
	TextDrawColor(gServerTextdraws[0], -1);
	TextDrawSetOutline(gServerTextdraws[0], 1);
	TextDrawSetProportional(gServerTextdraws[0], 1);
	TextDrawSetSelectable(gServerTextdraws[0], 0);

	gServerTextdraws[1] = TextDrawCreate(500.000000, 6.000000, "~g~Green ~w~Latin ~r~Roleplay");
	TextDrawBackgroundColor(gServerTextdraws[1], 255);
	TextDrawFont(gServerTextdraws[1], 1);
	TextDrawLetterSize(gServerTextdraws[1], 0.260000, 1.200000);
	TextDrawColor(gServerTextdraws[1], -1);
	TextDrawSetOutline(gServerTextdraws[1], 1);
	TextDrawSetProportional(gServerTextdraws[1], 1);
	TextDrawSetSelectable(gServerTextdraws[1], 0);

    gServerTextdraws[2] = TextDrawCreate(11.000000, 430.000000, "~r~Estas herido!~w~ /llamar 911 o /aceptar muerte.");
	TextDrawBackgroundColor(gServerTextdraws[2], 255);
	TextDrawFont(gServerTextdraws[2], 1);
	TextDrawLetterSize(gServerTextdraws[2], 0.300000, 1.100000);
	TextDrawColor(gServerTextdraws[2], -1);
	TextDrawSetOutline(gServerTextdraws[2], 1);
	TextDrawSetProportional(gServerTextdraws[2], 1);
	TextDrawSetSelectable(gServerTextdraws[2], 0);

    gServerTextdraws[3] = TextDrawCreate(237.000000, 409.000000, "~r~Reinicio del Server:~w~ 00:00");
	TextDrawBackgroundColor(gServerTextdraws[3], 255);
	TextDrawFont(gServerTextdraws[3], 1);
	TextDrawLetterSize(gServerTextdraws[3], 0.480000, 1.300000);
	TextDrawColor(gServerTextdraws[3], -1);
	TextDrawSetOutline(gServerTextdraws[3], 1);
	TextDrawSetProportional(gServerTextdraws[3], 1);
	TextDrawSetSelectable(gServerTextdraws[3], 0);

    // School
 	CreateDynamicObject(19379, 1297.65, 156.01, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1287.15, 156.02, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1276.66, 156.02, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1266.16, 156.00, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1266.17, 146.38, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1276.69, 146.40, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1287.17, 146.40, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(14411, 1294.47, 147.92, 1071.79,   0.00, 0.00, -180.06);
    CreateDynamicObject(19445, 1292.36, 146.35, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1277.92, 141.69, 1073.22,   0.00, 0.00, 89.70);
    CreateDynamicObject(19445, 1268.32, 141.73, 1073.22,   0.00, 0.00, 89.70);
    CreateDynamicObject(19379, 1255.67, 146.42, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19445, 1258.70, 141.77, 1073.22,   0.00, 0.00, 89.70);
    CreateDynamicObject(19379, 1255.66, 156.07, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19445, 1301.23, 151.19, 1073.22,   0.00, 0.00, 89.70);
    CreateDynamicObject(19445, 1296.49, 146.42, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1298.08, 160.75, 1073.22,   0.00, 0.00, 89.70);
    CreateDynamicObject(19445, 1302.79, 155.89, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1253.92, 146.50, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1253.90, 156.06, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1288.66, 160.74, 1073.22,   0.00, 0.00, 90.36);
    CreateDynamicObject(19445, 1269.52, 160.62, 1073.22,   0.00, 0.00, 90.36);
    CreateDynamicObject(19445, 1259.96, 160.54, 1073.22,   0.00, 0.00, 90.36);
    CreateDynamicObject(19445, 1250.35, 160.49, 1073.22,   0.00, 0.00, 90.36);
    CreateDynamicObject(19445, 1279.52, 146.28, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1287.58, 151.04, 1073.22,   0.00, 0.00, 90.36);
    CreateDynamicObject(19383, 1281.20, 151.01, 1073.22,   0.00, 0.00, 89.88);
    CreateDynamicObject(1491, 1280.42, 151.02, 1071.48,   0.00, 0.00, 0.00);
    CreateDynamicObject(18070, 1289.57, 157.02, 1072.00,   0.00, 0.00, 89.88);
    CreateDynamicObject(1569, 1302.70, 158.17, 1071.49,   0.00, 0.00, -89.88);
    CreateDynamicObject(1569, 1302.70, 155.18, 1071.49,   0.00, 0.00, 89.88);
    CreateDynamicObject(2412, 1302.14, 158.73, 1071.49,   0.00, 0.00, 88.56);
    CreateDynamicObject(2412, 1302.18, 155.36, 1071.49,   0.00, 0.00, 88.56);
    CreateDynamicObject(1713, 1299.84, 151.87, 1071.49,   0.00, 0.00, 179.76);
    CreateDynamicObject(2894, 1291.19, 159.61, 1072.51,   0.00, 0.00, -61.74);
    CreateDynamicObject(2190, 1291.58, 158.46, 1072.51,   0.00, 0.00, -91.62);
    CreateDynamicObject(1713, 1297.86, 160.10, 1071.49,   0.00, 0.00, 360.72);
    CreateDynamicObject(19383, 1277.85, 151.00, 1073.21,   0.00, 0.00, 89.88);
    CreateDynamicObject(19353, 1274.67, 151.01, 1073.22,   0.00, 0.00, 89.76);
    CreateDynamicObject(19445, 1273.17, 146.27, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(1491, 1277.05, 151.04, 1071.48,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1273.16, 159.11, 1073.20,   0.00, 0.00, 0.00);
    CreateDynamicObject(19383, 1273.16, 152.70, 1073.20,   0.00, 0.00, -0.06);
    CreateDynamicObject(1491, 1273.19, 151.95, 1071.43,   0.00, 0.00, 89.52);
    CreateDynamicObject(14782, 1276.45, 160.22, 1072.46,   0.00, 0.00, 0.00);
    CreateDynamicObject(14782, 1273.58, 158.91, 1072.46,   0.00, 0.00, 91.68);
    CreateDynamicObject(3496, 1262.90, 141.18, 1070.63,   0.00, 0.00, 0.00);
    CreateDynamicObject(3496, 1265.67, 161.13, 1070.56,   0.00, 0.00, 177.66);
    CreateDynamicObject(2114, 1266.64, 160.20, 1071.60,   0.00, 0.00, 0.00);
    CreateDynamicObject(2114, 1263.90, 155.37, 1071.60,   0.00, 0.00, 0.00);
    CreateDynamicObject(2628, 1255.00, 159.49, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2628, 1256.70, 159.60, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2628, 1254.87, 157.40, 1071.51,   0.00, 0.00, 90.42);
    CreateDynamicObject(2628, 1254.83, 155.80, 1071.49,   0.00, 0.00, 90.42);
    CreateDynamicObject(2627, 1254.88, 143.31, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2627, 1256.30, 143.33, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2627, 1257.65, 143.39, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2627, 1254.90, 146.44, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2627, 1256.29, 146.43, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2627, 1257.64, 146.44, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(14782, 1272.74, 146.22, 1072.45,   0.00, 0.00, -90.24);
    CreateDynamicObject(2630, 1272.20, 159.11, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2630, 1270.72, 159.01, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2630, 1269.50, 158.93, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(3034, 1254.05, 151.48, 1073.27,   0.00, 0.00, 90.60);
    CreateDynamicObject(3034, 1267.94, 141.89, 1073.27,   0.00, 0.00, 179.52);
    CreateDynamicObject(19379, 1266.17, 146.38, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(1985, 1269.86, 144.73, 1074.80,   0.00, 0.00, 0.00);
    CreateDynamicObject(1985, 1267.58, 144.48, 1074.80,   0.00, 0.00, 0.00);
    CreateDynamicObject(19379, 1255.69, 146.39, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1255.68, 156.01, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1266.15, 156.00, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1276.61, 155.99, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1276.64, 146.39, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1287.10, 155.94, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1287.14, 146.32, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1297.58, 155.95, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19445, 1296.49, 146.42, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1291.78, 141.54, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(19445, 1291.80, 151.33, 1076.72,   0.00, 0.00, 89.10);
    CreateDynamicObject(19445, 1292.37, 150.84, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1282.14, 132.21, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(19445, 1272.52, 141.49, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(19445, 1287.06, 156.14, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1282.52, 160.64, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(19445, 1272.89, 160.63, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(19445, 1263.29, 160.60, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(19445, 1258.60, 155.74, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1258.61, 146.14, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1262.90, 141.48, 1076.72,   0.00, 0.00, 90.06);
    CreateDynamicObject(2417, 1289.40, 150.70, 1074.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(2416, 1290.57, 150.62, 1074.97,   0.00, 0.00, 1.44);
    CreateDynamicObject(2418, 1291.58, 148.98, 1074.97,   0.00, 0.00, -89.28);
    CreateDynamicObject(2451, 1287.45, 150.61, 1074.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(2419, 1289.94, 146.92, 1074.97,   0.00, 0.00, 179.04);
    CreateDynamicObject(19445, 1287.61, 146.19, 1076.72,   0.00, 0.00, 89.10);
    CreateDynamicObject(2415, 1287.50, 147.03, 1074.97,   0.00, 0.00, 179.10);
    CreateDynamicObject(2415, 1286.63, 147.06, 1074.97,   0.00, 0.00, 179.10);
    CreateDynamicObject(2429, 1287.18, 152.67, 1076.02,   0.00, 0.00, -92.40);
    CreateDynamicObject(1984, 1283.10, 154.25, 1074.97,   0.00, 0.00, 90.42);
    CreateDynamicObject(2421, 1285.25, 146.37, 1076.67,   0.00, 0.00, 177.90);
    CreateDynamicObject(2367, 1283.13, 151.21, 1074.97,   0.00, 0.00, -89.34);
    CreateDynamicObject(19353, 1282.84, 147.90, 1076.71,   0.00, 0.00, 181.50);
    CreateDynamicObject(2367, 1283.12, 153.33, 1074.97,   0.00, 0.00, -89.34);
    CreateDynamicObject(2418, 1286.30, 154.69, 1074.97,   0.00, 0.00, -89.28);
    CreateDynamicObject(2426, 1292.04, 148.27, 1075.92,   0.00, 0.00, -89.76);
    CreateDynamicObject(1513, 1283.12, 154.47, 1076.23,   0.00, 0.00, -135.12);
    CreateDynamicObject(2500, 1286.87, 154.01, 1075.93,   0.00, 0.00, -90.00);
    CreateDynamicObject(1330, 1286.50, 151.97, 1075.43,   0.00, 0.00, 0.00);
    CreateDynamicObject(2452, 1285.58, 160.10, 1074.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(2665, 1286.88, 155.90, 1077.35,   0.00, 0.00, -89.46);
    CreateDynamicObject(2718, 1282.65, 148.45, 1077.52,   0.00, 0.00, -89.40);
    CreateDynamicObject(2453, 1288.85, 146.84, 1076.29,   0.00, 0.00, 15.60);
    CreateDynamicObject(1775, 1259.41, 159.70, 1076.08,   0.00, 0.00, 43.02);
    CreateDynamicObject(2964, 1270.52, 157.47, 1074.97,   0.00, 0.00, 47.40);
    CreateDynamicObject(14657, 1270.38, 148.55, 1075.59,   0.00, 0.00, -89.82);
    CreateDynamicObject(14657, 1270.49, 143.34, 1075.59,   0.00, 0.00, -89.82);
    CreateDynamicObject(2964, 1274.45, 157.30, 1074.97,   0.00, 0.00, 47.40);
    CreateDynamicObject(1713, 1262.12, 159.93, 1074.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(1713, 1259.50, 147.51, 1074.97,   0.00, 0.00, 0.00);
    CreateDynamicObject(1713, 1261.17, 142.11, 1074.97,   0.00, 0.00, 180.18);
    CreateDynamicObject(1713, 1262.88, 145.34, 1074.97,   0.00, 0.00, 271.86);
    CreateDynamicObject(19379, 1276.61, 155.99, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1286.98, 155.97, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1291.31, 146.46, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1280.85, 146.36, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1270.38, 146.34, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1259.88, 146.35, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1266.10, 156.00, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19379, 1255.61, 155.97, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(2690, 1282.64, 148.74, 1076.03,   0.00, 0.00, -91.20);
    CreateDynamicObject(2961, 1282.78, 146.61, 1076.65,   0.00, 0.00, 88.14);
    CreateDynamicObject(2690, 1291.64, 146.62, 1075.35,   0.00, 0.00, -116.88);
    CreateDynamicObject(19383, 1282.60, 158.31, 1076.76,   0.00, 0.00, 2.46);
    CreateDynamicObject(19383, 1282.46, 161.49, 1076.76,   0.00, 0.00, 2.46);
    CreateDynamicObject(1523, 1282.56, 159.09, 1074.98,   0.00, 0.00, -86.94);
    CreateDynamicObject(1827, 1259.94, 144.57, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(19172, 1258.77, 150.32, 1077.29,   0.00, 0.00, 90.24);
    CreateDynamicObject(19175, 1258.72, 155.68, 1077.24,   0.00, 0.00, 90.06);
    CreateDynamicObject(19174, 1258.82, 144.56, 1077.31,   0.00, 0.00, 89.76);
    CreateDynamicObject(2010, 1260.83, 159.88, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(2010, 1295.68, 142.21, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(3034, 1274.91, 160.51, 1077.03,   0.00, 0.00, 0.00);
    CreateDynamicObject(3034, 1264.68, 160.49, 1077.03,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1276.29, 155.02, 1079.43,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1265.76, 155.06, 1079.43,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1285.89, 155.87, 1079.43,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1290.00, 148.54, 1079.43,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1289.98, 148.54, 1079.43,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1297.16, 157.76, 1075.63,   0.00, 0.00, 88.02);
    CreateDynamicObject(2631, 1270.91, 156.13, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2631, 1268.41, 144.22, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2631, 1268.42, 146.44, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2915, 1272.29, 156.78, 1071.67,   0.00, 0.00, 0.00);
    CreateDynamicObject(2915, 1271.80, 156.43, 1071.67,   0.00, 0.00, 0.00);
    CreateDynamicObject(2915, 1270.30, 156.30, 1071.67,   0.00, 0.00, 30.00);
    CreateDynamicObject(2915, 1269.87, 143.57, 1071.66,   0.00, 0.00, 0.00);
    CreateDynamicObject(2844, 1271.48, 142.63, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(3077, 1277.33, 142.50, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2165, 1273.85, 145.17, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(1671, 1274.57, 143.00, 1071.93,   0.00, 0.00, 145.50);
    CreateDynamicObject(1721, 1279.06, 146.66, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1278.31, 146.67, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1277.60, 146.65, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1276.96, 146.65, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1276.34, 146.63, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1279.09, 147.97, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1278.43, 147.96, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1277.71, 147.95, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1277.01, 147.91, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1276.35, 147.90, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1279.10, 149.35, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1278.44, 149.38, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1275.31, 149.48, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1274.58, 149.50, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(1721, 1273.79, 149.59, 1071.49,   0.00, 0.00, 178.56);
    CreateDynamicObject(19379, 1281.96, 136.76, 1074.89,   0.00, 90.00, 0.00);
    CreateDynamicObject(19445, 1287.03, 136.81, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1277.26, 136.75, 1076.72,   0.00, 0.00, 0.00);
    CreateDynamicObject(19379, 1281.93, 136.87, 1078.39,   0.00, 90.00, 0.00);
    CreateDynamicObject(19445, 1278.99, 141.52, 1076.71,   0.00, 0.00, 90.06);
    CreateDynamicObject(19383, 1285.37, 141.52, 1076.70,   0.00, 0.00, 89.88);
    CreateDynamicObject(1491, 1284.58, 141.54, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(2616, 1279.13, 141.38, 1076.74,   0.00, 0.00, 0.00);
    CreateDynamicObject(2737, 1281.70, 141.36, 1076.70,   0.00, 0.00, 0.00);
    CreateDynamicObject(14532, 1283.26, 140.82, 1075.97,   0.00, 0.00, 155.52);
    CreateDynamicObject(2608, 1277.56, 139.65, 1076.80,   0.00, 0.00, 86.16);
    CreateDynamicObject(2185, 1277.71, 138.82, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(1663, 1278.55, 140.47, 1075.43,   0.00, 0.00, 14.70);
    CreateDynamicObject(2185, 1279.21, 136.33, 1074.98,   0.00, 0.00, 180.12);
    CreateDynamicObject(2185, 1281.20, 136.33, 1074.98,   0.00, 0.00, 180.12);
    CreateDynamicObject(2185, 1283.18, 136.34, 1074.98,   0.00, 0.00, 180.12);
    CreateDynamicObject(2185, 1279.25, 134.05, 1074.98,   0.00, 0.00, 180.12);
    CreateDynamicObject(1722, 1278.23, 134.69, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(1722, 1280.03, 134.72, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(1722, 1282.10, 134.78, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(1722, 1278.07, 132.41, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(2185, 1281.25, 134.05, 1074.98,   0.00, 0.00, 180.12);
    CreateDynamicObject(2185, 1283.24, 134.03, 1074.98,   0.00, 0.00, 180.12);
    CreateDynamicObject(1722, 1280.10, 132.40, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(1722, 1282.10, 132.41, 1074.98,   0.00, 0.00, 0.00);
    CreateDynamicObject(2186, 1286.42, 133.75, 1074.98,   0.00, 0.00, -89.46);
    CreateDynamicObject(14455, 1287.18, 141.80, 1073.09,   0.00, 0.00, 0.00);
    CreateDynamicObject(14455, 1281.48, 141.78, 1073.09,   0.00, 0.00, 0.00);
    CreateDynamicObject(1999, 1290.09, 149.38, 1071.49,   0.00, 0.00, 91.62);
    CreateDynamicObject(2491, 1289.43, 146.53, 1070.71,   0.00, 0.00, 0.00);
    CreateDynamicObject(3077, 1291.73, 145.86, 1071.49,   0.00, 0.00, 90.60);
    CreateDynamicObject(1663, 1291.62, 150.39, 1071.96,   0.00, 0.00, -58.98);
    CreateDynamicObject(2010, 1291.57, 142.45, 1071.47,   0.00, 0.00, 0.00);
    CreateDynamicObject(2185, 1286.85, 149.09, 1071.49,   0.00, 0.00, 93.66);
    CreateDynamicObject(2185, 1286.89, 145.57, 1071.49,   0.00, 0.00, 93.66);
    CreateDynamicObject(2185, 1284.21, 149.02, 1071.49,   0.00, 0.00, 93.66);
    CreateDynamicObject(2185, 1284.35, 145.51, 1071.49,   0.00, 0.00, 93.66);
    CreateDynamicObject(2185, 1282.00, 145.35, 1071.49,   0.00, 0.00, 93.66);
    CreateDynamicObject(1722, 1284.98, 149.89, 1071.49,   0.00, 0.00, -84.78);
    CreateDynamicObject(1722, 1285.33, 146.41, 1071.49,   0.00, 0.00, -84.78);
    CreateDynamicObject(1722, 1282.51, 149.88, 1071.49,   0.00, 0.00, -84.78);
    CreateDynamicObject(1722, 1282.62, 145.98, 1071.49,   0.00, 0.00, -84.78);
    CreateDynamicObject(1722, 1280.28, 145.81, 1071.49,   0.00, 0.00, -84.78);
    CreateDynamicObject(1808, 1279.96, 142.00, 1071.49,   0.00, 0.00, 151.02);
    CreateDynamicObject(1808, 1272.65, 151.08, 1071.60,   0.00, 0.00, -91.38);
    CreateDynamicObject(1808, 1286.71, 136.67, 1074.98,   0.00, 0.00, -91.26);
    CreateDynamicObject(1808, 1282.07, 160.11, 1074.98,   0.00, 0.00, -41.04);
    CreateDynamicObject(19383, 1282.24, 160.72, 1073.23,   0.00, 0.00, 89.76);
    CreateDynamicObject(19353, 1279.06, 160.74, 1073.22,   0.00, 0.00, 89.76);
    CreateDynamicObject(19353, 1275.86, 160.74, 1073.22,   0.00, 0.00, 89.76);
    CreateDynamicObject(19379, 1281.39, 165.56, 1071.40,   0.00, 90.00, 0.00);
    CreateDynamicObject(19445, 1281.69, 170.37, 1073.22,   0.00, 0.00, 90.36);
    CreateDynamicObject(19445, 1286.63, 165.60, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19445, 1276.98, 165.62, 1073.22,   0.00, 0.00, 0.00);
    CreateDynamicObject(19379, 1281.39, 165.56, 1074.91,   0.00, 90.00, 0.00);
    CreateDynamicObject(2008, 1277.73, 169.64, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2612, 1281.71, 170.21, 1073.54,   0.00, 0.00, 0.00);
    CreateDynamicObject(2606, 1286.45, 162.95, 1073.76,   0.00, 0.00, -90.90);
    CreateDynamicObject(2606, 1286.45, 162.95, 1073.31,   0.00, 0.00, -90.90);
    CreateDynamicObject(2181, 1285.03, 169.78, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2197, 1283.99, 168.90, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2197, 1283.31, 168.90, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2186, 1280.61, 169.66, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(1806, 1278.07, 168.33, 1071.47,   0.00, 0.00, -36.66);
    CreateDynamicObject(2332, 1276.83, 166.91, 1071.94,   0.00, 0.00, 89.34);
    CreateDynamicObject(2010, 1277.71, 161.53, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2690, 1283.41, 151.20, 1072.58,   0.00, 0.00, 179.70);
    CreateDynamicObject(1775, 1302.32, 153.48, 1072.59,   0.00, 0.00, -88.98);
    CreateDynamicObject(2608, 1277.27, 163.31, 1073.80,   0.00, 0.00, 89.46);
    CreateDynamicObject(2613, 1279.81, 170.73, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(2161, 1286.51, 167.12, 1071.49,   0.00, 0.00, -89.04);
    CreateDynamicObject(2162, 1286.52, 165.74, 1071.49,   0.00, 0.00, -88.86);
    CreateDynamicObject(2200, 1285.34, 160.90, 1071.49,   0.00, 0.00, 180.78);
    CreateDynamicObject(1806, 1285.70, 168.35, 1071.47,   0.00, 0.00, 27.66);
    CreateDynamicObject(1722, 1278.75, 161.08, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(1722, 1279.56, 161.11, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(1722, 1280.24, 161.06, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(1808, 1283.33, 161.06, 1071.49,   0.00, 0.00, 178.92);
    CreateDynamicObject(18608, 1281.17, 166.09, 1075.63,   0.00, 0.00, 89.58);
    CreateDynamicObject(1491, 1281.46, 160.67, 1071.49,   0.00, 0.00, 0.00);
    CreateDynamicObject(18608, 1282.10, 136.68, 1079.43,   0.00, 0.00, 0.00);

	// Police department
    CreateDynamicObject(19452,1578.2000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (1)
	CreateDynamicObject(19452,1578.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (3)
	CreateDynamicObject(19452,1581.7002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (4)
	CreateDynamicObject(19452,1581.7002000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (5)
	CreateDynamicObject(19452,1585.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (6)
	CreateDynamicObject(19452,1585.2002000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (7)
	CreateDynamicObject(19452,1588.7002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (8)
	CreateDynamicObject(19452,1592.2000000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (9)
	CreateDynamicObject(19452,1592.2002000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (10)
	CreateDynamicObject(19452,1595.5996000,-1713.0000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (11)
	CreateDynamicObject(19452,1595.5898000,-1722.5996000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (12)
	CreateDynamicObject(19358,1576.5000000,-1709.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (1)
	CreateDynamicObject(19358,1595.5200000,-1708.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (2)
	CreateDynamicObject(19358,1592.4000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (3)
	CreateDynamicObject(19358,1589.2000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (4)
	CreateDynamicObject(19358,1586.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (5)
	CreateDynamicObject(19358,1583.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (6)
	CreateDynamicObject(19358,1579.8000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (7)
	CreateDynamicObject(19358,1577.0000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (8)
	CreateDynamicObject(19358,1597.2998000,-1709.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (9)
	CreateDynamicObject(1536,1586.2998000,-1708.2568000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorext15) (1)
	CreateDynamicObject(1536,1589.3199000,-1708.2300000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(gen_doorext15) (2)
	CreateDynamicObject(19358,1576.5000000,-1712.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (10)
	CreateDynamicObject(19358,1576.5000000,-1715.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (11)
	CreateDynamicObject(19358,1576.5000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (12)
	CreateDynamicObject(19358,1576.5000000,-1721.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (13)
	CreateDynamicObject(19358,1576.5000000,-1725.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1597.3000000,-1712.6000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (15)
	CreateDynamicObject(19358,1595.9000000,-1708.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (16)
	CreateDynamicObject(19358,1597.3000000,-1715.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (17)
	CreateDynamicObject(19358,1597.2998000,-1719.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1597.2998000,-1722.2002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (19)
	CreateDynamicObject(19358,1597.2998000,-1725.4004000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.4000000,-1709.4000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (21)
	CreateDynamicObject(19358,1595.8000000,-1717.4000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (22)
	CreateDynamicObject(19358,1593.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (24)
	CreateDynamicObject(19404,1584.4004000,-1712.5996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(boigagr_sfw) (1)
	CreateDynamicObject(19358,1584.4004000,-1715.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (25)
	CreateDynamicObject(19358,1591.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (26)
	CreateDynamicObject(19388,1586.0996000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1589.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(1649,1584.4000000,-1712.5000000,-34.5000000,0.0000000,0.0000000,90.0000000); //object(wglasssmash) (1)
	CreateDynamicObject(1649,1584.4004000,-1712.5000000,-34.5000000,0.0000000,0.0000000,270.0000000); //object(wglasssmash) (2)
	//CreateDynamicObject(1495,1585.3101000,-1717.4000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorext01) (1)
	CreateDynamicObject(1706,1590.4000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (1)
	CreateDynamicObject(1706,1592.5000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (2)
	CreateDynamicObject(1706,1594.6000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(kb_couch03) (4)
	CreateDynamicObject(1706,1596.7000000,-1709.9000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (5)
	CreateDynamicObject(949,1585.7998000,-1708.7002000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1596.7000000,-1708.8000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (2)
	CreateDynamicObject(1706,1596.7000000,-1712.1000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (6)
	CreateDynamicObject(1706,1596.7000000,-1714.3000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(kb_couch03) (7)
	CreateDynamicObject(1706,1595.5000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(kb_couch03) (8)
	CreateDynamicObject(949,1596.7000000,-1716.8000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (3)
	CreateDynamicObject(1706,1593.3000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (9)
	CreateDynamicObject(1706,1591.1000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (10)
	CreateDynamicObject(1706,1588.9000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,179.9945100); //object(kb_couch03) (11)
	CreateDynamicObject(2319,1592.5000000,-1712.6000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_tv_table5) (1)
	CreateDynamicObject(2319,1590.1000000,-1712.6000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_tv_table5) (2)
	CreateDynamicObject(2853,1590.2000000,-1712.5000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags03) (1)
	CreateDynamicObject(2854,1591.1000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags04) (1)
	CreateDynamicObject(2855,1592.6000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags05) (1)
	CreateDynamicObject(2852,1593.4000000,-1712.6000000,-37.2999990,0.0000000,0.0000000,0.0000000); //object(gb_bedmags02) (1)
	CreateDynamicObject(2700,1597.2000000,-1708.4000000,-35.0999980,0.0000000,0.0000000,220.4877000); //object(cj_sex_tv2) (1)
	CreateDynamicObject(2202,1582.9000000,-1708.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(photocopier_2) (1)
	CreateDynamicObject(2198,1583.8000000,-1712.1000000,-37.7999990,0.0000000,0.0000000,270.0000000); //object(med_office2_desk_3) (1)
	CreateDynamicObject(1671,1578.3000000,-1718.9000000,-37.4000020,0.0000000,0.0000000,180.0000000); //object(swivelchair_a) (1)
	CreateDynamicObject(1742,1576.6000000,-1716.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (1)
	CreateDynamicObject(1742,1576.5996000,-1709.4004000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (2)
	CreateDynamicObject(1742,1576.6000000,-1710.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (3)
	CreateDynamicObject(1742,1576.5996000,-1712.2002000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (4)
	CreateDynamicObject(1742,1576.5996000,-1713.5996000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (5)
	CreateDynamicObject(1742,1576.5996000,-1715.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_bookshelf) (6)
	CreateDynamicObject(19358,1578.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(19358,1581.0000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (27)
	CreateDynamicObject(19388,1583.6000000,-1717.4004000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(949,1589.5000000,-1708.7998000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (4)
	CreateDynamicObject(2161,1582.0000000,-1716.8000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_office_unit_4) (1)
	CreateDynamicObject(2164,1581.0000000,-1717.3000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_5) (1)
	CreateDynamicObject(2167,1579.2000000,-1717.3000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_7) (1)
	CreateDynamicObject(11631,1579.3000000,-1709.0000000,-36.5999980,0.0000000,0.0000000,0.0000000); //object(ranch_desk) (1)
	CreateDynamicObject(1671,1582.5000000,-1712.7002000,-37.4000020,0.0000000,0.0000000,87.6214600); //object(swivelchair_a) (2)
	CreateDynamicObject(19447,1596.1000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (1)
	CreateDynamicObject(19447,1592.6000000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (4)
	CreateDynamicObject(19447,1582.2000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (5)
	CreateDynamicObject(19447,1589.2002000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (6)
	CreateDynamicObject(19447,1585.7002000,-1712.9004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (9)
	CreateDynamicObject(19447,1578.7600000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (10)
	CreateDynamicObject(19447,1577.9000000,-1712.9000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (11)
	CreateDynamicObject(19452,1578.2002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7002000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1732.2000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1732.2002000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1597.3000000,-1728.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1731.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1734.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1737.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1727.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1730.5996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1733.7998000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1736.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1587.0000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.0000000,-1722.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.0000000,-1725.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1588.5000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1591.7000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1595.6000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1592.4000000,-1727.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(2748,1592.9000000,-1718.1000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (1)
	CreateDynamicObject(2747,1596.4000000,-1719.4000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (1)
	CreateDynamicObject(2748,1593.1000000,-1724.3000000,-37.2000010,0.0000000,0.0000000,180.0000000); //object(cj_donut_chair2) (2)
	CreateDynamicObject(2748,1596.4004000,-1718.0996000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (3)
	CreateDynamicObject(2747,1592.8000000,-1719.5000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (2)
	CreateDynamicObject(2748,1596.5000000,-1720.7002000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (4)
	CreateDynamicObject(2748,1596.5000000,-1721.9000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (5)
	CreateDynamicObject(2748,1593.0000000,-1721.9000000,-37.2000010,0.0000000,0.0000000,0.0000000); //object(cj_donut_chair2) (6)
	CreateDynamicObject(2747,1593.0000000,-1723.2000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (3)
	CreateDynamicObject(2747,1596.4000000,-1723.2000000,-37.4000020,0.0000000,0.0000000,0.0000000); //object(cj_donut_table) (4)
	CreateDynamicObject(2748,1593.0000000,-1720.7002000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (7)
	CreateDynamicObject(2748,1596.4000000,-1724.3000000,-37.2000010,0.0000000,0.0000000,179.9945100); //object(cj_donut_chair2) (8)
	CreateDynamicObject(2448,1589.0000000,-1721.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_5d) (1)
	CreateDynamicObject(2448,1589.0000000,-1719.4004000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(cj_ff_conter_5d) (2)
	CreateDynamicObject(2450,1589.2000000,-1722.4000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(cj_ff_conter_5b) (1)
	CreateDynamicObject(1776,1587.5000000,-1726.5000000,-36.7000010,0.0000000,0.0000000,90.0000000); //object(cj_candyvendor) (1)
	CreateDynamicObject(1775,1587.6000000,-1725.3000000,-36.7000010,0.0000000,0.0000000,90.0000000); //object(cj_sprunk1) (1)
	CreateDynamicObject(1502,1594.8000000,-1727.2000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (1)
	CreateDynamicObject(1502,1580.3000000,-1730.2000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (2)
	CreateDynamicObject(19358,1582.7000000,-1719.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1722.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1725.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1728.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1578.0000000,-1730.2000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1581.0996000,-1730.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1582.7998000,-1717.4399000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (3)
	CreateDynamicObject(1998,1581.2000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (1)
	CreateDynamicObject(1998,1579.3000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (2)
	CreateDynamicObject(1998,1577.4000000,-1718.9000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1l) (3)
	CreateDynamicObject(2008,1577.0996000,-1728.4004000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (2)
	CreateDynamicObject(2008,1577.0996000,-1726.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (3)
	CreateDynamicObject(2008,1577.2002000,-1723.5996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (4)
	CreateDynamicObject(2008,1581.1000000,-1723.5996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (5)
	CreateDynamicObject(2008,1581.1000000,-1726.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk1) (6)
	CreateDynamicObject(1671,1579.7002000,-1710.0996000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (3)
	CreateDynamicObject(1671,1580.3000000,-1719.0000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (4)
	CreateDynamicObject(1671,1582.2000000,-1719.0000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (5)
	CreateDynamicObject(1671,1578.0000000,-1724.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (6)
	CreateDynamicObject(1671,1582.1000000,-1724.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (7)
	CreateDynamicObject(1671,1578.0000000,-1727.2000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (8)
	CreateDynamicObject(1671,1578.1000000,-1729.8000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (9)
	CreateDynamicObject(1671,1582.0000000,-1727.5000000,-37.4000020,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (10)
	CreateDynamicObject(19452,1578.2002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1741.7998000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1741.8000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1578.2002000,-1751.4000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1581.7001953,-1751.4003906,-37.9000015,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1588.7002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1585.2002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1592.2002000,-1751.4004000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1595.5898000,-1751.4000000,-37.9000020,0.0000000,90.0000000,0.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1597.3000000,-1740.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1743.4000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1746.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1749.6000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1739.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1742.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1745.0000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1747.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1750.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1753.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.3000000,-1752.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1597.2998000,-1755.0996000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1593.0000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1590.2002000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1587.5000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.4004000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1581.5996000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.5000000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19447,1596.0996000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (13)
	CreateDynamicObject(19447,1592.5996000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (14)
	CreateDynamicObject(19447,1585.7002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (15)
	CreateDynamicObject(19447,1582.2002000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (16)
	CreateDynamicObject(19447,1578.7598000,-1722.5000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (17)
	CreateDynamicObject(19447,1578.0996000,-1722.4004000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (18)
	CreateDynamicObject(18767,1574.5000000,-1735.6000000,-34.2999990,0.0000000,0.0000000,0.0000000); //object(stands) (1)
	CreateDynamicObject(18767,1574.1000000,-1735.6000000,-34.2999990,0.0000000,0.0000000,0.0000000); //object(stands) (2)
	CreateDynamicObject(19358,1578.1000000,-1731.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1736.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1733.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1596.2002000,-1756.2002000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1577.9004000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1581.0996000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1582.7000000,-1731.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1582.7300000,-1732.6700000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(gen_doorint04) (4)
	CreateDynamicObject(19358,1582.7000000,-1735.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1738.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1741.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7000000,-1743.2000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(2949,1576.5699000,-1744.0000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(kmb_lockeddoor) (1)
	CreateDynamicObject(19358,1592.9004000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.5000000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1584.2998000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1590.7002000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(1502,1589.9004000,-1733.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(19358,1593.0000000,-1733.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1594.5000000,-1734.7000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1737.9000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1741.1000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1594.5000000,-1743.3000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1584.2998000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1587.5000000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1590.7002000,-1744.7998000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(14532,1583.5996000,-1733.7998000,-36.7999990,0.0000000,0.0000000,221.2097200); //object(tv_stand_driv) (1)
	CreateDynamicObject(14532,1593.4004000,-1743.5996000,-36.7999990,0.0000000,0.0000000,48.0596920); //object(tv_stand_driv) (2)
	CreateDynamicObject(3077,1584.5000000,-1743.0000000,-38.2000010,0.0000000,0.0000000,307.2500000); //object(nf_blackboard) (1)
	CreateDynamicObject(2606,1577.7000000,-1708.3000000,-35.1199990,0.0000000,0.0000000,0.0000000); //object(cj_police_counter2) (1)
	CreateDynamicObject(2606,1577.7002000,-1708.2998000,-34.7000010,0.0000000,0.0000000,0.0000000); //object(cj_police_counter2) (2)
	CreateDynamicObject(1721,1591.8000000,-1742.5000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (1)
	CreateDynamicObject(1721,1591.8000000,-1741.9000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (2)
	CreateDynamicObject(1721,1591.8000000,-1741.3000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (3)
	CreateDynamicObject(1721,1591.8000000,-1740.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (4)
	CreateDynamicObject(1721,1591.8000000,-1740.1000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (5)
	CreateDynamicObject(1721,1591.8000000,-1739.5000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (6)
	CreateDynamicObject(1721,1591.8000000,-1738.9000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (7)
	CreateDynamicObject(1721,1591.8000000,-1738.3000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (8)
	CreateDynamicObject(1721,1591.8000000,-1737.7000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (9)
	CreateDynamicObject(1721,1591.8000000,-1737.1000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (10)
	CreateDynamicObject(1721,1590.0000000,-1742.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (11)
	CreateDynamicObject(1721,1590.0000000,-1741.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (12)
	CreateDynamicObject(1721,1590.0000000,-1741.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (13)
	CreateDynamicObject(1721,1590.0000000,-1740.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (14)
	CreateDynamicObject(1721,1590.0000000,-1740.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (15)
	CreateDynamicObject(1721,1590.0000000,-1739.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (16)
	CreateDynamicObject(1721,1590.0000000,-1738.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (17)
	CreateDynamicObject(1721,1590.0000000,-1738.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (18)
	CreateDynamicObject(1721,1590.0000000,-1737.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (19)
	CreateDynamicObject(1721,1590.0000000,-1737.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (20)
	CreateDynamicObject(1721,1588.3000000,-1742.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (21)
	CreateDynamicObject(1721,1588.3000000,-1741.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (22)
	CreateDynamicObject(1721,1588.3000000,-1741.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (23)
	CreateDynamicObject(1721,1588.3000000,-1740.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (24)
	CreateDynamicObject(1721,1588.3000000,-1740.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (25)
	CreateDynamicObject(1721,1588.3000000,-1739.4000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (26)
	CreateDynamicObject(1721,1588.3000000,-1738.8000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (27)
	CreateDynamicObject(1721,1588.3000000,-1738.2000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (28)
	CreateDynamicObject(1721,1588.3000000,-1737.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (29)
	CreateDynamicObject(1721,1588.3000000,-1737.0000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(est_chair1) (30)
	CreateDynamicObject(2614,1582.9000000,-1738.6000000,-35.5999980,0.0000000,0.0000000,90.5000000); //object(cj_us_flag) (1)
	CreateDynamicObject(2614,1591.8000000,-1717.2000000,-35.5999980,0.0000000,0.0000000,181.7500000); //object(cj_us_flag) (2)
	CreateDynamicObject(14532,1583.5996000,-1733.7998000,-36.7999990,0.0000000,0.0000000,221.2097200); //object(tv_stand_driv) (1)
	CreateDynamicObject(2491,1585.4000000,-1738.4000000,-38.2999990,0.0000000,0.0000000,0.0000000); //object(model_stand) (1)
	CreateDynamicObject(19447,1596.1000000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1579.9000000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0996000,-1725.3000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (18)
	CreateDynamicObject(19358,1595.6000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19447,1592.5996000,-1732.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19388,1592.4000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1589.2000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1586.0000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1582.8000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19388,1579.6000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1577.0000000,-1749.0000000,-36.0999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(1502,1578.8000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(1502,1591.5996000,-1749.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(1502,1585.2002000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(gen_doorint04) (6)
	CreateDynamicObject(19358,1582.8000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7998000,-1750.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1582.7998000,-1753.9004000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.1000000,-1755.8000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.0996000,-1750.5000000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(19358,1589.0996000,-1753.7002000,-36.0999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (18)
	CreateDynamicObject(1999,1593.8000000,-1754.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(officedesk2) (1)
	CreateDynamicObject(1742,1595.0000000,-1749.1000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (7)
	CreateDynamicObject(1742,1593.5996000,-1749.0996000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (8)
	CreateDynamicObject(1714,1594.7000000,-1755.4000000,-37.7999990,0.0000000,0.0000000,174.7500000); //object(kb_swivelchair1) (1)
	CreateDynamicObject(1721,1595.6000000,-1752.3000000,-37.7999990,0.0000000,0.0000000,142.7500000); //object(est_chair1) (31)
	CreateDynamicObject(1721,1593.3000000,-1752.2000000,-37.7999990,0.0000000,0.0000000,214.4953600); //object(est_chair1) (32)
	CreateDynamicObject(912,1589.6000000,-1754.3000000,-37.2999990,0.0000000,0.0000000,90.0000000); //object(bust_cabinet_2) (1)
	CreateDynamicObject(2614,1593.6000000,-1756.0000000,-35.5999980,0.0000000,0.0000000,177.7500000); //object(cj_us_flag) (3)
	CreateDynamicObject(1999,1580.6000000,-1754.6000000,-37.7999990,0.0000000,0.0000000,50.7500000); //object(officedesk2) (2)
	CreateDynamicObject(1999,1584.4000000,-1754.0000000,-37.7999990,0.0000000,0.0000000,304.7500000); //object(officedesk2) (3)
	CreateDynamicObject(1714,1583.6000000,-1755.3000000,-37.7999990,0.0000000,0.0000000,137.2485400); //object(kb_swivelchair1) (2)
	CreateDynamicObject(1714,1582.0000000,-1755.4000000,-37.7999990,0.0000000,0.0000000,220.2467000); //object(kb_swivelchair1) (3)
	CreateDynamicObject(1721,1580.4000000,-1752.5000000,-37.7999990,0.0000000,0.0000000,214.4915800); //object(est_chair1) (33)
	CreateDynamicObject(1721,1579.2000000,-1753.9000000,-37.7999990,0.0000000,0.0000000,251.5000000); //object(est_chair1) (34)
	CreateDynamicObject(1742,1577.8000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (9)
	CreateDynamicObject(1742,1584.3000000,-1749.0000000,-37.7999990,0.0000000,0.0000000,0.0000000); //object(med_bookshelf) (10)
	CreateDynamicObject(1721,1586.6000000,-1754.3000000,-37.7999990,0.0000000,0.0000000,120.2415800); //object(est_chair1) (35)
	CreateDynamicObject(1721,1585.7000000,-1753.3000000,-37.7999990,0.0000000,0.0000000,120.2398700); //object(est_chair1) (36)
	CreateDynamicObject(2164,1587.0000000,-1756.1000000,-37.7999990,0.0000000,0.0000000,180.0000000); //object(med_office_unit_5) (2)
	CreateDynamicObject(2164,1576.6000000,-1753.6000000,-37.7999990,0.0000000,0.0000000,90.0000000); //object(med_office_unit_5) (3)
	CreateDynamicObject(2614,1584.5000000,-1756.0000000,-35.5999980,0.0000000,0.0000000,179.5000000); //object(cj_us_flag) (4)
	CreateDynamicObject(2614,1580.5000000,-1756.0000000,-35.7000010,0.0000000,0.0000000,178.7500000); //object(cj_us_flag) (5)
	CreateDynamicObject(1721,1579.2002000,-1753.9004000,-37.7999990,0.0000000,0.0000000,251.4990200); //object(est_chair1) (37)
	CreateDynamicObject(19447,1596.1000000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1592.5996000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1741.5996000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1579.9000000,-1741.6000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19358,1578.1000000,-1736.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.1000000,-1731.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1578.0996000,-1733.5000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(18767,1574.7000000,-1725.1000000,-34.2999990,0.0000000,0.0000000,180.0000000); //object(stands) (1)
	CreateDynamicObject(19358,1576.9004000,-1729.7000000,-32.5999980,0.0000000,0.0000000,74.9981690); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1575.0000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1575.0000000,-1729.4000000,-34.2099990,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1574.2002000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1571.0000000,-1729.4000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1576.5000000,-1732.8000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1736.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1576.5000000,-1739.2000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19447,1578.2000000,-1743.1000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19358,1576.9000000,-1738.4000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (14)
	CreateDynamicObject(19358,1571.9004000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1727.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1568.7000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1565.5000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1566.0000000,-1729.4004000,-34.2099990,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1567.7998000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.0000000,-1731.2000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1558.5000000,-1726.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1564.5996000,-1729.4004000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1725.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1558.5000000,-1723.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1558.5000000,-1729.4004000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1717.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1558.5000000,-1720.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1563.0000000,-1721.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1718.8000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1563.0000000,-1715.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1564.5996000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1561.5000000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1558.5996000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1556.0000000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19452,1550.0000000,-1720.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1723.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1726.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19452,1550.0000000,-1729.4004000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(19358,1553.9004000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1550.7998000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1548.2002000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2998000,-1715.2998000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1716.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1719.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1722.7000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1725.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1729.1000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1545.2000000,-1731.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1561.4004000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1556.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1554.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1551.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1548.0000000,-1731.2002000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19447,1596.0996000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1592.5996000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1589.2002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1582.2002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1580.8000000,-1755.5000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.8000000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0000000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1585.7002000,-1751.0000000,-34.2999990,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1590.4000000,-1755.3000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1599.4000000,-1755.4000000,-34.2999990,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19302,1549.4000000,-1718.6000000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (1)
	CreateDynamicObject(19388,1549.4000000,-1718.6000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19358,1546.2000000,-1718.6000000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.8000000,-1716.9000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1562.2002000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1562.2998000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (2)
	CreateDynamicObject(19358,1550.3000000,-1717.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19358,1559.7998000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1557.4004000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1557.5000000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (3)
	CreateDynamicObject(19358,1555.7002000,-1717.0000000,-32.5999980,0.0000000,0.0000000,0.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(19388,1552.0000000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw15) (1)
	CreateDynamicObject(19302,1552.0996000,-1718.5996000,-32.9000020,0.0000000,0.0000000,0.0000000); //object(vgstwires21_lvs) (4)
	CreateDynamicObject(19358,1554.2002000,-1718.5996000,-32.5999980,0.0000000,0.0000000,90.0000000); //object(road_sfw12) (20)
	CreateDynamicObject(1771,1560.7000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (1)
	CreateDynamicObject(19452,1558.5000000,-1717.0000000,-34.2000010,0.0000000,90.0000000,90.0000000); //object(cs_detrok02) (2)
	CreateDynamicObject(1771,1559.0000000,-1716.9000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (2)
	CreateDynamicObject(1771,1554.8000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (3)
	CreateDynamicObject(1771,1545.9000000,-1717.0000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(cj_bunk_bed1) (4)
	CreateDynamicObject(2602,1549.8000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (1)
	CreateDynamicObject(2602,1551.2000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (2)
	CreateDynamicObject(2602,1556.4000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (3)
	CreateDynamicObject(2602,1562.4000000,-1715.8000000,-33.5999980,0.0000000,0.0000000,0.0000000); //object(police_cell_toilet) (4)
	CreateDynamicObject(2008,1552.0000000,-1727.9000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (1)
	CreateDynamicObject(2008,1546.7998000,-1727.9004000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (7)
	CreateDynamicObject(2008,1556.2000000,-1727.8000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(officedesk1) (8)
	CreateDynamicObject(1671,1547.4000000,-1729.1000000,-33.7000010,0.0000000,0.0000000,180.0000000); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1557.1000000,-1729.0000000,-33.7000010,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (2)
	CreateDynamicObject(1671,1552.9004000,-1729.0996000,-33.7000010,0.0000000,0.0000000,179.9945100); //object(swivelchair_a) (2)
	CreateDynamicObject(949,1554.6000000,-1727.8000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1549.7998000,-1727.9004000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(949,1558.7000000,-1727.9000000,-33.5000000,0.0000000,0.0000000,0.0000000); //object(plant_pot_4) (1)
	CreateDynamicObject(1808,1545.5000000,-1724.3000000,-34.0999980,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (1)
	CreateDynamicObject(1808,1545.5000000,-1724.7002000,-34.0999980,0.0000000,0.0000000,90.0000000); //object(cj_watercooler2) (2)
	CreateDynamicObject(2833,1557.4000000,-1724.5000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(gb_livingrug02) (1)
	CreateDynamicObject(2836,1550.4000000,-1724.6000000,-34.0999980,0.0000000,0.0000000,0.0000000); //object(gb_livingrug05) (1)
	CreateDynamicObject(19447,1573.9000000,-1729.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1578.0000000,-1734.7998000,-31.0000000,0.0000000,90.0000000,0.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1555.0000000,-1729.6000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.3000000,-1726.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1564.5000000,-1729.7998000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1547.5000000,-1729.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1726.5000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1723.2000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1719.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.3000000,-1723.2000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.2998000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1559.0000000,-1717.0000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)
	CreateDynamicObject(19447,1549.2998000,-1719.8000000,-31.0000000,0.0000000,90.0000000,90.0000000); //object(cs_detrok13) (12)

	// Fire station
    CreateDynamicObject(1649, 1737.09998, -1102.50000, 24.00000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(942, 1721.09998, -1114.80005, 25.50000,   0.00000, 0.25000, 91.25000);
    CreateDynamicObject(930, 1721.19995, -1111.19995, 23.54000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(931, 1720.90002, -1121.00000, 24.10000,   0.00000, 0.00000, 92.00000);
    CreateDynamicObject(2567, 1707.80005, -1130.19995, 25.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3800, 1712.69995, -1130.00000, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3800, 1711.09998, -1130.19995, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1736.42004, -1094.81995, 28.18000,   0.00000, 0.00000, 0.24000);
    CreateDynamicObject(2165, 1752.69995, -1104.59998, 23.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2165, 1750.80005, -1104.59998, 23.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1671, 1751.50000, -1105.90002, 23.52000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1671, 1753.40002, -1105.90002, 23.52000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(1723, 1740.30005, -1095.59998, 23.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1723, 1744.59998, -1095.59998, 23.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2315, 1740.50000, -1097.40002, 23.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2315, 1744.90002, -1097.40002, 23.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1723, 1742.30005, -1099.40002, 23.12000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1723, 1746.59998, -1099.40002, 23.12000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(1649, 1714.78003, -1142.39001, 28.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1722.90002, -1142.40002, 28.10000,   0.00000, 0.00000, 180.24001);
    CreateDynamicObject(925, 1720.90002, -1123.59998, 24.10000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2700, 1743.19995, -1108.00000, 26.50000,   0.00000, 0.00000, 89.75000);
    CreateDynamicObject(2700, 1755.93994, -1101.44995, 26.30000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(2631, 1735.40002, -1113.90002, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2632, 1735.40002, -1115.90002, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2631, 1735.40002, -1117.90002, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2632, 1735.40002, -1119.90002, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2631, 1735.40002, -1121.90002, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2632, 1735.40002, -1123.90002, 23.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1211, 1729.69995, -1140.59998, 23.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1211, 1712.50000, -1140.59998, 23.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1211, 1746.80005, -1140.59998, 23.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1211, 1729.57996, -1096.68005, 23.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1211, 1712.40002, -1096.80005, 23.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1238, 1713.80005, -1129.69995, 23.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1238, 1713.80005, -1129.69995, 23.60000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1238, 1714.50000, -1129.69995, 23.40000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1238, 1714.50000, -1129.69995, 23.60000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(7090, 1728.40002, -1095.50000, 35.30000,   0.00000, 0.00000, 92.00000);
    CreateDynamicObject(1502, 1737.14001, -1106.19995, 23.06000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1729.69995, -1137.30005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1729.69995, -1134.30005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1712.50000, -1137.30005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1704.82996, -1137.38000, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1738.29004, -1135.20996, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1746.80005, -1136.90002, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1746.80005, -1127.19995, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1238, 1740.53003, -1130.07996, 24.60000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1238, 1740.54004, -1130.06995, 24.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1238, 1741.40002, -1129.95996, 24.60000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2627, 1735.57996, -1113.58997, 23.15000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(2627, 1735.58997, -1114.73999, 23.15000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(2630, 1735.69995, -1116.56006, 23.15000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2630, 1735.68005, -1117.78003, 23.15000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2628, 1736.14001, -1119.76001, 23.15000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(2628, 1736.14001, -1121.45996, 23.15000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1808, 1736.88000, -1125.26001, 23.09000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(2223, 1744.93994, -1097.45996, 23.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2342, 1746.51001, -1097.40002, 23.72000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3578, 1712.40002, -1101.00000, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1704.77002, -1101.10999, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1736.80005, -1099.97998, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1736.80005, -1101.19995, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1729.59998, -1101.00000, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1721.09998, -1100.90002, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1737.08997, -1102.53003, 27.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1737.09998, -1106.83997, 27.22000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1649, 1737.09998, -1098.09998, 27.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1737.09998, -1098.16003, 24.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1615, 1754.19995, -1095.80005, 28.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1615, 1754.19995, -1130.00000, 28.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1615, 1705.09998, -1107.50000, 27.90000,   0.00000, 0.00000, 184.50000);
    CreateDynamicObject(1615, 1705.09998, -1130.09998, 27.90000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(638, 1701.50000, -1096.50000, 23.80000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(638, 1701.59998, -1100.30005, 23.80000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2774, 1730.19995, -1095.57996, 20.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1729.09998, -1095.57996, 20.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1713.19995, -1095.57996, 20.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1752.40002, -1094.80005, 27.90000,   0.00000, 0.00000, 0.25000);
    CreateDynamicObject(1649, 1748.00000, -1094.80005, 27.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1743.59998, -1094.80005, 27.90000,   0.00000, 0.00000, 180.24001);
    CreateDynamicObject(1649, 1739.30005, -1094.80005, 27.90000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1732.09998, -1094.83984, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1739.30005, -1094.81995, 24.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1712.00000, -1095.57996, 20.50000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1702.97009, -1097.71997, 27.22000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1702.96997, -1097.68005, 30.48000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1712.51294, -1127.09998, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1704.84399, -1127.19995, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1754.50000, -1136.00000, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1727.50000, -1094.80005, 28.20000,   0.18000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1723.19995, -1094.80005, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1719.40002, -1094.80005, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1715.09998, -1094.80005, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1710.30005, -1094.80005, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1706.00000, -1094.83997, 28.20000,   0.00000, 0.00000, 0.99000);
    CreateDynamicObject(2774, 1747.27002, -1141.64001, 20.38000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1746.23999, -1141.69995, 20.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1730.18005, -1141.69995, 18.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1728.88000, -1141.69995, 18.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1711.97998, -1141.69995, 19.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2774, 1713.12000, -1141.69995, 19.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1740.19995, -1142.40002, 28.20000,   0.00000, 0.00000, 180.50000);
    CreateDynamicObject(1649, 1744.50000, -1142.38000, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1749.09998, -1142.38000, 28.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1753.40002, -1142.38000, 28.10000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1736.30005, -1142.40002, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1731.90002, -1142.42004, 28.20000,   0.00000, 0.00000, 180.24001);
    CreateDynamicObject(1649, 1727.19995, -1142.40002, 28.10000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1719.18005, -1142.40002, 28.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1710.30005, -1142.40002, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1705.95996, -1142.39001, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(19461, 1703.01001, -1104.71997, 24.82000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1756.32996, -1135.59998, 28.28000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1702.98999, -1135.85999, 24.80000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1703.00000, -1135.82996, 28.28000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1756.32996, -1135.62000, 24.82000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1756.31006, -1101.70996, 28.34000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1737.12000, -1102.46997, 24.00000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1752.38000, -1094.81995, 24.68000,   0.00000, 0.00000, 0.25000);
    CreateDynamicObject(1649, 1736.39001, -1094.81995, 28.18000,   0.00000, 0.00000, 180.36000);
    CreateDynamicObject(1649, 1714.81995, -1142.39001, 28.10000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(3578, 1712.50000, -1137.30005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1746.80005, -1127.19995, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(931, 1741.21997, -1130.07996, 24.14000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1428, 1742.60999, -1130.43005, 24.65000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1428, 1742.60999, -1129.76001, 24.65000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1502, 1756.29004, -1099.26001, 23.06000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1712.50000, -1137.30005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1746.80005, -1127.19995, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1238, 1740.54004, -1130.06995, 24.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1737.10999, -1102.45996, 27.30000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1649, 1737.10999, -1106.75000, 27.22000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1737.09998, -1098.14001, 27.30000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1649, 1737.10999, -1098.14001, 24.00000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(1649, 1752.40002, -1094.81006, 27.90000,   0.00000, 0.00000, 180.25000);
    CreateDynamicObject(1649, 1748.00000, -1094.77002, 27.90000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1743.59998, -1094.81995, 27.90000,   0.00000, 0.00000, 0.02000);
    CreateDynamicObject(1649, 1739.30005, -1094.80005, 27.90000,   0.00000, 0.00000, 179.74001);
    CreateDynamicObject(1649, 1732.07996, -1094.81995, 28.20000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(1649, 1739.26001, -1094.81995, 24.70000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1702.97986, -1098.45996, 27.22000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1649, 1702.97009, -1098.31006, 30.42000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1649, 1727.47998, -1094.80005, 28.20000,   0.00000, 0.00000, 179.99001);
    CreateDynamicObject(1649, 1723.19995, -1094.80005, 28.20000,   0.00000, 0.06000, 179.99001);
    CreateDynamicObject(1649, 1719.38000, -1094.80005, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1715.00000, -1094.80005, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1710.30005, -1094.80005, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1705.95996, -1094.80005, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2774, 1747.27002, -1141.64001, 20.00000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1740.28003, -1142.40002, 28.20000,   0.00000, 0.00000, 0.50000);
    CreateDynamicObject(1649, 1753.45996, -1142.38000, 28.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1736.26001, -1142.40002, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1727.18005, -1142.40002, 28.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1719.19995, -1142.40002, 28.10000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1710.33997, -1142.35999, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1705.97998, -1142.39001, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1756.30005, -1104.88000, 24.83000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1765.79004, -1094.87000, 24.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(7090, 1728.57996, -1142.33997, 35.40000,   0.00000, 0.00000, 272.00000);
    CreateDynamicObject(3578, 1712.50000, -1137.30005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(3578, 1746.80005, -1127.19995, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1428, 1742.60999, -1129.76001, 24.65000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1649, 1743.65002, -1094.81006, 24.68000,   0.00000, 0.00000, 179.95000);
    CreateDynamicObject(1649, 1743.63000, -1094.81995, 24.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1703.01001, -1104.69995, 28.32000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1790.56006, -1099.70996, 28.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(616, 840.28003, -923.78003, 52.09000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1536, 1737.10999, -1108.27002, 23.02000,   0.00000, 0.00000, 269.98001);
    CreateDynamicObject(2737, 1751.96997, -1108.23999, 24.51000,   0.00000, 0.00000, 540.32001);
    CreateDynamicObject(6973, 1742.70996, -1113.82996, 43.62000,   0.00000, 0.00000, 90.54000);
    CreateDynamicObject(1649, 1748.06006, -1094.81995, 24.70000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1752.37000, -1094.81006, 24.68000,   0.00000, 0.00000, 179.95000);
    CreateDynamicObject(1649, 1748.04004, -1094.80005, 24.68000,   0.00000, 0.00000, 179.95000);
    CreateDynamicObject(1536, 1752.80005, -1122.04004, 45.53000,   0.00000, 0.00000, 269.98001);
    CreateDynamicObject(19486, -755.09998, 1637.62000, 28.51000,   0.00000, 0.00000, -179.52000);
    CreateDynamicObject(19330, 1773.79797, -1114.10522, 25.07000,   -4.00000, -91.00000, -76.00000);
    CreateDynamicObject(19171, 1748.63000, -1108.31006, 25.71000,   -90.00000, 0.00000, 0.00000);
    CreateDynamicObject(19169, 1748.63000, -1108.31006, 24.22000,   -90.00000, 0.00000, 0.00000);
    CreateDynamicObject(19170, 1747.14001, -1108.31006, 25.71000,   -90.00000, 0.00000, 0.00000);
    CreateDynamicObject(19168, 1747.13000, -1108.31006, 24.22000,   -90.00000, 0.00000, 0.00000);
    CreateDynamicObject(19172, 1756.23999, -1101.45996, 25.05000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(18870, 1740.82996, -1097.39001, 23.61000,   0.00000, 0.00000, 23.40000);
    CreateDynamicObject(2690, 1742.15002, -1130.68994, 23.57000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2690, 1740.47998, -1130.18005, 23.57000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2690, 1741.50000, -1130.60999, 23.57000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2690, 1740.96997, -1130.64001, 23.57000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2690, 1736.84998, -1125.85999, 23.41000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1368, 1702.41003, -1102.06995, 23.78000,   0.00000, 0.00000, -89.88000);
    CreateDynamicObject(1368, 1702.41003, -1104.59998, 23.78000,   0.00000, 0.00000, -89.88000);
    CreateDynamicObject(18075, 1728.70996, -1117.10999, 29.08000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(18075, 1716.81006, -1135.50000, 29.08000,   0.00000, 0.00000, -90.18000);
    CreateDynamicObject(18075, 1742.42004, -1135.51001, 29.08000,   0.00000, 0.00000, -90.18000);
    CreateDynamicObject(18075, 1716.77002, -1103.60999, 29.08000,   0.00000, 0.00000, -90.18000);
    CreateDynamicObject(18075, 1742.64001, -1102.77002, 29.08000,   0.00000, 0.00000, -90.18000);
    CreateDynamicObject(1215, 1752.56995, -1141.26001, 45.87000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1215, 1704.16003, -1141.27002, 45.87000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1215, 1704.18005, -1096.01001, 45.87000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1215, 1752.56006, -1096.07996, 45.87000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1432, 819.85999, -946.59998, 49.75000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1790.56006, -1111.21997, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19415, 1779.42004, -1094.87000, 24.82000,   0.00000, 0.00000, -90.12000);
    CreateDynamicObject(19461, 1783.62000, -1094.87000, 28.32000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1773.00000, -1094.87000, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1764.38000, -1094.87000, 28.32000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19415, 1766.66003, -1094.87000, 24.82000,   0.00000, 0.00000, -90.12000);
    CreateDynamicObject(19461, 1760.23999, -1094.87000, 28.33000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19397, 1756.29004, -1098.51001, 24.83000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1790.56006, -1099.60010, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1790.52002, -1111.19995, 28.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1787.89001, -1117.12000, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1778.28003, -1116.10999, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1787.89001, -1117.12000, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1778.28015, -1116.10999, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19331, 1782.14478, -1115.72253, 25.07000,   0.00000, 265.00000, -25.00000);
    CreateDynamicObject(19461, 1774.00000, -1094.87000, 28.32000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1760.23999, -1094.87000, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1785.79004, -1094.87000, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1785.63000, -1108.41003, 24.81000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1773.12000, -1108.41003, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19397, 1779.20996, -1108.41003, 24.81000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1502, 1778.43005, -1108.41003, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1773.12000, -1108.41003, 24.81000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1782.75000, -1108.41003, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1792.39001, -1108.41003, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(941, 1774.47998, -1107.72998, 23.53000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(937, 1776.84998, -1107.75000, 23.53000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(936, 1780.97998, -1107.70996, 23.55000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2135, 1787.87000, -1095.43994, 23.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2136, 1785.93994, -1095.43994, 23.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2139, 1784.96997, -1095.44995, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2149, 1785.10999, -1095.28003, 24.28000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2529, 1783.96997, -1095.43994, 23.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2139, 1782.96997, -1095.44995, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2140, 1788.56995, -1096.38000, 22.93000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(2139, 1781.98999, -1095.44995, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2867, 1782.64001, -1095.27002, 24.12000,   0.00000, 0.00000, -32.46000);
    CreateDynamicObject(2219, 1786.15002, -1095.43005, 24.18000,   -25.00000, 25.00000, 47.00000);
    CreateDynamicObject(18075, 1766.96997, -1101.21997, 29.08000,   0.00000, 0.00000, -90.18000);
    CreateDynamicObject(18075, 1782.82996, -1107.08997, 29.08000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1968, 1786.25000, -1098.68005, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1968, 1786.25000, -1100.67004, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1968, 1786.25000, -1102.64001, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1968, 1783.16003, -1102.64001, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1968, 1783.16003, -1100.67004, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1968, 1783.16003, -1098.68005, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1969, 1783.16003, -1104.00000, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1969, 1786.25000, -1104.00000, 23.59000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1764.50000, -1107.96997, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1764.50000, -1107.96997, 28.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1671, 1758.31006, -1107.78003, 23.52000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1671, 1768.80005, -1105.14001, 23.52000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1766.44995, -1094.80005, 24.68000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1779.47998, -1094.85999, 24.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1779.60999, -1094.82996, 24.68000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(3578, 1729.60999, -1101.35999, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1255, 816.98999, -943.64001, 50.30000,   0.00000, 0.00000, -85.74000);
    CreateDynamicObject(19461, 1764.27002, -1103.18994, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19397, 1757.84998, -1103.18005, 24.83000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19397, 1770.68994, -1103.18994, 24.83000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19461, 1772.20996, -1108.04004, 24.83000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1772.20996, -1108.04004, 28.33000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1767.48999, -1103.20996, 28.33000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1761.19995, -1103.19995, 28.33000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1764.29004, -1103.18994, 28.33000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(1502, 1769.92004, -1103.19995, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 1757.06006, -1103.18994, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1546, 1787.18994, -1095.23999, 24.21000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2342, 1783.16003, -1100.62000, 23.98000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2342, 1786.27002, -1104.04004, 23.98000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2223, 1786.21997, -1098.59998, 23.92000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2223, 1783.06006, -1102.64001, 23.92000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1459, 1744.47998, -1130.51001, 23.69000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1423, 1744.47998, -1129.46997, 23.77000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1424, 1748.28003, -1130.15002, 23.60000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1425, 1746.46997, -1129.51001, 23.49000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1422, 1748.42004, -1129.47998, 23.47000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1282, 1746.40002, -1130.34998, 23.58000,   0.00000, 0.00000, -89.94000);
    CreateDynamicObject(2605, 1758.29004, -1106.38000, 23.46000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1794, 1763.89001, -1104.80005, 23.07000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1794, 1766.04004, -1104.80005, 23.07000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2605, 1768.78003, -1103.82996, 23.46000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1235, 1781.09998, -1095.32996, 23.58000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1742, 1763.44995, -1103.16003, 23.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1742, 1765.08997, -1103.15002, 23.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1997, 1720.56995, -1126.44995, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2007, 1756.94995, -1107.78003, 23.06000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2007, 1771.59998, -1105.64001, 23.06000,   0.00000, 0.00000, -90.90000);
    CreateDynamicObject(2425, 1782.05005, -1095.04004, 24.12000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1722.87000, -1142.39001, 28.10000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1731.90002, -1142.40002, 28.20000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1749.12000, -1142.38000, 28.10000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1744.57996, -1142.38000, 28.20000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(7092, 1752.81006, -1134.68994, 81.86000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1663, 1753.37000, -1103.12000, 23.54000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1663, 1751.51001, -1103.12000, 23.54000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(11665, 1775.58997, -1096.62000, 23.76000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1704, 1777.53003, -1097.71997, 23.07000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1704, 1774.69995, -1097.69995, 23.07000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2700, 1775.56995, -1095.23999, 25.03000,   0.00000, 0.00000, 270.00000);
    CreateDynamicObject(2108, 1762.59998, -1103.52002, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2108, 1766.37000, -1103.56995, 23.06000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19379, 1742.34998, -1099.65002, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1742.34998, -1109.26001, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1752.84998, -1109.26001, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1752.84998, -1099.65002, 23.03000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1763.34998, -1099.65002, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1773.82996, -1099.65002, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1784.30005, -1099.65002, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1784.30005, -1109.25000, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1773.82996, -1109.25000, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1763.34998, -1109.25000, 22.99000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1788.68005, -1106.73999, 22.99000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1788.69995, -1103.55005, 22.99000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1788.70996, -1100.37000, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1788.68005, -1097.22998, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1791.21997, -1110.05005, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1791.20996, -1113.19995, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1789.25000, -1115.56995, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1785.76001, -1115.54004, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1782.29004, -1115.56006, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1778.81006, -1114.57996, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1775.32996, -1114.57996, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19370, 1771.84998, -1114.57996, 22.99000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(2835, 1765.06995, -1105.68994, 23.08000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2836, 1757.30005, -1104.31995, 23.08000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1807.62122, -1099.60059, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19415, 1807.62122, -1105.47998, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1807.62122, -1111.21997, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1807.62122, -1105.76001, 24.68000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19461, 1807.62122, -1101.58997, 28.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1807.62122, -1111.19995, 28.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19461, 1795.09143, -1094.87000, 28.32000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1760.23999, -1094.87000, 28.33000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19415, 1803.93176, -1094.87000, 24.82000,   0.00000, 0.00000, -90.12000);
    CreateDynamicObject(19461, 1798.12207, -1094.87000, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1801.95825, -1094.87000, 28.32000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(1649, 1803.07300, -1094.87000, 24.68000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1649, 1803.07300, -1094.87000, 24.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1807.62122, -1105.76001, 24.68000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(19397, 1790.56006, -1105.46411, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19379, 1795.51477, -1104.55017, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1795.51477, -1099.67505, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1802.34436, -1104.48071, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(19379, 1802.39673, -1099.67505, 23.01000,   0.00000, 90.00000, 0.00000);
    CreateDynamicObject(1502, 1790.53430, -1106.21399, 23.06000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19369, 1792.19299, -1103.87488, 22.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1796, 1794.13123, -1103.24817, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1796, 1794.13123, -1099.53174, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2087, 1790.83545, -1101.83203, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2087, 1790.83545, -1098.07202, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1796, 1794.13123, -1095.70630, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19461, 1790.56006, -1108.24719, 28.30000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1797.53296, -1103.87488, 22.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19369, 1799.13416, -1102.34753, 22.76000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1800.73315, -1103.87488, 22.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19369, 1805.95313, -1103.87488, 22.50000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19369, 1799.13416, -1099.17432, 22.76000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1799.13416, -1096.54956, 22.76000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1796, 1802.69116, -1103.24817, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1796, 1802.69116, -1099.53174, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1796, 1802.69116, -1095.70630, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2087, 1799.39539, -1101.83203, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2087, 1799.39539, -1098.07202, 23.07000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1796, 1795.57117, -1103.02820, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1796, 1795.57117, -1099.31165, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1796, 1795.57190, -1095.48389, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2087, 1798.87354, -1100.77197, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2087, 1798.87756, -1097.01599, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1796, 1804.05115, -1103.02820, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1796, 1804.05115, -1099.31165, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(2087, 1807.37354, -1100.77197, 23.07000,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(18075, 1798.90942, -1101.48120, 29.08000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3578, 1721.18005, -1135.05005, 22.30000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19415, 1791.93530, -1094.87000, 24.82000,   0.00000, 0.00000, -90.12000);
    CreateDynamicObject(1649, 1792.76953, -1094.87000, 24.68000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1649, 1792.76953, -1094.87000, 24.68000,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1498, 1703.01855, -1099.90955, 23.05900,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1498, 1702.99060, -1096.89185, 23.05900,   0.00000, 0.00000, -90.00000);
    CreateDynamicObject(1498, 1750.65540, -1094.84595, 23.04510,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1498, 1753.67786, -1094.81897, 23.04510,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1775.28821, -1115.87366, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1777.51404, -1115.87366, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1779.73682, -1115.87366, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1781.96082, -1115.87366, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1781.25183, -1112.36035, 23.07780,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2200, 1779.02954, -1112.36035, 23.07780,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2200, 1776.80957, -1112.36035, 23.07780,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2200, 1782.51294, -1112.05347, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1780.28796, -1112.05347, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1778.07104, -1112.05347, 23.07780,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2200, 1773.64246, -1113.97485, 23.07780,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2200, 1773.64246, -1111.74939, 23.07780,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(1208, 1777.53979, -1108.78809, 23.08890,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1208, 1776.83984, -1108.78809, 23.08890,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1208, 1776.13977, -1108.78809, 23.08890,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1208, 1775.41980, -1108.78809, 23.08890,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(1208, 1774.71985, -1108.78809, 23.08890,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(19331, 1781.52966, -1115.71790, 25.07000,   0.00000, 265.00000, -4.00000);
    CreateDynamicObject(19331, 1781.00073, -1115.69910, 25.07000,   0.00000, 265.00000, -33.00000);
    CreateDynamicObject(19331, 1780.49707, -1115.77954, 25.07000,   0.00000, 265.00000, -4.00000);
    CreateDynamicObject(19331, 1779.88684, -1115.64880, 25.07000,   0.00000, 265.00000, -40.00000);
    CreateDynamicObject(19331, 1779.37720, -1115.62659, 25.07000,   0.00000, 265.00000, 40.00000);
    CreateDynamicObject(19331, 1778.76819, -1115.71338, 25.07000,   0.00000, 265.00000, -6.00000);
    CreateDynamicObject(19331, 1778.26331, -1115.70239, 25.07000,   0.00000, 265.00000, 4.00000);
    CreateDynamicObject(19331, 1777.65649, -1115.68921, 25.07000,   0.00000, 265.00000, -25.00000);
    CreateDynamicObject(19331, 1777.14661, -1115.70398, 25.07000,   0.00000, 265.00000, 47.00000);
    CreateDynamicObject(19331, 1776.52551, -1115.72192, 25.07000,   0.00000, 265.00000, -11.00000);
    CreateDynamicObject(19331, 1776.01550, -1115.72620, 25.07000,   0.00000, 265.00000, 4.00000);
    CreateDynamicObject(19331, 1775.50549, -1115.73047, 25.07000,   0.00000, 265.00000, -55.00000);
    CreateDynamicObject(19331, 1774.97852, -1115.63733, 25.07000,   0.00000, 265.00000, -25.00000);
    CreateDynamicObject(19331, 1774.36487, -1115.74731, 25.07000,   0.00000, 265.00000, -55.00000);
    CreateDynamicObject(19330, 1773.77942, -1113.69958, 25.07000,   -4.00000, -91.00000, -113.00000);
    CreateDynamicObject(19330, 1773.85120, -1113.08044, 25.07000,   -4.00000, -91.00000, -55.00000);
    CreateDynamicObject(19330, 1773.80261, -1112.64807, 25.07000,   -4.00000, -91.00000, -85.00000);
    CreateDynamicObject(19330, 1773.81299, -1111.98816, 25.07000,   -4.00000, -91.00000, -53.00000);
    CreateDynamicObject(19330, 1773.81091, -1111.32727, 25.07000,   -4.00000, -91.00000, -127.00000);
    CreateDynamicObject(19330, 1773.87378, -1110.18103, 25.07000,   -4.00000, -91.00000, -62.00000);
    CreateDynamicObject(19330, 1773.91455, -1110.68677, 25.07000,   -4.00000, -91.00000, -125.00000);
    CreateDynamicObject(19331, 1773.86304, -1115.73877, 25.07000,   0.00000, 265.00000, 11.00000);
    CreateDynamicObject(19330, 1782.68787, -1111.86804, 25.07000,   -4.00000, -91.00000, 10.00000);
    CreateDynamicObject(19330, 1782.23010, -1111.83459, 25.07000,   -4.00000, -91.00000, 18.00000);
    CreateDynamicObject(19330, 1781.61719, -1111.82056, 25.07000,   -4.00000, -91.00000, -40.00000);
    CreateDynamicObject(19330, 1781.08679, -1111.93933, 25.07000,   -4.00000, -91.00000, -16.00000);
    CreateDynamicObject(19330, 1780.49768, -1111.90503, 25.07000,   -4.00000, -91.00000, 25.00000);
    CreateDynamicObject(19330, 1779.99109, -1111.83813, 25.07000,   -4.00000, -91.00000, -40.00000);
    CreateDynamicObject(19330, 1779.38184, -1111.77942, 25.07000,   -4.00000, -91.00000, 47.00000);
    CreateDynamicObject(19330, 1778.78003, -1111.78455, 25.07000,   -4.00000, -91.00000, -40.00000);
    CreateDynamicObject(19330, 1778.15027, -1111.89075, 25.07000,   -4.00000, -91.00000, -12.00000);
    CreateDynamicObject(19330, 1777.64539, -1111.88013, 25.07000,   -4.00000, -91.00000, -25.00000);
    CreateDynamicObject(19330, 1777.14551, -1111.87158, 25.07000,   -4.00000, -91.00000, 9.00000);
    CreateDynamicObject(19330, 1776.63965, -1111.85986, 25.07000,   -4.00000, -91.00000, 47.00000);
    CreateDynamicObject(19330, 1776.53137, -1112.47644, 25.07000,   -4.00000, -91.00000, 178.00000);
    CreateDynamicObject(19330, 1777.14514, -1112.58252, 25.07000,   -4.00000, -91.00000, 149.00000);
    CreateDynamicObject(19330, 1777.56812, -1112.50891, 25.07000,   -4.00000, -91.00000, -178.00000);
    CreateDynamicObject(19330, 1778.16846, -1112.60168, 25.07000,   -4.00000, -91.00000, -193.00000);
    CreateDynamicObject(19369, 1783.08862, -1113.25757, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19397, 1783.08862, -1110.05676, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1783.08862, -1116.44299, 24.81000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1783.08862, -1116.44495, 28.31000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1783.08862, -1113.25757, 28.31000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1783.08862, -1110.05676, 28.31000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 1783.10864, -1110.81006, 23.04000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19461, 1786.61902, -1119.57288, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1777.52209, -1119.56335, 24.83000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1777.52209, -1119.56335, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19461, 1786.61902, -1119.57288, 28.31000,   0.00000, 0.00000, -90.06000);
    CreateDynamicObject(19369, 1786.79395, -1111.62354, 24.81000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2527, 1784.63379, -1113.18726, 23.08350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2527, 1785.65552, -1113.18616, 23.08350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2527, 1786.68213, -1113.18616, 23.08350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2523, 1788.06995, -1108.98718, 23.10110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2523, 1787.06995, -1108.98718, 23.10110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2523, 1786.06995, -1108.98718, 23.10110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2523, 1785.06995, -1108.98718, 23.10110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2523, 1789.06995, -1108.98718, 23.10110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1784.76855, -1115.98303, 24.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 1783.15796, -1114.48438, 23.04000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 1784.83777, -1114.48438, 23.04000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1786.44861, -1115.98303, 24.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 1786.51782, -1114.48438, 23.04000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1788.10864, -1115.98303, 24.07000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1791.33118, -1114.46082, 24.83000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(19369, 1791.33118, -1114.46082, 28.31000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2525, 1787.29626, -1116.51965, 23.09340,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2525, 1785.65625, -1116.51965, 23.09340,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2525, 1783.95630, -1116.51965, 23.09340,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(2523, 1784.06995, -1108.98718, 23.10110,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1784.75403, -1111.62354, 24.81000,   0.00000, 0.00000, 90.00000);
    CreateDynamicObject(2527, 1783.61401, -1113.18726, 23.08350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2527, 1787.70215, -1113.18616, 23.08350,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1502, 1788.17786, -1114.48438, 23.04000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1789.80859, -1115.98303, 24.83000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(19369, 1789.80859, -1115.98303, 28.31000,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2525, 1788.95630, -1116.51965, 23.09340,   0.00000, 0.00000, 180.00000);
    CreateDynamicObject(19330, 1778.75940, -1112.54224, 25.07000,   -4.00000, -91.00000, -156.00000);
    CreateDynamicObject(19330, 1779.34583, -1112.48743, 25.07000,   -4.00000, -91.00000, -193.00000);
    CreateDynamicObject(19330, 1779.88721, -1112.52405, 25.07000,   -4.00000, -91.00000, -178.00000);
    CreateDynamicObject(19330, 1780.56470, -1112.51501, 25.07000,   -4.00000, -91.00000, -229.00000);
    CreateDynamicObject(19330, 1781.07898, -1112.59021, 25.07000,   -4.00000, -91.00000, -120.00000);
    CreateDynamicObject(19330, 1781.59680, -1112.56604, 25.07000,   -4.00000, -91.00000, -185.00000);
    CreateDynamicObject(19330, 1782.11133, -1112.54016, 25.07000,   -4.00000, -91.00000, -135.00000);
    CreateDynamicObject(19330, 1782.72241, -1112.61157, 25.07000,   -4.00000, -91.00000, -200.00000);

	// Hospital
    CreateDynamicObject(19449,-207.3999939,-1739.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-205.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-204.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-202.8999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-201.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19460,-207.3990021,-1739.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-202.6000061,-1734.8000488,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-206.1999969,-1734.8010254,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1569,-206.0000000,-1734.9000244,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1569,-203.0000000,-1734.9000244,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(19387,-196.6992188,-1744.5000000,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-201.3994141,-1736.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4003906,-1736.5000000,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-211.7998047,-1734.7998047,678.4000244,270.0000000,180.0000000,180.0000000);
	CreateDynamicObject(17038,-199.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-198.3999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-196.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19449,-196.6000061,-1738.0159912,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6719971,-1738.0169678,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-195.3994141,-1742.8994141,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-195.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4010010,-1742.9000244,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-201.1000061,-1739.6999512,674.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-201.1005859,-1739.6992188,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-199.8837891,-1744.5000000,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-191.1503906,-1744.4990234,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-191.1503906,-1744.5009766,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.0749969,-1744.4990234,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.0749969,-1744.5009766,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.8849945,-1744.4980469,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-201.0989990,-1739.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-201.3994141,-1746.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-201.3994141,-1749.2998047,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-201.3999939,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-201.3999939,-1755.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-201.3999939,-1758.9000244,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-205.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-204.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-202.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-201.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-199.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-198.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-196.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-195.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4019928,-1746.0999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4010010,-1746.9250488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-201.3994141,-1762.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-206.1999969,-1763.6999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-201.4010010,-1751.6369629,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4019928,-1753.3249512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4010010,-1758.0369873,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4019928,-1759.7249756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.4010010,-1764.4370117,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-206.3000031,-1763.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19387,-207.3994141,-1746.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19387,-207.3994141,-1758.8994141,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19357,-207.3999939,-1762.0999756,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-195.3994141,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-195.3994141,-1762.0996094,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-196.5996094,-1758.7998047,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-206.0000000,-1733.2998047,672.5999756,270.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-203.0000000,-1733.3000488,672.5999756,270.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19441,-203.7140045,-1733.3010254,677.3980244,0.0000000,270.0000000,90.0000000);
	CreateDynamicObject(19441,-205.2870026,-1733.3010254,677.3970244,0.0000000,270.0000000,90.0000000);
	CreateDynamicObject(2885,-200.8994141,-1734.7998047,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8994141,-1741.5000000,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-211.7998047,-1741.5000000,678.4000244,270.0000000,179.9945068,179.9945068);
	CreateDynamicObject(2885,-211.7998047,-1748.1992188,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8999939,-1748.1999512,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8994141,-1754.8994141,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8994141,-1761.5996094,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-211.7998047,-1761.5996094,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(17038,-207.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-208.8994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-210.3999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-211.8999939,-1747.6999512,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-213.3994141,-1747.6992188,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-213.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-211.8999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-210.3994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-208.8994141,-1768.3994141,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(17038,-207.3999939,-1768.4000244,668.2999878,0.0000000,270.0000000,0.0000000);
	CreateDynamicObject(19449,-214.6000061,-1758.9000244,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-214.5996094,-1749.2998047,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-214.6000061,-1739.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-212.1992188,-1734.7998047,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-199.8000031,-1744.5010986,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-201.3979950,-1746.0999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3990021,-1746.9250488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3990021,-1751.6369629,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3970032,-1753.3242188,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3990021,-1758.0369873,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-201.3979950,-1759.7249756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4010010,-1752.5000000,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4003906,-1762.0996094,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-196.6494141,-1758.7988281,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6494141,-1758.8007812,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-207.3979950,-1740.5140381,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.3990021,-1761.2370605,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.3979950,-1764.4000244,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-214.5989990,-1758.8000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-214.5980072,-1749.1999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-214.5989990,-1739.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-215.8000031,-1734.8011475,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-207.4010010,-1739.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.4013672,-1740.5136719,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.4011993,-1761.2370605,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19368,-207.4010010,-1764.3994141,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3034,-204.3994141,-1763.5996094,676.7000122,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(1523,-201.3699951,-1756.4499512,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-201.3691406,-1750.0498047,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-201.3699951,-1762.8499756,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2686,-201.5130005,-1744.9000244,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2685,-201.5130005,-1745.4000244,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2688,-207.2998047,-1747.5996094,676.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-201.5000000,-1748.5000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1750.0000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1754.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1756.4000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1761.3000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.5000000,-1762.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3291016,-1748.5000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1750.0000000,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1754.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1756.4000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1761.3000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-201.3300018,-1762.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-211.8000031,-1751.5000000,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-211.7998047,-1729.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-218.5996094,-1729.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-218.6000061,-1754.3000488,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-190.8994141,-1753.5996094,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-190.8999939,-1735.1999512,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-190.8994141,-1731.6992188,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1523,-207.3691406,-1746.8496094,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-207.3699951,-1759.6500244,674.7399902,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-207.3291016,-1745.2998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.3300018,-1746.8199463,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.3300018,-1758.0999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.3300018,-1759.6199951,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1759.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1758.0999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1746.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1745.2998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1999,-200.5000000,-1740.3994141,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2009,-199.5000000,-1743.7998047,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1671,-199.5000000,-1739.3000488,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1671,-199.2998047,-1743.0000000,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(19387,-213.0000000,-1742.6992188,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-209.7998047,-1742.6992188,673.9010010,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-209.0000000,-1742.7001953,673.9000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-212.1999969,-1742.6989746,679.0000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-208.5000000,-1742.6999512,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-210.7402344,-1742.6992188,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1742.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6640015,-1742.6979980,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3739929,-1742.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3750000,-1742.7001953,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1742.7011719,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6640015,-1742.7021484,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-213.7890625,-1742.7294922,674.7399902,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-212.2998047,-1742.7998047,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1742.8000488,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1742.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-212.3000031,-1742.5999756,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-207.5000000,-1742.6992188,666.9000244,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3657,-213.8999939,-1745.6999512,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(3394,-213.7998047,-1739.0000000,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(3396,-208.1992188,-1737.0000000,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3397,-208.1992188,-1740.8994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14487,-218.6000061,-1731.8000488,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2007,-213.6992188,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2007,-212.6992188,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2132,-211.0996094,-1735.3994141,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14532,-211.3994141,-1737.0996094,675.7800293,0.0000000,0.0000000,194.7491455);
	CreateDynamicObject(2146,-211.0996094,-1738.7998047,675.2700195,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3657,-206.8999939,-1754.5999756,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2811,-201.8994141,-1735.3994141,674.7999878,0.0000000,0.0000000,139.9932861);
	CreateDynamicObject(2811,-201.8999939,-1763.1999512,674.7999878,0.0000000,0.0000000,219.9957275);
	CreateDynamicObject(2811,-206.8999939,-1763.1999512,674.7999878,0.0000000,0.0000000,149.9957275);
	CreateDynamicObject(3657,-206.8999939,-1739.5999756,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2811,-206.8994141,-1735.3994141,674.7999878,0.0000000,0.0000000,221.9897461);
	CreateDynamicObject(2688,-201.5000000,-1760.5000000,676.4000244,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(19460,-201.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.3000031,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.3000031,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.3000031,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-204.8000031,-1734.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-206.3999939,-1763.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-214.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-214.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-214.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-207.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-214.3999939,-1734.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1742.8000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1742.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1744.4000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1738.0999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1744.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1758.6999512,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1758.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-195.5000000,-1758.9000244,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-195.5000000,-1749.3000488,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-195.5000000,-1739.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19357,-209.0000000,-1748.8010254,673.9010010,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-207.3999939,-1752.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.4010010,-1751.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.3990021,-1751.5999756,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.4019928,-1753.3000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-207.3979950,-1753.3000488,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3657,-206.8999939,-1750.4000244,675.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19387,-213.0000000,-1748.8000488,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-212.1999969,-1748.8010254,679.0000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19357,-209.8000031,-1748.8000488,673.9000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-208.6000061,-1748.8000488,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19466,-210.8404999,-1748.8000488,676.4000244,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-212.1999969,-1756.1999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1523,-213.7890015,-1748.8299561,674.7399902,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-212.1999969,-1748.6999512,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1748.9000244,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.1999969,-1756.0999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(19460,-212.3000031,-1756.1989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1748.7990000,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6629944,-1748.7980000,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-210.6621094,-1748.8027344,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-209.0000000,-1748.8017578,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3750000,-1748.7989502,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19368,-215.3750000,-1748.8007812,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(3397,-208.1999969,-1750.8000488,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3396,-208.1999969,-1754.4000244,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-212.1999969,-1756.3000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(2132,-209.8999939,-1755.5999756,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(2007,-212.3000031,-1755.5999756,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(2007,-213.3000031,-1755.5999756,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(3394,-213.8000031,-1752.1999512,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(2146,-211.1000061,-1751.9000244,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(14532,-210.6999969,-1753.5000000,675.7999878,0.0000000,0.0000000,14.0000000);
	CreateDynamicObject(19460,-212.2998047,-1756.2001953,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(3657,-201.8994141,-1746.5000000,675.2999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2811,-214.0000000,-1743.4000244,674.7999878,0.0000000,0.0000000,251.9897461);
	CreateDynamicObject(2811,-214.0000000,-1748.0999756,674.7999878,0.0000000,0.0000000,295.9879761);
	CreateDynamicObject(16101,-207.5000000,-1748.8000488,666.9000244,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3394,-213.8000031,-1761.5000000,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(2007,-214.0000000,-1758.5999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2007,-214.0000000,-1757.5999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2132,-210.1000061,-1763.0999756,674.7999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(3396,-208.1999969,-1761.6999512,674.7999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3397,-210.8000031,-1756.6999512,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2146,-211.1999969,-1759.9000244,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(11237,-230.0000000,-1760.4000244,698.9000244,0.0000000,180.0000000,180.0000000);
	CreateDynamicObject(3053,-211.1999969,-1760.4000244,678.4000244,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-211.1999969,-1760.4000244,688.0999756,0.0000000,180.0000000,0.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.0999756,676.7000122,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2885,-211.8000031,-1754.9000244,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.8000488,676.7000122,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.8000488,677.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(2596,-214.3000031,-1760.0999756,677.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-222.6000061,-1760.4000244,677.9000244,0.0000000,90.0000000,0.0000000);
	CreateDynamicObject(16101,-214.5000000,-1760.4000244,666.19387220,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3808,-207.2500000,-1757.8000488,676.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(3808,-212.0000000,-1742.8499756,676.2999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(3808,-212.0000000,-1748.6600342,676.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-201.3000031,-1749.5000000,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.3000031,-1759.0999756,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(2009,-199.5000000,-1747.8000488,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1999,-200.5000000,-1746.0999756,674.8010254,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1671,-199.3999939,-1746.9000244,675.2000122,0.0000000,0.0000000,264.0000000);
	CreateDynamicObject(1671,-199.3999939,-1745.0999756,675.2000122,0.0000000,0.0000000,278.0000000);
	CreateDynamicObject(2009,-196.8000031,-1753.8000488,674.8010254,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1999,-197.8000031,-1752.0999756,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1999,-198.6999969,-1752.8000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2009,-199.6999969,-1751.0999756,674.8010254,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1671,-197.6000061,-1753.0000000,675.2000122,0.0000000,0.0000000,282.0000000);
	CreateDynamicObject(1671,-196.8000031,-1751.3000488,675.2000122,0.0000000,0.0000000,260.0000000);
	CreateDynamicObject(1671,-199.8000031,-1752.0999756,675.2000122,0.0000000,0.0000000,84.0000000);
	CreateDynamicObject(1671,-199.8000031,-1753.8000488,675.2000122,0.0000000,0.0000000,104.0000000);
	CreateDynamicObject(2009,-196.0000000,-1757.1999512,674.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1999,-197.6999969,-1758.1999512,674.8010254,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1671,-196.8999939,-1757.3000488,675.2000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1671,-198.6999969,-1758.0000000,675.2000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2202,-196.0000000,-1746.1999512,674.7800293,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2811,-195.8999939,-1745.0999756,674.7999878,0.0000000,0.0000000,115.9932861);
	CreateDynamicObject(2007,-196.0000000,-1748.3000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2007,-196.0000000,-1749.3000488,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2811,-200.8999939,-1758.3000488,674.7999878,0.0000000,0.0000000,141.9881592);
	CreateDynamicObject(2611,-198.1999969,-1758.6700439,676.7999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(2611,-201.2700043,-1746.4000244,676.5999756,0.0000000,0.0000000,89.9945068);
	CreateDynamicObject(19449,-215.8000031,-1763.6999512,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19449,-201.3999939,-1768.5000000,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19449,-195.3999939,-1771.6999512,676.5000000,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2885,-200.8999939,-1768.3000488,678.4000244,270.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-201.3990021,-1767.5799561,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.4010010,-1771.6999512,673.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(19460,-195.5000000,-1768.5000000,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19460,-201.3000031,-1768.6999512,679.9000244,0.0000000,179.9945068,0.0000000);
	CreateDynamicObject(19449,-196.6000061,-1772.4000244,676.5000000,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1772.3990479,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(19460,-196.6000061,-1772.3000488,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(14487,-190.8999939,-1778.1999512,678.0999756,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-211.8000031,-1753.0999756,675.2999878,0.0000000,0.0000000,290.0000000);
	CreateDynamicObject(1789,-211.8994141,-1759.1992188,675.2999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1789,-210.1999969,-1737.6999512,675.2999878,0.0000000,0.0000000,99.9951172);
	CreateDynamicObject(1800,-199.0000000,-1759.5000000,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-199.0000000,-1771.5000000,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-199.0000000,-1767.5999756,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-199.0000000,-1763.6999512,674.7000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(1800,-200.6999969,-1766.9000244,674.7000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1800,-200.6999969,-1773.3000488,674.7000122,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-196.1999969,-1770.6999512,675.2999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(1789,-196.1999969,-1766.6999512,675.2999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(1789,-196.1999969,-1762.9000244,675.2999878,0.0000000,0.0000000,179.9945068);
	CreateDynamicObject(1789,-196.3000031,-1760.6999512,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-200.5000000,-1766.1999512,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(1789,-200.5000000,-1769.4000244,675.2999878,0.0000000,0.0000000,180.0000000);
	CreateDynamicObject(19460,-216.0000000,-1763.5999756,679.9000244,0.0000000,179.9945068,90.0000000);
	CreateDynamicObject(1999,-197.5000000,-1740.4000244,674.7999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(1671,-196.5000000,-1739.3000488,675.2000122,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(19460,-215.8999939,-1763.6989746,673.2999878,0.0000000,0.0000000,90.0000000);
	CreateDynamicObject(16101,-212.3000031,-1748.6999512,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1748.6999512,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-213.8000031,-1748.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(16101,-212.3000031,-1748.9000244,666.2999878,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2852,-206.8000031,-1742.8000488,675.2800293,0.0000000,0.0000000,0.0000000);
	CreateDynamicObject(2315,-206.8000031,-1742.4000244,674.7999878,0.0000000,0.0000000,270.0000000);
	CreateDynamicObject(2855,-206.6999969,-1743.6999512,675.2999878,0.0000000,0.0000000,0.0000000);
	CreateObject(6959, -205.39470, -1751.95544, 674.76721,   0.00000, 0.00000, 0.00000);


	SetObjectMaterial(CreateObject(11435,-204.3999939,-1745.0999756,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetObjectMaterial(CreateObject(11435,-204.3999939,-1752.0000000,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetObjectMaterial(CreateObject(11435,-204.3999939,-1758.8000488,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetObjectMaterial(CreateObject(11435,-198.6000061,-1764.0000000,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetObjectMaterial(CreateObject(11435,-198.6000061,-1769.1999512,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetObjectMaterial(CreateObject(11435,-198.6000061,-1756.3000488,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
	SetObjectMaterial(CreateObject(11435,-198.6000061,-1749.9000244,679.4000244,0.0000000,0.0000000,270.0000000), 1, 14532, "drivingbit", "blak_1");
    SetObjectMaterialText(CreateObject(19353, -195.4142, -1741.4693, 676.4188, 0.0000, 0.0000, 180.0), "HOSPITAL", 0, 140, "Cambria", 130, 1, -1, 0, 1);
	SetObjectMaterialText(CreateObject(19353, -195.4142, -1741.4362, 676.8190, 0.0000, 0.0000, 180), "SAN ANDREAS COUNTY", 0, 140, "Cambria", 55, 1, -584707328, 0, 1);
	SetObjectMaterialText(CreateObject(19353, -195.4142, -1739.7816, 676.8000, 0.0000, 0.0000, 180), "|", 0, 140, "Arial", 200, 1, -13750738, 0, 1);
	SetObjectMaterialText(CreateObject(19353, -195.4142, -1743.1800, 676.8000, 0.0000, 0.0000, 180), "|", 0, 140, "Arial", 200, 1, -13750738, 0, 1);

    // Bank interior
    CreateDynamicObject(14602, 1443.33521, -985.86328, 1000.47083, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1420.34436, -987.59058, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1420.34436, -997.22662, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1420.34436, -977.94659, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1420.34436, -968.31262, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1425.39563, -997.23810, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1425.52917, -996.80780, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1425.39563, -987.59912, 998.69928, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1425.39563, -977.97009, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1425.39563, -968.33612, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19450, 1425.15210, -1001.58301, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1444.42175, -992.99921, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1425.24097, -1001.64844, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1435.60022, -997.79559, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1430.77246, -1001.59528, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(1569, 1432.61536, -1001.55011, 995.10773, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19388, 1438.83838, -993.01642, 996.85449, 0.00000, 0.00000, 90.90000);
	CreateDynamicObject(19431, 1436.57031, -993.03369, 996.85193, 0.00000, 0.00000, 89.95040);
	CreateDynamicObject(19431, 1436.32031, -993.03369, 996.85388, 0.00000, 0.00000, 89.95040);
	CreateDynamicObject(19450, 1425.15210, -970.08197, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1427.71814, -970.08197, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1439.00610, -970.08197, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1448.52612, -970.08197, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19388, 1433.38245, -970.08441, 996.86249, 0.00000, 0.00000, 89.78290);
	CreateDynamicObject(19450, 1444.40637, -976.56262, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1444.40637, -966.93060, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1444.40637, -994.98560, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1435.89355, -997.23810, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1435.89355, -987.59912, 998.70532, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1435.89355, -977.97009, 998.70532, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1435.89355, -968.33612, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1446.39160, -968.33612, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1446.39160, -977.97009, 998.69733, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1446.39160, -987.59912, 998.69733, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19450, 1444.40637, -986.19659, 1000.16260, -180.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1457.74744, -985.02881, 995.10431, 0.00000, 0.00000, -90.06000);
	CreateDynamicObject(19377, 1446.35864, -997.23810, 998.69531, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -988.71008, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -990.89410, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -993.07813, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -995.26208, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -997.44611, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -999.63013, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -983.33411, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -981.15009, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -978.96613, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -976.78210, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -974.59808, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 1424.50464, -972.41412, 990.73462, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1424.51428, -991.97479, 999.00391, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1424.51428, -998.45477, 999.00391, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1424.51428, -980.05078, 999.00391, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1424.51428, -973.42279, 999.00391, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2190, 1426.35876, -983.58972, 995.82874, 0.00000, 0.00000, -39.84000);
	CreateDynamicObject(2190, 1427.57007, -986.54395, 995.82874, 0.00000, 0.00000, -102.06001);
	CreateDynamicObject(2190, 1425.72351, -988.86444, 995.82874, 0.00000, 0.00000, -154.73996);
	CreateDynamicObject(1715, 1425.98022, -986.25348, 995.10559, 0.00000, 0.00000, 81.60000);
	CreateDynamicObject(1715, 1425.09607, -984.83795, 995.10559, 0.00000, 0.00000, 148.67998);
	CreateDynamicObject(1715, 1424.76306, -987.25067, 995.10559, 0.00000, 0.00000, 29.09999);
	CreateDynamicObject(2244, 1427.16125, -984.70050, 996.06403, 0.00000, 0.00000, 27.72000);
	CreateDynamicObject(2244, 1426.93335, -987.59070, 996.06403, 0.00000, 0.00000, -24.42000);
	CreateDynamicObject(2165, 1420.89612, -986.00458, 995.10638, 0.00000, 0.00000, 89.57999);
	CreateDynamicObject(1715, 1422.16272, -985.46423, 995.10559, 0.00000, 0.00000, -105.06001);
	CreateDynamicObject(2164, 1420.47449, -980.71246, 995.10602, 0.00000, 0.00000, 87.65998);
	CreateDynamicObject(2773, 1426.07617, -993.09894, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -990.98590, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07617, -995.23187, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07617, -997.52289, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07617, -999.65588, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -981.18988, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -979.05688, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -976.84491, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -974.63287, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(2773, 1426.07690, -972.42090, 995.65790, 0.00000, 0.00000, 89.16010);
	CreateDynamicObject(1514, 1424.18726, -992.59534, 996.20605, 0.00000, 0.00000, 89.58002);
	CreateDynamicObject(1514, 1424.18726, -994.72827, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -996.94031, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -999.23132, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -980.66632, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -978.53333, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -976.32129, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -974.18829, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -971.97632, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1514, 1424.18726, -1001.12732, 996.20612, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(2599, 1426.01086, -1000.61847, 995.50098, 0.00000, 0.00000, -90.78001);
	CreateDynamicObject(2599, 1425.84473, -973.51959, 995.50061, 0.00000, 0.00000, -89.88000);
	CreateDynamicObject(2007, 1420.94165, -999.54968, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -998.60168, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -997.65369, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -996.70569, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -995.75769, 995.10248, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(1806, 1422.44788, -971.87213, 995.10742, 0.00000, 0.00000, -78.18002);
	CreateDynamicObject(1806, 1422.44788, -973.37311, 995.10742, 0.00000, 0.00000, -86.22002);
	CreateDynamicObject(1806, 1422.44788, -975.50610, 995.10742, 0.00000, 0.00000, -94.20003);
	CreateDynamicObject(1806, 1422.44788, -977.63910, 995.10742, 0.00000, 0.00000, -93.60002);
	CreateDynamicObject(1806, 1422.44788, -979.93011, 995.10742, 0.00000, 0.00000, -83.64001);
	CreateDynamicObject(1806, 1422.44788, -991.78009, 995.10742, 0.00000, 0.00000, -87.24001);
	CreateDynamicObject(1806, 1422.44788, -993.75513, 995.10742, 0.00000, 0.00000, -101.16003);
	CreateDynamicObject(1806, 1422.44788, -996.04608, 995.10742, 0.00000, 0.00000, -91.26003);
	CreateDynamicObject(1806, 1422.44788, -998.33710, 995.10742, 0.00000, 0.00000, -89.94003);
	CreateDynamicObject(1806, 1422.44788, -1000.23309, 995.10742, 0.00000, 0.00000, -78.18000);
	CreateDynamicObject(19379, 1425.52917, -987.17383, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1425.52917, -977.54077, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1425.52917, -967.90881, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1436.03015, -996.80780, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1436.03015, -987.17383, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1436.03015, -977.53979, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1436.03015, -967.90778, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1446.53076, -987.19177, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1457.03186, -987.19177, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1457.03186, -977.55780, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1446.53186, -977.55780, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1446.53186, -967.92480, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19379, 1446.53223, -996.81183, 995.01910, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19450, 1449.15112, -981.53003, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1458.76709, -981.53003, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1449.15210, -990.17499, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19450, 1458.78308, -990.17499, 996.85638, 0.00000, 0.00000, 89.99190);
	CreateDynamicObject(19377, 1449.57959, -985.77112, 998.29529, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19377, 1459.64563, -985.73309, 998.27332, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19450, 1457.40637, -985.67657, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1569, 1457.37061, -982.48169, 995.10571, 0.00000, 0.00000, 269.37631);
	CreateDynamicObject(1569, 1457.37549, -985.46259, 995.10571, 0.00000, 0.00000, 89.99800);
	CreateDynamicObject(1569, 1457.36865, -986.57483, 995.10571, 0.00000, 0.00000, 269.37631);
	CreateDynamicObject(1569, 1457.37585, -989.57758, 995.10571, 0.00000, 0.00000, 89.99800);
	CreateDynamicObject(19431, 1440.70752, -982.46478, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1440.70752, -981.04077, 996.86212, 0.00000, 0.00000, -91.14001);
	CreateDynamicObject(19431, 1439.91956, -981.72931, 996.86212, 0.00000, 0.00000, -183.05991);
	CreateDynamicObject(19431, 1441.44763, -981.76929, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1441.44763, -989.43732, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1440.70752, -988.71283, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1440.70752, -990.13281, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1439.88562, -989.40332, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1431.84351, -988.67279, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1431.10046, -989.40332, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1431.84351, -990.13580, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1432.58154, -989.40332, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1432.58154, -982.06531, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1431.02148, -982.01929, 996.86212, 0.00000, 0.00000, -181.92000);
	CreateDynamicObject(19431, 1431.84351, -982.75677, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(19431, 1431.84351, -981.32483, 996.86212, 0.00000, 0.00000, -91.56000);
	CreateDynamicObject(1569, 1432.61133, -970.15210, 995.10773, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14576, 1435.29407, -987.92871, 990.71588, 0.00000, 0.00000, -0.36000);
	CreateDynamicObject(19379, 1436.03015, -1001.03583, 995.02307, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(19388, 1438.86841, -1002.63641, 996.85449, 0.00000, 0.00000, 90.90000);
	CreateDynamicObject(19450, 1440.54065, -997.84619, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19450, 1437.23877, -997.84979, 996.85638, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1440.83362, -1004.66913, 998.26831, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(2634, 1441.06909, -1004.53168, 992.32001, 0.00000, 0.00000, 270.07040);
	CreateDynamicObject(2198, 1433.27332, -996.86798, 989.92047, 0.00000, 0.00000, 178.63960);
	CreateDynamicObject(2198, 1433.27332, -994.02600, 989.92047, 0.00000, 0.00000, 178.63960);
	CreateDynamicObject(2198, 1433.27332, -990.89001, 989.92047, 0.00000, 0.00000, 178.63960);
	CreateDynamicObject(2198, 1433.27332, -1000.00403, 989.92047, 0.00000, 0.00000, 178.63960);
	CreateDynamicObject(1806, 1432.72278, -998.97363, 989.91901, 0.00000, 0.00000, -167.28003);
	CreateDynamicObject(1806, 1432.60571, -995.73785, 989.91901, 0.00000, 0.00000, 175.12816);
	CreateDynamicObject(1806, 1432.60571, -992.79791, 989.91901, 0.00000, 0.00000, 194.12750);
	CreateDynamicObject(1806, 1432.60571, -989.75989, 989.91901, 0.00000, 0.00000, 186.49478);
	CreateDynamicObject(16782, 1443.08545, -993.57495, 992.76324, 0.00000, 0.00000, 179.01819);
	CreateDynamicObject(3397, 1442.95642, -993.62469, 989.94727, 0.00000, 0.00000, 357.18283);
	CreateDynamicObject(3386, 1442.72241, -996.43250, 989.89600, 0.00000, 0.00000, 176.06250);
	CreateDynamicObject(3386, 1442.72241, -997.60852, 989.91400, 0.00000, 0.00000, 176.06250);
	CreateDynamicObject(3386, 1442.87439, -990.38049, 989.91400, 0.00000, 0.00000, 356.84091);
	CreateDynamicObject(3386, 1442.87439, -989.24652, 989.91400, 0.00000, 0.00000, 356.84091);
	CreateDynamicObject(18643, 1427.60217, -995.31152, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1418.20618, -995.31152, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1418.20618, -990.12750, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1427.60217, -990.12750, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1427.60217, -984.45752, 984.45007, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1418.04419, -984.45752, 984.45007, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14598, 1431.54688, -985.73328, 1010.65839, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1439.22668, -972.44214, 995.05151, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1442.60986, -973.58191, 995.05151, 0.00000, 0.00000, 269.47330);
	CreateDynamicObject(1723, 1441.65991, -976.88171, 995.05151, 0.00000, 0.00000, 179.19260);
	CreateDynamicObject(1723, 1438.09546, -975.58490, 995.05151, 0.00000, 0.00000, 86.82700);
	CreateDynamicObject(1817, 1439.95251, -975.20856, 995.11218, 0.00000, 0.00000, -0.36000);
	CreateDynamicObject(2011, 1437.90637, -970.72211, 995.11951, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2002, 1439.03247, -970.70801, 995.11951, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1776, 1440.21924, -970.60382, 996.18219, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2816, 1439.91479, -974.76520, 995.62378, 0.00000, 0.00000, -66.18000);
	CreateDynamicObject(2245, 1440.35779, -974.71698, 995.85413, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1549, 1441.38904, -970.58020, 995.07281, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2961, 1436.19360, -992.91449, 996.43372, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1436.22546, -992.86798, 996.92572, 0.00000, 0.00000, 169.80000);
	CreateDynamicObject(1999, 1435.73157, -1005.59863, 995.12238, 0.00000, 0.00000, 177.89998);
	CreateDynamicObject(1806, 1435.42896, -1003.91840, 995.12079, 0.00000, 0.00000, 146.81998);
	CreateDynamicObject(2606, 1433.61072, -1004.31232, 996.30280, 0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2606, 1433.61072, -1004.31232, 996.73480, 0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2606, 1433.61072, -1004.31232, 997.16681, 0.00000, 0.00000, 89.94000);
	CreateDynamicObject(2894, 1435.51477, -1005.65875, 995.93512, 0.00000, 0.00000, -156.29988);
	CreateDynamicObject(348, 1435.81042, -1005.49841, 995.93518, 91.00000, 0.00000, 38.22002);
	CreateDynamicObject(2839, 1434.89624, -1005.61493, 995.12347, 0.00000, 0.00000, 28.74000);
	CreateDynamicObject(1235, 1436.75586, -1005.67822, 995.63458, 0.00000, 0.00000, 4.14000);
	CreateDynamicObject(2881, 1436.83350, -1005.81738, 995.13568, -2.00000, -69.00000, 28.00000);
	CreateDynamicObject(2881, 1436.72742, -1005.73517, 995.13568, -2.00000, -69.00000, -15.20001);
	CreateDynamicObject(2007, 1420.94165, -995.75769, 996.49847, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -996.70569, 996.50250, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -997.65369, 996.50250, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -998.60168, 996.50250, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2007, 1420.94165, -999.54968, 996.50250, 0.00000, 0.00000, 89.76000);
	CreateDynamicObject(2942, 1446.68677, -989.58667, 995.71686, 0.00000, 0.00000, 179.99986);
	CreateDynamicObject(2942, 1448.42285, -989.58667, 995.71692, 0.00000, 0.00000, 179.99989);
	CreateDynamicObject(2942, 1450.13086, -989.58667, 995.71692, 0.00000, 0.00000, 179.99989);
	CreateDynamicObject(2690, 1434.28040, -1002.78546, 996.38782, 0.00000, 0.00000, -4.26000);
	CreateDynamicObject(1892, 1456.52942, -986.43781, 995.14093, 0.00000, 0.00000, 86.76000);
	CreateDynamicObject(1892, 1456.52942, -990.61377, 995.14093, 0.00000, 0.00000, 86.76000);
	CreateDynamicObject(1892, 1456.52942, -982.26178, 995.14093, 0.00000, 0.00000, 86.76000);
	CreateDynamicObject(14633, 1426.06604, -979.43066, 996.56683, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2811, 1456.85181, -986.05109, 995.10602, 0.00000, 0.00000, 78.96002);
	CreateDynamicObject(3386, 1442.87439, -988.14252, 989.91400, 0.00000, 0.00000, 356.84091);
	CreateDynamicObject(3386, 1442.87439, -987.03851, 989.91400, 0.00000, 0.00000, 356.84091);
	CreateDynamicObject(3386, 1442.72241, -998.80847, 989.91400, 0.00000, 0.00000, 176.06250);
	CreateDynamicObject(3386, 1442.72241, -1000.00848, 989.91400, 0.00000, 0.00000, 176.06250);
	CreateDynamicObject(3391, 1440.51379, -987.03638, 989.89600, 0.00000, 0.00000, 89.76003);
	CreateDynamicObject(3392, 1436.92480, -987.02655, 989.89398, 0.00000, 0.00000, 89.81998);
	CreateDynamicObject(1806, 1441.29553, -993.01025, 989.92133, 0.00000, 0.00000, -119.94001);
	CreateDynamicObject(2634, 1435.35193, -980.29688, 984.21887, 0.00000, 0.00000, 179.04001);
	CreateDynamicObject(1502, 1438.05847, -992.99011, 995.10675, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1499, 1438.53723, -1002.59253, 990.92316, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1440.72217, -1010.17639, 994.91425, 0.00000, 0.00000, -90.41999);
	CreateDynamicObject(2690, 1433.67712, -1004.35260, 992.91760, 0.00000, 0.00000, 83.58002);
	CreateDynamicObject(2690, 1440.74304, -1010.16492, 991.04169, 0.00000, 0.00000, -88.08002);
	CreateDynamicObject(2690, 1433.68909, -1004.27728, 988.57770, 0.00000, 0.00000, 83.94003);
	CreateDynamicObject(2690, 1433.56665, -1009.76007, 986.42206, 0.00000, 0.00000, 83.70004);
	CreateDynamicObject(18643, 1441.46216, -995.31152, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1441.64221, -990.12750, 984.01813, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18643, 1441.54224, -984.45752, 984.45007, 0.00000, 0.00000, 0.00000);
	CreateObject(6959, 1467.80212, -987.19891, 995.09363,   0.00000, 0.00000, 0.00000);

	// Warehouse crates
	CreateDynamicObject(3798, 1260.306274, -25.321689, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.306274, -25.321689, 1001.883361, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.317016, -25.365781, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.315673, -25.277160, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.316040, -25.307142, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.397460, -25.393985, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.306274, -25.321689, 1003.853515, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.261474, -23.312185, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.250976, -23.268102, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.312622, -23.355394, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.358764, -27.226678, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.418823, -27.269641, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.428833, -27.313713, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.285766, -25.277828, 1003.853515, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.396728, -25.364007, 1003.853515, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.306274, -25.321689, 1005.823486, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1262.271484, -23.297637, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1260.281860, -23.341718, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1258.332275, -23.384920, 1001.883483, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1264.190185, -23.225122, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1256.502685, -23.395494, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1264.233398, -25.184640, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1264.276489, -27.134164, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1256.546875, -25.385005, 999.883422, 0.000000, 0.000000, -178.730514);
    CreateDynamicObject(3798, 1256.591430, -27.384523, 999.883422, 0.000000, 0.000000, -178.730514);

    // Driving test
    for (new i = 0; i < MAX_PLAYERS; i ++) {
	    arrVirtualWorlds[i] = i + 2000;
	}
	CreateDynamicObjectEx(1319, -2058.461425, -65.593460, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2058.981201, -69.791046, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2059.461425, -65.588729, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2059.981201, -69.786315, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2060.461425, -65.583999, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2060.981201, -69.781585, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2061.461425, -65.579269, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2061.981201, -69.776855, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2062.461425, -65.574539, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2062.981201, -69.772125, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2063.461425, -65.569808, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2063.981201, -69.767395, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2064.461425, -65.565078, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2064.981201, -69.762664, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2065.461425, -65.560348, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2065.981201, -69.757934, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2066.461425, -65.555618, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2066.981201, -69.753204, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2067.461425, -65.550888, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2067.981201, -69.748474, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2068.461425, -65.546157, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2068.981201, -69.743743, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2069.461425, -65.541427, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2069.981201, -69.739013, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2070.461425, -65.536697, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2070.981201, -69.734283, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2071.461425, -65.531967, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2071.981201, -69.729553, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2072.461425, -65.527236, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2072.981201, -69.724822, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2073.461425, -65.522506, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2073.981201, -69.720092, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2074.461425, -65.517776, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2074.981201, -69.715362, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2075.461425, -65.513046, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2075.981201, -69.710632, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2076.461425, -65.508316, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2076.981201, -69.705902, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2077.461425, -65.503585, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2077.981201, -69.701171, 34.525119, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2104.345214, -70.363998, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2104.343017, -65.663986, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2114.251708, -65.657752, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2114.253662, -70.347732, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2123.241943, -65.652107, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2122.997802, -70.342224, 34.751861, 0.000000, 0.000000, -0.036066, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.885742, -106.985626, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.690429, -107.523513, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.894531, -107.985580, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.699218, -108.523468, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.903320, -108.985534, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.708007, -109.523422, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.912109, -109.985488, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.716796, -110.523376, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.920898, -110.985443, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.725585, -111.523330, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.929687, -111.985397, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.734375, -112.523284, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.938476, -112.985351, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.743164, -113.523239, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.947265, -113.985305, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.751953, -114.523193, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.956054, -114.985260, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.760742, -115.523147, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.964843, -115.985214, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.769531, -116.523101, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.973632, -116.985168, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.778320, -117.523056, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.982421, -117.985122, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.787109, -118.523010, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2171.991210, -118.985076, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.795898, -119.522964, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.000000, -119.985031, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.804687, -120.522918, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.008789, -120.984985, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.813476, -121.522872, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.017578, -121.984939, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.822265, -122.522827, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.026367, -122.984893, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.831054, -123.522781, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.035156, -123.984848, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.839843, -124.522735, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.043945, -124.984802, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.848632, -125.522689, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2172.052734, -125.984756, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2167.857421, -126.522644, 34.519943, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2167.459716, -160.511413, 34.921886, 0.000000, 0.000000, 84.243225, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2169.737548, -170.268875, 34.921886, 0.000000, 0.000000, 69.943244, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2174.539306, -179.056747, 34.921901, 0.000000, 0.000000, 53.343246, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2211.481933, -190.448471, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2209.643066, -190.492553, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2207.663574, -190.539978, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2213.440673, -190.401504, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2215.380615, -190.355041, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2217.260009, -190.309997, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2219.270019, -190.261825, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2221.260253, -190.214187, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2223.209716, -190.167465, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2225.157226, -190.120697, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2207.529052, -184.941589, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2209.478027, -184.894882, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2211.367919, -184.849639, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2213.207031, -184.805572, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2215.197509, -184.757934, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2217.137207, -184.711456, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2219.076171, -184.665054, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2221.026367, -184.618377, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2223.036132, -184.570236, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2225.006835, -184.523101, 34.153205, 0.000000, 0.000000, 88.628005, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.793457, -333.091308, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.583496, -333.497985, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.771484, -334.091064, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.561523, -334.497741, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.749511, -335.090820, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.539550, -335.497497, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.727539, -336.090576, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.517578, -336.497253, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.705566, -337.090332, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.495605, -337.497009, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.683593, -338.090087, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.473632, -338.496765, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.661621, -339.089843, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.451660, -339.496520, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.639648, -340.089599, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.429687, -340.496276, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.617675, -341.089355, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.407714, -341.496032, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.595703, -342.089111, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.385742, -342.495788, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.573730, -343.088867, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.363769, -343.495544, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.551757, -344.088623, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.341796, -344.495300, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.529785, -345.088378, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.319824, -345.495056, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.507812, -346.088134, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.297851, -346.494812, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.485839, -347.087890, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.275878, -347.494567, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.463867, -348.087646, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.253906, -348.494323, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.441894, -349.087402, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.231933, -349.494079, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.419921, -350.087158, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.209960, -350.493835, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.397949, -351.086914, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.187988, -351.493591, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2261.375976, -352.086669, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -2257.166015, -352.493347, 50.210819, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.888671, -364.424621, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2261.308349, -364.544982, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.847656, -366.413604, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2261.265625, -366.574279, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2261.222656, -368.523773, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.805664, -368.342956, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.761474, -370.342437, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2261.178710, -370.483459, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.652832, -372.276641, 49.707180, 0.000000, 0.000000, -174.028427, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.448486, -374.236053, 49.707180, 0.000000, 0.000000, -174.028427, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.246582, -376.165496, 49.707180, 0.000000, 0.000000, -174.028427, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2261.135742, -372.442932, 49.707180, 0.000000, 0.000000, 181.271499, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2260.973144, -374.508941, 49.707180, 0.000000, 0.000000, -171.828445, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2260.690917, -376.468688, 49.707180, -0.199999, 0.000000, -170.928451, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2255.042480, -378.114776, 49.707180, 0.000000, 0.000000, -173.328414, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2260.379882, -378.424011, 49.700256, -0.199999, 0.000000, -170.928451, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2259.898437, -380.432464, 49.693000, -0.199999, 0.000000, -162.728393, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3798, -2254.801025, -379.927886, 49.707180, 0.000000, 0.000000, -171.228393, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2157.626953, -491.636016, 42.115673, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2161.156738, -495.247619, 42.089233, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2154.130126, -502.101440, 40.340858, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2150.607177, -498.496948, 40.367244, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2147.131591, -508.927734, 38.599498, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -2143.607666, -505.323272, 38.625873, -0.299999, -10.099996, 135.658142, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1993.557861, -584.265991, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1993.054809, -580.066345, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1992.557861, -584.266723, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1992.054809, -580.067077, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1991.557861, -584.267456, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1991.054809, -580.067810, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1990.557861, -584.268188, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1990.054809, -580.068542, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1989.557861, -584.268920, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1989.054809, -580.069274, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1988.557861, -584.269653, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1988.054809, -580.070007, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1987.557861, -584.270385, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1987.054809, -580.070739, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1986.557861, -584.271118, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1986.054809, -580.071472, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1985.557861, -584.271850, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1985.054809, -580.072204, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1984.557861, -584.272583, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1984.054809, -580.072937, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1983.557861, -584.273315, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1983.054809, -580.073669, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1982.557861, -584.274047, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1982.054809, -580.074401, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1981.557861, -584.274780, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1981.054809, -580.075134, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1980.557861, -584.275512, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1980.054809, -580.075866, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1979.557861, -584.276245, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1979.054809, -580.076599, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1978.557861, -584.276977, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1978.054809, -580.077331, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1977.557861, -584.277709, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1977.054809, -580.078063, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1976.557861, -584.278442, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1976.054809, -580.078796, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1975.557861, -584.279174, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1975.054809, -580.079528, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1974.557861, -584.279907, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1974.054809, -580.080261, 25.090726, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -1892.133300, -580.598632, 24.120117, 0.000000, 0.000000, 179.165649, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -1892.216186, -586.277770, 24.120117, 0.000000, 0.000000, 179.165649, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -1882.247802, -586.422790, 24.120117, 0.000000, 0.000000, 179.165649, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -1882.165039, -580.753356, 24.120117, 0.000000, 0.000000, 179.165649, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -1872.083618, -586.570312, 23.821083, -0.699999, -3.400000, 179.265609, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(3578, -1872.015136, -580.890136, 23.820604, -0.699999, -3.400000, 179.265609, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1813.607299, -567.501098, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1817.835815, -567.405700, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1813.703002, -566.505737, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1817.931518, -566.410339, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1813.798706, -565.510375, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.027221, -565.414978, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1813.894409, -564.515014, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.122924, -564.419616, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1813.990112, -563.519653, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.218627, -563.424255, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.085815, -562.524291, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.314331, -562.428894, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.181518, -561.528930, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.410034, -561.433532, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.277221, -560.533569, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.505737, -560.438171, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.372924, -559.538208, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.601440, -559.442810, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.468627, -558.542846, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.697143, -558.447448, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.564331, -557.547485, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.792846, -557.452087, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.660034, -556.552124, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.888549, -556.456726, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.755737, -555.556762, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1818.984252, -555.461364, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.851440, -554.561401, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.079956, -554.466003, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1814.947143, -553.566040, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.175659, -553.470642, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1815.042846, -552.570678, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.271362, -552.475280, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1815.138549, -551.575317, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.367065, -551.479919, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1815.234252, -550.579956, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.462768, -550.484558, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1815.329956, -549.584594, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.558471, -549.489196, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1815.425659, -548.589233, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);
    CreateDynamicObjectEx(1319, -1819.654174, -548.493835, 15.690916, 0.000000, 0.000000, 0.000000, 0.0, 200.0, arrVirtualWorlds);

	// Main mall mesh, interior areas
	CreateDynamicObject(19322, 1117.580, -1490.01, 32.72,   0.00, 0.00, 0.00, -1, -1, -1, 200.0);
	CreateDynamicObject(19323, 1117.580, -1490.01, 32.72,   0.00, 0.00, 0.00, -1, -1, -1, 200.0);

	// Mall windows
    CreateDynamicObject(19325, 1155.40, -1434.89, 16.49,   0.00, 0.00, 0.30, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1155.37, -1445.41, 16.31,   0.00, 0.00, 0.00, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1155.29, -1452.38, 16.31,   0.00, 0.00, 0.00, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1157.36, -1468.35, 16.31,   0.00, 0.00, 18.66, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1160.64, -1478.37, 16.31,   0.00, 0.00, 17.76, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1159.84, -1502.06, 16.31,   0.00, 0.00, -19.92, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1139.28, -1523.71, 16.31,   0.00, 0.00, -69.36, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1117.06, -1523.43, 16.51,   0.00, 0.00, -109.44, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1097.18, -1502.43, 16.51,   0.00, 0.00, -158.58, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1096.47, -1478.29, 16.51,   0.00, 0.00, -197.94, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1099.70, -1468.27, 16.51,   0.00, 0.00, -197.94, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1101.81, -1445.45, 16.22,   0.00, 0.00, -180.24, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1101.76, -1452.47, 16.22,   0.00, 0.00, -181.62, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1101.77, -1434.88, 16.22,   0.00, 0.00, -180.24, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1094.31, -1444.92, 23.47,   0.00, 0.00, -180.24, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1094.37, -1458.37, 23.47,   0.00, 0.00, -179.46, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1093.01, -1517.44, 23.44,   0.00, 0.00, -138.72, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1101.08, -1526.64, 23.42,   0.00, 0.00, -137.34, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1155.12, -1526.38, 23.46,   0.00, 0.00, -42.12, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1163.09, -1517.25, 23.46,   0.00, 0.00, -40.74, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1163.04, -1442.06, 23.40,   0.00, 0.00, -0.12, -1, -1, -1, 100.0);
	CreateDynamicObject(19325, 1163.09, -1428.47, 23.50,   0.00, 0.00, 0.54, -1, -1, -1, 100.0);

	// Mall signs
	CreateDynamicObject(19326, 1155.34, -1446.73, 16.38,   0.00, 0.00, -89.82, -1, -1, -1, 30.0);
	CreateDynamicObject(19326, 1155.25, -1443.85, 16.36,   0.00, 0.00, -89.82, -1, -1, -1, 30.0);
	CreateDynamicObject(19326, 1155.37, -1436.32, 16.36,   0.00, 0.00, -89.82, -1, -1, -1, 30.0);
	CreateDynamicObject(19326, 1155.35, -1433.51, 16.36,   0.00, 0.00, -89.70, -1, -1, -1, 30.0);
	CreateDynamicObject(19329, 1155.18, -1440.22, 18.70,   0.00, 0.00, 89.04, -1, -1, -1, 30.0);
	CreateDynamicObject(19329, 1161.59, -1431.50, 17.93,   0.00, 0.00, 0.00, -1, -1, -1, 30.0);
	CreateDynamicObject(19329, 1160.40, -1448.79, 17.96,   0.00, 0.00, 0.00, -1, -1, -1, 30.0);

	// Mall 24/7 food aisles
	CreateDynamicObject(2543, 1168.18, -1436.39, 14.79,   0.00, 0.00, 0.30, -1, -1, -1, 30.0);
	CreateDynamicObject(2535, 1182.74, -1448.30, 14.70,   0.00, 0.00, -90.96, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1167.10, -1436.40, 14.79,   0.00, 0.00, 0.31, -1, -1, -1, 30.0);
	CreateDynamicObject(2538, 1172.31, -1435.32, 14.79,   0.00, 0.00, 180.34, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1171.38, -1435.31, 14.79,   0.00, 0.00, 180.19, -1, -1, -1, 30.0);
	CreateDynamicObject(2540, 1169.56, -1435.36, 14.79,   0.00, 0.00, 180.17, -1, -1, -1, 30.0);
	CreateDynamicObject(1984, 1157.37, -1442.59, 14.79,   0.00, 0.00, -450.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1163.25, -1448.31, 14.75,   0.00, 0.00, -179.16, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1169.29, -1431.92, 14.75,   0.00, 0.00, 359.80, -1, -1, -1, 30.0);
	CreateDynamicObject(1987, 1163.13, -1436.34, 14.79,   0.00, 0.00, 361.06, -1, -1, -1, 30.0);
	CreateDynamicObject(1988, 1164.13, -1436.33, 14.79,   0.00, 0.00, 360.80, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1164.79, -1443.96, 14.79,   0.00, 0.00, 177.73, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1164.70, -1444.98, 14.79,   0.00, 0.00, 358.07, -1, -1, -1, 30.0);
	CreateDynamicObject(2942, 1155.52, -1464.68, 15.43,   0.00, 0.00, -71.22, -1, -1, -1, 30.0);
	CreateDynamicObject(1987, 1164.12, -1435.32, 14.77,   0.00, 0.00, 180.96, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1171.13, -1443.79, 14.79,   0.00, 0.00, -182.16, -1, -1, -1, 30.0);
	CreateDynamicObject(1991, 1173.75, -1439.56, 14.79,   0.00, 0.00, 179.47, -1, -1, -1, 30.0);
	CreateDynamicObject(1996, 1169.82, -1439.50, 14.79,   0.00, 0.00, 179.10, -1, -1, -1, 30.0);
	CreateDynamicObject(1996, 1174.24, -1435.38, 14.79,   0.00, 0.00, 179.24, -1, -1, -1, 30.0);
	CreateDynamicObject(1991, 1175.23, -1435.39, 14.79,   0.00, 0.00, 179.57, -1, -1, -1, 30.0);
	CreateDynamicObject(1995, 1182.65, -1435.10, 14.79,   0.00, 0.00, 90.00, -1, -1, -1, 30.0);
	CreateDynamicObject(1994, 1182.66, -1438.07, 14.79,   0.00, 0.00, 90.00, -1, -1, -1, 30.0);
	CreateDynamicObject(1993, 1182.66, -1437.08, 14.79,   0.00, 0.00, 90.00, -1, -1, -1, 30.0);
	CreateDynamicObject(2542, 1163.78, -1443.92, 14.76,   0.00, 0.00, 178.77, -1, -1, -1, 30.0);
	CreateDynamicObject(2536, 1166.88, -1445.07, 14.70,   0.00, 0.00, -0.42, -1, -1, -1, 30.0);
	CreateDynamicObject(2542, 1163.70, -1444.93, 14.78,   0.00, 0.00, -1.74, -1, -1, -1, 30.0);
	CreateDynamicObject(1984, 1157.34, -1435.71, 14.79,   0.00, 0.00, -450.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1166.31, -1448.28, 14.75,   0.00, 0.00, -180.12, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1172.14, -1443.83, 14.79,   0.00, 0.00, -181.38, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1173.14, -1443.85, 14.79,   0.00, 0.00, -180.96, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1174.13, -1443.88, 14.79,   0.00, 0.00, -181.50, -1, -1, -1, 30.0);
	CreateDynamicObject(1981, 1170.76, -1439.52, 14.79,   0.00, 0.00, -181.74, -1, -1, -1, 30.0);
	CreateDynamicObject(1981, 1171.76, -1439.54, 14.79,   0.00, 0.00, -180.80, -1, -1, -1, 30.0);
	CreateDynamicObject(1981, 1172.75, -1439.55, 14.79,   0.00, 0.00, -180.84, -1, -1, -1, 30.0);
	CreateDynamicObject(2535, 1182.75, -1447.28, 14.70,   0.00, 0.00, -90.78, -1, -1, -1, 30.0);
	CreateDynamicObject(2535, 1182.74, -1446.28, 14.70,   0.00, 0.00, -90.78, -1, -1, -1, 30.0);
	CreateDynamicObject(2535, 1182.74, -1445.26, 14.70,   0.00, 0.00, -90.00, -1, -1, -1, 30.0);
	CreateDynamicObject(2541, 1182.75, -1444.22, 14.79,   0.00, 0.00, -90.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2541, 1182.75, -1443.20, 14.79,   0.00, 0.00, -90.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2541, 1182.74, -1442.16, 14.79,   0.00, 0.00, -90.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1182.76, -1441.18, 14.79,   0.00, 0.00, -90.84, -1, -1, -1, 30.0);
	CreateDynamicObject(2541, 1182.79, -1440.17, 14.79,   0.00, 0.00, -90.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1182.72, -1439.15, 14.79,   0.00, 0.00, -90.84, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1182.66, -1431.67, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1181.63, -1431.73, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1180.61, -1431.81, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1179.61, -1431.83, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1178.61, -1431.89, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1177.59, -1431.86, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1993, 1182.66, -1436.09, 14.79,   0.00, 0.00, 90.00, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1175.50, -1431.82, 14.75,   0.00, 0.00, 361.17, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1172.42, -1431.87, 14.75,   0.00, 0.00, 359.93, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1160.10, -1448.35, 14.75,   0.00, 0.00, -179.94, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1170.45, -1435.33, 14.79,   0.00, 0.00, 181.26, -1, -1, -1, 30.0);
	CreateDynamicObject(2545, 1161.82, -1431.84, 14.91,   0.00, 0.00, -90.54, -1, -1, -1, 30.0);
	CreateDynamicObject(2545, 1160.82, -1431.83, 14.91,   0.00, 0.00, -90.54, -1, -1, -1, 30.0);
	CreateDynamicObject(2545, 1159.81, -1431.86, 14.91,   0.00, 0.00, -90.54, -1, -1, -1, 30.0);
	CreateDynamicObject(2545, 1162.82, -1431.87, 14.91,   0.00, 0.00, -90.54, -1, -1, -1, 30.0);
	CreateDynamicObject(1988, 1163.13, -1435.34, 14.79,   0.00, 0.00, 541.46, -1, -1, -1, 30.0);
	CreateDynamicObject(1988, 1166.07, -1436.32, 14.79,   0.00, 0.00, 360.80, -1, -1, -1, 30.0);
	CreateDynamicObject(1987, 1165.07, -1436.33, 14.79,   0.00, 0.00, 361.06, -1, -1, -1, 30.0);
	CreateDynamicObject(1987, 1166.11, -1435.30, 14.77,   0.00, 0.00, 180.96, -1, -1, -1, 30.0);
	CreateDynamicObject(1988, 1165.07, -1435.31, 14.79,   0.00, 0.00, 540.44, -1, -1, -1, 30.0);
	CreateDynamicObject(2536, 1165.79, -1445.07, 14.70,   0.00, 0.00, -1.20, -1, -1, -1, 30.0);
	CreateDynamicObject(2536, 1167.83, -1445.07, 14.70,   0.00, 0.00, -0.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1165.79, -1444.00, 14.79,   0.00, 0.00, 178.27, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1166.81, -1444.03, 14.79,   0.00, 0.00, 179.35, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1167.79, -1444.04, 14.79,   0.00, 0.00, 179.89, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1168.13, -1435.36, 14.79,   0.00, 0.00, 180.05, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1167.10, -1435.37, 14.79,   0.00, 0.00, 180.35, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1170.63, -1440.67, 14.75,   0.00, 0.00, 359.50, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1173.77, -1440.72, 14.75,   0.00, 0.00, 359.82, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1177.30, -1445.31, 14.75,   0.00, 0.00, 359.93, -1, -1, -1, 30.0);
	CreateDynamicObject(1996, 1173.36, -1448.30, 14.79,   0.00, 0.00, 179.10, -1, -1, -1, 30.0);
	CreateDynamicObject(1981, 1174.33, -1448.32, 14.79,   0.00, 0.00, -181.74, -1, -1, -1, 30.0);
	CreateDynamicObject(1981, 1175.32, -1448.35, 14.79,   0.00, 0.00, -180.84, -1, -1, -1, 30.0);
	CreateDynamicObject(1981, 1176.30, -1448.37, 14.79,   0.00, 0.00, -180.84, -1, -1, -1, 30.0);
	CreateDynamicObject(1991, 1177.28, -1448.37, 14.79,   0.00, 0.00, 179.47, -1, -1, -1, 30.0);
	CreateDynamicObject(1996, 1178.33, -1448.36, 14.79,   0.00, 0.00, 179.24, -1, -1, -1, 30.0);
	CreateDynamicObject(1991, 1179.33, -1448.37, 14.79,   0.00, 0.00, 179.57, -1, -1, -1, 30.0);
	CreateDynamicObject(1994, 1176.82, -1444.16, 14.79,   0.00, 0.00, -0.84, -1, -1, -1, 30.0);
	CreateDynamicObject(1995, 1178.81, -1444.20, 14.79,   0.00, 0.00, -1.26, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1168.89, -1444.06, 14.79,   0.00, 0.00, 178.97, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1169.91, -1444.07, 14.79,   0.00, 0.00, 179.69, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1169.87, -1445.12, 14.79,   0.00, 0.00, -0.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1168.86, -1445.11, 14.79,   0.00, 0.00, 0.31, -1, -1, -1, 30.0);
	CreateDynamicObject(2538, 1167.02, -1431.87, 14.79,   0.00, 0.00, 0.42, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1166.03, -1431.89, 14.79,   0.00, 0.00, 0.70, -1, -1, -1, 30.0);
	CreateDynamicObject(2540, 1164.04, -1431.91, 14.79,   0.00, 0.00, 0.60, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1165.03, -1431.91, 14.79,   0.00, 0.00, 1.02, -1, -1, -1, 30.0);
	CreateDynamicObject(2538, 1176.17, -1436.38, 14.79,   0.00, 0.00, 0.24, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1174.22, -1436.37, 14.79,   0.00, 0.00, -0.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2540, 1173.22, -1436.36, 14.79,   0.00, 0.00, 0.18, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1175.20, -1436.38, 14.79,   0.00, 0.00, -2.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2540, 1173.26, -1435.31, 14.79,   0.00, 0.00, 180.17, -1, -1, -1, 30.0);
	CreateDynamicObject(1991, 1175.74, -1439.58, 14.79,   0.00, 0.00, 179.57, -1, -1, -1, 30.0);
	CreateDynamicObject(1996, 1174.74, -1439.57, 14.79,   0.00, 0.00, 179.24, -1, -1, -1, 30.0);
	CreateDynamicObject(1996, 1176.17, -1435.37, 14.79,   0.00, 0.00, 179.24, -1, -1, -1, 30.0);
	CreateDynamicObject(1991, 1177.16, -1435.38, 14.79,   0.00, 0.00, 179.57, -1, -1, -1, 30.0);
	CreateDynamicObject(2540, 1169.44, -1436.35, 14.79,   0.00, 0.00, 0.18, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1170.43, -1436.35, 14.79,   0.00, 0.00, 0.90, -1, -1, -1, 30.0);
	CreateDynamicObject(2539, 1171.34, -1436.33, 14.79,   0.00, 0.00, 0.58, -1, -1, -1, 30.0);
	CreateDynamicObject(2538, 1172.22, -1436.32, 14.79,   0.00, 0.00, 0.30, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1163.40, -1440.68, 14.79,   0.00, 0.00, 360.41, -1, -1, -1, 30.0);
	CreateDynamicObject(2536, 1164.49, -1440.73, 14.70,   0.00, 0.00, -1.20, -1, -1, -1, 30.0);
	CreateDynamicObject(2536, 1165.49, -1440.75, 14.70,   0.00, 0.00, -0.42, -1, -1, -1, 30.0);
	CreateDynamicObject(2536, 1166.50, -1440.75, 14.70,   0.00, 0.00, -0.06, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1167.61, -1440.64, 14.79,   0.00, 0.00, 0.31, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1168.62, -1440.64, 14.79,   0.00, 0.00, 0.30, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1168.64, -1439.60, 14.79,   0.00, 0.00, 180.05, -1, -1, -1, 30.0);
	CreateDynamicObject(2543, 1167.67, -1439.61, 14.79,   0.00, 0.00, 180.35, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1163.65, -1439.67, 14.79,   0.00, 0.00, 180.61, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1164.68, -1439.67, 14.79,   0.00, 0.00, 179.77, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1165.68, -1439.68, 14.79,   0.00, 0.00, 180.61, -1, -1, -1, 30.0);
	CreateDynamicObject(2871, 1166.68, -1439.66, 14.79,   0.00, 0.00, 180.61, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1175.09, -1444.97, 14.79,   0.00, 0.00, -2.46, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1181.63, -1431.73, 14.79,   0.00, 0.00, 3.30, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1174.07, -1444.94, 14.79,   0.00, 0.00, 0.48, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1173.09, -1444.94, 14.79,   0.00, 0.00, -1.20, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1172.11, -1444.92, 14.79,   0.00, 0.00, -1.14, -1, -1, -1, 30.0);
	CreateDynamicObject(1990, 1171.12, -1444.91, 14.79,   0.00, 0.00, -0.72, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1168.54, -1448.31, 14.79,   0.00, 0.00, -178.98, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1169.60, -1448.29, 14.79,   0.00, 0.00, -178.98, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1170.67, -1448.30, 14.79,   0.00, 0.00, -178.98, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1171.72, -1448.32, 14.79,   0.00, 0.00, -181.50, -1, -1, -1, 30.0);
	CreateDynamicObject(2530, 1175.13, -1443.91, 14.79,   0.00, 0.00, -181.50, -1, -1, -1, 30.0);
	CreateDynamicObject(2012, 1176.82, -1440.75, 14.75,   0.00, 0.00, 359.93, -1, -1, -1, 30.0);
	CreateDynamicObject(1995, 1177.71, -1439.63, 14.79,   0.00, 0.00, 0.00, -1, -1, -1, 30.0);
	CreateDynamicObject(1994, 1176.73, -1439.63, 14.79,   0.00, 0.00, 0.06, -1, -1, -1, 30.0);
	CreateDynamicObject(1993, 1177.83, -1444.15, 14.79,   0.00, 0.00, 179.46, -1, -1, -1, 30.0);

	// Prison Exterior
	CreateDynamicObject(1278, 229.90096, 1368.96594, 23.32740,   0.00000, 0.00000, 220.00000);
	CreateDynamicObject(1278, 200.74687, 1368.64319, 23.32740,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1278, 165.18126, 1376.34033, 23.32740,   0.00000, 0.00000, 150.00000);
	CreateDynamicObject(1278, 177.82100, 1440.04126, 23.32740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1278, 224.96089, 1439.91064, 23.32740,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1278, 274.66998, 1421.92847, 23.32740,   0.00000, 0.00000, 300.00000);
	CreateDynamicObject(1278, 122.27402, 1401.62268, 23.32740,   0.00000, 0.00000, 120.00000);
	CreateDynamicObject(1278, 121.71516, 1440.38428, 23.32740,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(3934, 263.38199, 1382.63379, 23.58800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3109, 250.77750, 1383.13220, 24.77640,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19124, 274.09549, 1371.32324, 24.19493,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 253.04935, 1371.26794, 24.19493,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 252.99965, 1392.70959, 24.19493,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 274.11551, 1392.69324, 24.19493,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3636, 401.63470, 1430.83179, 13.91010,   -2.44900, 0.79400, 0.00000);
	CreateDynamicObject(2774, 288.42181, 1420.14966, 8.99200,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(19313, 280.73251, 1420.65112, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 273.66440, 1427.60815, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 273.66440, 1441.59253, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 232.71010, 1439.51099, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 218.71750, 1439.51099, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 184.82860, 1439.51099, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 170.84010, 1439.51099, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 136.91161, 1439.51099, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 127.59380, 1439.50647, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 120.60090, 1432.50391, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1418.53784, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1404.55750, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1390.57666, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1376.60352, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1362.59875, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2774, 288.42181, 1400.35864, 8.99200,   0.00000, 180.00000, 0.00000);
	CreateDynamicObject(2774, 273.68338, 1413.10034, 8.40500,   44.32500, 90.00000, 90.00000);
	CreateDynamicObject(19313, 273.66440, 1413.58960, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 273.66241, 1399.62964, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3998, 250.5902, 1383.93469, 15.86240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 231.12820, 1348.60974, 11.45120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 231.12820, 1373.50317, 11.45119,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 266.45618, 1392.07166, 12.91330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 264.77591, 1392.09949, 12.91330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 120.61320, 1362.59875, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1376.60352, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1390.57666, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1404.55750, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.61320, 1418.53784, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 120.60090, 1432.50391, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 127.59380, 1439.50647, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 136.91161, 1439.51099, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 170.84010, 1439.51099, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 184.82860, 1439.51099, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 184.82860, 1439.51099, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 218.71750, 1439.51099, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 232.71010, 1439.51099, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 273.66440, 1441.59253, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 273.66440, 1427.60815, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 273.66440, 1413.58960, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 273.66241, 1399.62964, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 280.73251, 1420.65112, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 127.63920, 1402.47144, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 141.68280, 1402.47485, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 127.63920, 1402.47144, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 141.68280, 1402.47485, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 152.80748, 1402.46436, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 152.80750, 1402.46436, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 224.08275, 1341.65161, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 210.08070, 1341.64966, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 196.03830, 1341.64966, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 189.04291, 1348.67053, 8.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 181.95216, 1369.68909, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 167.93201, 1369.68713, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 167.93201, 1369.68713, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 181.95219, 1369.68909, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 189.04289, 1348.67053, 15.43390,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 196.03830, 1341.64966, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 210.08070, 1341.64966, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 224.08270, 1341.65161, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 266.65228, 1448.68750, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 266.65231, 1448.68750, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 253.24706, 1448.69482, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 253.24710, 1448.69482, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 166.33110, 1369.70410, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 166.33110, 1369.70410, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 231.15221, 1378.30518, 11.45120,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 231.12820, 1348.60974, 18.01870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 231.18027, 1362.62976, 18.01870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 231.12820, 1376.63184, 18.01870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 231.15221, 1378.30518, 18.01870,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 249.09987, 1395.66016, 10.81643,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 144.01550, 1433.23865, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 144.01550, 1423.60559, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 144.01550, 1413.97095, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 144.01550, 1407.29395, 7.84530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(946, 133.94099, 1405.53662, 11.74820,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(946, 133.94099, 1436.98035, 11.75420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(946, 192.15331, 1394.54370, 11.75420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(946, 192.15327, 1415.97351, 11.75420,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(16101, 124.67510, 1430.52795, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 121.50750, 1430.53333, 2.04530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.69012, 1411.44495, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 121.52267, 1411.42480, 2.01386,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.80370, 1422.46643, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.80370, 1425.06714, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.80370, 1417.00623, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.80370, 1419.72461, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.80369, 1414.12524, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 124.80370, 1427.62610, 2.66450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 121.81980, 1429.13477, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1426.59399, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1424.05383, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1421.51306, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1418.97241, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1416.43298, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1413.89294, 10.24290,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1368, 121.81980, 1412.79272, 10.24090,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3819, 148.02538, 1430.57410, 10.56690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3819, 148.02541, 1412.24792, 10.56690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 133.75110, 1421.10522, 7.84730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 256.09412, 1416.68701, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 256.09021, 1402.67493, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 259.53851, 1416.68701, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 259.53851, 1402.67493, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 259.53851, 1388.71472, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 259.53134, 1385.30688, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19304, 257.82379, 1423.68518, 12.65040,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19303, 258.70190, 1423.68518, 10.82450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19302, 256.96381, 1423.68518, 10.82450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19304, 257.82181, 1423.68604, 13.45540,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, 243.86713, 1409.75989, 11.82390,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16101, 241.42200, 1409.74902, 1.03310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 243.83760, 1409.74902, 1.55447,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, 241.42929, 1412.25928, 11.51171,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16101, 241.41301, 1412.28894, 0.71990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 238.44328, 1409.49829, 4.53515,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 233.55949, 1409.49829, 4.53520,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(19087, 238.47841, 1409.50061, 15.41054,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19087, 236.02180, 1409.49976, 15.41050,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19087, 235.13200, 1409.49976, 15.41050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19088, 235.13200, 1409.49976, 12.56050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, 235.13300, 1409.49988, 14.97250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, 236.88100, 1409.49976, 15.41050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19087, 236.88200, 1409.49988, 14.97250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19088, 236.88100, 1409.49976, 12.56050,   0.00000, 0.00000, 100.00000);
	CreateDynamicObject(2629, 232.45370, 1396.74707, 9.56030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2629, 235.83270, 1396.74707, 9.56030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2628, 239.51656, 1396.91650, 9.56030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2628, 242.37840, 1396.91650, 9.56030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2628, 246.40311, 1396.91650, 9.56030,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19087, 243.85231, 1409.78259, 12.43094,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(16101, 243.83659, 1407.32373, 1.55450,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14791, 221.89018, 1409.56616, 10.71730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3819, 222.00067, 1416.85522, 10.56690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3819, 222.00070, 1401.17529, 10.56690,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14401, 158.21140, 1389.36743, 9.85860,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14401, 158.21140, 1382.26062, 9.85860,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14401, 199.27879, 1451.74060, 9.85860,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19313, 196.08022, 1369.65076, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 210.08054, 1369.65601, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 224.14120, 1369.71680, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 196.08020, 1369.65076, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 210.08051, 1369.65601, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 224.14120, 1369.71680, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 259.54727, 1430.67126, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 259.54489, 1444.65137, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 259.52869, 1444.99170, 10.81640,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3279, 225.11710, 1453.37585, 9.57495,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 177.97411, 1453.37585, 9.57490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 131.18930, 1453.37585, 9.57490,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3279, 196.86661, 1362.67029, 9.57490,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3819, 192.97433, 1384.39124, 10.56690,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3279, 277.74667, 1462.05188, 9.57495,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3881, 290.71954, 1403.95178, 7.91466,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3881, 290.71951, 1403.95178, 11.62820,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(966, 287.82001, 1406.73767, 9.38020,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(995, 288.36459, 1414.8303, 10.02890,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19357, 230.36552, 1344.86133, 7.83630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 227.24139, 1344.86133, 7.83630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 224.30040, 1344.86133, 7.83630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 221.12010, 1344.86133, 7.83630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 217.97820, 1344.86133, 7.83630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 214.87869, 1344.86133, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 211.89880, 1344.86133, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 208.79820, 1344.86133, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 205.73801, 1344.86133, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 202.65770, 1344.86133, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 199.62410, 1344.86133, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19445, 205.85971, 1365.02515, 7.84330,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19445, 210.96640, 1365.02515, 7.84330,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19445, 216.35660, 1365.02515, 7.84330,   0.00000, 0.00000, 40.00000);
	CreateDynamicObject(19445, 194.27516, 1355.55566, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 194.25998, 1351.51111, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19313, 182.06242, 1355.64258, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 168.05917, 1355.65137, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 166.29829, 1355.63013, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 182.06239, 1355.64258, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 168.05920, 1355.65137, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 166.29829, 1355.63013, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16101, 209.59576, 1416.09485, 2.11692,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.47256, 1416.10486, 2.63112,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.48151, 1396.98914, 2.63112,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 209.60202, 1396.99182, 2.02408,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.36301, 1400.21082, 2.63110,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.36301, 1403.31189, 2.63110,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.36301, 1406.55176, 2.63110,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.36298, 1409.67273, 2.63112,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(16101, 206.36301, 1412.97266, 2.63110,   0.00000, 0.00000, -0.12000);
	CreateDynamicObject(1368, 209.32401, 1414.75415, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32401, 1412.21338, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32401, 1409.67358, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32401, 1407.13293, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32401, 1404.59229, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32401, 1402.05164, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32401, 1399.51184, 10.22490,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1368, 209.32600, 1398.23071, 10.22290,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1344, 144.56853, 1379.93787, 10.38110,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1344, 144.56850, 1382.72021, 10.38110,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1344, 144.57619, 1385.46326, 10.38110,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1448, 143.55380, 1376.95752, 9.65270,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1448, 143.55380, 1376.95752, 9.79170,   0.00000, 0.00000, 342.68130);
	CreateDynamicObject(1448, 143.55380, 1376.95752, 9.93170,   0.00000, 0.00000, 14.36257);
	CreateDynamicObject(1438, 143.05623, 1386.77234, 9.58368,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 152.35753, 1402.46692, 8.86000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19313, 152.35750, 1402.46692, 15.43390,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19357, 249.71919, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 246.57690, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 243.57091, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 240.60989, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 237.58971, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 255.62720, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 258.84741, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 261.94739, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 265.06699, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 268.22720, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19357, 271.58710, 1368.81921, 7.83630,   0.00000, 0.00000, -0.24000);
	CreateDynamicObject(19445, 231.60339, 1348.26526, 8.14430,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19381, 236.77890, 1348.25146, 9.81440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19445, 236.50990, 1352.99475, 8.14430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 246.13570, 1352.99475, 8.14430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19381, 247.27850, 1348.25146, 9.81440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19445, 236.33180, 1343.50916, 8.14330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 245.96671, 1343.50916, 8.14330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19381, 257.77829, 1348.25146, 9.81440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 268.27979, 1348.25146, 9.81440,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19445, 255.60130, 1343.50916, 8.14330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 265.23401, 1343.50916, 8.14330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 268.72629, 1343.51025, 8.14430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 273.45529, 1348.26318, 8.14330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 255.76910, 1352.99475, 8.14430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 265.40240, 1352.99475, 8.14430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 268.60251, 1352.99585, 8.14530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 174.64439, 1397.55090, 7.84830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 174.64540, 1391.74231, 7.84730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 179.55141, 1387.01550, 7.84730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 189.18491, 1387.01550, 7.84730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 198.81950, 1387.01550, 7.84730,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 203.72580, 1391.74316, 7.84730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 203.72580, 1401.37756, 7.84730,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 203.72580, 1411.01184, 7.84930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 203.72580, 1414.61157, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 200.05220, 1414.51978, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 200.05220, 1404.88550, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 200.05220, 1395.25098, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 195.14500, 1390.67908, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 185.51089, 1390.67908, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 183.03030, 1390.67810, 7.84230,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 178.32050, 1395.58594, 7.84230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 178.32150, 1397.62573, 7.84130,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, 240.74400, 1347.65723, 9.58400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(615, 267.28683, 1347.63049, 9.58400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8623, 237.49951, 1348.04504, 10.50238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8623, 248.02049, 1348.10803, 10.50238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8623, 258.78787, 1347.87732, 10.50238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8623, 267.66467, 1348.14111, 10.50238,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 265.79184, 1347.00977, 10.40348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 253.82431, 1346.98291, 10.40348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 239.91698, 1346.90771, 10.40348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 239.52455, 1348.38513, 10.40348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 252.48409, 1348.48730, 10.40348,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8990, 265.10614, 1348.68286, 10.40348,   0.00000, 0.00000, 0.72000);

    id = CreateDynamicObject(5738, 250.59111, 1457.35632, 13.04880,   0.00000, 0.00000, 90.65300);
    SetObjectMaterial(id, 4, 4079, "civic04_lan", "twintWin1_LAn"); //Windows
	SetObjectMaterial(id, 3, 4079, "civic04_lan", "twintWall2_LAn"); //Roof corner
	id = CreateDynamicObject(5738, 202.69530, 1457.38159, 13.04880,   0.00000, 0.00000, 90.65300);
	SetObjectMaterial(id, 4, 4079, "civic04_lan", "twintWin1_LAn" ); //Windows
	SetObjectMaterial(id, 3, 4079, "civic04_lan", "twintWall2_LAn"); //Roof corner
	id = CreateDynamicObject(5738, 154.79713, 1457.36853, 13.04880,   0.00000, 0.00000, 90.65300);
	SetObjectMaterial(id, 4, 4079, "civic04_lan", "twintWin1_LAn" ); //Windows
	SetObjectMaterial(id, 3, 4079, "civic04_lan", "twintWall2_LAn"); //Roof corner

	id = CreateDynamicObject(5738, 153.92700, 1364.09631, 13.04880,   0.00000, 0.00000, 0.65300);
	SetObjectMaterial(id, 4, 3998, "civic04_lan", "twintWin2_LAn" ); //Windows
	SetObjectMaterial(id, 3, 3998, "civic04_lan", "twintconc_LAn"); //Roof corner
	id = CreateDynamicObject(5738, 156.25397, 1383.78210, 5.84841,   0.00000, 0.00000, 90.65300);
	SetObjectMaterial(id, 4, 4079, "civic04_lan", "twintWin1_LAn" ); //Windows
	SetObjectMaterial(id, 3, 4079, "civic04_lan", "twintWall2_LAn"); //Roof corner

	id = CreateDynamicObject(8661, 239.54919, 1429.49438, 9.58680,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(id, 0, 17877, "landhub", "dirtKB_64HV");
	id = CreateDynamicObject(8661, 199.54930, 1429.49438, 9.58680,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(id, 0, 17877, "landhub", "dirtKB_64HV");
	id = CreateDynamicObject(8661, 163.92641, 1429.49438, 9.58880,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(id, 0, 17877, "landhub", "dirtKB_64HV");
	id = CreateDynamicObject(8661, 163.92641, 1412.45239, 9.59080,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(id, 0, 17877, "landhub", "dirtKB_64HV");
	id = CreateDynamicObject(8661, 246.07111, 1419.51489, -10.39270,   -0.09000, 90.00000, 270.00000);
	SetObjectMaterial(id, 0, 17877, "landhub", "dirtKB_64HV");
	id = CreateDynamicObject(19381, 225.75252, 1378.60693, 9.81440,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 17877, "landhub", "dirtKB_64HV");
	id = CreateDynamicObject(19381, 225.75369, 1388.24182, 9.81440,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 17877, "landhub", "dirtKB_64HV");
	id = CreateDynamicObject(19381, 215.25240, 1388.24182, 9.81440,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 17877, "landhub", "dirtKB_64HV");
	id = CreateDynamicObject(19381, 215.25240, 1378.60693, 9.81440,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 17877, "landhub", "dirtKB_64HV");

	id = CreateDynamicObject(19447, 153.82552, 1433.24878, 9.50910,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 153.82550, 1423.61450, 9.50910,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 153.82550, 1413.98083, 9.50910,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 153.82550, 1404.34619, 9.50910,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 201.88910, 1433.24878, 9.50910,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 249.70700, 1433.24475, 9.50310,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 160.39301, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 170.02370, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 179.65800, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 189.29311, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 198.92720, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 208.56310, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 218.19791, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 227.83200, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 237.46550, 1426.67969, 9.50910,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 246.64120, 1426.67773, 9.50710,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 257.82697, 1396.96594, 9.50910,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 257.82700, 1406.60217, 9.50910,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 257.82700, 1416.23669, 9.50910,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 251.65305, 1422.43433, 9.40710,   0.00000, 90.00000, 51.63934);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 254.75819, 1426.67773, 9.50510,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 257.82700, 1422.33044, 9.50710,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 206.90739, 1436.32495, 9.50710,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 160.39191, 1404.88257, 9.50910,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 249.70700, 1424.24158, 9.50510,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 201.88910, 1424.30957, 9.50710,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 148.91389, 1421.23462, 9.50710,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 201.88910, 1414.67603, 9.50710,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 201.88910, 1405.04333, 9.50710,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 201.88910, 1395.40613, 9.50710,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 198.82060, 1388.83875, 9.50710,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 189.18770, 1388.83875, 9.50710,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 179.55310, 1388.83875, 9.50710,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 176.48511, 1395.40625, 9.50710,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 170.02319, 1404.88257, 9.50910,   0.00000, 90.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 176.48309, 1401.81384, 9.50810,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");

	CreateDynamicObject(19445, 170.10970, 1402.45764, 7.84630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 179.25240, 1402.45764, 7.84530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 183.98109, 1407.36255, 7.84530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 183.97910, 1414.69836, 7.84330,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 188.88429, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 198.51880, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 208.15269, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 217.78529, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 227.41811, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 237.05209, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 246.68600, 1419.42615, 7.84330,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 251.54640, 1419.42712, 7.84130,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2913, 235.35320, 1396.20483, 10.53980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2913, 231.97060, 1396.22119, 10.53980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(2915, 234.32182, 1400.07874, 9.70230,   0.00000, 0.00000, 5.00000);
	CreateDynamicObject(2916, 237.37637, 1399.65674, 9.70230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2915, 236.32271, 1400.50977, 9.70230,   0.00000, 0.00000, 10.00000);
	CreateDynamicObject(19445, 259.48611, 1433.24548, 7.84330,   0.00000, 0.00000, 0.00000);

	id = CreateDynamicObject(19447, 121.50720, 1416.17822, 11.00700,   0.00000, 0.00000, 0.00000);
    SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19447, 121.50717, 1425.81262, 11.00700,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19447, 123.18810, 1425.81262, 13.31820,   0.00000, -100.00000, 0.00000); //Roof
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 123.18810, 1416.17822, 13.31820,   0.00000, -100.00000, 0.00000); //Roof
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 257.81140, 1418.93103, 14.04940,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19447, 257.81140, 1409.29639, 14.04940,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19447, 257.81140, 1399.66150, 14.04940,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19447, 257.81140, 1390.02795, 14.04940,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19447, 254.31754, 1390.86194, 14.04940,   0.00000, 90.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19447, 209.63820, 1411.35950, 11.00700,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19447, 209.63820, 1401.72534, 11.00700,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19447, 208.03281, 1401.72534, 13.27660,   0.00000, 100.00000, 0.00000); //Roof
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19447, 208.03191, 1411.35950, 13.27660,   0.00000, 100.00000, 0.00000); //Roof
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "plaintarmac1");
	id = CreateDynamicObject(19355, 123.20170, 1411.45129, 11.00700,   0.00000, 0.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19355, 123.20320, 1430.54175, 11.00700,   0.00000, 0.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19355, 207.94400, 1416.08618, 11.00700,   0.00000, 0.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19355, 207.94400, 1396.99658, 11.00700,   0.00000, 0.00000, 90.00000);
	SetObjectMaterial(id, 0, 4079, "civic04_lan", "twintWall2_LAn");
	id = CreateDynamicObject(19447, 288.09763, 1415.01477, 19.62394,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(id, 0, 2774, "airp_prop", "cj_white_wall2");
	id = CreateDynamicObject(19447, 288.09830, 1405.38281, 19.62390,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(id, 0, 2774, "airp_prop", "cj_white_wall2");
	id = CreateDynamicObject(19447, 287.9496, 1415.01477, 19.62394,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(id, 0, 2774, "airp_prop", "cj_white_wall2");
	id = CreateDynamicObject(19447, 287.9496, 1405.38281, 19.62390,   0.00000, 0.00000, 0.00000);
	SetObjectMaterial(id, 0, 2774, "airp_prop", "cj_white_wall2");

	// Prison gates
	CreateDynamicObject(988, 231.21869, 1358.35840, 10.61700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(988, 231.21870, 1363.84888, 10.61700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(968, 287.81442, 1406.71497, 10.02230,   0.00000, 0.00000, 90.00000); //Barrier

	// Prison doors
	CreateDynamicObject(3109, 154.61871, 1438.06323, 10.77020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3109, 202.56454, 1438.04517, 10.77020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3109, 250.45157, 1438.03906, 10.77020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3109, 153.9786, 1403.04712, 10.77020,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3109, 173.22977, 1366.2065, 10.77020,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3109, 139.8456, 1374.94885, 10.77020,   0.00000, 0.00000, 270.00000);

	// Grass area
	CreateDynamicObject(19445, 216.55380, 1373.85425, 8.14430,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 214.81371, 1373.85315, 8.14530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 210.06380, 1378.58154, 8.14630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 210.06380, 1388.20105, 8.14630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19445, 214.79179, 1393.00476, 8.14530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 224.42570, 1393.00476, 8.14530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19445, 234.05949, 1393.00476, 8.14530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3694, 226.09680, 1382.20959, 10.23200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(617, 211.71286, 1383.07922, 9.58400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(337, 221.29813, 1387.08557, 10.63570,   180.00000, -20.00000, 180.00000);
	CreateDynamicObject(337, 218.26199, 1386.34912, 9.98550,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(617, 226.17700, 1383.07922, 9.58400,   0.00000, 0.00000, 60.00000);
	CreateDynamicObject(19445, 226.18690, 1373.85425, 8.14430,   0.00000, 0.00000, 90.00000);

	// Prison Interior
	CreateDynamicObject(1498,1211.8632,-1355.2440,795.7056,0.0000,0.0000,178.9346, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(8419,1219.29980469,-1342.50000000,784.02398682,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.89941406,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1328.09997559,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.89941406,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1329.69995117,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1332.90002441,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(8419,1219.39941406,-1342.50000000,814.40002441,179.99450684,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1200.59997559,-1331.40002441,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1329.00000000,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1330.59997559,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1332.19995117,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1333.80004883,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1332.90002441,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1328.09997559,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1329.69995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09960938,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1220.40002441,-1331.40002441,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1328.09997559,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.29980469,-1328.09960938,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1329.69995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1329.69995117,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.19921875,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1334.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1337.69995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1220.39941406,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1334.50000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1337.69995117,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1332.90002441,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1336.09997559,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1339.19995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1342.50000000,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1342.50000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1339.19995117,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1336.09997559,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09997559,-1332.90002441,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.19921875,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.19921875,-1340.89941406,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1334.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1336.09997559,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69921875,-1337.69921875,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1339.30004883,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1342.50000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1200.59960938,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.89941406,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1334.50000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1337.69995117,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1340.90002441,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1342.50000000,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1339.30004883,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.90002441,-1336.09997559,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1335.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1337.00000000,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1338.59997559,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1340.19995117,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1341.80004883,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1329.00000000,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1330.59997559,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1332.19995117,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1333.80004883,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1335.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1337.00000000,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1338.59997559,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1340.19995117,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1341.80004883,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1212.80004883,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1211.19995117,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1209.59997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1208.09997559,-1327.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1210.50000000,-1326.50000000,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.19995117,-1331.30004883,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1209.89941406,-1321.89941406,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1210.50000000,-1326.59997559,807.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1215.19995117,-1331.40002441,807.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1215.19995117,-1341.00000000,807.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1205.80004883,-1331.40002441,807.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1205.79980469,-1341.00000000,807.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1343.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1214.40002441,-1345.00000000,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1343.40002441,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3280,1206.59997559,-1345.00000000,799.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.30004883,-1344.09997559,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09960938,-1345.69921875,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.09960938,-1345.69921875,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1215.29980469,-1344.09960938,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1344.09997559,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.89941406,-1345.69921875,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1210.50000000,-1326.59997559,790.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1205.80004883,-1331.40002441,790.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1205.79980469,-1341.00000000,790.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1215.19995117,-1331.40002441,790.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1215.19995117,-1341.00000000,790.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.89941406,-1345.69921875,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1205.69995117,-1344.09997559,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(8572,1204.50000000,-1346.69995117,798.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1199.19921875,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1200.19921875,-1350.50000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1195.09960938,-1350.59960938,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1328.40002441,799.09997559,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1331.69995117,799.09997559,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1334.90002441,799.09997559,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1338.09997559,799.09997559,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1341.30004883,799.09997559,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1344.50000000,799.09997559,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1344.50000000,802.70001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09960938,-1341.29980469,802.70001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1338.09997559,802.70001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1334.90002441,802.70001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09997559,-1331.69995117,802.70001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1198.09960938,-1328.50000000,802.70001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1343.80004883,802.67999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1340.50000000,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1337.30004883,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1334.19995117,802.67999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1331.00000000,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1327.80004883,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.89941406,-1331.00000000,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1327.80004883,802.67999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1331.00000000,802.67999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.89941406,-1334.19921875,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1337.30004883,802.67999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.90002441,-1340.50000000,802.67999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16645,1222.89941406,-1343.79980469,799.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1205.69995117,-1321.59997559,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1215.30004883,-1321.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1215.19921875,-1316.00000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1209.89941406,-1312.29980469,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1205.00000000,-1355.30004883,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1214.59960938,-1355.29980469,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1219.39941406,-1353.69921875,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1219.39941406,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1219.40002441,-1347.30004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1218.40002441,-1350.50000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1195.39941406,-1355.29980469,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1205.59960938,-1359.09960938,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1216.09997559,-1359.09997559,799.20300293,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1223.50000000,-1350.59960938,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1221.00000000,-1355.30004883,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1224.19921875,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1227.39941406,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1229.00000000,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1229.09960938,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1230.89941406,-1341.00000000,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1230.89941406,-1331.39941406,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1224.89941406,-1340.89941406,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1215.19921875,-1310.00000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1230.59960938,-1355.19921875,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1230.56250000,-1355.29980469,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1233.69995117,-1355.30004883,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1235.19995117,-1360.09997559,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1227.59997559,-1360.09997559,795.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1227.59960938,-1360.09960938,799.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1226.59960938,-1360.19921875,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1227.50000000,-1345.69995117,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1224.30004883,-1345.70104980,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1232.19921875,-1344.09960938,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1237.09960938,-1350.39941406,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1241.89941406,-1345.59960938,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1237.59997559,-1347.30004883,799.09997559,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1237.59960938,-1337.69921875,799.09997559,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1232.19995117,-1337.69995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1229.09997559,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1230.59997559,-1345.40002441,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1216.79980469,-1312.91210938,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1220.00000000,-1312.91210938,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1223.20104980,-1312.91296387,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1229.00000000,-1340.90002441,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1229.00000000,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1215.40002441,-1314.59997559,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1215.40002441,-1317.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1224.79980469,-1314.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1224.79980469,-1317.69921875,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1229.00000000,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1227.39941406,-1326.50000000,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1224.19995117,-1326.50097656,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1224.90002441,-1318.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1227.40002441,-1316.90002441,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1225.59997559,-1316.90100098,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19401,1216.89941406,-1319.59960938,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19401,1220.09960938,-1319.59960938,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19401,1223.30004883,-1319.59997559,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19404,1216.90100098,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19404,1220.10095215,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19404,1223.30102539,-1319.40100098,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1227.43652344,-1316.80078125,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19431,1225.59997559,-1316.80004883,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1229.09960938,-1331.29980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1229.09997559,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1232.19995117,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1232.19921875,-1324.89941406,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1232.19921875,-1312.09960938,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1232.19995117,-1318.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1229.09960938,-1316.79980469,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1220.09960938,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1229.69921875,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1230.59960938,-1326.79980469,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1224.90002441,-1321.69995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1224.90002441,-1324.90002441,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1230.90002441,-1321.80004883,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1230.89941406,-1312.19921875,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1220.40002441,-1321.80004883,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1220.40002441,-1312.19995117,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1237.09997559,-1360.09997559,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1220.89941406,-1364.89941406,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1211.30004883,-1364.90002441,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1201.69921875,-1364.89941406,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1204.59997559,-1360.09997559,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1195.09997559,-1360.19995117,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1205.59997559,-1368.69995117,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1216.09960938,-1368.69921875,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1210.40002441,-1326.50000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1210.50000000,-1320.79980469,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1233.90002441,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1232.19995117,-1350.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1237.00000000,-1355.19995117,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1237.00000000,-1352.09997559,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1227.09997559,-1350.59997559,799.20098877,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(14877,1236.30004883,-1353.59997559,797.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1242.40002441,-1356.90002441,799.20098877,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1237.00000000,-1352.09997559,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1232.19921875,-1347.29980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1237.09997559,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1240.30004883,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1241.80004883,-1356.90002441,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1237.00000000,-1361.69921875,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1227.40002441,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1232.30004883,-1350.40002441,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1230.69995117,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1229.09997559,-1360.00000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1227.50000000,-1355.19995117,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1224.30004883,-1355.19995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1227.40002441,-1352.09997559,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1222.69995117,-1349.59997559,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19401,1208.09997559,-1354.40100098,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19401,1213.09997559,-1354.40100098,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19401,1210.59997559,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1216.30004883,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1219.50000000,-1354.40002441,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1201.69995117,-1354.40002441,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1221.09997559,-1357.59997559,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1217.90002441,-1357.59997559,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1216.30004883,-1356.00000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1222.69995117,-1356.00000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1217.80004883,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1208.19995117,-1361.69995117,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1198.59960938,-1361.69921875,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1225.90002441,-1360.00000000,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1200.30004883,-1359.19995117,801.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19404,1213.09960938,-1354.60058594,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19404,1210.59960938,-1354.59960938,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19404,1208.09997559,-1354.60095215,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1216.30004883,-1354.59997559,801.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1201.69995117,-1354.59997559,801.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1205.69995117,-1346.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1207.29980469,-1346.79980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1206.50000000,-1345.69995117,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1206.50000000,-1347.59997559,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1205.70104980,-1346.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1207.30102539,-1346.50000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1234.39941406,-1350.39941406,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1234.40002441,-1340.80004883,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1234.39941406,-1331.19921875,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1234.40002441,-1321.59997559,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1244.90002441,-1350.40002441,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1244.90002441,-1340.80004883,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1244.90002441,-1331.19995117,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1244.89941406,-1321.59960938,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1244.90002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1234.40002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1223.90002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1213.40002441,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1202.89941406,-1312.00000000,795.70001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1219.59997559,-1314.50000000,795.70098877,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.00000000,-1316.00000000,795.70202637,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1239.29980469,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1241.90002441,-1336.00000000,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1241.90002441,-1326.40002441,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1241.89941406,-1316.79980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1241.90002441,-1307.19995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1237.59997559,-1328.09997559,799.09997559,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1237.59997559,-1318.50000000,799.09997559,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1237.59997559,-1308.90002441,799.09997559,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1242.40100098,-1357.00000000,799.29998779,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1227.09997559,-1357.00000000,799.29998779,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1223.59997559,-1357.00000000,799.30102539,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1213.09960938,-1359.50000000,799.29998779,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1202.59960938,-1359.50000000,799.29998779,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1235.40002441,-1360.09997559,799.30200195,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1205.79980469,-1315.89941406,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1210.50000000,-1308.00000000,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1205.79980469,-1306.29980469,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19466,1210.69995117,-1354.59997559,801.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19466,1213.09960938,-1354.59960938,801.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19466,1208.09997559,-1354.59997559,801.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16644,1207.69921875,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16644,1210.19995117,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1892,1212.59997559,-1310.50000000,795.76000977,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1569,1205.83996582,-1315.80004883,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1569,1205.83996582,-1312.80004883,795.79998779,0.00000000,0.00000000,269.79992676, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1308.09997559,804.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1309.90002441,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1311.50000000,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1313.30004883,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1314.80004883,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1316.30004883,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1317.80004883,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1319.30004883,804.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1320.69995117,804.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1205.80395508,-1315.90002441,804.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1205.80297852,-1306.30004883,804.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1215.09997559,-1315.80004883,804.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1215.09997559,-1306.19995117,804.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1308.02001953,790.65002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1205.80297852,-1308.00000000,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1205.80297852,-1316.00000000,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1210.30004883,-1320.79003906,790.65002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1215.18994141,-1315.90002441,790.65100098,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1215.19201660,-1315.54199219,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1215.18994141,-1304.42004395,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1209.59997559,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1228.50000000,-1330.19995117,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1228.50000000,-1335.80004883,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1228.50000000,-1341.39941406,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1212.09997559,-1316.90002441,794.00097656,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1212.10058594,-1314.89941406,794.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1212.09997559,-1305.09997559,794.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1312.50000000,796.04998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1314.50000000,796.04998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59960938,-1316.50000000,796.04998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1318.50000000,796.04998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1320.50000000,796.04998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1213.00000000,-1314.90002441,794.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1213.00097656,-1317.00000000,794.00097656,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1308.50000000,796.04998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1213.00000000,-1305.09997559,794.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1308.18005371,795.40002441,0.00000000,270.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1311.77502441,796.40002441,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19388,1215.19995117,-1306.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1212.17004395,-1315.90002441,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1212.17199707,-1315.79003906,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1212.17004395,-1304.16894531,790.65002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1313.79003906,796.40002441,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59997559,-1315.79003906,796.40002441,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59960938,-1317.79003906,796.40002441,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1212.59960938,-1319.79003906,796.40002441,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1212.61914062,-1314.59960938,796.05999756,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1212.59997559,-1318.50000000,796.05999756,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1208.90002441,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1208.19995117,-1308.69995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1206.40002441,-1318.19995117,796.29998779,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2111,1206.80004883,-1319.69995117,796.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1206.40002441,-1317.50000000,796.29998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1206.40002441,-1316.80004883,796.29998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1208.69995117,-1320.30004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1209.39941406,-1320.29980469,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1210.09997559,-1320.30004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2186,1214.69995117,-1319.30004883,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2197,1214.00000000,-1315.69995117,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2197,1214.00000000,-1314.30004883,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2197,1214.00000000,-1315.00000000,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(948,1206.19995117,-1316.09997559,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(948,1206.19921875,-1312.50000000,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2852,1207.00000000,-1319.59997559,796.59997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1201.09997559,-1315.80004883,793.09997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19379,1201.09997559,-1312.80004883,793.09997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(18613,1204.19995117,-1315.09997559,798.29998779,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(18613,1204.19995117,-1313.50000000,798.29998779,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19466,1223.50000000,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19466,1220.19995117,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19466,1217.00000000,-1319.50000000,797.90002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1223.40002441,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1221.50000000,-1319.90002441,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1219.59997559,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1217.69995117,-1319.90002441,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1219.20104980,-1320.30004883,793.64001465,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1215.80004883,-1319.90002441,795.70098877,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1220.90002441,-1320.30102539,793.64001465,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1216.80004883,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1220.09997559,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1223.40002441,-1321.00000000,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1218.50000000,-1320.19995117,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19428,1221.69921875,-1320.19921875,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1215.80004883,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1217.69995117,-1319.00000000,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1219.59997559,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1221.50000000,-1319.00000000,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1223.40002441,-1319.00000000,795.70098877,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1220.90002441,-1318.50097656,793.64001465,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1219.30004883,-1318.50000000,793.64001465,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19431,1221.69995117,-1318.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19431,1218.50000000,-1318.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1223.40002441,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1220.09997559,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1216.90002441,-1317.90002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1269,1220.09997559,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1269,1220.09997559,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1269,1223.30004883,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1269,1216.90002441,-1318.90002441,796.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1269,1216.90002441,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1269,1223.30004883,-1320.00000000,796.00000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2230,1220.95996094,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2230,1217.76000977,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2230,1224.16003418,-1318.40002441,796.02001953,270.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2230,1224.15917969,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2230,1220.95996094,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2230,1217.75976562,-1319.90002441,796.02001953,270.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1216,1225.30004883,-1319.69995117,796.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1216,1225.30004883,-1322.19995117,796.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1216.40002441,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1217.09997559,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1217.80004883,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1222.90002441,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1222.19995117,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1223.59997559,-1313.40002441,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(948,1218.59997559,-1313.40002441,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(948,1221.30004883,-1313.40002441,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1231.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1228.19995117,-1310.19995117,793.84997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1230.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1229.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1228.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1224.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1226.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1228.80004883,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1230.69995117,-1310.69995117,795.90002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3055,1228.19995117,-1311.09997559,793.84997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1225.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1228.59960938,-1308.59960938,797.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1229.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1230.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1231.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2186,1225.00000000,-1308.59960938,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1231.59997559,-1310.69995117,795.90002441,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1227.79980469,-1310.69921875,795.90002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1227.09960938,-1310.69921875,795.29998779,0.00000000,270.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1229.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2117,1231.09997559,-1310.69995117,795.29998779,0.00000000,270.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1224.80004883,-1312.90002441,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1215.19921875,-1345.79980469,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1215.19995117,-1345.80004883,800.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1207.29980469,-1347.59960938,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1207.30004883,-1347.59997559,800.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1207.29980469,-1345.69921875,795.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1207.30004883,-1345.69995117,800.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1207.40002441,-1328.09997559,799.20001221,0.00000000,180.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1213.59997559,-1328.09997559,799.20001221,0.00000000,179.99450684,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1213.69995117,-1345.59997559,799.20001221,0.00000000,179.99450684,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16101,1205.79980469,-1345.79980469,797.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1221.09960938,-1309.09960938,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1219.00000000,-1309.30004883,796.29998779,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1220.09997559,-1309.69995117,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1233.69995117,-1340.19995117,795.79998779,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2138,1239.52929688,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2140,1232.80004883,-1338.30004883,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1323.09997559,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2305,1234.69995117,-1355.80004883,795.80102539,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2135,1238.56933594,-1340.20605469,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2136,1234.60803223,-1362.31396484,795.79998779,0.00000000,0.00000000,269.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1232.79980469,-1339.29980469,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1234.67968750,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1236.03198242,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2140,1232.80004883,-1337.32995605,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2138,1240.50000000,-1340.19995117,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1237.02197266,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1238.00000000,-1337.30004883,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1238.02734375,-1336.27636719,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1237.05004883,-1336.27636719,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1236.05859375,-1336.27539062,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3383,1236.69995117,-1335.30004883,800.40002441,320.00000000,179.99450684,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3383,1237.30004883,-1338.40002441,800.40002441,319.99877930,179.99450684,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1723,1241.19995117,-1324.09997559,795.79998779,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1724,1237.80004883,-1323.09997559,795.79998779,0.00000000,0.00000000,89.99572754, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2357,1237.90002441,-1332.30004883,796.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2357,1237.90002441,-1328.69995117,796.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1239.30004883,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1238.59997559,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.19995117,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1236.50000000,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.90002441,-1333.50000000,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1239.30004883,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1238.59997559,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.90002441,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.19995117,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1236.50000000,-1329.80004883,796.29998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1236.50000000,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.19995117,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.90002441,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1238.59997559,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1239.30004883,-1331.19995117,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1239.30004883,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1238.59997559,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.90002441,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1237.19995117,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2310,1236.50000000,-1327.59997559,796.29998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1233.80004883,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1240.19995117,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19358,1243.40002441,-1324.80004883,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2964,1236.79980469,-1311.59960938,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1723,1239.19995117,-1320.90002441,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1737,1239.69995117,-1322.59997559,795.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2297,1241.50000000,-1315.50000000,795.79998779,0.00000000,0.00000000,225.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1723,1237.90002441,-1317.30004883,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1737,1239.59997559,-1316.80004883,795.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1324.09997559,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1322.09997559,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1322.09997559,796.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1323.09997559,796.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1324.09997559,796.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2303,1229.50000000,-1325.09997559,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19450,1237.09997559,-1340.80004883,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2138,1237.59960938,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1502,1229.81494141,-1345.43005371,795.73999023,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1502,1229.81640625,-1326.81933594,795.73999023,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1227.59997559,-1308.59997559,797.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2007,1227.59997559,-1308.59997559,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1502,1226.65002441,-1316.88000488,795.73999023,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1232.80004883,-1346.00000000,795.79998779,0.00000000,0.00000000,359.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1236.69995117,-1346.00000000,795.79998779,0.00000000,0.00000000,359.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1240.30004883,-1346.00000000,795.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1236.69995117,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1232.80004883,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1240.30004883,-1348.69995117,795.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1241.30004883,-1341.90002441,795.79998779,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1239.30004883,-1342.90002441,795.79998779,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2186,1234.90002441,-1341.50000000,795.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1233.30004883,-1349.69995117,796.20001221,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1237.30004883,-1349.69995117,796.20001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1240.80004883,-1349.80004883,796.20001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1240.80004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1237.30004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1233.30004883,-1346.90002441,796.20001221,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1238.80004883,-1341.80004883,796.20001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2612,1237.30004883,-1341.00000000,797.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2611,1241.69995117,-1344.50000000,797.70001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2616,1235.09997559,-1350.19995117,797.70001221,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2400,1232.30004883,-1355.30004883,799.59997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2400,1236.00000000,-1355.30004883,799.59997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(14401,1240.09997559,-1373.19995117,799.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(14401,1247.50000000,-1373.19921875,799.70001221,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(14782,1232.29980469,-1361.19921875,800.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(14782,1238.50000000,-1361.19995117,800.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2689,1238.90002441,-1355.69995117,800.09997559,0.00000000,0.00000000,180.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2704,1238.26000977,-1355.59997559,800.92999268,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2843,1236.50000000,-1360.69995117,799.40002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2846,1233.00000000,-1360.50000000,799.40002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2705,1236.50000000,-1355.80004883,800.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2706,1237.09997559,-1355.80004883,800.09997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2844,1235.59997559,-1355.30004883,799.40002441,0.00000000,0.00000000,250.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1220.19995117,-1358.30004883,799.40002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1215.69995117,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1202.50000000,-1360.09997559,799.79998779,0.00000000,0.00000000,359.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1210.30004883,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1208.30004883,-1357.19995117,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1205.00000000,-1356.19995117,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1203.00000000,-1357.19995117,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1215.69995117,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1213.69995117,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1210.30004883,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2166,1205.00000000,-1360.09997559,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1203.00000000,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1202.50000000,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1207.69995117,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1213.09997559,-1356.19995117,799.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1213.09997559,-1360.19995117,799.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1208.30004883,-1361.09997559,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1671,1207.80004883,-1360.19995117,799.79998779,0.00000000,0.00000000,359.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2186,1217.40002441,-1358.19995117,799.40002441,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2165,1213.69921875,-1357.19921875,799.40002441,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1220.80004883,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1220.80004883,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1220.80004883,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1220.80004883,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1217.00000000,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1209.69995117,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1205.90002441,-1358.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1217.00000000,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1213.40002441,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1209.69995117,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1205.90002441,-1361.59997559,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1217.00000000,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1213.40002441,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1209.69995117,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1205.90002441,-1364.30004883,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1217.00000000,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1213.30004883,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1209.69995117,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1969,1205.90002441,-1355.90002441,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1355.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1356.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1357.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1358.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1359.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1360.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1361.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1362.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1363.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2441,1228.00000000,-1364.90002441,795.70001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16644,1212.69921875,-1354.50000000,809.79998779,0.00000000,90.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(16644,1227.59997559,-1365.30004883,798.79998779,90.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2136,1236.63964844,-1340.20703125,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2135,1234.60900879,-1358.35705566,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1234.59997559,-1364.30004883,795.79998779,0.00000000,0.00000000,269.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1234.59997559,-1361.32702637,795.79998779,0.00000000,0.00000000,269.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1234.59997559,-1360.33801270,795.79998779,0.00000000,0.00000000,269.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1234.59997559,-1359.33801270,795.79998779,0.00000000,0.00000000,269.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2135,1234.60900879,-1357.36999512,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2137,1234.59997559,-1356.40002441,795.79998779,0.00000000,0.00000000,269.98901367, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2305,1232.79980469,-1340.19921875,795.79998779,0.00000000,0.00000000,179.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1227.59997559,-1369.69995117,797.59997559,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1227.30004883,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19385,1230.50000000,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19355,1233.69995117,-1364.90002441,797.50000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1228.40002441,-1369.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1232.90002441,-1369.80004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19377,1227.90002441,-1369.69995117,799.20001221,0.00000000,90.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1230.09997559,-1372.09997559,797.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1847,1228.80004883,-1367.50000000,795.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1983,1229.00000000,-1370.50000000,795.90002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1983,1229.00000000,-1371.50000000,795.90002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2012,1232.19995117,-1366.50000000,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2012,1232.19995117,-1369.50000000,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1983,1232.30004883,-1371.50000000,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1983,1229.00000000,-1370.50000000,797.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1983,1229.00000000,-1371.50000000,797.40002441,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1523,1229.73999023,-1364.93005371,795.72998047,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1232.02404785,-1361.62902832,795.79998779,0.00000000,0.00000000,89.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1232.02404785,-1360.66003418,795.80102539,0.00000000,0.00000000,89.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1232.02404785,-1359.68505859,795.79998779,0.00000000,0.00000000,89.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1232.02404785,-1358.72998047,795.80102539,0.00000000,0.00000000,89.99450684, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1231.00000000,-1361.59997559,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1231.00000000,-1360.64001465,795.80102539,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1231.00000000,-1359.67004395,795.79998779,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2139,1231.00000000,-1358.69995117,795.80102539,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2149,1231.19995117,-1361.80004883,797.00000000,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2149,1231.09997559,-1361.19995117,797.00000000,0.00000000,0.00000000,287.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2866,1231.40002441,-1359.80004883,796.85998535,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(2867,1234.69995117,-1362.19995117,796.84997559,0.00000000,0.00000000,60.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(19447,1224.90002441,-1331.30004883,797.50000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1968,1213.39941406,-1358.59960938,796.29998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1210.09997559,-1343.00000000,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1210.90002441,-1343.00000000,796.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1210.09997559,-1331.90002441,796.20001221,0.00000000,0.00000000,270.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(3657,1210.90002441,-1331.90002441,796.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1345.09997559,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1341.90002441,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1338.69995117,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1335.50000000,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1332.30004883,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1329.09997559,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1329.09997559,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1345.09997559,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1341.90002441,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1338.69995117,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1335.50000000,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1204.59997559,-1332.30004883,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1327.40002441,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1330.59997559,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1333.80004883,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1337.00000000,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1340.09997559,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1343.40002441,799.20001221,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1343.40002441,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1340.09997559,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1337.00000000,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1333.80004883,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1330.59997559,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    CreateDynamicObject(1800,1221.19995117,-1327.40002441,795.59997559,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);

	PrisonData[prisonDoors][0] = CreateDynamicObject(1495,1226.66210938,-1326.52929688,795.75000000,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0); // Prison door 1
   	PrisonData[prisonDoors][1] = CreateDynamicObject(1495,1215.21997070,-1310.73999023,795.75000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0); // Prison door 2
    PrisonData[prisonDoors][2] = CreateDynamicObject(1495,1226.76501465,-1345.71997070,795.73999023,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0); // Prison door 3

	PrisonData[prisonCells][0] = CreateDynamicObject(19302,1205.69995117,-1328.09997559,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][1] = CreateDynamicObject(19302,1205.69995117,-1331.30004883,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][2] = CreateDynamicObject(19302,1205.69995117,-1331.30004883,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][3] = CreateDynamicObject(19302,1205.69995117,-1328.09997559,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][4] = CreateDynamicObject(19302,1215.30004883,-1328.09997559,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][5] = CreateDynamicObject(19302,1215.30004883,-1331.30004883,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][6] = CreateDynamicObject(19302,1215.30004883,-1331.30004883,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][7] = CreateDynamicObject(19302,1215.30004883,-1328.09997559,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][8] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][9] = CreateDynamicObject(19302,1215.29980469,-1337.69921875,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][10] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][11] = CreateDynamicObject(19302,1215.30004883,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][12] = CreateDynamicObject(19302,1215.30004883,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][13] = CreateDynamicObject(19302,1215.30004883,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][14] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][15] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][16] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][17] = CreateDynamicObject(19302,1205.69995117,-1334.50000000,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][18] = CreateDynamicObject(19302,1205.69995117,-1337.69995117,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][19] = CreateDynamicObject(19302,1205.69995117,-1340.90002441,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][20] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][21] = CreateDynamicObject(19302,1215.30004883,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][22] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,800.50000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);
    PrisonData[prisonCells][23] = CreateDynamicObject(19302,1205.69995117,-1344.09997559,797.00000000,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0);

	SetDynamicObjectMaterial(CreateDynamicObject(19304,1213.59997559,-1329.90002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1213.59997559,-1333.40002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1213.59997559,-1336.90002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1213.59997559,-1340.40002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
	SetDynamicObjectMaterial(CreateDynamicObject(19304,1213.59997559,-1343.90002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1211.90002441,-1328.09997559,799.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1209.09997559,-1328.09997559,799.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1207.40002441,-1329.90002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1207.40002441,-1333.40002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1207.40002441,-1336.90002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1207.40002441,-1340.40002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1207.40002441,-1343.90002441,799.79998779,0.00000000,0.00000000,90.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);
    SetDynamicObjectMaterial(CreateDynamicObject(19304,1215.30004883,-1345.69995117,799.79998779,0.00000000,0.00000000,0.00000000, PRISON_WORLD, 5, -1, 200.0, 100.0), 0, 19304, "pd_jail_door_top01", "pd_jail_door_top01", 0xFF000000);


    //CASAS INTERIORES
    CreateObject( 14718, 220.48, 1277.57, 1081.13,   0.0, 0.00, 0.0);
	CreateObject( 1498,  222.73, 1272.61, 1081.13,   0.0, 0.00, 0.0);
	CreateObject( 14700, 326.40, 1459.42, 1084.94,   0.0, 0.00, 0.0);
	CreateObject( 1498,  325.57, 1455.30, 1083.42,   0.0, 0.00, 0.0);
	CreateObject( 14712, 272.79, 1244.54, 1084.83,   0.0, 0.00, 0.0);
	CreateObject( 1498,  275.01, 1236.99, 1083.29,   0.0, 0.00, 0.0);
	CreateObject( 14702, 265.00, 1199.27, 1083.55,   0.0, 0.00, 0.0);
	CreateObject( 14725, 269.04, 1195.98, 1082.11,   0.0, 0.00, 0.0);
	CreateObject( 14726, 269.03, 1196.05, 1082.11,   0.0, 0.00, 0.0);
	CreateObject( 14727, 269.09, 1196.01, 1082.11,   0.0, 0.00, 0.0);
	CreateObject( 14716, 269.08, 1196.00, 1082.11,   0.0, 0.00, 0.0);
	CreateObject( 14750, 27.60,  1329.24, 1089.88,   0.0, 0.00, 0.0);
	CreateObject( 1506,  25.04,  1319.87, 1083.36,   0.0, 0.00, 0.0);
	//Casa piso celeste SF
	CreateObject(15042, 2313.37, -1198.41, 1050.02,   0.0, 0.00, 0.00);
	CreateObject(1506, 2307.57, -1199.07, 1047.98,   0.0, 0.00, 0.00);
	CreateObject(1506, 2318.22, -1199.06, 1047.98,   0.0, 0.00, 0.00);
	//Casa Int 13
	CreateObject(14708, 236.63, 1136.16, 1081.76,   0.0, 0.00, 0.0);
	//Casa Int 15
	CreateObject(14706, 268.30, 1075.16, 1086.41,   0.0, 0.00, 0.0);
	//Casa Int 16
	CreateObject(14758, 139.52, 1395.56, 1084.73,   0.00, 0.00, 0.00);
	CreateObject(14757, 154.28, 1399.51, 1084.52,   0.00, 0.00, 0.00);
	CreateObject(1506, 138.75, 1395.49, 1082.85,   0.00, 0.00, 0.00);
	CreateObject(1506, 140.25, 1395.50, 1082.85,   0.00, 0.00, 0.00);
	//Casa Int 17
	CreateObject(14707, 238.41, 995.35, 1087.60,   0.00, 0.00, 0.00);
	CreateObject(1506, 251.53, 994.35, 1083.73,   0.00, 0.00, -90.66);
	CreateObject(1506, 251.54, 995.81, 1083.73,   0.00, 0.00, -90.66);
	//Casa Int 10-11-12
    CreateObject(1506, 222.37372, 1286.74316, 1081.13586,   0.00000, 0.00000, 0.00000);
	CreateObject(1504, 234.51563, 1186.24219, 1079.24219,   356.85840, 0.00000, -3.14159);
	CreateObject(1506, 24.75781, 1339.75000, 1083.35938,   3.14159, 0.00000, 0.00000);

	//CAMIONEROS SF
	CreateObject(7494, -2172.12109, -257.54144, 37.82870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3627, -2147.36694, -102.82823, 38.08650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3627, -2147.38159, -144.01273, 38.08650,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3627, -2104.94385, -130.80237, 38.08650,   -1.00000, 0.00000, 180.49770);
	CreateDynamicObject(3627, -2104.65430, -173.35054, 38.08650,   -1.00000, 0.00000, 180.49770);
	CreateObject(3630, -2128.14795, -223.67661, 35.74770,   0.00000, 0.00000, 0.00000);
	CreateObject(3630, -2128.10620, -226.70103, 35.74770,   0.00000, 0.00000, 0.00000);
	CreateObject(3630, -2128.09814, -229.71930, 35.74770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7622, -2165.46411, -267.88150, 40.35820,   0.00000, 0.00000, -89.72470);
	CreateDynamicObject(3630, -2128.71997, -244.06781, 35.74770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, -2128.74023, -247.11398, 35.74770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3630, -2128.70679, -250.17484, 35.74770,   0.00000, 0.00000, 0.00000);
	CreateObject(16400, -2179.26221, -212.58971, 34.28820,   0.00000, 0.00000, 180.55060);
	CreateDynamicObject(8884, -2188.30347, -216.02264, 37.43930,   0.00000, 0.00000, 89.44130);
	CreateObject(3474, -2103.22217, -271.88062, 40.29940,   0.00000, 0.00000, 179.98380);
	CreateObject(3474, -2113.18774, -271.84500, 40.29940,   0.00000, 0.00000, 179.98380);
	CreateObject(3474, -2123.35742, -271.52078, 40.29940,   0.00000, 0.00000, 179.98380);
	CreateDynamicObject(3572, -2191.08203, -225.97560, 35.65110,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(3572, -2190.94507, -234.07248, 35.65110,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(3572, -2190.80640, -242.18085, 35.65110,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(3572, -2190.66235, -250.28943, 35.65110,   0.00000, 0.00000, 91.00000);
	CreateDynamicObject(3572, -2190.51660, -258.39215, 35.65110,   0.00000, 0.00000, 91.00000);
	CreateObject(6959, -2152.98315, -220.82480, 34.31540,   0.00000, 0.00000, 0.00000);
	//Objetos Agregados Barrio El Corona - Frank
	CreateDynamicObject(1481, 1802.1000000, -2136.5000000, 13.3000000, 0.0000000, 0.0000000, 340.0000000); //
	CreateDynamicObject(1483, 1792.2900000, -2146.5700000, 14.5000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1483, 1795.9900000, -2146.5600000, 14.5000000, 0.0000000, 0.0000000, 179.9900000); //
	CreateDynamicObject(1482, 1804.5000000, -2154.8100000, 14.1800000, 0.0000000, 0.0000000, 89.5000000); //
	CreateDynamicObject(1482, 1797.8000000, -2154.8000000, 14.2000000, 0.0000000, 0.0000000, 89.7500000); //
	CreateDynamicObject(1482, 1793.0000000, -2154.8000000, 14.2300000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1482, 1791.4000000, -2153.2300000, 14.2000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1482, 1807.8100000, -2153.0500000, 14.1300000, 0.0000000, 0.0000000, 179.7400000); //
	CreateDynamicObject(1413, 1797.9000000, -2142.9000000, 13.8000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1594, 1800.1000000, -2139.0000000, 13.0300000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1482, 1804.4000000, -2151.2000000, 14.0000000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1482, 1800.6000000, -2151.5100000, 14.0200000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1338, 1796.4200000, -2146.8300000, 13.3000000, 0.0000000, 0.0000000, 2.7500000); //
	CreateDynamicObject(3302, 1796.4900000, -2153.1200000, 15.5200000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(3302, 1795.9400000, -2151.5700000, 15.5000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(3302, 1793.7900000, -2151.6600000, 15.6000000, 0.0000000, 0.0000000, 359.5000000); //
	CreateDynamicObject(3302, 1794.2900000, -2153.1000000, 15.5000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1450, 1797.4100000, -2124.7200000, 13.1300000, 0.0000000, 0.0000000, 180.9900000); //
	CreateDynamicObject(1328, 1798.4000000, -2124.5000000, 13.1000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2671, 1793.7000000, -2152.8500000, 12.5500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2671, 1798.2200000, -2123.9900000, 12.5700000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2673, 1796.3000000, -2149.7300000, 12.6700000, 359.7500000, 0.0000000, 62.2500000); //
	CreateDynamicObject(2677, 1807.0200000, -2124.0400000, 12.8200000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(933, 1794.0800000, -2152.8500000, 12.5200000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(911, 1796.5200000, -2148.2500000, 13.1000000, 0.0000000, 0.0000000, 296.0000000); //
	CreateDynamicObject(2971, 1796.2000000, -2144.2600000, 12.5000000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1462, 1797.6300000, -2143.4200000, 12.5000000, 0.0000000, 0.0000000, 339.0000000); //
	CreateDynamicObject(1369, 1796.8100000, -2145.9100000, 13.2000000, 0.0000000, 0.0000000, 290.7500000); //
	CreateDynamicObject(1347, 1797.8000000, -2150.7000000, 13.1300000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1264, 1797.8000000, -2149.5000000, 13.0000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1264, 1758.9700000, -2125.4000000, 13.0000000, 0.0000000, 0.0000000, 200.0000000); //
	CreateDynamicObject(1429, 1796.8000000, -2150.2000000, 13.3000000, 0.0000000, 0.0000000, 324.0000000); //
	CreateDynamicObject(3260, 1798.6000000, -2151.8000000, 13.5000000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1499, 1798.6000000, -2152.8000000, 12.6000000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(3260, 1798.8000000, -2155.3000000, 13.5000000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(14872, 1800.4700000, -2155.6900000, 13.0000000, 0.0000000, 0.0000000, 0.5000000); //
	CreateDynamicObject(1463, 1799.5000000, -2151.7000000, 12.9000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(3409, 1803.0000000, -2153.4000000, 12.5000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1227, 1808.2000000, -2152.3000000, 13.4800000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1227, 1808.2000000, -2154.7000000, 13.4800000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1764, 1791.7700000, -2153.6500000, 12.5500000, 0.0000000, 0.0000000, 108.0000000); //
	CreateDynamicObject(1707, 1797.4000000, -2154.3000000, 12.5000000, 0.0000000, 0.0000000, 208.0000000); //
	CreateDynamicObject(3014, 1796.9000000, -2150.5000000, 12.8000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(3014, 1796.5000000, -2150.1000000, 12.8000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1358, 1660.4600000, -2154.1000000, 13.7300000, 0.0000000, 0.0000000, 270.2500000); //
	CreateDynamicObject(1496, 1803.5400000, -2143.0800000, 12.6100000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1496, 1805.2300000, -2142.5200000, 12.6100000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(11472, 1805.4400000, -2141.8100000, 6.0500000, 270.0000000, 179.7000000, 269.7000000); //
	CreateDynamicObject(11472, 1727.8800000, -2129.3900000, 9.5600000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(11472, 1734.6200000, -2130.0500000, 9.5600000, 0.0000000, 0.0000000, 89.0000000); //
	CreateDynamicObject(11472, 1727.8900000, -2141.9300000, 9.5600000, 0.0000000, 0.0000000, 179.9900000); //
	CreateDynamicObject(1413, 1821.8000000, -2042.2600000, 15.1200000, 0.0000000, 269.7500000, 359.2500000); //
	CreateDynamicObject(1413, 1826.8800000, -2042.3300000, 15.0700000, 0.0000000, 91.2500000, 0.7500000); //
	CreateDynamicObject(1413, 1820.2300000, -2017.4200000, 13.8200000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1413, 1825.4900000, -2017.4300000, 13.8200000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(17513, 1821.2300000, -2026.0900000, 4.4400000, 0.5000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1413, 1824.3300000, -2042.2200000, 15.1400000, 0.0000000, 89.5000000, 181.7500000); //
	CreateDynamicObject(1413, 1819.2800000, -2042.2800000, 15.1400000, 0.0000000, 89.4900000, 1.7500000); //
	CreateDynamicObject(1413, 1828.2200000, -2020.0600000, 13.8200000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1413, 1817.5800000, -2020.4300000, 13.8200000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1413, 1828.1200000, -2039.6600000, 13.8700000, 0.0000000, 180.0000000, 88.5000000); //
	CreateDynamicObject(1413, 1817.7600000, -2039.6900000, 13.8400000, 0.0000000, 0.0000000, 88.9900000); //
	CreateDynamicObject(947, 1822.8300000, -2018.0200000, 14.7200000, 0.0000000, 0.0000000, 179.0000000); //
	CreateDynamicObject(2670, 1845.5700000, -2018.3500000, 12.6400000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(947, 1823.0100000, -2041.2200000, 14.6700000, 0.0000000, 0.0000000, 358.9900000); //
	CreateDynamicObject(1329, 1845.3700000, -2017.4800000, 13.0000000, 0.0000000, 0.0000000, 269.5000000); //
	CreateDynamicObject(1300, 1813.4900000, -2047.6000000, 12.9200000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1343, 1736.4400000, -2098.1400000, 13.3100000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1344, 1824.1100000, -2042.9500000, 13.2400000, 0.0000000, 0.0000000, 358.0000000); //
	CreateDynamicObject(1344, 1821.8100000, -2042.7800000, 13.2400000, 0.0000000, 0.0000000, 359.9900000); //
	CreateDynamicObject(1357, 1765.0100000, -2102.1000000, 12.8100000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1365, 1834.8400000, -2028.9600000, 13.6900000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1409, 1895.9300000, -2141.6200000, 12.6600000, 0.0000000, 0.0000000, 0.2500000); //
	CreateDynamicObject(1440, 1826.5800000, -2043.1300000, 12.9800000, 0.0000000, 0.0000000, 359.2500000); //
	CreateDynamicObject(1441, 1833.0600000, -2029.7800000, 13.2000000, 0.0000000, 0.0000000, 269.0000000); //
	CreateDynamicObject(1442, 1893.2500000, -2028.6600000, 13.1000000, 0.0000000, 0.0000000, 268.7400000); //
	CreateDynamicObject(1462, 1727.8300000, -2098.6600000, 12.5300000, 359.2500000, 0.0000000, 93.5000000); //
	CreateDynamicObject(1777, 1832.9600000, -2027.5200000, 12.8700000, 0.0000000, 270.0000000, 267.7500000); //
	CreateDynamicObject(18100, 1833.0900000, -2027.8300000, 12.6100000, 0.0000000, 0.0000000, 108.2500000); //
	CreateDynamicObject(3119, 1872.0400000, -2026.7600000, 12.8500000, 0.0000000, 0.0000000, 210.0000000); //
	CreateDynamicObject(921, 1870.5200000, -2020.5300000, 14.7400000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(926, 1869.4900000, -2041.6100000, 12.8000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(928, 1694.4700000, -2081.9900000, 12.8300000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(14397, 1716.5000000, -2092.9500000, 16.1200000, 270.0000000, 179.3000000, 89.3000000); //
	CreateDynamicObject(931, 1711.1100000, -2088.0900000, 13.5300000, 0.0000000, 0.5000000, 179.9900000); //
	CreateDynamicObject(930, 1711.5000000, -2087.6300000, 14.1100000, 0.0000000, 0.0000000, 176.4900000); //
	CreateDynamicObject(1271, 1710.8600000, -2078.1800000, 12.9200000, 0.0000000, 0.0000000, 89.7500000); //
	CreateDynamicObject(2062, 1716.8400000, -2088.4700000, 13.1400000, 0.0000000, 0.0000000, 50.0000000); //
	CreateDynamicObject(3585, 1753.6600000, -2081.9600000, 13.5500000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(942, 1721.4900000, -2151.7400000, 14.9200000, 0.0000000, 0.0000000, 89.9800000); //
	CreateDynamicObject(944, 1813.8200000, -2012.0400000, 13.3300000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(3287, 1778.0400000, -2088.3600000, 18.0900000, 0.0000000, 0.0000000, 179.7500000); //
	CreateDynamicObject(1363, 1872.3700000, -2042.9200000, 13.2100000, 14.7200000, 356.3800000, 14.1700000); //
	CreateDynamicObject(1214, 1713.3200000, -2151.6000000, 16.9600000, 0.0000000, 100.0000000, 179.5000000); //
	CreateDynamicObject(951, 1873.5600000, -2071.6500000, 15.6300000, 0.0000000, 0.0000000, 359.2500000); //
	CreateDynamicObject(11494, 1717.4500000, -2151.6200000, 13.7300000, 0.0000000, 0.0000000, 44.5000000); //
	CreateDynamicObject(11494, 1717.4600000, -2151.6200000, 13.7600000, 0.0000000, 179.9900000, 315.4900000); //
	CreateDynamicObject(11393, 1707.1800000, -2087.7700000, 14.0200000, 0.0000000, 0.0000000, 179.7500000); //
	CreateDynamicObject(8947, 1785.2300000, -2090.5600000, 9.5300000, 0.0000000, 0.0000000, 180.2400000); //
	CreateDynamicObject(16480, 1807.5500000, -2088.5300000, 12.1300000, 315.0000000, 270.0000000, 1.0000000); //
	CreateDynamicObject(2587, 1951.1000000, -2029.8200000, 14.8400000, 0.0000000, 358.2500000, 0.0000000); //
	CreateDynamicObject(16759, 1726.3200000, -2087.8300000, 12.6100000, 359.7500000, 0.0000000, 177.9900000); //
	CreateDynamicObject(9131, 1875.0900000, -2065.6000000, 15.0500000, 0.0000000, 0.0000000, 269.2500000); //
	CreateDynamicObject(9131, 1871.8500000, -2065.5800000, 15.0800000, 0.0000000, 0.0000000, 270.5000000); //
	CreateDynamicObject(7017, 1694.7900000, -2078.7600000, 5.9200000, 76.5000000, 90.0000000, 270.0000000); //
	CreateDynamicObject(7017, 1659.0200000, -2078.7400000, -22.3800000, 0.0000000, 90.0000000, 270.2400000); //
	CreateDynamicObject(7017, 1622.0000000, -2079.7500000, 15.7400000, 268.2000000, 90.0000000, 271.5000000); //
	CreateDynamicObject(7017, 1717.4200000, -2091.6200000, -20.5500000, 0.0000000, 90.0000000, 89.9900000); //
	CreateDynamicObject(14826, 1712.1000000, -2080.3000000, 9.7500000, 0.3900000, 76.7500000, 278.5400000); //
	CreateDynamicObject(14826, 1712.1500000, -2079.5300000, 9.7500000, 0.3800000, 76.7400000, 278.5400000); //
	CreateDynamicObject(11393, 1715.4200000, -2092.3200000, 14.8200000, 0.0000000, 0.0000000, 280.0000000); //
	CreateDynamicObject(11292, 1667.0300000, -2106.3200000, 10.9900000, 359.5000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(11392, 1704.3100000, -2081.0800000, 12.5800000, 0.0000000, 0.0000000, 87.7500000); //
	CreateDynamicObject(1457, 1675.7100000, -2080.0600000, 13.2900000, 0.0000000, 0.0000000, -4.0000000); //
	CreateDynamicObject(1479, 1667.3700000, -2079.3600000, 13.9500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1271, 1670.8200000, -2078.2900000, 12.8900000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1271, 1671.4200000, -2079.0400000, 12.8900000, 0.0000000, 0.0000000, 40.0000000); //
	CreateDynamicObject(2628, 1666.8500000, -2078.7200000, 12.5500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2629, 1664.9000000, -2079.1200000, 12.5500000, 0.0000000, 0.0000000, 47.0000000); //
	CreateDynamicObject(17969, 1678.9200000, -2077.8700000, 14.7000000, -4.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1328, 1673.6800000, -2078.1500000, 13.0500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2676, 1675.9600000, -2082.5700000, 12.6600000, 0.0000000, 0.0000000, -14.0000000); //
	CreateDynamicObject(2670, 1673.2700000, -2078.7400000, 12.6200000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1463, 1676.6600000, -2079.3900000, 12.5500000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1463, 1675.5300000, -2079.3500000, 12.5500000, 0.0000000, 0.0000000, 268.0000000); //
	CreateDynamicObject(18661, 1673.5700000, -2095.7700000, 14.6900000, -2.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(365, 1673.8100000, -2095.2900000, 12.7500000, 0.0000000, -4.0000000, 0.0000000); //
	CreateDynamicObject(365, 1673.6300000, -2095.3400000, 12.7500000, 0.0000000, -4.0000000, 33.0000000); //
	CreateDynamicObject(365, 1673.6900000, -2095.3200000, 12.5600000, 90.0000000, -4.0000000, 33.0000000); //
	CreateDynamicObject(1450, 1671.5600000, -2095.2500000, 13.1300000, 0.0000000, 0.0000000, 184.0000000); //
	CreateDynamicObject(1219, 1687.5300000, -2087.0700000, 14.4700000, 90.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(1756, 1680.8300000, -2081.1300000, 12.5500000, 0.0000000, 0.0000000, 4.0000000); //
	CreateDynamicObject(1756, 1682.4700000, -2084.1400000, 12.5500000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(2319, 1680.9500000, -2082.5500000, 12.5500000, 0.0000000, 0.0000000, -4.0000000); //
	CreateDynamicObject(933, 1685.5900000, -2081.6300000, 12.5500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1429, 1685.0900000, -2081.7500000, 13.7700000, 0.0000000, 0.0000000, -73.0000000); //
	CreateDynamicObject(2968, 1685.9900000, -2086.4400000, 12.8400000, 0.0000000, 0.0000000, -11.0000000); //
	CreateDynamicObject(2968, 1686.7800000, -2085.9800000, 12.8400000, 0.0000000, 0.0000000, 105.0000000); //
	CreateDynamicObject(1349, 1678.5700000, -2094.5500000, 13.1200000, 0.0000000, 0.0000000, -98.0000000); //
	CreateDynamicObject(2203, 1683.6000000, -2078.9000000, 12.7300000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19473, 1683.6400000, -2078.8700000, 12.8300000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2062, 1685.6700000, -2079.3000000, 13.1300000, 0.0000000, 0.0000000, -207.0000000); //
	CreateDynamicObject(1481, 1679.1200000, -2079.2600000, 13.2500000, 0.0000000, 0.0000000, 18.0000000); //
	CreateDynamicObject(2859, 1679.1400000, -2079.3100000, 12.9200000, 0.0000000, 0.0000000, 33.0000000); //
	CreateDynamicObject(2880, 1678.9400000, -2079.4300000, 13.3600000, 335.0000000, 279.0000000, 0.0000000); //
	CreateDynamicObject(2856, 1681.2200000, -2082.3000000, 13.0400000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2894, 1682.3900000, -2082.7100000, 13.0400000, 0.0000000, 0.0000000, -25.0000000); //
	CreateDynamicObject(335, 1680.5400000, -2083.9500000, 13.0200000, 90.0000000, 0.0000000, 47.0000000); //
	CreateDynamicObject(1222, 1686.1700000, -2079.9800000, 12.9900000, 0.0000000, 0.0000000, 40.0000000); //
	CreateDynamicObject(2060, 1689.1700000, -2079.8500000, 12.5900000, 0.0000000, 0.0000000, -93.0000000); //
	CreateDynamicObject(2060, 1688.9100000, -2078.9800000, 12.5900000, 0.0000000, 0.0000000, 40.0000000); //
	CreateDynamicObject(2060, 1688.7600000, -2079.2500000, 12.8500000, 0.0000000, 0.0000000, -18.0000000); //
	CreateDynamicObject(1456, 1679.0500000, -2089.6900000, 13.3000000, -4.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(3403, 1683.4500000, -2082.4100000, 15.5800000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(17969, 1753.1200000, -2133.1200000, 14.5700000, -4.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1271, 1721.1500000, -2153.0700000, 12.8900000, 0.0000000, 0.0000000, 47.0000000); //
	CreateDynamicObject(18929, 1721.2000000, -2153.1000000, 13.2800000, -10.0000000, 270.0000000, 0.0000000); //
	CreateDynamicObject(1810, 1692.5200000, -2144.7800000, 12.5400000, 0.0000000, 0.0000000, 4.0000000); //
	CreateDynamicObject(1712, 1690.0300000, -2146.3200000, 12.5400000, 0.0000000, 0.0000000, 66.0000000); //
	CreateDynamicObject(1810, 1709.9900000, -2149.9900000, 12.5500000, 0.0000000, 0.0000000, 49.0000000); //
	CreateDynamicObject(1810, 1710.9300000, -2149.6000000, 12.5500000, 0.0000000, 0.0000000, 7.0000000); //
	CreateDynamicObject(1810, 1709.3100000, -2150.9400000, 12.5500000, 0.0000000, 0.0000000, 79.0000000); //
	CreateDynamicObject(2315, 1691.3500000, -2147.1000000, 12.5400000, 0.0000000, 0.0000000, 62.0000000); //
	CreateDynamicObject(18661, 1692.6800000, -2138.1100000, 14.6400000, -2.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(19364, 1694.6900000, -2139.6600000, 14.2600000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19364, 1694.6900000, -2142.8600000, 14.2600000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19364, 1696.2000000, -2144.3800000, 14.2600000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(19364, 1699.3800000, -2144.3800000, 14.2600000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(19355, 1696.5400000, -2142.7000000, 12.5200000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19355, 1699.2400000, -2142.7100000, 12.5200000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19355, 1699.2400000, -2139.5100000, 12.5200000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19355, 1696.5200000, -2139.5100000, 12.5200000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(17951, 1700.8900000, -2141.2200000, 15.9100000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19355, 1702.5800000, -2139.5200000, 12.4000000, 0.0000000, 94.1000000, 0.0000000); //
	CreateDynamicObject(19355, 1702.5800000, -2142.7000000, 12.4000000, 0.0000000, 94.1000000, 0.0000000); //
	CreateDynamicObject(2886, 1699.6300000, -2138.1300000, 14.4000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1502, 1697.6300000, -2138.1100000, 12.6100000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1463, 1695.7400000, -2138.9500000, 12.9300000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(928, 1696.9400000, -2139.4100000, 12.8900000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(365, 1696.9100000, -2139.5000000, 12.7900000, 0.0000000, -8.0000000, -244.0000000); //
	CreateDynamicObject(365, 1696.9000000, -2139.2200000, 12.7900000, 0.0000000, -8.0000000, -149.0000000); //
	CreateDynamicObject(365, 1697.0000000, -2139.3900000, 12.7900000, 0.0000000, -8.0000000, -215.0000000); //
	CreateDynamicObject(365, 1697.1000000, -2139.4600000, 12.7900000, 0.0000000, -8.0000000, -227.0000000); //
	CreateDynamicObject(365, 1697.0100000, -2139.5900000, 12.7900000, 0.0000000, -8.0000000, -244.0000000); //
	CreateDynamicObject(2055, 1699.0900000, -2144.2700000, 14.4700000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(19364, 1696.5200000, -2142.7100000, 16.0100000, 0.0000000, 90.0000000, 180.0000000); //
	CreateDynamicObject(19364, 1699.2400000, -2142.7100000, 16.0100000, 0.0000000, 90.0000000, 180.0000000); //
	CreateDynamicObject(19364, 1696.5200000, -2139.5100000, 16.0100000, 0.0000000, 90.0000000, 180.0000000); //
	CreateDynamicObject(19364, 1699.2400000, -2139.5100000, 16.0100000, 0.0000000, 90.0000000, 180.0000000); //
	CreateDynamicObject(1437, 1698.3700000, -2147.2300000, 12.5400000, -28.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1224, 1696.4800000, -2140.4300000, 16.6900000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1224, 1698.1400000, -2140.0000000, 16.6900000, 0.0000000, 0.0000000, 69.0000000); //
	CreateDynamicObject(1462, 1694.0900000, -2141.0500000, 12.5500000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1412, 1719.9800000, -2122.7900000, 12.5400000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1412, 1709.8600000, -2122.7900000, 12.5400000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(3282, 1688.2600000, -2137.9100000, 12.5400000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1486, 1681.5900000, -2082.6700000, 13.2000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1486, 1681.9400000, -2082.4700000, 13.2000000, 0.0000000, 0.0000000, -200.0000000); //
	CreateDynamicObject(1486, 1690.2400000, -2146.9800000, 12.7100000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2838, 1691.7900000, -2145.9200000, 13.0700000, 0.0000000, 0.0000000, -69.0000000); //
	CreateDynamicObject(2860, 1691.2500000, -2146.9600000, 13.0400000, 0.0000000, 0.0000000, -127.0000000); //
	CreateDynamicObject(1328, 1691.4500000, -2148.8300000, 13.0600000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2672, 1691.4400000, -2148.9100000, 12.8200000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1299, 1686.7300000, -2152.2400000, 13.0000000, 0.0000000, 0.0000000, 25.0000000); //
	CreateDynamicObject(2654, 1690.1400000, -2144.4300000, 12.7700000, 0.0000000, 0.0000000, 135.0000000); //
	CreateDynamicObject(1413, 1710.0500000, -2148.7200000, 12.5700000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(1412, 1708.3100000, -2151.1900000, 12.5700000, 0.0000000, 0.0000000, 288.0000000); //
	CreateDynamicObject(1413, 1707.2600000, -2156.5300000, 12.5700000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1486, 1709.2500000, -2150.4100000, 12.6900000, 0.0000000, 0.0000000, 91.0000000); //
	CreateDynamicObject(1486, 1709.3500000, -2150.6400000, 12.6900000, 0.0000000, 0.0000000, 200.0000000); //
	CreateDynamicObject(1230, 1690.4700000, -2139.5200000, 12.9800000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1230, 1689.4600000, -2140.2600000, 12.9800000, 0.0000000, 0.0000000, 18.0000000); //
	CreateDynamicObject(1220, 1690.3800000, -2140.5600000, 12.9800000, 0.0000000, 0.0000000, 55.0000000); //
	CreateDynamicObject(1221, 1689.4800000, -2139.0900000, 12.9800000, 0.0000000, 0.0000000, 84.0000000); //
	CreateDynamicObject(337, 1682.7700000, -2148.5500000, 13.3400000, 174.0000000, -10.0000000, -192.0000000); //
	CreateDynamicObject(3694, 1675.9200000, -2151.2700000, 12.9200000, 0.0000000, 0.0000000, 40.0000000); //
	CreateDynamicObject(337, 1675.2900000, -2156.2300000, 13.3400000, 174.0000000, -10.0000000, -99.0000000); //
	CreateDynamicObject(336, 1700.0800000, -2138.1500000, 13.2900000, 168.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1575, 1668.1300000, -2139.5300000, 12.5400000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1576, 1668.1300000, -2139.5300000, 12.7000000, 0.0000000, 0.0000000, -76.0000000); //
	CreateDynamicObject(1575, 1667.6200000, -2138.9700000, 12.5400000, 0.0000000, 0.0000000, 47.0000000); //
	CreateDynamicObject(1710, 1667.5200000, -2141.5400000, 12.5400000, 0.0000000, 0.0000000, 47.0000000); //
	CreateDynamicObject(850, 1667.5200000, -2138.7700000, 12.6400000, 0.0000000, 0.0000000, -36.0000000); //
	CreateDynamicObject(2321, 1670.0100000, -2141.1700000, 12.5500000, 0.0000000, 0.0000000, 213.0000000); //
	CreateDynamicObject(17969, 1694.8500000, -2141.3600000, 14.2700000, -4.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(3261, 1662.3600000, -2146.0500000, 12.5400000, 0.0000000, 0.0000000, 1.0000000); //
	CreateDynamicObject(3261, 1662.3600000, -2149.1200000, 12.5400000, 0.0000000, 0.0000000, 1.0000000); //
	CreateDynamicObject(3261, 1662.3600000, -2142.9900000, 12.5400000, 0.0000000, 0.0000000, 1.0000000); //
	CreateDynamicObject(19473, 1663.3500000, -2148.4400000, 12.5500000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(19473, 1661.4200000, -2148.4400000, 12.5500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19473, 1661.4200000, -2146.4400000, 12.5500000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(19473, 1663.3500000, -2146.4400000, 12.5500000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(19473, 1663.3500000, -2142.4400000, 12.5500000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(19473, 1663.3500000, -2140.4400000, 12.5500000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(19473, 1661.4200000, -2144.4400000, 12.5500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19473, 1661.4200000, -2142.4400000, 12.5500000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(19473, 1661.4200000, -2140.4400000, 12.5500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(346, 1669.4900000, -2141.1100000, 12.8100000, 90.0000000, 0.0000000, 80.0000000); //
	CreateDynamicObject(2901, 1662.0400000, -2129.2400000, 12.8600000, 0.0000000, 0.0000000, -62.0000000); //
	CreateDynamicObject(2901, 1662.1900000, -2130.4500000, 12.8600000, 0.0000000, 0.0000000, -33.0000000); //
	CreateDynamicObject(2901, 1661.2800000, -2129.2800000, 12.8600000, 0.0000000, 0.0000000, -91.0000000); //
	CreateDynamicObject(19356, 1661.7700000, -2129.5300000, 14.2000000, 0.0000000, -40.0000000, -132.0000000); //
	CreateDynamicObject(2840, 1668.8700000, -2141.9800000, 13.0400000, 0.0000000, 0.0000000, -120.0000000); //
	CreateDynamicObject(1486, 1669.3100000, -2141.6400000, 13.1800000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1486, 1669.3100000, -2141.9500000, 13.1800000, 0.0000000, 0.0000000, 55.0000000); //
	CreateDynamicObject(3027, 1669.5000000, -2141.2000000, 13.0400000, 90.0000000, 0.0000000, 62.0000000); //
	CreateDynamicObject(3027, 1669.6000000, -2141.1700000, 13.0400000, 90.0000000, 0.0000000, 25.0000000); //
	CreateDynamicObject(1485, 1669.9400000, -2140.7000000, 13.0400000, 0.0000000, 0.0000000, -55.0000000); //
	CreateDynamicObject(1362, 1837.0200000, -2099.5300000, 13.1400000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2674, 1836.7600000, -2099.3000000, 12.5600000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1362, 1896.3800000, -2103.4600000, 13.1400000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2676, 1896.5100000, -2103.3900000, 12.6900000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(17037, 1739.7100000, -2152.2400000, 15.0300000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1481, 1739.4900000, -2143.6900000, 13.2500000, 0.0000000, 0.0000000, -56.0000000); //
	CreateDynamicObject(2969, 1740.1300000, -2145.2000000, 12.6700000, 0.0000000, 0.0000000, 98.0000000); //
	CreateDynamicObject(2840, 1739.4000000, -2143.6700000, 12.9200000, 0.0000000, 0.0000000, -91.0000000); //
	CreateDynamicObject(2370, 1733.6000000, -2145.7800000, 12.5500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2370, 1731.9300000, -2146.1200000, 12.5500000, 0.0000000, 0.0000000, 9.0000000); //
	CreateDynamicObject(1711, 1731.4300000, -2143.9000000, 12.5500000, 0.0000000, 0.0000000, 33.0000000); //
	CreateDynamicObject(1719, 1733.9700000, -2145.9100000, 12.8700000, 0.0000000, 0.0000000, -11.0000000); //
	CreateDynamicObject(1518, 1734.3400000, -2145.7700000, 13.6500000, 0.0000000, 0.0000000, -18.0000000); //
	CreateDynamicObject(1712, 1734.5600000, -2148.1600000, 12.5500000, 0.0000000, 0.0000000, 193.0000000); //
	CreateDynamicObject(1708, 1733.0800000, -2143.4900000, 12.5500000, 0.0000000, 0.0000000, -4.0000000); //
	CreateDynamicObject(1810, 1735.4700000, -2144.1900000, 12.5500000, 0.0000000, 0.0000000, -47.0000000); //
	CreateDynamicObject(1810, 1735.5300000, -2145.2800000, 12.5500000, 0.0000000, 0.0000000, -91.0000000); //
	CreateDynamicObject(1810, 1730.9500000, -2146.7400000, 12.5500000, 0.0000000, 0.0000000, -236.0000000); //
	CreateDynamicObject(1810, 1730.7600000, -2145.0900000, 12.5500000, 0.0000000, 0.0000000, -270.0000000); //
	CreateDynamicObject(1369, 1732.1500000, -2100.9100000, 13.1200000, 0.0000000, 0.0000000, -18.0000000); //
	CreateDynamicObject(1463, 1723.6900000, -2155.5400000, 12.8800000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1463, 1723.8900000, -2153.7700000, 12.8800000, 0.0000000, 0.0000000, 4.0000000); //
	CreateDynamicObject(1463, 1725.6000000, -2154.6500000, 12.8800000, 0.0000000, 0.0000000, 69.0000000); //
	CreateDynamicObject(2252, 1732.5800000, -2145.5900000, 13.6700000, 0.0000000, 0.0000000, 4.0000000); //
	CreateDynamicObject(1338, 1741.4300000, -2147.9700000, 13.2400000, 0.0000000, 0.0000000, 14.0000000); //
	CreateDynamicObject(1328, 1728.6600000, -2143.2100000, 13.0500000, 0.0000000, 0.0000000, 4.0000000); //
	CreateDynamicObject(2674, 1729.2000000, -2143.5500000, 12.5700000, 0.0000000, 0.0000000, -60.0000000); //
	CreateDynamicObject(2867, 1731.7500000, -2145.3600000, 13.4100000, 0.0000000, 0.0000000, 30.0000000); //
	CreateDynamicObject(2837, 1732.0400000, -2146.3500000, 13.4100000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2814, 1733.5700000, -2145.0200000, 13.3900000, 0.0000000, 0.0000000, -101.0000000); //
	CreateDynamicObject(2814, 1734.2500000, -2145.0000000, 13.3900000, 0.0000000, 0.0000000, -135.0000000); //
	CreateDynamicObject(330, 1733.4800000, -2146.0400000, 13.3900000, 90.0000000, 0.0000000, -120.0000000); //
	CreateDynamicObject(3403, 1783.8900000, -2151.5800000, 15.6000000, 0.0000000, 0.0000000, 8.0000000); //
	CreateDynamicObject(1437, 1759.8500000, -2141.2100000, 12.5400000, -28.0000000, 0.0000000, -90.0000000); //
	CreateDynamicObject(1219, 1758.3600000, -2136.4700000, 14.7100000, 90.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1712, 1787.6000000, -2153.8800000, 12.6200000, 0.0000000, 0.0000000, -156.0000000); //
	CreateDynamicObject(1712, 1786.4200000, -2150.8100000, 12.6200000, 0.0000000, 0.0000000, -25.0000000); //
	CreateDynamicObject(1711, 1784.4300000, -2151.7100000, 12.6200000, 0.0000000, 0.0000000, 47.0000000); //
	CreateDynamicObject(1710, 1784.8200000, -2154.6000000, 12.6200000, 0.0000000, 0.0000000, 171.0000000); //
	CreateDynamicObject(2315, 1785.3200000, -2153.1400000, 12.6000000, 0.0000000, 0.0000000, 26.0000000); //
	CreateDynamicObject(2315, 1782.6700000, -2152.8000000, 12.6000000, 0.0000000, 0.0000000, -10.0000000); //
	CreateDynamicObject(1415, 1777.6400000, -2139.2300000, 12.6900000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(18661, 1782.5100000, -2156.3200000, 14.0500000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(365, 1781.8600000, -2155.9300000, 12.7500000, 0.0000000, -6.0000000, 0.0000000); //
	CreateDynamicObject(365, 1781.9800000, -2156.0700000, 12.7500000, 0.0000000, -6.0000000, 55.0000000); //
	CreateDynamicObject(365, 1783.3100000, -2156.0500000, 12.5700000, 90.0000000, -6.0000000, 0.0000000); //
	CreateDynamicObject(928, 1781.3500000, -2155.7400000, 12.8300000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(926, 1781.0500000, -2155.1100000, 12.8300000, 0.0000000, 0.0000000, 18.0000000); //
	CreateDynamicObject(917, 1779.6100000, -2140.4200000, 12.7500000, 0.0000000, 0.0000000, -56.0000000); //
	CreateDynamicObject(916, 1779.6100000, -2140.4400000, 12.6800000, 0.0000000, 0.0000000, -47.0000000); //
	CreateDynamicObject(2676, 1776.5800000, -2140.4100000, 12.7100000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2968, 1779.4500000, -2139.7800000, 12.8900000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2968, 1779.0700000, -2139.2500000, 12.8900000, 0.0000000, 0.0000000, 91.0000000); //
	CreateDynamicObject(2937, 1780.2400000, -2139.2100000, 13.8600000, 70.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2937, 1781.2400000, -2139.4800000, 12.6400000, 0.0000000, 0.0000000, 68.0000000); //
	CreateDynamicObject(1370, 1780.3300000, -2153.7700000, 13.0900000, 0.0000000, 0.0000000, 33.0000000); //
	CreateDynamicObject(1299, 1787.3900000, -2140.5400000, 13.1500000, 0.0000000, 0.0000000, -6.0000000); //
	CreateDynamicObject(3034, 1784.1000000, -2138.8200000, 14.9200000, 0.0000000, 0.0000000, -1.0000000); //
	CreateDynamicObject(933, 1779.3000000, -2152.4100000, 12.5500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1747, 1779.3000000, -2152.7000000, 13.5300000, 0.0000000, 0.0000000, 105.0000000); //
	CreateDynamicObject(1230, 1786.5700000, -2139.2700000, 13.0800000, 0.0000000, 0.0000000, 40.0000000); //
	CreateDynamicObject(1221, 1786.5100000, -2141.3900000, 13.0800000, 0.0000000, 0.0000000, 40.0000000); //
	CreateDynamicObject(1220, 1786.3400000, -2140.2200000, 13.0800000, 0.0000000, 0.0000000, 76.0000000); //
	CreateDynamicObject(1349, 1779.3900000, -2151.0000000, 12.9000000, 84.0000000, 340.0000000, -16.0000000); //
	CreateDynamicObject(2062, 1788.9700000, -2146.6900000, 13.2700000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2062, 1788.5100000, -2145.9400000, 13.0500000, 90.0000000, 0.0000000, -55.0000000); //
	CreateDynamicObject(1464, 1787.8100000, -2149.2900000, 13.7300000, 0.0000000, 0.0000000, -40.0000000); //
	CreateDynamicObject(1465, 1784.6800000, -2146.9400000, 13.7500000, 0.0000000, 0.0000000, -11.0000000); //
	CreateDynamicObject(1271, 1783.8700000, -2146.8100000, 13.0000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1271, 1784.7600000, -2146.9000000, 13.0000000, 0.0000000, 0.0000000, 18.0000000); //
	CreateDynamicObject(1271, 1785.7100000, -2147.2200000, 13.0000000, 0.0000000, 0.0000000, -40.0000000); //
	CreateDynamicObject(1271, 1785.2000000, -2147.0800000, 13.6600000, 0.0000000, 0.0000000, -26.0000000); //
	CreateDynamicObject(1271, 1784.4100000, -2146.8200000, 13.6600000, 0.0000000, 0.0000000, -12.0000000); //
	CreateDynamicObject(1271, 1788.7300000, -2150.0100000, 13.0000000, 0.0000000, 0.0000000, -76.0000000); //
	CreateDynamicObject(1271, 1787.2800000, -2148.6600000, 13.0000000, 0.0000000, 0.0000000, -40.0000000); //
	CreateDynamicObject(1271, 1787.9800000, -2149.2900000, 13.0000000, 0.0000000, 0.0000000, -52.0000000); //
	CreateDynamicObject(2203, 1781.1200000, -2149.7600000, 12.7600000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19473, 1781.1200000, -2149.7400000, 12.8600000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(335, 1786.8200000, -2152.2200000, 12.6500000, 90.0000000, 0.0000000, -142.0000000); //
	CreateDynamicObject(19165, 1784.7900000, -2153.1700000, 13.1100000, 0.0000000, 0.0000000, -11.0000000); //
	CreateDynamicObject(2838, 1782.7200000, -2152.8200000, 13.0900000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2857, 1786.3400000, -2152.6800000, 13.0900000, 0.0000000, 0.0000000, 185.0000000); //
	CreateDynamicObject(2860, 1783.5600000, -2152.7900000, 13.0900000, 0.0000000, 0.0000000, -33.0000000); //
	CreateDynamicObject(18868, 1783.4000000, -2153.1700000, 13.0900000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2894, 1783.5900000, -2153.2500000, 13.0900000, 0.0000000, 0.0000000, -28.0000000); //
	CreateDynamicObject(1328, 1796.9700000, -2136.6100000, 13.0700000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1221, 1804.4200000, -2141.5200000, 13.0800000, 0.0000000, 0.0000000, 40.0000000); //
	CreateDynamicObject(1220, 1803.1500000, -2141.8400000, 13.0800000, 0.0000000, 0.0000000, 76.0000000); //
	CreateDynamicObject(1230, 1804.7700000, -2140.4800000, 13.0800000, 0.0000000, 0.0000000, 113.0000000); //
	CreateDynamicObject(17969, 1802.1800000, -2142.5100000, 14.7300000, -4.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1516, 1799.4000000, -2141.6800000, 12.7300000, 0.0000000, 0.0000000, 6.0000000); //
	CreateDynamicObject(1721, 1800.1600000, -2141.6500000, 12.5500000, 0.0000000, 0.0000000, 94.0000000); //
	CreateDynamicObject(1721, 1799.5500000, -2140.4400000, 12.5500000, 0.0000000, 0.0000000, 164.0000000); //
	CreateDynamicObject(1481, 1800.4900000, -2136.5200000, 13.2500000, 0.0000000, 0.0000000, -12.0000000); //
	CreateDynamicObject(2880, 1800.4300000, -2136.5500000, 13.3600000, 335.0000000, 279.0000000, 0.0000000); //
	CreateDynamicObject(2880, 1800.5700000, -2136.7200000, 13.3600000, 335.0000000, 279.0000000, -62.0000000); //
	CreateDynamicObject(2859, 1800.4400000, -2136.5900000, 12.9200000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2880, 1799.4000000, -2141.3800000, 13.2600000, 335.0000000, 279.0000000, 0.0000000); //
	CreateDynamicObject(2880, 1799.2200000, -2141.4400000, 13.2600000, 335.0000000, 279.0000000, -360.0000000); //
	CreateDynamicObject(2856, 1799.4400000, -2141.4800000, 13.2500000, 0.0000000, 0.0000000, -127.0000000); //
	CreateDynamicObject(2672, 1797.3600000, -2137.6900000, 12.8300000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2671, 1795.8500000, -2137.9700000, 12.5700000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(947, 1756.0600000, -2084.7000000, 14.7400000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1946, 1754.5400000, -2085.5800000, 12.7500000, 200.0000000, 0.0000000, -84.0000000); //
	CreateDynamicObject(17969, 1762.9900000, -2089.6100000, 14.5000000, -4.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1810, 1765.0000000, -2080.2700000, 12.5500000, 0.0000000, 0.0000000, -69.0000000); //
	CreateDynamicObject(1810, 1764.5600000, -2079.4500000, 12.5500000, 0.0000000, 0.0000000, -55.0000000); //
	CreateDynamicObject(1810, 1765.6800000, -2081.8000000, 12.5500000, 0.0000000, 0.0000000, -63.0000000); //
	CreateDynamicObject(1486, 1765.3800000, -2080.4400000, 12.7100000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1486, 1765.2300000, -2080.4200000, 12.7100000, 0.0000000, 0.0000000, -171.0000000); //
	CreateDynamicObject(1486, 1765.1600000, -2079.5900000, 12.7100000, 0.0000000, 0.0000000, -69.0000000); //
	CreateDynamicObject(18933, 1765.7400000, -2081.5200000, 13.0900000, 0.0000000, 270.0000000, 0.0000000); //
	CreateDynamicObject(3497, 1787.9900000, -2089.8200000, 15.6400000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(18661, 1787.3100000, -2090.1300000, 15.1300000, 6.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1220, 1780.6200000, -2087.9700000, 12.8900000, 0.0000000, 0.0000000, 142.0000000); //
	CreateDynamicObject(1221, 1781.7100000, -2087.9400000, 12.8900000, 0.0000000, 0.0000000, -4.0000000); //
	CreateDynamicObject(1230, 1782.5000000, -2086.9200000, 13.0000000, 0.0000000, 0.0000000, 33.0000000); //
	CreateDynamicObject(1299, 1780.4400000, -2086.8100000, 13.0000000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1412, 1717.8300000, -2086.3500000, 12.5500000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(1412, 1717.0100000, -2080.2900000, 12.5500000, 0.0000000, 0.0000000, 72.0000000); //
	CreateDynamicObject(1712, 1715.4000000, -2088.0500000, 12.5400000, 0.0000000, 0.0000000, -171.0000000); //
	CreateDynamicObject(1712, 1716.9900000, -2085.4100000, 12.5400000, 0.0000000, 0.0000000, -105.0000000); //
	CreateDynamicObject(2315, 1714.4800000, -2086.9200000, 12.5400000, 0.0000000, 0.0000000, 48.0000000); //
	CreateDynamicObject(17969, 1703.1000000, -2084.7800000, 14.2900000, -2.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(365, 1703.3200000, -2084.0400000, 12.7300000, 0.0000000, -4.0000000, 0.0000000); //
	CreateDynamicObject(365, 1703.5200000, -2084.1300000, 12.7300000, 0.0000000, -4.0000000, 135.0000000); //
	CreateDynamicObject(1271, 1716.8500000, -2078.2400000, 12.8900000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1271, 1716.6100000, -2079.1700000, 12.8900000, 0.0000000, 0.0000000, -24.0000000); //
	CreateDynamicObject(1271, 1716.7400000, -2078.5300000, 13.5700000, 0.0000000, 0.0000000, -16.0000000); //
	CreateDynamicObject(1328, 1703.9100000, -2088.5800000, 13.0500000, 0.0000000, 0.0000000, 156.0000000); //
	CreateDynamicObject(2670, 1704.4000000, -2088.0200000, 12.6300000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2674, 1703.5800000, -2089.5500000, 12.6300000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(2857, 1714.4400000, -2086.6200000, 13.0600000, 0.0000000, 0.0000000, 114.0000000); //
	CreateDynamicObject(2850, 1715.5500000, -2086.0200000, 13.0400000, 0.0000000, 0.0000000, 72.0000000); //
	CreateDynamicObject(1463, 1766.6400000, -2089.0000000, 12.8800000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1463, 1764.5800000, -2088.5100000, 12.8800000, 0.0000000, 0.0000000, 34.0000000); //
	CreateDynamicObject(1463, 1766.0900000, -2087.1500000, 12.8800000, 0.0000000, 0.0000000, 74.0000000); //
	CreateDynamicObject(3034, 1708.2100000, -208.9400000, 14.4300000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(3034, 1710.7200000, -2088.9500000, 14.7600000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(1219, 1711.8600000, -2088.9900000, 14.8300000, 90.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(1219, 1709.2700000, -2088.9900000, 14.8300000, 90.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(1299, 1790.7500000, -2079.8100000, 13.0100000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(1711, 1757.1400000, -2149.6900000, 12.5500000, 0.0000000, 0.0000000, -38.0000000); //
	CreateDynamicObject(1712, 1757.5600000, -2151.9200000, 12.5500000, 0.0000000, 0.0000000, -120.0000000); //
	CreateDynamicObject(1710, 1752.8200000, -2151.6900000, 12.5500000, 0.0000000, 0.0000000, 33.0000000); //
	CreateDynamicObject(2315, 1755.0400000, -2151.8300000, 12.5400000, 0.0000000, 0.0000000, 32.0000000); //
	CreateDynamicObject(3261, 1762.4600000, -2153.1300000, 12.5400000, 0.0000000, 0.0000000, 91.0000000); //
	CreateDynamicObject(3261, 1765.4800000, -2153.1300000, 12.5400000, 0.0000000, 0.0000000, 91.0000000); //
	CreateDynamicObject(19473, 1759.8400000, -2154.1300000, 12.5500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19473, 1761.8400000, -2154.1300000, 12.5500000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(19473, 1763.8400000, -2154.1300000, 12.5500000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(19473, 1765.8400000, -2154.1300000, 12.5500000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(3261, 1768.5300000, -2153.1300000, 12.5400000, 0.0000000, 0.0000000, 91.0000000); //
	CreateDynamicObject(19473, 1767.8400000, -2154.1300000, 12.5500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19473, 1759.8400000, -2152.1700000, 12.5500000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(19473, 1761.8400000, -2152.1700000, 12.5500000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(19473, 1763.8400000, -2152.1700000, 12.5500000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19473, 1765.8400000, -2152.1700000, 12.5500000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(19473, 1767.8400000, -2152.1700000, 12.5500000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(1221, 1753.7100000, -2154.7500000, 13.0800000, 0.0000000, 0.0000000, 91.0000000); //
	CreateDynamicObject(1221, 1755.2200000, -2155.2600000, 13.0800000, 0.0000000, 0.0000000, 67.0000000); //
	CreateDynamicObject(1220, 1754.7900000, -2154.0500000, 13.0800000, 0.0000000, 0.0000000, 79.0000000); //
	CreateDynamicObject(2901, 1756.1700000, -2154.8800000, 12.7500000, 0.0000000, 0.0000000, -40.0000000); //
	CreateDynamicObject(336, 1756.6900000, -2153.6000000, 13.1900000, 160.0000000, 0.0000000, -22.0000000); //
	CreateDynamicObject(2814, 1756.4600000, -2150.8400000, 13.0400000, 0.0000000, 0.0000000, -120.0000000); //
	CreateDynamicObject(2838, 1755.0300000, -2151.5500000, 13.0900000, 0.0000000, 0.0000000, -113.0000000); //
	CreateDynamicObject(2857, 1752.5600000, -2152.7200000, 12.5500000, 0.0000000, 0.0000000, 69.0000000); //
	CreateDynamicObject(19364, 1734.7900000, -2079.4400000, 14.2700000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(19364, 1733.2800000, -2084.2700000, 14.2700000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19364, 1733.2700000, -2081.0600000, 14.2700000, 0.0000000, 0.0000000, 0.0000000); //
	CreateDynamicObject(19355, 1735.1100000, -2084.1700000, 12.5500000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19355, 1737.8400000, -2084.1700000, 12.5500000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19364, 1737.9800000, -2079.4400000, 14.2900000, 0.0000000, 0.0000000, 90.0000000); //
	CreateDynamicObject(19355, 1737.8400000, -2080.9700000, 12.5500000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19355, 1735.1100000, -2080.9700000, 12.5500000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19355, 1741.3300000, -2084.1700000, 12.4200000, 0.0000000, 94.1000000, 0.0000000); //
	CreateDynamicObject(19355, 1741.3300000, -2080.9700000, 12.4200000, 0.0000000, 94.1000000, 0.0000000); //
	CreateDynamicObject(17969, 1740.5500000, -2093.1300000, 14.0300000, -6.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(19364, 1735.1100000, -2080.9700000, 16.0300000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19364, 1737.8400000, -2080.9700000, 16.0300000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19364, 1735.1100000, -2084.1700000, 16.0300000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(19364, 1737.8400000, -2084.1700000, 16.0300000, 0.0000000, 90.0000000, 0.0000000); //
	CreateDynamicObject(17951, 1739.3100000, -2082.6200000, 15.9000000, -0.4000000, 90.0000000, 180.0000000); //
	CreateDynamicObject(18661, 1733.4300000, -2081.0900000, 14.2200000, -6.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(355, 1736.5000000, -2079.6900000, 12.9300000, -14.0000000, 270.0000000, 0.0000000); //
	CreateDynamicObject(2358, 1733.9400000, -2079.8500000, 12.7700000, 0.0000000, 0.0000000, 4.0000000); //
	CreateDynamicObject(2359, 1734.1700000, -2080.3800000, 12.8500000, 0.0000000, 0.0000000, -171.0000000); //
	CreateDynamicObject(1492, 1736.7600000, -2085.7600000, 12.6300000, 0.0000000, 0.0000000, 179.0000000); //
	CreateDynamicObject(1463, 1734.2000000, -2081.8000000, 12.9500000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(1220, 1734.1000000, -2085.1600000, 12.9700000, 0.0000000, 0.0000000, 16.0000000); //
	CreateDynamicObject(1221, 1734.1800000, -2084.1400000, 13.0900000, 0.0000000, 0.0000000, -8.0000000); //
	CreateDynamicObject(19273, 1738.8700000, -2085.7600000, 14.3000000, 0.0000000, 0.0000000, 180.0000000); //
	CreateDynamicObject(947, 1756.0600000, -2084.7000000, 14.7400000, 0.0000000, 0.0000000, 270.0000000); //
	CreateDynamicObject(947, 1773.7700000, -2155.3300000, 14.7300000, 0.0000000, 0.0000000, 0.0000000); //
	//Pizzeria-LuisCorona
	CreateDynamicObject(1251, 2101.82129, -1782.81396, 12.47310, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 2121.93604, -1782.73169, 12.47310, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 2118.01807, -1782.68518, 12.47310, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 2113.77295, -1782.67566, 12.47310, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 2109.70410, -1782.73926, 12.47310, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 2105.72363, -1782.77698, 12.47310, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(966, 2114.54590, -1762.88818, 12.39490, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(968, 2114.52881, -1762.90430, 12.95333, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8168, 2109.75879, -1764.43359, 14.17640, 0.00000, 0.00000, 16.00000);
	CreateDynamicObject(984, 2099.68286, -1776.51563, 13.16980, 0.00000, 0.00000, -9.00000);
	CreateDynamicObject(984, 2099.21240, -1779.63733, 13.16980, 0.00000, 0.00000, -9.00000);
	CreateDynamicObject(1237, 2101.06177, -1770.26770, 12.22770, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2102.07764, -1768.81262, 12.22770, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2103.56567, -1767.77563, 12.22770, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1237, 2105.91870, -1767.13318, 12.22770, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 2111.08887, -1785.99341, 13.11670, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(984, 2123.86768, -1779.56445, 13.09176, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(984, 2123.87427, -1768.47058, 13.09176, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2099.36768, -1797.19226, 11.78310, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3578, 2098.97339, -1816.89783, 11.80310, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3578, 2099.33032, -1796.21667, 11.80310, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3578, 2098.96021, -1817.39417, 11.78310, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(737, 2095.65259, -1827.70361, 12.79600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 2095.56299, -1783.25891, 12.79600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 2106.63940, -1828.71606, 12.79600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(737, 2098.90747, -1773.18860, 12.79600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 2092.84229, -1810.60193, 14.50520, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 2098.82593, -1810.57056, 14.50520, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 2095.85718, -1810.55408, 14.50520, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 2092.83252, -1803.15271, 14.50520, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 2095.47485, -1803.01392, 14.50520, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 2098.89624, -1803.14209, 14.50520, 0.00000, 0.00000, 0.00000);
	//AmbientedeRap-LuisCorona
	CreateDynamicObject(3594, 2450.88037, -1901.59302, 13.16410, 0.00000, -50.00000, -84.00000);
	CreateDynamicObject(2855, 2454.90112, -1893.26270, 12.45430, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2855, 2449.50806, -1896.63135, 12.45430, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1484, 2453.33789, -1892.60596, 12.63690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1484, 2455.77319, -1892.78613, 12.67690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1484, 2459.51221, -1894.85889, 12.67690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1484, 2459.19653, -1897.20447, 12.67690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1484, 2455.71411, -1899.02734, 12.67690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1484, 2450.95605, -1897.17603, 12.67690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1484, 2448.55957, -1895.40015, 12.67690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2855, 2447.57349, -1894.28015, 12.45430, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2855, 2449.56885, -1896.64697, 12.57430, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2859, 2446.79297, -1899.49927, 12.53470, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 2453.52856, -1893.14087, 12.53640, -0.02000, 0.00000, 0.00000);
	CreateDynamicObject(2852, 2451.46460, -1896.28784, 12.53640, -0.02000, 0.00000, 0.00000);
	CreateDynamicObject(1484, 2454.35205, -1893.80078, 12.51690, 86.00000, 2.00000, 95.00000);
	CreateDynamicObject(1484, 2453.26270, -1892.68762, 12.51690, 8.00000, -68.00000, 11.00000);
	CreateDynamicObject(1415, 2458.92383, -1901.18250, 12.62110, 0.00000, 0.00000, -174.00000);
	CreateDynamicObject(1415, 2456.26563, -1901.37695, 12.62110, 0.00000, 0.00000, -174.00000);
	CreateDynamicObject(2843, 2446.81372, -1900.20972, 12.51570, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2844, 2446.51563, -1899.86279, 12.55080, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2844, 2454.70044, -1895.97363, 12.55080, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2843, 2454.83203, -1896.47498, 12.51570, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2826, 2450.00977, -1895.02173, 12.54600, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1490, 2454.92456, -1890.12976, 12.57150, 0.00000, -90.00000, 0.00000);
	CreateDynamicObject(1440, 2459.66602, -1896.01721, 12.95640, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1421, 2459.97314, -1893.60095, 13.21440, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1531, 2438.13232, -1889.80115, 14.10135, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1484, 2459.06885, -1895.13684, 12.61690, -56.00000, -150.00000, -40.00000);
	CreateDynamicObject(1484, 2459.13892, -1895.00012, 12.53690, 0.00000, -54.00000, 0.00000);
	CreateDynamicObject(1447, 2474.25757, -1879.50720, 13.82031, 356.85840, 0.00000, -0.01745);
	CreateDynamicObject(1447, 2468.92065, -1879.45251, 13.82031, 356.85840, 0.00000, -0.01745);
	CreateDynamicObject(1457, 2441.42944, -1898.89697, 14.07600, 0.00000, 0.00000, 92.00000);
	CreateDynamicObject(1421, 2440.57080, -1899.41516, 13.27350, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1279, 2440.28271, -1897.68872, 12.52470, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1279, 2440.33374, -1898.22510, 12.52470, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1279, 2440.32764, -1897.68115, 12.82470, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1279, 2440.33374, -1898.22510, 12.52470, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1217, 2447.42896, -1893.52771, 12.91410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1217, 2447.42896, -1893.52771, 13.97410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1217, 2447.42896, -1893.52771, 12.91410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1217, 2447.10303, -1894.13257, 12.91410, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1485, 2464.67969, -1891.78137, 12.54250, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1485, 2448.69629, -1895.37207, 12.54250, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1485, 2452.85181, -1894.08179, 12.54250, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1485, 2450.45337, -1896.21960, 12.54250, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1485, 2451.35840, -1892.17236, 12.54250, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 2456.35864, -1896.52551, 12.79210, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 2455.71167, -1896.66443, 12.79210, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 2456.23853, -1897.28589, 12.79210, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2821, 2459.99561, -1895.55237, 12.98510, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2821, 2450.30640, -1894.21521, 12.54510, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2814, 2450.09204, -1899.39172, 12.53630, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2814, 2449.72461, -1899.38745, 12.59630, 0.00000, -16.00000, 0.00000);
	CreateDynamicObject(2860, 2452.82104, -1890.81836, 12.55710, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2872, 2444.15088, -1901.72900, 12.44050, -8.00000, -8.00000, 190.00000);
	CreateDynamicObject(2891, 2449.82959, -1893.59705, 13.25150, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2891, 2450.15527, -1893.15320, 12.49150, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1442, 2459.73242, -1892.51746, 13.13700, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1503, 2461.46021, -1885.97205, 12.81980, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1368, 2445.26831, -1895.79749, 13.23260, 0.00000, 0.00000, 40.00000);
	CreateDynamicObject(1369, 2460.78735, -1896.59863, 13.04230, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1371, 2453.56470, -1900.66321, 13.04400, -6.00000, 28.00000, -80.00000);
	///////HQ BARRIO POBRE AL LADO DE UNITY MAURO////////////////////////
	CreateDynamicObject(3241, 1859.8994140625, -1874.69921875, 12.989999771118, 0, 0, 90);
	CreateDynamicObject(3242, 1855.2998046875, -1867.2998046875, 14.5, 0, 0, 90);
	CreateDynamicObject(3250, 1867.1999511719, -1840.5999755859, 12.5, 0, 0, 88.75);
	CreateDynamicObject(3253, 1891.0999755859, -1844.4000244141, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(3283, 1890, -1875.19921875, 12.5, 0, 0, 179.99450683594);
	CreateDynamicObject(3355, 1865.8994140625, -1850.8994140625, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(3362, 1894.3000488281, -1844.1999511719, 12, 0, 0, 347.75);
	CreateDynamicObject(3555, 1872.7998046875, -1876.2998046875, 14.800000190735, 0, 0, 179.99450683594);
	CreateDynamicObject(3556, 1882.69921875, -1876.2998046875, 14.60000038147, 0, 0, 179.99450683594);
	CreateDynamicObject(11501, 1882.1999511719, -1858.5999755859, 12.10000038147, 0, 0, 0);
	CreateDynamicObject(11503, 1883.0999755859, -1849.0999755859, 12.60000038147, 0, 0, 90);
	CreateDynamicObject(3698, 1903.7998046875, -1872.8994140625, 15.300000190735, 0, 0, 270);
	CreateDynamicObject(3698, 1903.7998046875, -1859.099609375, 15.300000190735, 0, 0, 270);
	CreateDynamicObject(3362, 1869.3000488281, -1866.8000488281, 12.199999809265, 0, 0, 0);
	CreateDynamicObject(3253, 1877.599609375, -1868.7998046875, 12.60000038147, 0, 0, 88.994750976563);
	CreateDynamicObject(9339, 1860.5, -1830.5, 13.300000190735, 0, 0, 253.35998535156);
	CreateDynamicObject(7191, 1700.5, -1865.5, 12, 0, 0, 0.25);
	CreateDynamicObject(16405, 1865.0999755859, -1866.1999511719, 14.5, 0, 0, 270);
	CreateDynamicObject(1483, 1891.9000244141, -1862.5999755859, 14.300000190735, 0, 0, 0);
	CreateDynamicObject(1458, 1877.5, -1836.8000488281, 12.800000190735, 0, 0, 68);
	CreateDynamicObject(1457, 1874.3000488281, -1845.0999755859, 14.199999809265, 0, 0, 178);
	CreateDynamicObject(1452, 1882.5, -1838.9000244141, 13.60000038147, 0, 0, 182);
	CreateDynamicObject(17036, 1930.3000488281, -1851.6999511719, 12.5, 0, 0, 256.25);
	CreateDynamicObject(12991, 1885.19921875, -1867.8994140625, 12.60000038147, 0, 0, 268.24768066406);
	CreateDynamicObject(9323, 1889.9000244141, -1858.0999755859, 14, 0, 0, 0);
	CreateDynamicObject(3242, 1883.4000244141, -1842.3000488281, 14.300000190735, 0, 0, 358);
	CreateDynamicObject(9339, 1885.5, -1837.8857421875, 13.300000190735, 0, 0, 253.740234375);
	CreateDynamicObject(9339, 1910.6999511719, -1844.5, 13.300000190735, 0, 0, 256.74572753906);
	CreateDynamicObject(9339, 1936.0999755859, -1850.5, 13.300000190735, 0, 0, 256.74572753906);
	CreateDynamicObject(9339, 1843.8000488281, -1825.5999755859, 13.300000190735, 0, 0, 253.85571289063);
	CreateDynamicObject(12991, 1895.5999755859, -1851.9000244141, 12.60000038147, 0, 0, 93.747680664063);
	CreateDynamicObject(3698, 1918.5, -1861, 15.300000190735, 0, 0, 359.75);
	CreateDynamicObject(3698, 1915.69921875, -1867.2998046875, 15.300000190735, 0, 0, 89.994506835938);
	CreateDynamicObject(3698, 1932.5999755859, -1862.9000244141, 15.300000190735, 0, 0, 359.74731445313);
	CreateDynamicObject(3698, 1914.0999755859, -1876.9000244141, 15.300000190735, 0, 0, 359.74731445313);
	CreateDynamicObject(3698, 1927.9000244141, -1877.0999755859, 15.300000190735, 0, 0, 359.74731445313);
	CreateDynamicObject(3698, 1941.6999511719, -1877.1999511719, 15.300000190735, 0, 0, 359.74731445313);
	CreateDynamicObject(3698, 1947.8000488281, -1873, 15.300000190735, 0, 0, 269.74731445313);
	CreateDynamicObject(3698, 1946.4000244141, -1867.9000244141, 15.300000190735, 0, 0, 269.74182128906);
	CreateDynamicObject(3698, 1939.9000244141, -1865.0999755859, 15.300000190735, 0, 0, 359.74731445313);
	CreateDynamicObject(3173, 1909.099609375, -1846.099609375, 12.5, 0, 0, 257.99743652344);
	CreateDynamicObject(3628, 1937.9000244141, -1871.5999755859, 15.5, 0, 0, 90.5);
	CreateDynamicObject(3628, 1924, -1871.6999511719, 15.5, 0, 0, 270);
	CreateDynamicObject(3253, 1895.3000488281, -1843.1999511719, 12.60000038147, 0, 0, 76.994750976563);
	CreateDynamicObject(3241, 1920.5, -1849.8000488281, 12.989999771118, 0, 0, 76.5);
	CreateDynamicObject(1483, 1938.4000244141, -1852.6999511719, 14.300000190735, 0, 0, 258);
	CreateDynamicObject(1483, 1944.9000244141, -1854.0999755859, 14.300000190735, 0, 0, 257.24743652344);
	CreateDynamicObject(9339, 1939, -1851, 13.300000190735, 0, 4, 257.24499511719);
	CreateDynamicObject(1211, 1956.0999755859, -1861.1999511719, 13, 0, 0, 0);
	CreateDynamicObject(1211, 1955.9000244141, -1879.9000244141, 13, 0, 0, 0);
	CreateDynamicObject(1478, 1871.099609375, -1860, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1478, 1887.5999755859, -1848, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1478, 1880.9000244141, -1881.0999755859, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(853, 1900.69921875, -1880.599609375, 12.85000038147, 0, 0, 0);
	CreateDynamicObject(852, 1889, -1880.6999511719, 12.409999847412, 0, 0, 0);
	CreateDynamicObject(851, 1863.099609375, -1835, 12.819999694824, 0, 0, 0);
	CreateDynamicObject(849, 1865.19921875, -1835.5, 12.829999923706, 0, 0, 0);
	CreateDynamicObject(1440, 1895, -1855.0999755859, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1440, 1905.5999755859, -1880.8000488281, 13, 0, 0, 0);
	CreateDynamicObject(1440, 1903.4000244141, -1880.6999511719, 13, 0, 0, 0);
	CreateDynamicObject(1440, 1903.3994140625, -1881.599609375, 13, 0, 0, 0);
	CreateDynamicObject(1440, 1908.7998046875, -1880.599609375, 13, 0, 0, 0);
	CreateDynamicObject(1441, 1893, -1880.1999511719, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1440, 1890.3000488281, -1880.5999755859, 13, 0, 0, 0);
	CreateDynamicObject(1438, 1899.5999755859, -1872.0999755859, 12.5, 0, 0, 276);
	CreateDynamicObject(1358, 1945, -1859.5999755859, 13.800000190735, 0, 0, 0);
	CreateDynamicObject(1358, 1902.7998046875, -1887.7998046875, 13.699999809265, 0, 0, 0);
	CreateDynamicObject(1358, 1853.5, -1833.3000488281, 13.800000190735, 0, 0, 0);
	CreateDynamicObject(18253, 1853.5, -1852.3994140625, 13.260000228882, 0, 0, 180.24719238281);
	CreateDynamicObject(761, 1888.0999755859, -1880.5999755859, 12.5, 0, 0, 0);
	CreateDynamicObject(761, 1890.0999755859, -1859.5999755859, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(866, 1868.19921875, -1835.69921875, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(866, 1880.5, -1838.6999511719, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(866, 1893.5, -1868.599609375, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(866, 1891.4000244141, -1867.5999755859, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(866, 1889.4000244141, -1867.6999511719, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(841, 1867.5, -1835.4000244141, 12.699999809265, 0, 0, 0);
	CreateDynamicObject(1712, 1872.8000488281, -1859.8000488281, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(1712, 1875.5999755859, -1861.5, 12.60000038147, 0, 0, 272);
	CreateDynamicObject(866, 1876.3000488281, -1843, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(866, 1885.6999511719, -1881.5, 12.5, 0, 0, 0);
	CreateDynamicObject(866, 1875.9000244141, -1881.3000488281, 12.5, 0, 0, 0);
	CreateDynamicObject(866, 1879.1999511719, -1881.5, 12.5, 0, 0, 0);
	CreateDynamicObject(866, 1870.1999511719, -1880.8000488281, 12.5, 0, 0, 0);
	CreateDynamicObject(866, 1866.1999511719, -1881.0999755859, 12.5, 0, 0, 0);
	CreateDynamicObject(866, 1902, -1881.3000488281, 12.5, 0, 0, 0);
	CreateDynamicObject(2636, 1866.6999511719, -1861.1999511719, 13.60000038147, 0, 0, 0);
	CreateDynamicObject(2636, 1865.9000244141, -1862, 13.60000038147, 0, 0, 270);
	CreateDynamicObject(1280, 1894.6999511719, -1872.8000488281, 12.89999961853, 0, 0, 181.25);
	CreateDynamicObject(1280, 1894.8000488281, -1876.8000488281, 12.89999961853, 0, 0, 181.24694824219);
	CreateDynamicObject(2747, 1865.5999755859, -1861.0999755859, 13.39999961853, 0, 0, 0);
	CreateDynamicObject(2636, 1865, -1862, 13.60000038147, 0, 0, 270);
	CreateDynamicObject(2636, 1864.5, -1861.0999755859, 13.60000038147, 0, 0, 180);
	CreateDynamicObject(2114, 1874.5, -1865.1999511719, 12.699999809265, 0, 0, 0);
	CreateDynamicObject(2109, 1873.5999755859, -1861.9000244141, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(1421, 1876.5999755859, -1866.5, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1759, 1883.5, -1862.5, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(1759, 1898.8000488281, -1843.8000488281, 12.60000038147, 0, 0, 80);
	CreateDynamicObject(2915, 1887.3000488281, -1866.5, 12.699999809265, 0, 0, 0);
	CreateDynamicObject(2913, 1883, -1867.4000244141, 13.60000038147, 0, 90, 266);
	CreateDynamicObject(1486, 1873.5999755859, -1861.5999755859, 13.35000038147, 0, 2, 8);
	CreateDynamicObject(1486, 1873.5, -1862.0999755859, 13.39999961853, 0, 1.99951171875, 7.998046875);
	CreateDynamicObject(1486, 1873.5, -1861.6999511719, 13.35000038147, 0, 1.99951171875, 7.998046875);
	CreateDynamicObject(1481, 1873.5999755859, -1864.4000244141, 13.300000190735, 0, 0, 184);
	CreateDynamicObject(1778, 1871.8000488281, -1859.3000488281, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(1778, 1900.3000488281, -1876.3000488281, 12.5, 0, 0, 0);
	CreateDynamicObject(2103, 1865.4000244141, -1860.8000488281, 13.800000190735, 0, 0, 176);
	CreateDynamicObject(2628, 1885.6999511719, -1869.3000488281, 12.60000038147, 0, 0, 180);
	CreateDynamicObject(2629, 1883.5, -1867.9000244141, 12.60000038147, 0, 0, 88);
	CreateDynamicObject(2816, 1873.9000244141, -1862, 13.220000267029, 0, 0, 0);
	CreateDynamicObject(2820, 1865.5, -1861.3000488281, 13.800000190735, 0, 0, 0);
	CreateDynamicObject(1711, 1871.5999755859, -1862.6999511719, 12.60000038147, 0, 0, 122);
	CreateDynamicObject(2096, 1858.5, -1863.9000244141, 12.699999809265, 0, 0, 90);
	CreateDynamicObject(2096, 1869.5999755859, -1860.4000244141, 13, 0, 0, 70);
	CreateDynamicObject(2096, 1886.8000488281, -1848.9000244141, 12.60000038147, 0, 0, 69.999389648438);
	CreateDynamicObject(2096, 1891.3000488281, -1847.9000244141, 12.60000038147, 0, 0, 339.99938964844);
	CreateDynamicObject(7187, 1871.1999511719, -1882.5999755859, 12.89999961853, 0, 0, 270);
	CreateDynamicObject(1226, 1890.099609375, -1883.599609375, 16.39999961853, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1878.8000488281, -1883.5, 16.299999237061, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1864.9000244141, -1883.5999755859, 16.299999237061, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1848.8000488281, -1883.5, 16.299999237061, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1907.1999511719, -1882.5, 16.39999961853, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1950.4000244141, -1882.0999755859, 16.39999961853, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1939.4000244141, -1882.8000488281, 16.39999961853, 0, 0, 89.994995117188);
	CreateDynamicObject(1226, 1921.1999511719, -1882.8000488281, 16.39999961853, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1940.099609375, -1858.5, 16.39999961853, 0, 0, 267.99499511719);
	CreateDynamicObject(1226, 1926, -1857.0999755859, 16.39999961853, 0, 0, 267.99499511719);
	CreateDynamicObject(1226, 1911.5, -1855.3000488281, 16.39999961853, 0, 0, 267.99499511719);
	CreateDynamicObject(1226, 1908.3000488281, -1870.8000488281, 16.39999961853, 0, 0, 267.99499511719);
	CreateDynamicObject(1226, 1902.1999511719, -1850.1999511719, 16.39999961853, 0, 0, 267.99499511719);
	CreateDynamicObject(1292, 1884.5999755859, -1880.5999755859, 13, 0, 0, 0);
	CreateDynamicObject(1292, 1922.5999755859, -1880.6999511719, 13, 0, 0, 0);
	CreateDynamicObject(1292, 1940.8000488281, -1881, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1292, 1932, -1859.1999511719, 13.10000038147, 0, 0, 174);
	CreateDynamicObject(1292, 1951.5999755859, -1872, 13.10000038147, 0, 0, 89.995971679688);
	CreateDynamicObject(1319, 1894, -1881.1999511719, 13, 0, 0, 0);
	CreateDynamicObject(1319, 1848.5, -1880.2998046875, 13, 0, 0, 0);
	CreateDynamicObject(1319, 1848.5, -1878, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(933, 1927.3000488281, -1854.3000488281, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(1773, 1929.1999511719, -1854.3000488281, 13.39999961853, 0, 0, 0);
	CreateDynamicObject(1733, 1878.6999511719, -1866.3000488281, 13.199999809265, 0, 0, 184);
	CreateDynamicObject(1442, 1877.6999511719, -1861.4000244141, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1442, 1893.0999755859, -1869.8000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1442, 1900.0999755859, -1867.0999755859, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1442, 1900.0999755859, -1858.0999755859, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1442, 1871.5, -1880.6999511719, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1441, 1927.0999755859, -1880.8000488281, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1441, 1936.3000488281, -1880.6999511719, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1440, 1952, -1867.4000244141, 13.10000038147, 0, 0, 90);
	CreateDynamicObject(1440, 1930.8000488281, -1854.9000244141, 13.10000038147, 0, 0, 350);
	CreateDynamicObject(1440, 1932.0999755859, -1855.1999511719, 13.10000038147, 0, 0, 349.99694824219);
	CreateDynamicObject(1439, 1897.9000244141, -1854.6999511719, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(1439, 1913.4000244141, -1849.1999511719, 12.60000038147, 0, 0, 346);
	CreateDynamicObject(1431, 1911.1999511719, -1862, 13.10000038147, 0, 0, 270);
	CreateDynamicObject(1431, 1911.0999755859, -1859.8000488281, 13.10000038147, 0, 0, 270);
	CreateDynamicObject(1431, 1911.1999511719, -1863.8000488281, 13.10000038147, 0, 0, 270);
	CreateDynamicObject(1431, 1911.1999511719, -1862.5, 13.60000038147, 0, 0, 270);
	CreateDynamicObject(1370, 1900.4000244141, -1862.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1370, 1917.3000488281, -1880.5, 13, 0, 0, 0);
	CreateDynamicObject(1369, 1913.5999755859, -1881, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1347, 1931.5, -1880.6999511719, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1347, 1900.0999755859, -1879.0999755859, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1347, 1858.5, -1866.0999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(12957, 1839.8000488281, -1828.3000488281, 13.5, 0, 0, 0);
	CreateDynamicObject(1265, 1860.9000244141, -1847.8000488281, 13, 0, 0, 0);
	CreateDynamicObject(1265, 1860.9000244141, -1846.6999511719, 13, 0, 0, 0);
	CreateDynamicObject(1265, 1900.1999511719, -1865.1999511719, 13, 0, 0, 0);
	CreateDynamicObject(1265, 1901.0999755859, -1842.8000488281, 13, 0, 0, 0);
	CreateDynamicObject(1328, 1871.5, -1838.6999511719, 13.5, 0, 0, 0);
	CreateDynamicObject(2673, 1875.4000244141, -1864.8000488281, 12.699999809265, 0, 0, 0);
	CreateDynamicObject(2673, 1875, -1860.6999511719, 12.699999809265, 0, 0, 0);
	CreateDynamicObject(2673, 1893.6999511719, -1882.3000488281, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(2673, 1892, -1881.8000488281, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(2676, 1912.8000488281, -1881.8000488281, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(2673, 1919.4000244141, -1881.1999511719, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(2673, 1941.5999755859, -1881.3000488281, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(2673, 1937.1999511719, -1881.6999511719, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(2673, 1944.5999755859, -1881.6999511719, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(2673, 1947.5999755859, -1881.8000488281, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(2673, 1942.6999511719, -1882.6999511719, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(2673, 1939.8000488281, -1882.0999755859, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(2674, 1942.5999755859, -1882.0999755859, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(2674, 1933.0999755859, -1881.6999511719, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(2675, 1924.3000488281, -1882.1999511719, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(3461, 1875.5, -1860.0999755859, 11.300000190735, 0, 0, 0);
	CreateDynamicObject(1347, 1875.5, -1860.0999755859, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(866, 1899.9000244141, -1850, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(18253, 1853.4000244141, -1842, 13.310000419617, 0, 0, 180.24719238281);
	CreateDynamicObject(1440, 1860.6999511719, -1841.5999755859, 13.10000038147, 0, 0, 272);
	CreateDynamicObject(1440, 1860.5999755859, -1839.1999511719, 13.10000038147, 0, 0, 271.99951171875);
	CreateDynamicObject(1440, 1860.5, -1844, 13.10000038147, 0, 0, 271.99951171875);
	CreateDynamicObject(1440, 1860.6999511719, -1859.5999755859, 13.10000038147, 0, 0, 271.99951171875);
	CreateDynamicObject(1439, 1861, -1856.5, 12.60000038147, 0, 0, 272);
	CreateDynamicObject(849, 1903.5999755859, -1851.3000488281, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(851, 1902.4000244141, -1844, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(851, 1926.5, -1858.4000244141, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(851, 1860.3000488281, -1851, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(851, 1869.4000244141, -1881.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(851, 1928.5999755859, -1887.5, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(851, 1925.5, -1888.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(851, 1927, -1888.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(851, 1921.0999755859, -1888.1999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(1441, 1926.1999511719, -1889, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1441, 1928.5, -1889.1999511719, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1441, 1929.8000488281, -1888.5, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(1440, 1923.3000488281, -1888.9000244141, 13, 0, 0, 0);
	CreateDynamicObject(1440, 1925.5999755859, -1888.3000488281, 13, 0, 0, 0);
	CreateDynamicObject(849, 1926.0999755859, -1887, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(849, 1923.6999511719, -1888.0999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(1358, 1918, -1888, 13.699999809265, 0, 0, 0);
	CreateDynamicObject(851, 1917.3000488281, -1886.3000488281, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(1440, 1919.9000244141, -1886.8000488281, 13, 0, 0, 0);
	CreateDynamicObject(849, 1915.8000488281, -1888.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(849, 1914.6999511719, -1888.5999755859, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(849, 1916.0999755859, -1887.6999511719, 12.800000190735, 0, 0, 0);
	CreateDynamicObject(853, 1923.5999755859, -1886.8000488281, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(853, 1920.4000244141, -1888.1999511719, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(853, 1892, -1857.5999755859, 13, 0, 0, 54);
	CreateDynamicObject(866, 1904.5999755859, -1887.0999755859, 12.5, 0, 0, 0);
	CreateDynamicObject(866, 1900.8000488281, -1886.6999511719, 12.5, 0, 0, 0);
	CreateDynamicObject(866, 1915.4000244141, -1887.1999511719, 12.5, 0, 0, 0);
	CreateDynamicObject(866, 1922, -1886.5999755859, 12.5, 0, 0, 0);
	CreateDynamicObject(866, 1928.4000244141, -1886.5999755859, 12.5, 0, 0, 0);
	CreateDynamicObject(1773, 1934, -1880.8000488281, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(2674, 1931.5, -1881.5, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(1733, 1912.3000488281, -1880.6999511719, 13.10000038147, 0, 0, 355.9990234375);
	CreateDynamicObject(3567, 1052.8994140625, -1851.599609375, 11.68780040741, 0, 0, 0.999755859375);
	CreateDynamicObject(997, 1832.4000244141, -1747.1999511719, 12.5, 0, 0, 0);
	CreateDynamicObject(997, 1829.1999511719, -1746.4000244141, 12.5, 0, 0, 346.25);
	CreateDynamicObject(997, 1827.0999755859, -1743.9000244141, 12.5, 0, 0, 310.2451171875);
	CreateDynamicObject(997, 1826.8000488281, -1740.5999755859, 12.5, 0, 0, 275.99291992188);
	CreateDynamicObject(996, 1836.3000488281, -1747.1999511719, 13.14999961853, 0, 0, 0);
	CreateDynamicObject(996, 1826.8000488281, -1733, 13.14999961853, 0, 0, 270);
	CreateDynamicObject(997, 1811.6999511719, -1737.5, 12.5, 0, 0, 179.73754882813);
	CreateDynamicObject(997, 1814.6999511719, -1738.5999755859, 12.5, 0, 0, 159.986328125);
	CreateDynamicObject(997, 1816.4000244141, -1741.4000244141, 12.5, 0, 0, 120.23294067383);
	CreateDynamicObject(997, 1816.5, -1744.5999755859, 12.39999961853, 0, 0, 92.228881835938);
	CreateDynamicObject(996, 1816.5, -1745.1999511719, 13.14999961853, 0, 0, 269.75);
	CreateDynamicObject(996, 1807.8000488281, -1737.5, 13.14999961853, 0, 0, 179.49731445313);
	CreateDynamicObject(997, 1071.4000244141, -1847.1999511719, 12.5, 0, 0, 0);
	CreateDynamicObject(997, 1065.6999511719, -1840.4000244141, 12.550000190735, 0, 0, 286);
	CreateDynamicObject(997, 1064.5, -1837.4000244141, 12.560000419617, 0, 0, 291.49609375);
	CreateDynamicObject(996, 1061.5999755859, -1830.4000244141, 13.199999809265, 0, 0, 292);
	CreateDynamicObject(996, 1058.5, -1822.8000488281, 13.199999809265, 0, 0, 291.99462890625);
	CreateDynamicObject(996, 1075.3000488281, -1847.1999511719, 13.14999961853, 0, 0, 359.99462890625);
	CreateDynamicObject(996, 1083.5, -1847.1999511719, 13.14999961853, 0, 0, 359.99450683594);
	CreateDynamicObject(996, 1091.6999511719, -1847.1999511719, 13.14999961853, 0, 0, 359.99450683594);
	CreateDynamicObject(996, 1052.3994140625, -1813.099609375, 13.25, 0, 0, 303.49182128906);
	CreateDynamicObject(997, 1056.5999755859, -1819.4000244141, 12.550000190735, 0, 0, 300.24609375);
	CreateDynamicObject(3567, 1054.5, -1851.599609375, 11.68780040741, 0, 0, 0.9942626953125);
	CreateDynamicObject(3567, 1057.5, -1851.5, 11.260000228882, 0, 16.74462890625, 0.9970703125);
	CreateDynamicObject(3567, 1049.9000244141, -1851.5999755859, 11.300000190735, 0, 13.99462890625, 180.49438476563);
	CreateDynamicObject(997, 1051.0999755859, -1842.9000244141, 12.60000038147, 0, 0, 338.74609375);
	CreateDynamicObject(997, 1053.4000244141, -1843.8000488281, 12.60000038147, 0, 0, 338.74145507813);
	CreateDynamicObject(997, 1055.5999755859, -1841.6999511719, 12.60000038147, 0, 0, 284.74145507813);
	CreateDynamicObject(997, 1054.4000244141, -1838.6999511719, 12.60000038147, 0, 0, 291.48815917969);
	CreateDynamicObject(997, 1053.1999511719, -1835.6999511719, 12.60000038147, 0, 0, 291.48376464844);
	CreateDynamicObject(997, 1050.3000488281, -1839.6999511719, 12.60000038147, 0, 0, 286.23376464844);
	CreateDynamicObject(997, 1049.0999755859, -1836.6999511719, 12.60000038147, 0, 0, 291.48376464844);
	CreateDynamicObject(7595, 1013.8994140625, -1804.099609375, 14.5, 0, 0, 248.99963378906);
	CreateDynamicObject(996, 1046.4000244141, -1829.5, 13.300000190735, 0, 0, 290.24182128906);
	CreateDynamicObject(996, 1050.3000488281, -1828.6999511719, 13.319999694824, 0, 0, 292.48681640625);
	CreateDynamicObject(996, 1040.3000488281, -1819.6999511719, 13.300000190735, 0, 0, 303.98681640625);
	CreateDynamicObject(997, 1044.5999755859, -1826, 12.60000038147, 0, 0, 298.99609375);
	CreateDynamicObject(996, 1046.0999755859, -1821.5999755859, 13.310000419617, 0, 0, 301.98352050781);
	CreateDynamicObject(996, 1040.6999511719, -1815.4000244141, 13.310000419617, 0, 0, 311.98120117188);
	CreateDynamicObject(997, 1038.6999511719, -1816, 12.699999809265, 0, 0, 291.24536132813);
	CreateDynamicObject(8623, 1051.5, -1837.4000244141, 13.300000190735, 0, 0, 290);
	CreateDynamicObject(8990, 1051.8000488281, -1838.9000244141, 13.300000190735, 0, 0, 298);
	CreateDynamicObject(8990, 1048.4000244141, -1830.4000244141, 13.39999961853, 0, 0, 298);
	CreateDynamicObject(8990, 1043.3000488281, -1821.4000244141, 13.5, 0, 0, 302);
	CreateDynamicObject(8990, 1042.1999511719, -1821.1999511719, 13.5, 0, 0, 304);
	CreateDynamicObject(8990, 1046.8000488281, -1829.6999511719, 13.199999809265, 0, 0, 294);
	CreateDynamicObject(8990, 1050.5999755859, -1832.5, 13.300000190735, 0, 0, 292);
	CreateDynamicObject(8990, 1045.9000244141, -1823.0999755859, 13.300000190735, 0, 0, 305.75);
	CreateDynamicObject(8990, 1055.8000488281, -1865, 13.300000190735, 0, 0, 92);
	CreateDynamicObject(8990, 1051.6999511719, -1837, 13.300000190735, 0, 0, 111.99462890625);
	CreateDynamicObject(8990, 1053.0999755859, -1837.5, 13.300000190735, 0, 0, 114.24459838867);
	CreateDynamicObject(8990, 1050.0999755859, -1836.8000488281, 13.300000190735, 0, 0, 111.99462890625);
	CreateDynamicObject(8990, 1049, -1827.5999755859, 13.300000190735, 0, 0, 117.99459838867);
	CreateDynamicObject(8990, 1043.4000244141, -1819.5999755859, 13.300000190735, 0, 0, 129.99462890625);
	CreateDynamicObject(8990, 1046.1999511719, -1825.8000488281, 13.300000190735, 0, 0, 117.99462890625);
	CreateDynamicObject(8990, 1045.5, -1826, 13.300000190735, 0, 0, 117.99462890625);
	CreateDynamicObject(8990, 1047.1999511719, -1825.9000244141, 13.300000190735, 0, 0, 117.99459838867);
	CreateDynamicObject(8990, 1050.6999511719, -1836.4000244141, 13.300000190735, 0, 0, 111.99462890625);
	CreateDynamicObject(8990, 1043.8000488281, -1821.8000488281, 13.199999809265, 0, 0, 125.99462890625);
	CreateDynamicObject(8990, 1042.9000244141, -1822.3000488281, 13.199999809265, 0, 0, 121.99462890625);
	CreateDynamicObject(8990, 1055.6999511719, -1874.5999755859, 13.199999809265, 0, 0, 93.99462890625);
	CreateDynamicObject(997, 1056.5999755859, -1858.4000244141, 12.39999961853, 0, 0, 199.73229980469);
	CreateDynamicObject(997, 1054.5999755859, -1859.0999755859, 12.39999961853, 0, 0, 199.4814453125);
	CreateDynamicObject(997, 1051.6999511719, -1863.5999755859, 12.39999961853, 0, 0, 91.478759765625);
	CreateDynamicObject(997, 1051.8000488281, -1866.8000488281, 12.39999961853, 0, 0, 91.477661132813);
	CreateDynamicObject(997, 1056.1999511719, -1861.6999511719, 12.39999961853, 0, 0, 84.227661132813);
	CreateDynamicObject(997, 1056.3000488281, -1864.9000244141, 12.39999961853, 0, 0, 91.476684570313);
	CreateDynamicObject(996, 1056.3000488281, -1865.5999755859, 13.10000038147, 0, 0, 270.99462890625);
	CreateDynamicObject(996, 1051.8000488281, -1867.5, 13.10000038147, 0, 0, 270.99426269531);
	CreateDynamicObject(996, 1056.4000244141, -1873.8000488281, 13.10000038147, 0, 0, 270.99426269531);
	CreateDynamicObject(996, 1052, -1875.8000488281, 13.10000038147, 0, 0, 272.24426269531);
	CreateDynamicObject(997, 1056.5, -1881.3000488281, 12.300000190735, 0, 0, 232.25);
	CreateDynamicObject(997, 1054.5, -1883.9000244141, 12.300000190735, 0, 0, 233.74926757813);
	CreateDynamicObject(997, 1052.3000488281, -1883.4000244141, 12.300000190735, 0, 0, 271.24621582031);
	CreateDynamicObject(8990, 1052.6999511719, -1866.5999755859, 12.89999961853, 0, 0, 89.993041992188);
	CreateDynamicObject(8990, 1052.6999511719, -1878.4000244141, 12.89999961853, 0, 0, 91.993041992188);
	CreateDynamicObject(8990, 1053.6999511719, -1877, 12.89999961853, 0, 0, 91.993041992188);
	CreateDynamicObject(8990, 1053.5, -1866.5, 12.89999961853, 0, 0, 89.993041992188);
	CreateDynamicObject(8990, 1054.6999511719, -1875.5999755859, 12.89999961853, 0, 0, 91.993041992188);
	CreateDynamicObject(8990, 1054.5, -1866.3000488281, 12.89999961853, 0, 0, 88.743041992188);
	CreateDynamicObject(8990, 1055.5, -1866.0999755859, 12.89999961853, 0, 0, 269.99304199219);
	CreateDynamicObject(8990, 1052.3000488281, -1867.0999755859, 13, 0, 0, 273.98901367188);
	CreateDynamicObject(8990, 1053.6999511719, -1866.8000488281, 13, 0, 0, 269.98901367188);
	CreateDynamicObject(8990, 1054.5999755859, -1866.4000244141, 13, 0, 0, 269.98901367188);
	CreateDynamicObject(8990, 1054.1999511719, -1876.1999511719, 13, 0, 0, 269.98901367188);
	CreateDynamicObject(8990, 1053.3000488281, -1866.6999511719, 13, 0, 0, 269.98901367188);
	CreateDynamicObject(8990, 1053.1999511719, -1878.5999755859, 13, 0, 0, 269.98901367188);
	CreateDynamicObject(8990, 1054.5, -1876.3000488281, 13, 0, 0, 269.98901367188);
	CreateDynamicObject(8990, 1055.5, -1875.3000488281, 13, 0, 0, 269.98901367188);
	CreateDynamicObject(4597, 1055.0999755859, -1905.5, 12.5, 0, 0, 91);
	CreateDynamicObject(4597, 1055, -1949.5999755859, 12.60000038147, 0, 0, 87.749755859375);
	CreateDynamicObject(4597, 1053.5, -1987.5, 12.60000038147, 0, 0, 86.247802734375);
	CreateDynamicObject(4597, 1049.9000244141, -2024.5999755859, 12.60000038147, 0, 0, 82.74267578125);
	CreateDynamicObject(4597, 1044.4000244141, -2060.3999023438, 12.60000038147, 0, 0, 79.738159179688);
	CreateDynamicObject(996, 1066.5999755859, -1862.8000488281, 13.199999809265, 0, 0, 270.74462890625);
	CreateDynamicObject(996, 1078.8000488281, -1857.4000244141, 13.199999809265, 0, 0, 179.74145507813);
	CreateDynamicObject(996, 1087, -1857.4000244141, 13.199999809265, 0, 0, 179.736328125);
	CreateDynamicObject(996, 1066.6999511719, -1871, 13.199999809265, 0, 0, 270.74157714844);
	CreateDynamicObject(744, 1407.6999511719, -1434.8000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(745, 1411.9000244141, -1436.1999511719, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(746, 1411.8000488281, -1432.8000488281, 12.5, 0, 0, 0);
	CreateDynamicObject(747, 1407.5999755859, -1429.6999511719, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(744, 1404.5999755859, -1405.5, 10, 0, 0, 0);
	CreateDynamicObject(744, 1408.5, -1416.5, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(744, 1407, -1424, 11, 0, 0, 0);
	CreateDynamicObject(746, 1405.8000488281, -1411.9000244141, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(746, 1406.5, -1418.9000244141, 12.60000038147, 0, 0, 0);
	CreateDynamicObject(758, 1406.5999755859, -1427.6999511719, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(758, 1408.3000488281, -1410.1999511719, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(745, 1406.5, -1408.0999755859, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(745, 1407, -1415.4000244141, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(747, 1405.4000244141, -1419.9000244141, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(758, 1411.4000244141, -1418.5999755859, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(744, 1411.0999755859, -1426.9000244141, 12, 0, 0, 0);
	CreateDynamicObject(744, 1410.9000244141, -1406, 12, 0, 0, 0);
	CreateDynamicObject(745, 1411.4000244141, -1410.3000488281, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(745, 1411, -1421.6999511719, 13.199999809265, 0, 0, 0);
	CreateDynamicObject(3578, 1401.7998046875, -1450.099609375, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1315, 1042.9000244141, -1844, 15.89999961853, 0, 0, 190);
	CreateDynamicObject(996, 1047.1999511719, -1806.6999511719, 13.300000190735, 0, 0, 309.74182128906);
	CreateDynamicObject(996, 1041.8000488281, -1800.5999755859, 13.300000190735, 0, 0, 311.73754882813);
	CreateDynamicObject(996, 1040.5999755859, -1786.5999755859, 13.300000190735, 0, 0, 257.23706054688);
	CreateDynamicObject(996, 1042.3000488281, -1778.5, 13.300000190735, 0, 0, 257.73388671875);
	CreateDynamicObject(996, 1030.6999511719, -1782.0999755859, 13.300000190735, 0, 0, 261.73376464844);
	CreateDynamicObject(996, 1031.8000488281, -1774, 13.300000190735, 0, 0, 261.73278808594);
	CreateDynamicObject(996, 1022.5, -1791.9000244141, 13.699999809265, 0, 0, 159.73278808594);
	CreateDynamicObject(996, 1014.799987793, -1789.0999755859, 13.800000190735, 0, 0, 159.73022460938);
	CreateDynamicObject(996, 1032, -1765.5999755859, 13.300000190735, 0, 0, 268.98278808594);
	CreateDynamicObject(996, 1042.5, -1770.1999511719, 13.300000190735, 0, 0, 269.48376464844);
	CreateDynamicObject(996, 1042.6999511719, -1761.8000488281, 13.300000190735, 0, 0, 269.48364257813);
	CreateDynamicObject(996, 1042.6999511719, -1753.5, 13.300000190735, 0, 0, 269.98364257813);
	CreateDynamicObject(996, 1042.8000488281, -1745.1999511719, 13.300000190735, 0, 0, 269.23352050781);
	CreateDynamicObject(996, 1042.9000244141, -1736.9000244141, 13.300000190735, 0, 0, 269.23095703125);
	CreateDynamicObject(996, 1042.9000244141, -1728.6999511719, 13.300000190735, 0, 0, 269.98095703125);
	CreateDynamicObject(994, 1042.8000488281, -1721.6999511719, 12.5, 0, 0, 269.75);
	CreateDynamicObject(1319, 1039.3000488281, -1796.5, 13.35000038147, 0, 0, 0);
	CreateDynamicObject(1319, 1040.4000244141, -1798.6999511719, 13.35000038147, 0, 0, 0);
	CreateDynamicObject(1319, 1027.9000244141, -1790.8000488281, 13.35000038147, 0, 0, 0);
	CreateDynamicObject(1319, 1025.3000488281, -1791.8000488281, 13.35000038147, 0, 0, 0);
	CreateDynamicObject(1319, 1067.6999511719, -1860.4000244141, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1319, 1069.5999755859, -1858.5, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1319, 1069.5999755859, -1846.0999755859, 13.109999656677, 0, 0, 0);
	CreateDynamicObject(1319, 1067.6999511719, -1844.4000244141, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1319, 1099.4000244141, -1845.8000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1319, 1099.5, -1843.5, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1319, 1099.5, -1841, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(7191, 1788.9000244141, -1849.6999511719, 12.5, 0, 0, 90);
	CreateDynamicObject(7191, 1770.3000488281, -1849.6999511719, 12.5, 0, 0, 90.25);
	CreateDynamicObject(2936, 1306.4000244141, -1553.8000488281, 13, 0, 0, 0);
	CreateDynamicObject(744, 1306.5, -1551.5999755859, 8, 0, 0, 0);
	CreateDynamicObject(745, 1307, -1546.0999755859, 11, 0, 0, 54);
	CreateDynamicObject(747, 1307.6999511719, -1542.0999755859, 12.5, 0, 0, 0);
	CreateDynamicObject(747, 1307.5, -1548.4000244141, 12.39999961853, 0, 0, 0);
	CreateDynamicObject(745, 1309.5, -1535.9000244141, 11, 0, 0, 55.997802734375);
	CreateDynamicObject(747, 1308.8000488281, -1537.6999511719, 12.39999961853, 0, 0, 162);
	CreateDynamicObject(748, 1309.9000244141, -1535.0999755859, 12.5, 0, 0, 0);
	CreateDynamicObject(748, 1306.9000244141, -1553, 12.5, 0, 0, 0);
	CreateDynamicObject(745, 1311, -1533.0999755859, 11, 0, 0, 249.99731445313);
	CreateDynamicObject(747, 1307.5, -1541.4000244141, 12.39999961853, 0, 0, 240);
	CreateDynamicObject(745, 1313.5, -1526.0999755859, 11.5, 0, 0, 249.99389648438);
	CreateDynamicObject(745, 1314.8000488281, -1522.1999511719, 12.5, 0, 0, 41.993896484375);
	CreateDynamicObject(745, 1318.1999511719, -1515.3000488281, 12.5, 0, 0, 41.98974609375);
	CreateDynamicObject(745, 1323.0999755859, -1509.5999755859, 11.300000190735, 0, 0, 233.98974609375);
	CreateDynamicObject(745, 1331.5, -1495.1999511719, 11.5, 0, 0, 43.98974609375);
	CreateDynamicObject(745, 1327.5, -1503.1999511719, 11, 0, 0, 231.98486328125);
	CreateDynamicObject(747, 1312, -1529.3000488281, 12.5, 0, 0, 239.99633789063);
	CreateDynamicObject(747, 1320.5999755859, -1512.5, 12.5, 0, 0, 239.99633789063);
	CreateDynamicObject(747, 1324.8000488281, -1507.5999755859, 12.5, 0, 0, 239.99633789063);
	CreateDynamicObject(747, 1325.1999511719, -1505, 12.39999961853, 0, 0, 177.99633789063);
	CreateDynamicObject(747, 1329, -1500, 12.39999961853, 0, 0, 57.994995117188);
	CreateDynamicObject(747, 1331, -1497.8000488281, 12.5, 0, 0, 285.99133300781);
	CreateDynamicObject(745, 1334.8000488281, -1488.9000244141, 11, 0, 0, 44.4892578125);
	CreateDynamicObject(745, 1338.3000488281, -1481.8000488281, 11.5, 0, 0, 47.4892578125);
	CreateDynamicObject(745, 1341.8000488281, -1473, 11, 0, 0, 59.9892578125);
	CreateDynamicObject(745, 1344.5, -1463.8000488281, 11, 0, 0, 249.9892578125);
	CreateDynamicObject(745, 1345.4000244141, -1460.9000244141, 11, 0, 0, 251.9892578125);
	CreateDynamicObject(745, 1346.8000488281, -1450.5, 11, 0, 0, 59.9892578125);
	CreateDynamicObject(747, 1332.5, -1493.4000244141, 12.39999961853, 0, 0, 177.99499511719);
	CreateDynamicObject(747, 1334.3000488281, -1492.8000488281, 12.39999961853, 0, 0, 13.994995117188);
	CreateDynamicObject(747, 1335.5999755859, -1487.4000244141, 12.39999961853, 0, 0, 177.99499511719);
	CreateDynamicObject(747, 1337.0999755859, -1485.5, 12.39999961853, 0, 0, 25.994995117188);
	CreateDynamicObject(747, 1339.9000244141, -1479, 12.39999961853, 0, 0, 155.99365234375);
	CreateDynamicObject(747, 1340.3000488281, -1480.4000244141, 12.39999961853, 0, 0, 25.99365234375);
	CreateDynamicObject(747, 1343.3000488281, -1471.3000488281, 12.39999961853, 0, 0, 25.99365234375);
	CreateDynamicObject(747, 1341.8000488281, -1474.9000244141, 12.39999961853, 0, 0, 323.99365234375);
	CreateDynamicObject(747, 1340.5, -1478.1999511719, 12.39999961853, 0, 0, 25.99365234375);
	CreateDynamicObject(747, 1342.8000488281, -1469.4000244141, 12.5, 0, 0, 181.99365234375);
	CreateDynamicObject(747, 1344.3000488281, -1467.1999511719, 12.39999961853, 0, 0, 23.988525390625);
	CreateDynamicObject(747, 1343.5999755859, -1465.8000488281, 12.39999961853, 0, 0, 199.98315429688);
	CreateDynamicObject(747, 1345.5, -1457.1999511719, 12.5, 0, 0, 199.97863769531);
	CreateDynamicObject(747, 1347.4000244141, -1453.5, 12.39999961853, 0, 0, 355.97863769531);
	CreateDynamicObject(747, 1345.6999511719, -1455.1999511719, 12.39999961853, 0, 0, 163.97863769531);
	CreateDynamicObject(745, 1347.9000244141, -1444.3000488281, 11, 0, 0, 59.9853515625);
	CreateDynamicObject(745, 1348.6999511719, -1442, 12, 0, 0, 267.9853515625);
	CreateDynamicObject(745, 1348.1999511719, -1433.5, 11, 0, 0, 87.984008789063);
	CreateDynamicObject(745, 1349.5999755859, -1419.3000488281, 11.199999809265, 0, 0, 87.978515625);
	CreateDynamicObject(745, 1349.1999511719, -1427.4000244141, 11, 0, 0, 87.978515625);
	CreateDynamicObject(747, 1348.5999755859, -1436, 12.5, 0, 0, 71.976440429688);
	CreateDynamicObject(747, 1348.5999755859, -1438.4000244141, 12.39999961853, 0, 0, 5.971435546875);
	CreateDynamicObject(747, 1348.8000488281, -1434, 12.5, 0, 0, 103.97143554688);
	CreateDynamicObject(747, 1349.1999511719, -1430.8000488281, 12.39999961853, 0, 0, 357.97143554688);
	CreateDynamicObject(747, 1350.0999755859, -1422.0999755859, 12.5, 0, 0, 277.96752929688);
	CreateDynamicObject(745, 1349.8000488281, -1424.5, 11, 0, 0, 265.978515625);
	CreateDynamicObject(747, 1348.5999755859, -1429.1999511719, 12.39999961853, 0, 0, 197.97143554688);
	CreateDynamicObject(747, 1348.8000488281, -1422, 12.39999961853, 0, 0, 197.96813964844);
	CreateDynamicObject(747, 1350.1999511719, -1418.0999755859, 12.300000190735, 0, 0, 89.968139648438);
	CreateDynamicObject(996, 1305.1999511719, -1693, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1701.6999511719, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1710.5, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1718.9000244141, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1727.5, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1736, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1744.3000488281, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1761.5, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(994, 1305.1999511719, -1745.3000488281, 12.60000038147, 0, 0, 269.25);
	CreateDynamicObject(996, 1305.1999511719, -1769.9000244141, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1778.4000244141, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1788.9000244141, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1797.1999511719, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1805.5999755859, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1813.9000244141, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1822.3000488281, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.1999511719, -1830.5999755859, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(996, 1305.3000488281, -1838.9000244141, 13.300000190735, 0, 0, 90);
	CreateDynamicObject(1215, 1305.1999511719, -1693.9000244141, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.1999511719, -1711.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.1999511719, -1719.8000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.1999511719, -1728.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.1999511719, -1736.6999511719, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.1999511719, -1745.0999755859, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305, -1751.9000244141, 13, 0, 0, 0);
	CreateDynamicObject(1215, 1305.1999511719, -1762.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.0999755859, -1770.6999511719, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.0999755859, -1780.0999755859, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.1999511719, -1789.5999755859, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.1999511719, -1798, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.1999511719, -1806.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.3000488281, -1814.6999511719, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.1999511719, -1823, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.3000488281, -1831.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1305.3000488281, -1839.6999511719, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1307.8000488281, -1554.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1309.1999511719, -1544.8000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1311.5999755859, -1535.4000244141, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1314.6999511719, -1527, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1317.5999755859, -1519.8000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1321.6999511719, -1513.9000244141, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1326.8000488281, -1506.4000244141, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1331.0999755859, -1500.0999755859, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1335.0999755859, -1492.5, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1337.8000488281, -1487.1999511719, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1341.1999511719, -1480.5, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1344.3000488281, -1471.3000488281, 13.10000038147, 0, 0, 0);
	CreateDynamicObject(1215, 1345.9000244141, -1464.4000244141, 13.39999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1347.0999755859, -1458.8000488281, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1349, -1450.5, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1350.0999755859, -1441.8000488281, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1350.5999755859, -1434.1999511719, 13, 0, 0, 0);
	CreateDynamicObject(1215, 1351.3000488281, -1425.5999755859, 13, 0, 0, 0);
	CreateDynamicObject(1215, 1351.6999511719, -1416.5999755859, 13, 0, 0, 0);
	CreateDynamicObject(1215, 1348.5, -1416.5999755859, 13, 0, 0, 0);
	CreateDynamicObject(1215, 1347.5999755859, -1426.8000488281, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1347.0999755859, -1435, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1346.5, -1443, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1345.8000488281, -1449.4000244141, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1344.0999755859, -1457.5, 13, 0, 0, 0);
	CreateDynamicObject(1215, 1342.3000488281, -1464.6999511719, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1341.1999511719, -1470.4000244141, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1339.4000244141, -1476.8000488281, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1334.9000244141, -1485.5999755859, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1332.0999755859, -1491.1999511719, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1328.0999755859, -1498.5999755859, 13, 0, 0, 0);
	CreateDynamicObject(1215, 1323.9000244141, -1504.8000488281, 13, 0, 0, 0);
	CreateDynamicObject(1215, 1319.0999755859, -1511.6999511719, 13, 0, 0, 0);
	CreateDynamicObject(1215, 1315.0999755859, -1517.6999511719, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1311.3000488281, -1526.6999511719, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1308.4000244141, -1534, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1305.8000488281, -1544.4000244141, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1304.4000244141, -1553.6999511719, 12.89999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1400.5999755859, -1400.8000488281, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1400, -1402.9000244141, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1402.6999511719, -1436.6999511719, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1406, -1440.5, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1420.4000244141, -1440.6999511719, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1420.5, -1439.1999511719, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1416.3000488281, -1440.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1409.5, -1440.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1412.9000244141, -1440.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1402.6999511719, -1433.0999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1402.5999755859, -1429.1999511719, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1402.6999511719, -1425.1999511719, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1402, -1406.4000244141, 13.39999961853, 0, 0, 0);
	CreateDynamicObject(1215, 1402.5999755859, -1410.4000244141, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1402.6999511719, -1414.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1402.6999511719, -1420, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1404.6999511719, -1400.9000244141, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1408.5999755859, -1400.9000244141, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1412.4000244141, -1401, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1415.0999755859, -1404, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1415.1999511719, -1408, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1415.5999755859, -1437.1999511719, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1415.1999511719, -1433.6999511719, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1415.3000488281, -1429.9000244141, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1415.1999511719, -1425.5, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1415.1999511719, -1420.6999511719, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1415.1999511719, -1415.5999755859, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1215, 1415.1999511719, -1411.8000488281, 13.300000190735, 0, 0, 0);
	CreateDynamicObject(1226, 1876.1999511719, -1860.5999755859, 16.5, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1875.4000244141, -1836.5, 16.39999961853, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1859.4000244141, -1831.9000244141, 16.39999961853, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1846.5, -1828.0999755859, 16.5, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1889, -1847.3000488281, 16.39999961853, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1892.4000244141, -1853.0999755859, 16.39999961853, 0, 0, 87.994995117188);
	CreateDynamicObject(1226, 1889.6999511719, -1866.0999755859, 16.5, 0, 0, 177.99499511719);
	CreateDynamicObject(1226, 1880.0999755859, -1865.4000244141, 16.39999961853, 0, 0, 267.98950195313);
	CreateDynamicObject(1226, 1898.3000488281, -1856.9000244141, 16.39999961853, 0, 0, 359.98400878906);
	CreateDynamicObject(1226, 1898.3000488281, -1866.0999755859, 16.39999961853, 0, 0, 359.98352050781);
	CreateDynamicObject(1226, 1898.0999755859, -1875.4000244141, 16.39999961853, 0, 0, 359.98352050781);
	CreateDynamicObject(1226, 1898.6999511719, -1881.5999755859, 16.39999961853, 0, 0, 359.98352050781);
	CreateDynamicObject(1226, 1950, -1859.1999511719, 16.39999961853, 0, 0, 267.99499511719);
	CreateDynamicObject(1226, 1858.9000244141, -1870, 16.39999961853, 0, 0, 267.99499511719);
	CreateDynamicObject(1226, 1860.1999511719, -1853.4000244141, 16.5, 0, 0, 3.4949951171875);
	CreateDynamicObject(1226, 1859.9000244141, -1837.6999511719, 16.5, 0, 0, 3.49365234375);
	CreateDynamicObject(1226, 1860, -1845.0999755859, 16.5, 0, 0, 3.49365234375);
	CreateDynamicObject(1226, 1860.0999755859, -1861.5999755859, 16.5, 0, 0, 3.49365234375);
	////GROVE POR SERGIO ORTEGA ////////
    CreateDynamicObject(1820, 2532.37573, -1666.28955, 14.27847,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1227, 2512.30713, -1682.45923, 13.27144,   0.00000, 0.00000, 221.58002);
    CreateDynamicObject(1227, 2464.48755, -1670.91699, 13.32679,   0.00000, 0.00000, -256.97998);
    CreateDynamicObject(1264, 2463.88599, -1669.46631, 12.93643,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1362, 2509.45557, -1663.20007, 13.18347,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(3496, 2469.48999, -1696.21228, 12.30492,   0.00000, 0.00000, -95.75999);
    CreateDynamicObject(3261, 2537.69678, -1631.62500, 12.36807,   0.36000, 4.02000, -1.98000);
    CreateDynamicObject(3261, 2537.54639, -1634.67493, 12.36807,   0.36000, 4.02000, -1.98000);
    CreateDynamicObject(1362, 2479.60425, -1687.95935, 13.10143,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(996, 2439.22754, -1680.30286, 13.16831,   0.00000, 0.00000, 87.89995);
    CreateDynamicObject(996, 2423.00391, -1680.24500, 13.34766,   0.00000, 0.00000, 87.06001);
    CreateDynamicObject(967, 2439.91211, -1681.67065, 12.79355,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1233, 2441.02417, -1681.39087, 13.99529,   -0.60000, -0.72000, -183.78003);
    CreateDynamicObject(946, 2520.70483, -1715.27600, 14.71926,   0.00000, 0.00000, -88.67996);
    CreateDynamicObject(946, 2539.76074, -1715.26892, 14.69149,   0.00000, 0.00000, -268.98001);
    CreateDynamicObject(910, 2540.00024, -1708.84424, 13.64465,   0.00000, 0.00000, -87.96000);
    CreateDynamicObject(1368, 2531.18823, -1721.72131, 13.20157,   0.00000, 0.00000, -179.21996);
    CreateDynamicObject(1368, 2535.26367, -1721.68665, 13.20187,   0.00000, 0.00000, -180.29999);
    CreateDynamicObject(948, 2533.18604, -1721.82715, 12.46183,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(950, 2529.33276, -1721.83081, 12.98194,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1528, 2540.59009, -1717.72205, 13.63979,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1368, 2526.49829, -1707.72107, 13.09005,   0.00000, 0.00000, 0.90000);
    CreateDynamicObject(1528, 2433.98901, -1680.98364, 14.42164,   0.00000, 0.00000, -89.76006);
    CreateDynamicObject(3065, 2520.98145, -1715.16956, 15.77208,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1368, 2482.10669, -1649.50098, 13.13728,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1368, 2491.70288, -1687.62976, 13.17816,   0.00000, 0.00000, -177.59998);
    CreateDynamicObject(1468, 2521.12891, -1722.22119, 13.82580,   -0.21841, 0.00000, 1.21080);
    CreateDynamicObject(1468, 2540.80884, -1713.55151, 13.82580,   -0.21841, 0.00000, 89.77080);
    CreateDynamicObject(1468, 2540.82422, -1708.39624, 13.82580,   -0.21841, 0.00000, 89.77080);
    CreateDynamicObject(1319, 2439.35474, -1672.73828, 13.20586,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1319, 2423.50000, -1672.71655, 13.16587,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1358, 2423.97729, -1632.15564, 13.65500,   0.00000, 0.00000, 41.88000);
    CreateDynamicObject(3570, 2431.52661, -1630.63574, 13.75339,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(931, 2522.45947, -1637.17358, 14.08388,   0.00000, 0.00000, 129.84000);
    CreateDynamicObject(2060, 2523.01074, -1637.80933, 14.34393,   0.00000, 0.00000, 40.56000);
    CreateDynamicObject(2060, 2522.67285, -1637.39783, 14.34393,   0.00000, 0.00000, 40.56000);
    CreateDynamicObject(2060, 2522.28882, -1637.00867, 14.32403,   0.00000, 0.00000, 40.56000);
    CreateDynamicObject(2060, 2521.97583, -1636.56543, 14.34393,   0.00000, 0.00000, 40.56000);
    CreateDynamicObject(2901, 2522.69214, -1637.55273, 13.40086,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2901, 2522.25073, -1636.77075, 13.40086,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2672, 2537.43140, -1720.89233, 12.81087,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2676, 2528.73389, -1720.27515, 12.69821,   0.60000, -0.78000, 48.84000);
    CreateDynamicObject(2986, 2519.84570, -1635.97717, 13.83852,   -90.05997, -1.62001, -47.16004);
    CreateDynamicObject(1300, 2528.36841, -1707.61926, 12.78247,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2993, 2491.90601, -1649.57434, 24.81839,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1481, 2519.43872, -1712.88342, 13.25158,   1.38000, -0.72000, 180.12010);
    CreateDynamicObject(1598, 2528.39038, -1707.61096, 12.76577,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1520, 2528.11914, -1707.48376, 13.76843,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1520, 2528.28613, -1707.39343, 13.76843,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1517, 2528.26367, -1707.52991, 13.91693,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1517, 2528.82397, -1721.93652, 12.79248,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1517, 2528.83203, -1721.78076, 12.79248,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1517, 2533.97852, -1721.90759, 12.79248,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1517, 2535.92554, -1722.17017, 14.94973,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2102, 2536.57007, -1722.23718, 14.74139,   0.00000, 0.00000, 181.19989);
    CreateDynamicObject(1331, 2521.92529, -1722.92737, 13.42252,   0.00000, 0.00000, 0.90003);
    CreateDynamicObject(1528, 2434.46069, -1631.93176, 13.81660,   0.00000, 0.00000, 90.30000);
    CreateDynamicObject(1362, 2426.70776, -1631.41418, 13.01983,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(2915, 2525.02881, -1707.69434, 12.48761,   2.22000, 2.16000, 53.40001);
    CreateDynamicObject(3171, 2423.82129, -1641.74084, 12.38513,   0.00000, 0.00000, -181.08020);
    CreateDynamicObject(2943, 2425.56104, -1630.29407, 13.06167,   0.00000, 0.00000, 41.40001);
    CreateDynamicObject(1490, 2423.71069, -1641.96570, 15.29973,   -0.18001, 89.94004, -15.96000);
    CreateDynamicObject(1549, 2425.15967, -1642.03992, 12.42087,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1483, 2431.53711, -1633.37158, 14.10835,   0.00000, 0.00000, 87.54000);
    CreateDynamicObject(1439, 2428.94165, -1632.35291, 12.49133,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1264, 2430.38550, -1631.92395, 12.79501,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1264, 2425.79175, -1630.82507, 12.79501,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1264, 2422.59229, -1633.54419, 12.79501,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1264, 2422.50854, -1634.38184, 12.82562,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1300, 2436.08179, -1630.80249, 12.78000,   0.00000, 0.00000, 87.89997);
    CreateDynamicObject(1712, 2532.46899, -1663.91870, 14.16089,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1712, 2533.82910, -1667.49854, 14.16089,   0.00000, 0.00000, -179.81992);
    CreateDynamicObject(2055, 2533.23901, -1663.46924, 15.94387,   0.00000, 0.00000, -0.77995);
    CreateDynamicObject(1711, 2531.24243, -1667.08398, 14.15799,   0.00000, 0.00000, 134.70006);
    CreateDynamicObject(1665, 2532.75659, -1666.18384, 14.79818,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1549, 2531.67212, -1667.56628, 14.17893,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1520, 2532.99487, -1665.52063, 14.80100,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1520, 2533.14233, -1666.07446, 14.80100,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1517, 2530.78491, -1666.30322, 14.38939,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1517, 2530.71167, -1666.44714, 14.38939,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1481, 2525.86597, -1670.92236, 14.86221,   0.00000, 0.00000, 176.34001);
    CreateDynamicObject(1528, 2534.72266, -1665.87366, 15.75725,   0.00000, 0.00000, -182.94003);
    CreateDynamicObject(1368, 2524.69116, -1655.65796, 15.16102,   0.00000, 0.00000, -91.01999);
    CreateDynamicObject(1319, 2432.72656, -1648.83289, 13.10730,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1319, 2439.42871, -1648.94287, 13.10730,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1810, 2425.45313, -1642.35083, 12.48574,   0.00000, 0.00000, 90.65998);
    CreateDynamicObject(3262, 2439.36816, -1648.79822, 12.55404,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1331, 2431.33374, -1649.61804, 13.41890,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1468, 2429.84082, -1648.93396, 13.81250,   -0.51841, 0.06000, -0.62159);
    CreateDynamicObject(657, 2529.63867, -1630.18335, 12.82412,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(800, 2528.56079, -1630.95630, 13.60960,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(647, 2529.29053, -1635.18872, 14.03104,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(647, 2526.47266, -1632.36621, 14.03104,   0.00000, 0.00000, 0.00000);
    CreateDynamicObject(1468, 2424.66553, -1648.87427, 13.81250,   -0.51841, 0.06000, -0.62159);
    CreateDynamicObject(2993, 2494.25269, -1689.04614, 20.65226,   0.00000, 0.00000, 0.00000);
    //.EXT DEPTOS GROOVE
	CreateDynamicObject(982,2190.47631836,-1798.11914062,13.23664379,0.00000000,0.00000000,0.00000000); //object(fenceshit) (1)
	CreateDynamicObject(984,2162.133906,-1790.68994141,13.15733051,0.00000000,0.00000000,270.00000000); //object(fenceshit2) (1)
	CreateDynamicObject(983,2171.71630859,-1790.70153809,13.20391560,0.00000000,0.00000000,270.00000000); //object(fenceshit3) (1)
	CreateDynamicObject(966,2188.93115234,-1776.95007324,12.37317085,0.00000000,0.00000000,358.00000000); //object(bar_gatebar01) (1)
	CreateDynamicObject(991,2192.51074219,-1776.83593750,13.56833649,0.00000000,0.00000000,0.00000000); //object(bar_barriergate1) (1)
	CreateDynamicObject(1251,2175.40209961,-1792.94201660,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (1)
	CreateDynamicObject(1251,2172.01123047,-1793.18725586,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (2)
	CreateDynamicObject(1251,2168.81542969,-1793.34594727,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (3)
	CreateDynamicObject(1251,2165.41943359,-1793.49194336,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (4)
	CreateDynamicObject(1251,2162.29980469,-1793.67114258,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (5)
	CreateDynamicObject(1251,2159.02880859,-1793.81005859,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (6)
	CreateDynamicObject(1251,2155.320312,-1793.97192383,12.41358185,0.00000000,0.00000000,0.00000000); //object(smashbar) (7)
	CreateDynamicObject(1251,2188.39184570,-16.13183594,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (8)
	CreateDynamicObject(1251,2188.08935547,-19.65161133,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (9)
	CreateDynamicObject(1251,2188.16308594,-1792.70166016,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (10)
	CreateDynamicObject(1251,2188.16015625,-1795.70556641,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (11)
	CreateDynamicObject(1251,2188.05273438,-1798.61621094,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (12)
	CreateDynamicObject(1251,2188.08691406,-1801.86865234,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (13)
	CreateDynamicObject(1251,2188.07543945,-1804.697598,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (14)
	CreateDynamicObject(1251,2188.19921875,-1807.74511719,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (15)
	CreateDynamicObject(1251,2188.23510742,-1810.52185059,12.42907143,0.00000000,0.00000000,90.00000000); //object(smashbar) (16)
	CreateDynamicObject(982,2168.18969727,-1810.91308594,13.23664379,0.00000000,0.00000000,270.00000000); //object(fenceshit) (3)
	CreateDynamicObject(1251,2181.25219727,-1808.59960938,12.42823982,0.00000000,0.00000000,0.00000000); //object(smashbar) (17)
	CreateDynamicObject(1251,2175.03881836,-1808.60229492,12.42823982,0.00000000,0.00000000,0.00000000); //object(smashbar) (19)
	CreateDynamicObject(1251,2172.16479492,-1808.49462891,12.42823982,0.00000000,0.00000000,0.00000000); //object(smashbar) (20)
	CreateDynamicObject(1251,2169.31591797,-1808.38867188,12.42823982,0.00000000,0.00000000,359.00000000); //object(smashbar) (21)
	CreateDynamicObject(1251,2166.43164062,-1808.43151855,12.42823982,0.00000000,0.00000000,358.99475098); //object(smashbar) (22)
	CreateDynamicObject(1251,2163.47363281,-1808.46728516,12.42823982,0.00000000,0.00000000,358.99475098); //object(smashbar) (23)
	CreateDynamicObject(1251,2160.45874023,-1808.59973145,12.42823982,0.00000000,0.00000000,358.99475098); //object(smashbar) (24)
	CreateDynamicObject(1251,2157.27514648,-1808.62084961,12.42823982,0.00000000,0.00000000,358.99475098); //object(smashbar) (25)
		//Barrio de fabelas
	CreateDynamicObject(11440, 2629.1999511719, -1034, 68.099998474121, 0, 0, 0);
	CreateDynamicObject(11440, 2634, -1024.8994140625, 68.099998474121, 0, 0, 179.99450683594);
	CreateDynamicObject(11426, 2640.69921875, -1036.099609375, 68.599998474121, 0, 0, 270);
	CreateDynamicObject(11426, 2640.69921875, -1031.3994140625, 71.999000549316, 0, 0, 90);
	CreateObject(11444, 2634.3994140625, -1030.5, 74.300003051758, 0, 0, 0);
	CreateDynamicObject(11426, 2640.8000488281, -1031.3000488281, 69.199996948242, 0, 0, 88);
	CreateDynamicObject(14877, 2645.8994140625, -1033.3994140625, 70.51000213623, 0, 0, 89.247436523438);
	CreateDynamicObject(14877, 2648.5, -1033.4000244141, 70.5, 0, 0, 89.25);
	CreateDynamicObject(11440, 2651.2998046875, -1025.5, 68.099998474121, 0, 0, 179.99450683594);
	CreateDynamicObject(14877, 2646, -1026.1999511719, 74.099998474121, 0, 0, 89.247436523438);
	CreateDynamicObject(14877, 2648.2998046875, -1026.19921875, 74.088798522949, 0, 0, 89.241943359375);
	CreateDynamicObject(11426, 2637, -1018.5999755859, 79.400001525879, 0, 0, 359.99499511719);
	CreateDynamicObject(11426, 2640.6000976563, -1026.5999755859, 72, 0, 0, 90);
	CreateObject(11444, 2640.69921875, -1026.599609375, 75.300003051758, 0, 0, 270);
	CreateObject(11444, 2646.7998046875, -1020.599609375, 75.900001525879, 0, 0, 0);
	CreateDynamicObject(14877, 2651.1999511719, -1026.19921875, 74.099998474121, 0, 0, 89.241943359375);
	CreateObject(11444, 2656.099609375, -1034, 68.5, 0, 0, 179.99450683594);
	CreateDynamicObject(11440, 2654, -1017.5, 71.5, 0, 0, 179.99450683594);
	CreateDynamicObject(11440, 2661.3999023438, -1033.5999755859, 68.099998474121, 0, 0, 359.99450683594);
	CreateObject(11444, 2655.5, -1035.5, 71.019996643066, 0, 0, 89.994506835938);
	CreateObject(11444, 2655.3000488281, -1031, 71, 0, 0, 89.994506835938);
	CreateDynamicObject(11426, 2660.5, -1031.5, 71.300003051758, 0, 0, 270);
	CreateDynamicObject(11426, 2666.8000488281, -1030.0999755859, 71.300003051758, 0, 0, 178);
	CreateObject(11444, 2666.2998046875, -1034.3994140625, 68.580001831055, 0, 0, 359.98901367188);
	CreateDynamicObject(11426, 2661.1000976563, -1029.1999511719, 74, 0, 0, 89.994018554688);
	CreateDynamicObject(14877, 2670.1999511719, -1033.5, 70.5, 0, 0, 89.247436523438);
	CreateDynamicObject(14877, 2673.099609375, -1033.5, 70.5, 0, 0, 89.241943359375);
	CreateDynamicObject(11426, 2630.19921875, -1031.69921875, 71.199996948242, 0, 0, 90);
	CreateDynamicObject(14877, 2624.6999511719, -1033.4000244141, 70.5, 0, 0, 89.247436523438);
	CreateDynamicObject(14877, 2622, -1033.4000244141, 70.529998779297, 0, 0, 89.247436523438);
	CreateDynamicObject(14877, 2625.1000976563, -1026.3000488281, 74.300003051758, 0, 0, 87.497436523438);
	CreateDynamicObject(14877, 2622.2998046875, -1026.19921875, 74.300003051758, 0, 0, 89.241943359375);
	CreateObject(11444, 2630.1999511719, -1022.4000244141, 74.199996948242, 0, 90, 272);
	CreateDynamicObject(11426, 2630, -1027.2998046875, 74.199996948242, 0, 0, 97.998046875);
	CreateObject(11444, 2637.6000976563, -1022.5, 74.199996948242, 0, 90, 270);
	CreateObject(11444, 2640.3999023438, -1022.200012207, 74.199996948242, 0, 90, 270);
	CreateDynamicObject(11426, 2635.599609375, -1026.7998046875, 76.400001525879, 0, 0, 93.9990234375);
	CreateObject(11444, 2630.6000976563, -1020.0999755859, 79.699996948242, 0, 0, 272);
	CreateDynamicObject(14877, 2643.1999511719, -1018.5999755859, 77.900001525879, 0, 0, 89.247436523438);
	CreateDynamicObject(9131, 2652.6999511719, -1032.5999755859, 75, 0, 0, 0);
	CreateDynamicObject(14877, 2640.6000976563, -1018.5999755859, 77.899002075195, 0, 0, 89.241943359375);
	CreateObject(11444, 2634.6000976563, -1029, 74, 0, 0, 316);
	CreateDynamicObject(11426, 2630.6000976563, -1020.5, 76.5, 0, 0, 272.49499511719);
	CreateDynamicObject(11426, 2637.6999511719, -1020.0999755859, 76.5, 0, 0, 89.994018554688);
	CreateDynamicObject(14877, 2625.599609375, -1018.19921875, 78.440002441406, 0, 0, 89.241943359375);
	CreateObject(11444, 2622.3999023438, -1019.299987793, 76.400001525879, 0, 0, 1.749755859375);
	CreateObject(11444, 2622, -1015.7998046875, 79.199996948242, 0, 0, 181.99951171875);
	CreateObject(11444, 2646.7998046875, -1015.5, 78.699996948242, 0, 0, 179.99450683594);
	CreateDynamicObject(14877, 2650.5, -1018.799987793, 78.059997558594, 0, 0, 89.241943359375);
	CreateDynamicObject(14877, 2650.5, -1011.19921875, 81.800003051758, 0, 0, 89.236450195313);
	CreateObject(11444, 2611.1000976563, -1034.5999755859, 68.599998474121, 0, 0, 349.74682617188);
	CreateDynamicObject(11426, 2616.6999511719, -1036, 68.599998474121, 0, 0, 89.998046875);
	CreateObject(11444, 2606.3000488281, -1034.0999755859, 68.589996337891, 0, 0, 175.74426269531);
	CreateObject(11444, 2618.5, -1030.4000244141, 71.5, 0, 0, 357.74426269531);
	CreateDynamicObject(11426, 2612.599609375, -1032.3994140625, 71.5, 0, 0, 283.99108886719);
	CreateObject(11444, 2607.6000976563, -1031.0999755859, 71.400001525879, 0, 0, 357.74230957031);
	CreateObject(11444, 2616.8999023438, -1027.5, 74.400001525879, 0, 0, 89.742309570313);
	CreateObject(11444, 2616.7998046875, -1023.3994140625, 76.300003051758, 0, 0, 269.74182128906);
	CreateObject(11444, 2631, -1015, 78.199996948242, 0, 90, 271.99951171875);
	CreateDynamicObject(11426, 2630.69921875, -1012.7998046875, 80.5, 0, 0, 271.99401855469);
	CreateDynamicObject(1280, 2634.099609375, -1016.5, 80.900001525879, 1.99951171875, 0, 0);
	CreateDynamicObject(1280, 2629.8999023438, -1017.4000244141, 80.900001525879, 0, 0, 271.99951171875);
	CreateDynamicObject(14877, 2640.69921875, -1011.3994140625, 81.900001525879, 0, 0, 89.236450195313);
	CreateObject(11444, 2644.3000488281, -1012.4000244141, 79.900001525879, 0, 0, 357.98950195313);
	CreateDynamicObject(11426, 2646.5, -1012.6796875, 81.598999023438, 0, 0, 179.98901367188);
	CreateDynamicObject(9131, 2644.3701171875, -1016.3109741211, 80.900001525879, 0, 0, 0);
	CreateDynamicObject(11440, 2654.3994140625, -1009.2998046875, 77, 0, 0, 179.99450683594);
	CreateObject(11444, 2659.19921875, -1023.8994140625, 76.699996948242, 0, 0, 0);
	CreateObject(11444, 2665.5, -1029, 74.300003051758, 0, 0, 90);
	CreateDynamicObject(14877, 2670.5, -1027, 74.5, 0, 0, 89.241943359375);
	CreateDynamicObject(14877, 2673.3000488281, -1027, 74.519996643066, 0, 0, 89.241943359375);
	CreateObject(11444, 2665.19921875, -1026.8994140625, 74.300003051758, 0, 90, 90);
	CreateDynamicObject(11426, 2670.8000488281, -1022.5999755859, 76.400001525879, 0, 0, 89.989013671875);
	CreateDynamicObject(14877, 2665.8000488281, -1020.299987793, 78.699996948242, 0, 0, 89.241943359375);
	CreateDynamicObject(14877, 2663, -1020.299987793, 78.699996948242, 0, 0, 89.241943359375);
	CreateObject(11444, 2657.5, -1019.099609375, 80.400001525879, 0, 0, 89.994506835938);
	CreateObject(11444, 2669.19921875, -1019.099609375, 79.300003051758, 0, 0, 0);
	CreateObject(11444, 2673.19921875, -1019.19921875, 79.300003051758, 0, 0, 179.99450683594);
	CreateObject(11444, 2665.3999023438, -1018.700012207, 78.599998474121, 0, 0, 0);
	CreateDynamicObject(14877, 2662.69921875, -1013.5, 82.800003051758, 0, 0, 89.23095703125);
	CreateDynamicObject(11426, 2668, -1016.69921875, 81.400001525879, 0, 0, 89.989013671875);
	CreateDynamicObject(11426, 2671.3994140625, -1020.2998046875, 81.900001525879, 0, 0, 89.989013671875);
	CreateObject(11444, 2676.8000488281, -1034.5999755859, 68.599998474121, 0, 0, 359.98901367188);
	CreateDynamicObject(11440, 2681.1999511719, -1025.5999755859, 68, 0, 0, 179.99450683594);
	CreateObject(11444, 2685.1000976563, -1034.8000488281, 68.5, 0, 0, 199.99450683594);
	CreateDynamicObject(11426, 2677.1000976563, -1033, 71.400001525879, 0, 0, 177.98901367188);
	CreateObject(11444, 2678.1999511719, -1033.4000244141, 72.559997558594, 0, 0, 267.98901367188);
	CreateObject(11444, 2684.7998046875, -1033.599609375, 71.400001525879, 0, 0, 17.984619140625);
	CreateDynamicObject(11426, 2682.8000488281, -1033.8000488281, 74, 0, 0, 109.98901367188);
	CreateObject(11444, 2680.69921875, -1033.099609375, 75.400001525879, 0, 0, 91.983032226563);
	CreateDynamicObject(11440, 2676.3999023438, -1017.799987793, 72, 0, 0, 177.99450683594);
	CreateObject(11444, 2683.6999511719, -1026.3000488281, 74, 0, 0, 173.98852539063);
	CreateDynamicObject(11426, 2683.19921875, -1032, 77.099998474121, 0, 0, 199.98413085938);
	CreateDynamicObject(11426, 2679.3999023438, -1029.4000244141, 78, 0, 0, 179.98352050781);
	CreateObject(11444, 2676.7998046875, -1021.69921875, 78, 0, 0, 0);
	CreateDynamicObject(11426, 2681.6999511719, -1025.6999511719, 76.900001525879, 0, 0, 261.98413085938);
	CreateObject(11444, 2608, -1029.3994140625, 69.599998474121, 0, 0, 269.74182128906);
	CreateDynamicObject(11426, 2636.8999023438, -1013.0999755859, 82.099998474121, 0, 0, 179.98901367188);
	CreateObject(11444, 2637.1000976563, -1011.0999755859, 79.599998474121, 0, 0, 181.99951171875);
	CreateObject(11444, 2644.6000976563, -1009.799987793, 82.699996948242, 0, 0, 358);
	CreateDynamicObject(14877, 2625.5, -1010.7998046875, 82.400001525879, 0, 0, 89.236450195313);
	CreateDynamicObject(14877, 2625.6000976563, -1005.4000244141, 83.5, 0, 0, 89.236450195313);
	CreateDynamicObject(11426, 2630.599609375, -1009, 83.400001525879, 0, 0, 89.989013671875);
	CreateObject(11444, 2636.7998046875, -1010, 83, 0, 0, 357.98950195313);
	CreateDynamicObject(11427, 2666.5, -1005.4000244141, 92.599998474121, 359, 0, 0);
	CreateDynamicObject(14877, 2662.6999511719, -1010.5999755859, 83.606002807617, 0, 3, 89.236450195313);
	CreateDynamicObject(11426, 2668, -1012.4000244141, 81.400001525879, 0, 0, 269.98901367188);
	CreateObject(11444, 2668.1000976563, -1012.4000244141, 84.300003051758, 0, 0, 91.988525390625);
	CreateDynamicObject(11426, 2668.3000488281, -1016.5999755859, 84.400001525879, 0, 0, 89.989013671875);
	CreateObject(11444, 2657.1999511719, -1014.9000244141, 82.400001525879, 0, 0, 269.99450683594);
	CreateObject(11444, 2666.1000976563, -1004.700012207, 83.099998474121, 1, 90, 175.98901367188);
	CreateDynamicObject(17522, 2666.8994140625, -994.3994140625, 81.599998474121, 0, 0, 357.99499511719);
	CreateDynamicObject(11426, 2670.6000976563, -1002.200012207, 85, 0, 0, 89.989013671875);
	CreateDynamicObject(11426, 2670.6000976563, -1002.200012207, 87.300003051758, 0, 0, 269.98901367188);
	CreateObject(11444, 2667.1000976563, -1003.200012207, 82.999900817871, 0.999755859375, 90, 89.984497070313);
	CreateDynamicObject(4100, 2676.3994140625, -994.5, 86.699996948242, 0, 0, 223.99475097656);
	CreateDynamicObject(4100, 2657.2998046875, -993.8994140625, 86.699996948242, 0, 0, 227.99377441406);
	CreateDynamicObject(4100, 2664.1999511719, -987, 86.699996948242, 0, 0, 137.99377441406);
	CreateDynamicObject(4100, 2669.8994140625, -987.19921875, 86.699996948242, 0, 0, 137.99377441406);
	CreateObject(11444, 2663, -1004.200012207, 83.099998474121, 2, 90, 175.98449707031);
	CreateObject(11444, 2657.1999511719, -1011.0999755859, 84.900001525879, 0, 0, 89.989013671875);
	CreateDynamicObject(14877, 2650.2998046875, -1008.2998046875, 83.599998474121, 0.999755859375, 0.6976318359375, 89.23095703125);
	CreateDynamicObject(11426, 2654.1999511719, -1011.200012207, 81.5, 0, 0, 359.98901367188);
	CreateDynamicObject(11426, 2654.3000488281, -1010.9000244141, 84.900001525879, 0, 0, 359.98352050781);
	CreateDynamicObject(14877, 2665.6000976563, -999.20001220703, 83.5, 0, 2.999267578125, 253.23095703125);
	CreateDynamicObject(14877, 2662.7998046875, -998.69921875, 83.5, 0, 2.999267578125, 265.22644042969);
	CreateDynamicObject(14877, 2659.8000488281, -998.59997558594, 83.5, 0, 2.999267578125, 271.22644042969);
	CreateDynamicObject(14877, 2657.6999511719, -998.59997558594, 83.5, 0, 2.999267578125, 271.22497558594);
	CreateDynamicObject(11426, 2657.3000488281, -1007, 85.400001525879, 0, 0, 89.983520507813);
	CreateObject(11444, 2657.1999511719, -1004.9000244141, 83.099998474121, 1.99951171875, 90, 87.97900390625);
	CreateObject(11444, 2652.5, -1004.700012207, 83.199996948242, 1.99951171875, 90, 87.978515625);
	CreateObject(11444, 2655.8999023438, -1007, 85.300003051758, 0, 0, 89.988525390625);
	CreateObject(11444, 2654.6000976563, -997.79998779297, 84.999000549316, 0, 0, 358.48352050781);
	CreateObject(11444, 2647, -997.3994140625, 85.300003051758, 0, 0, 178.47290039063);
	CreateObject(11444, 2649.099609375, -998.2998046875, 83.199996948242, 1.99951171875, 90, 357.978515625);
	CreateObject(11444, 2644.6000976563, -1004.5, 83.199996948242, 0, 90, 87.978515625);
	CreateDynamicObject(11426, 2646.6000976563, -1008.4000244141, 82.300003051758, 0, 0, 357.98352050781);
	CreateObject(11444, 2636.6999511719, -1004.200012207, 83.199996948242, 0, 90, 87.978515625);
	CreateObject(11444, 2630.8999023438, -1004, 83.290000915527, 0.999755859375, 90, 87.978515625);
	CreateDynamicObject(14877, 2640.8999023438, -1008.9000244141, 83.300003051758, 0, 0, 91.236450195313);
	CreateObject(11444, 2646.6000976563, -1008.299987793, 85.599998474121, 0, 0, 178.47290039063);
	CreateObject(11444, 2644.6000976563, -1008.299987793, 85.400001525879, 0, 0, 178.47290039063);
	CreateDynamicObject(11426, 2635.5, -1006.5, 85.400001525879, 0, 0, 87.989013671875);
	CreateDynamicObject(11426, 2640.6000976563, -999, 85.5, 0, 0, 87.984008789063);
	CreateObject(11444, 2634.7998046875, -997.099609375, 85.5, 0, 0, 356.47338867188);
	CreateDynamicObject(11426, 2629.8000488281, -1007.4000244141, 85.400001525879, 0, 0, 359.98400878906);
	CreateObject(11444, 2629.3999023438, -1005.4000244141, 82.300003051758, 0, 0, 6.473388671875);
	CreateObject(11444, 2632.8999023438, -997.29998779297, 85.599998474121, 0, 0, 358.47338867188);
	CreateObject(11444, 2629.6999511719, -996.79998779297, 85.599998474121, 0, 0, 356.47338867188);
	CreateDynamicObject(11426, 2630.6999511719, -996.79998779297, 88.5, 0, 0, 357.98352050781);
	CreateDynamicObject(11426, 2634.6000976563, -996.90002441406, 88.400001525879, 0, 0, 177.978515625);
	CreateDynamicObject(14877, 2625.8000488281, -996.59997558594, 83.519996643066, 0, 0, 267.23095703125);
	CreateDynamicObject(11426, 2629.8798828125, -993.5, 82.699996948242, 0, 0, 357.978515625);
	CreateDynamicObject(14877, 2626.3400878906, -988.5, 80.599998474121, 0, 0, 265.22595214844);
	CreateObject(11444, 2629.8994140625, -989.5, 81.099998474121, 0, 0, 178.47290039063);
	CreateDynamicObject(11426, 2609.3994140625, -1028.599609375, 74.599998474121, 0, 0, 89.994506835938);
	CreateDynamicObject(14877, 2607.6999511719, -1016, 74.970001220703, 0, 0, 7.23095703125);
	CreateObject(11444, 2607.8994140625, -1024.8994140625, 71.300003051758, 0, 0, 269.74182128906);
	CreateObject(11444, 2607.599609375, -1019.8994140625, 72.400001525879, 0, 0, 275.74035644531);
	CreateObject(11444, 2606.5, -1023.299987793, 69, 0, 0, 357.74182128906);
	CreateObject(11444, 2605.6000976563, -1018.799987793, 69.300003051758, 0, 0, 7.73681640625);
	CreateDynamicObject(11426, 2607.5, -1023, 74.199996948242, 0, 0, 3.9945068359375);
	CreateDynamicObject(11426, 2608.3000488281, -1020, 75.300003051758, 0, 0, 275.99353027344);
	CreateObject(11444, 2615.1999511719, -1015.5999755859, 77, 0, 0, 275.74182128906);
	CreateDynamicObject(14877, 2609.8999023438, -1012.200012207, 77, 0, 0, 93.22900390625);
	CreateObject(11444, 2604, -1011.700012207, 70.699996948242, 0, 0, 10);
	CreateObject(11444, 2606.19921875, -1012.8994140625, 73.790000915527, 0, 0, 97.734375);
	CreateDynamicObject(11426, 2612.69921875, -1024.19921875, 77, 0, 0, 89.994506835938);
	CreateDynamicObject(11426, 2615.8999023438, -1019.799987793, 76.900001525879, 0, 0, 93.994506835938);
	CreateDynamicObject(14877, 2619.8999023438, -1008.700012207, 82.379997253418, 0, 0, 3.2244873046875);
	CreateDynamicObject(14877, 2614.5, -1008.9000244141, 80, 0, 0, 3.218994140625);
	CreateObject(11444, 2607.6000976563, -1003.799987793, 76.800003051758, 3, 90, 5.978515625);
	CreateObject(11444, 2606.8000488281, -996.20001220703, 77.5, 8, 90, 5.9765625);
	CreateObject(11444, 2609.7998046875, -989.3994140625, 78.300003051758, 0, 90, 271.96655273438);
	CreateObject(11444, 2616.5, -989.09997558594, 79, 9.99755859375, 90, 271.97106933594);
	CreateDynamicObject(14877, 2620.19921875, -990.599609375, 80.580001831055, 0, 0, 357.22045898438);
	CreateObject(11444, 2613.3000488281, -1011.5, 75.900001525879, 0, 0, 187.74035644531);
	CreateObject(11444, 2615.3994140625, -1012.19921875, 78.98999786377, 0, 0, 95.73486328125);
	CreateObject(11444, 2619.3000488281, -1012.0999755859, 81.800003051758, 0, 0, 274);
	CreateDynamicObject(11426, 2621.69921875, -1013.599609375, 82, 0, 0, 179.98352050781);
	CreateDynamicObject(11426, 2618.7998046875, -1016.099609375, 79.800003051758, 0, 0, 91.983032226563);
	CreateObject(11444, 2614.3999023438, -1005, 78.900001525879, 0, 0, 273.9990234375);
	CreateObject(11444, 2620, -1004.9000244141, 81.800003051758, 0, 0, 271.99853515625);
	CreateDynamicObject(11426, 2611.8999023438, -999.40002441406, 78.800003051758, 0, 0, 3.9930419921875);
	CreateObject(11444, 2622, -1003.4000244141, 84.5, 0, 0, 177.99951171875);
	CreateObject(11444, 2622.3000488281, -996.20001220703, 82.5, 0, 0, 177.99951171875);
	CreateDynamicObject(11426, 2617.1999511719, -994.70001220703, 80.699996948242, 0, 0, 269.98803710938);
	CreateDynamicObject(11426, 2609.599609375, -987.19921875, 80.5, 0, 0, 271.98303222656);
	CreateObject(11444, 2611.8000488281, -996.5, 80.599998474121, 0, 0, 181.99499511719);
	CreateObject(11444, 2611.8999023438, -996.40002441406, 77.800003051758, 0, 0, 183.99401855469);
	CreateDynamicObject(11426, 2616, -999.29998779297, 81.400001525879, 0, 0, 1.988037109375);
	CreateObject(11444, 2612, -997.70001220703, 81.400001525879, 0, 0, 1.9940185546875);
	CreateDynamicObject(11426, 2613.8994140625, -995.2998046875, 83.400001525879, 0, 0, 271.9775390625);
	CreateDynamicObject(11426, 2614, -999, 83.400001525879, 0, 0, 91.983032226563);
	CreateDynamicObject(11426, 2618.1999511719, -998.70001220703, 82.900001525879, 0, 0, 359.98254394531);
	CreateObject(11444, 2620.6999511719, -998.20001220703, 85.559997558594, 0, 0, 95.994995117188);
	CreateDynamicObject(11426, 2614.3999023438, -998.70001220703, 86.300003051758, 0, 0, 91.9775390625);
	CreateDynamicObject(11426, 2614.69921875, -998.5, 86.300003051758, 0, 0, 269.97253417969);
	CreateObject(11444, 2606.6000976563, -1010.4000244141, 76.599998474121, 0, 0, 3.7398681640625);
	CreateDynamicObject(11426, 2605.6999511719, -1006.0999755859, 78.599998474121, 0, 0, 185.98205566406);
	CreateDynamicObject(11426, 2605, -998.599609375, 79.400001525879, 0, 0, 3.97705078125);
	CreateObject(11444, 2608.1000976563, -985.59997558594, 79.800003051758, 0, 0, 185.73986816406);
	CreateDynamicObject(11426, 2604.3000488281, -990.70001220703, 80, 0, 0, 183.97705078125);
	CreateObject(11444, 2612.6999511719, -985, 79.76000213623, 0, 0, 185.73486328125);
	CreateObject(11444, 2617.1000976563, -984.79998779297, 79.559997558594, 0, 0, 5.73486328125);
	CreateDynamicObject(11426, 2617.3999023438, -987, 81.099998474121, 0, 0, 89.983032226563);
	CreateDynamicObject(11426, 2622.5, -985.40002441406, 80.5, 0, 0, 179.97802734375);
	CreateObject(11444, 2622.6000976563, -983.29998779297, 79.400001525879, 0, 0, 359.73486328125);
	CreateObject(11444, 2619.1000976563, -984, 78.800003051758, 0, 0, 311.73486328125);
	CreateDynamicObject(11426, 2617.3999023438, -984.59997558594, 81.600006103516, 0, 0, 271.97253417969);
	CreateObject(11444, 2603.6999511719, -1006.799987793, 73.300003051758, 0, 0, 7.7398681640625);
	CreateObject(11444, 2604, -1006.8994140625, 75.900001525879, 0, 0, 7.734375);
	CreateObject(11444, 2604.6000976563, -998.5, 76.699996948242, 0, 0, 6.984375);
	CreateObject(11444, 2603.5, -1000.5999755859, 75.900001525879, 0, 0, 305.74035644531);
	CreateObject(11444, 2602.8000488281, -997.40002441406, 76.400001525879, 0, 0, 287.73852539063);
	CreateObject(11444, 2602.5, -990.79998779297, 77.300003051758, 0, 0, 25.981811523438);
	CreateObject(11444, 2599.6000976563, -992, 76.300003051758, 0, 0, 13.734375);
	CreateObject(11444, 2605.3000488281, -984.40002441406, 79.900001525879, 0, 0, 93.7333984375);
	CreateDynamicObject(11426, 2600.3000488281, -987.70001220703, 79, 0, 0, 285.97705078125);
	CreateDynamicObject(11426, 2600.6000976563, -993.90002441406, 79.199996948242, 0, 0, 15.97705078125);
	CreateObject(11444, 2634, -989.70001220703, 81.300003051758, 0, 0, 176.47290039063);
	CreateObject(11444, 2638.3000488281, -990, 81.599998474121, 0, 0, 356.47338867188);
	CreateDynamicObject(11426, 2646.3000488281, -988.5, 82.099998474121, 0, 0, 87.9775390625);
	CreateObject(11444, 2649.5, -995.40002441406, 83.300003051758, 1.99951171875, 90, 357.978515625);
	CreateDynamicObject(14877, 2651.3999023438, -989.40002441406, 83.599998474121, 0.999755859375, 0.6976318359375, 269.23095703125);
	CreateObject(11444, 2642.3000488281, -990.40002441406, 81.599998474121, 0, 0, 356.47338867188);
	CreateDynamicObject(11426, 2640.8999023438, -994.09997558594, 84.5, 0, 0, 267.97253417969);
	CreateDynamicObject(11426, 2645.8999023438, -992, 84.699996948242, 0, 0, 265.97253417969);
	CreateDynamicObject(11426, 2633.3999023438, -992.90002441406, 85.5, 0, 0, 265.96752929688);
	CreateObject(11444, 2633.3999023438, -993, 83.900001525879, 0, 0, 86.467895507813);
	CreateObject(11444, 2655, -990.29998779297, 83, 0, 0, 178.46789550781);
	CreateDynamicObject(11426, 2654.6999511719, -990.40002441406, 85.400001525879, 0, 0, 175.96801757813);
	CreateObject(11444, 2654.6000976563, -989.29998779297, 83, 0, 0, 184.46740722656);
	CreateDynamicObject(11433, 2664.6999511719, -983.90002441406, 84.699996948242, 0, 0, 178);
	CreateDynamicObject(11426, 2661.1000976563, -983.59997558594, 86, 0, 0, 267.96801757813);
	CreateDynamicObject(11426, 2667.8000488281, -983.90002441406, 86, 0, 0, 267.96801757813);
	CreateDynamicObject(11426, 2664.8999023438, -984.29998779297, 86.599998474121, 0, 0, 87.968017578125);
	CreateDynamicObject(11426, 2686.1000976563, -1023.5999755859, 79, 0, 0, 127.9841003418);
	CreateObject(11444, 2686, -1023.700012207, 79, 0, 0, 127.99450683594);
	CreateDynamicObject(9131, 2690, -1022.799987793, 79.699996948242, 0, 0, 36);
	CreateDynamicObject(9131, 2690, -1022.799987793, 77.900001525879, 0, 0, 35.996704101563);
	CreateDynamicObject(11426, 2686.8999023438, -1028.4000244141, 74.300003051758, 0, 0, 163.97973632813);
	CreateObject(11444, 2686.6999511719, -1028.1999511719, 74.400001525879, 0, 0, 343.98461914063);
	CreateDynamicObject(9131, 2687.8999023438, -1032.4000244141, 73.400001525879, 0, 0, 73.996704101563);
	CreateDynamicObject(9131, 2687.8999023438, -1032.4000244141, 71.900001525879, 0, 0, 71.993408203125);
	CreateObject(11444, 2677.8000488281, -1019.299987793, 80.800003051758, 0, 0, 0);
	CreateObject(11444, 2681.8000488281, -1021, 79.940002441406, 0, 0, 91.25);
	CreateDynamicObject(11426, 2685.3000488281, -1019.4000244141, 81.900001525879, 0, 0, 183.97973632813);
	CreateDynamicObject(11426, 2682, -1024.3000488281, 80, 0, 0, 193.97705078125);
	CreateDynamicObject(11426, 2681.8000488281, -1023.9000244141, 80.01000213623, 0, 0, 11.974609375);
	CreateObject(11444, 2682.1999511719, -1019.200012207, 80.800003051758, 0, 0, 0);
	CreateObject(11444, 2677, -1016.5999755859, 83.699996948242, 0, 0, 0);
	CreateObject(11444, 2681.69921875, -1016.3994140625, 83.699996948242, 0, 0, 179.99450683594);
	CreateDynamicObject(14877, 2673.6000976563, -1017.700012207, 84.190002441406, 0, 0, 91.23095703125);
	CreateDynamicObject(14877, 2676.6999511719, -1009.9000244141, 84.190002441406, 0, 0, 179.23040771484);
	CreateDynamicObject(14877, 2673.6999511719, -1013.799987793, 84.199996948242, 0, 0, 95.225463867188);
	CreateDynamicObject(11426, 2670.3000488281, -1012.4000244141, 86.199996948242, 0, 0, 179.98901367188);
	CreateDynamicObject(11426, 2668.6000976563, -1012.4000244141, 86.299995422363, 0, 0, 89.983520507813);
	CreateDynamicObject(11426, 2678.8999023438, -1013.799987793, 85.099998474121, 0, 0, 267.98352050781);
	CreateDynamicObject(11426, 2684.8000488281, -1014.9000244141, 84.5, 0, 0, 185.978515625);
	CreateObject(11444, 2678.6000976563, -997.09997558594, 84.599998474121, 0, 0, 354);
	CreateObject(11444, 2679.3999023438, -990.59997558594, 83.099998474121, 0, 0, 353.99597167969);
	CreateObject(11444, 2674.8000488281, -985, 82.800003051758, 0, 0, 85.995971679688);
	CreateObject(11444, 2674.8999023438, -982.79998779297, 82.300003051758, 0, 0, 175.99548339844);
	CreateObject(11444, 2676, -984.40002441406, 82.98999786377, 0, 0, 89.989990234375);
	CreateDynamicObject(11426, 2674.8999023438, -984.5, 85.800003051758, 0, 0, 267.96752929688);
	CreateDynamicObject(11426, 2675.1000976563, -984.59997558594, 85.5, 0, 0, 87.967529296875);
	CreateDynamicObject(11426, 2674.3000488281, -1006, 85.199996948242, 0, 0, 267.978515625);
	CreateDynamicObject(11426, 2684.8999023438, -1006.200012207, 84.800003051758, 0, 0, 85.978515625);
	CreateDynamicObject(11426, 2685.1000976563, -1006.200012207, 81.599998474121, 0, 0, 85.978515625);
	CreateDynamicObject(11426, 2680.1999511719, -997.09997558594, 84, 0, 0, 175.97351074219);
	CreateDynamicObject(11426, 2680.1999511719, -990.40002441406, 83.400001525879, 0, 0, 181.97351074219);
	CreateDynamicObject(11426, 2661, -1027.9000244141, 79.5, 0, 0, 87.973510742188);
	CreateObject(11444, 2661, -1028, 79.5, 0, 0, 87.994506835938);
	CreateDynamicObject(9131, 2657.5, -1029.8000488281, 79.099998474121, 0, 0, 0);
	CreateDynamicObject(9131, 2657.5, -1029.8000488281, 78.099998474121, 0, 0, 0);
	CreateDynamicObject(9131, 2664.3000488281, -1030, 77.699996948242, 0, 0, 358);
	CreateDynamicObject(9131, 2664.3000488281, -1030, 79.5, 0, 0, 0);
	CreateDynamicObject(9131, 2664.6000976563, -1026, 79, 0, 0, 357.99499511719);
	CreateDynamicObject(9131, 2664.6000976563, -1026, 77.800003051758, 0, 0, 357.99499511719);
	CreateDynamicObject(11426, 2656.8000488281, -1017.200012207, 84.300003051758, 0, 0, 87.973022460938);
	CreateObject(11444, 2656.8000488281, -1017.200012207, 84.300003051758, 0, 0, 268);
	CreateDynamicObject(9131, 2653.1999511719, -1019.0999755859, 84.199996948242, 0, 0, 0);
	CreateDynamicObject(9131, 2660.1999511719, -1019.4000244141, 84.099998474121, 0, 0, 0);
	CreateDynamicObject(11426, 2677.6999511719, -1032.8000488281, 78, 0, 0, 93.983520507813);
	CreateDynamicObject(9131, 2674.6999511719, -1034.9000244141, 77.599998474121, 0, 0, 357.99499511719);
	CreateObject(11444, 2678.1000976563, -1032.9000244141, 78, 0, 0, 91.983032226563);
	CreateDynamicObject(9131, 2674.6999511719, -1034.9000244141, 76, 0, 0, 357.99499511719);
	CreateObject(11444, 2663.3999023438, -1029.3000488281, 76.98999786377, 0, 0, 90);
	CreateDynamicObject(9131, 2666.8999023438, -1031.1999511719, 76.400001525879, 0, 0, 0);
	CreateDynamicObject(9131, 2666.8999023438, -1031.1999511719, 75.400001525879, 0, 0, 0);
	CreateObject(11444, 2654.6999511719, -1028.9000244141, 77.900001525879, 0, 0, 359.98950195313);
	CreateDynamicObject(11426, 2654.6000976563, -1029, 77.690002441406, 0, 0, 181.98901367188);
	CreateDynamicObject(9131, 2652.6999511719, -1032.5999755859, 77, 0, 0, 0);
	CreateDynamicObject(9131, 2656.6999511719, -1032.5, 77, 0, 0, 0);
	CreateDynamicObject(9131, 2656.6999511719, -1032.5, 75, 0, 0, 0);
	CreateDynamicObject(11426, 2646.8000488281, -1014, 82.900001525879, 0, 0, 179.98901367188);
	CreateObject(11444, 2646.6999511719, -1013.799987793, 83.099998474121, 0, 0, 179.99450683594);
	CreateDynamicObject(9131, 2644.8000488281, -1017.5, 82.699996948242, 0, 0, 0);
	CreateDynamicObject(9131, 2648.6000976563, -1017.5999755859, 82.699996948242, 0, 0, 0);
	CreateDynamicObject(11426, 2639.6999511719, -1029.1999511719, 77.199996948242, 0, 0, 124);
	CreateObject(11444, 2639.3999023438, -1029.4000244141, 77.199996948242, 0, 0, 304);
	CreateDynamicObject(9131, 2643.6000976563, -1028.8000488281, 76, 0, 0, 304);
	CreateDynamicObject(9131, 2643.6000976563, -1028.8000488281, 77.800003051758, 0, 0, 303.99572753906);
	CreateDynamicObject(9131, 2637.5, -1033, 76.900001525879, 0, 0, 301.99719238281);
	CreateDynamicObject(9131, 2637.5, -1033, 76, 0, 0, 301.9921875);
	CreateDynamicObject(11426, 2612.5, -1026.1999511719, 79.900001525879, 0, 0, 135.99444580078);
	CreateObject(11444, 2612.6000976563, -1026, 80, 0, 0, 315.74182128906);
	CreateDynamicObject(9131, 2608.6000976563, -1027.1999511719, 79.099998474121, 0, 0, 317.9921875);
	CreateDynamicObject(9131, 2608.6000976563, -1027.1999511719, 78.699996948242, 0, 0, 317.98828125);
	CreateDynamicObject(9131, 2611.5, -1030, 79.199996948242, 0, 0, 315.98828125);
	CreateDynamicObject(9131, 2611.5, -1030, 78.699996948242, 0, 0, 313.98327636719);
	CreateDynamicObject(11426, 2619.8000488281, -1014.5, 84.5, 0, 0, 91.983032226563);
	CreateObject(11444, 2619.8999023438, -1014.5999755859, 85, 0, 0, 91.73486328125);
	CreateDynamicObject(11426, 2621.6999511719, -1013.4000244141, 85, 0, 0, 179.98352050781);
	CreateDynamicObject(9131, 2616.3999023438, -1016.700012207, 83.900001525879, 0, 0, 1.978271484375);
	CreateDynamicObject(11426, 2631.5, -1012.5, 85.199996948242, 0, 0, 89.989013671875);
	CreateObject(11444, 2631.6000976563, -1012.5399780273, 85.400001525879, 0, 0, 269.74182128906);
	CreateDynamicObject(9131, 2628.1000976563, -1014.5999755859, 84.599998474121, 0, 0, 269.97827148438);
	CreateDynamicObject(9131, 2634.1000976563, -1014.4000244141, 84.5, 0, 0, 269.97802734375);
	CreateDynamicObject(11426, 2616.1999511719, -1030, 73.800003051758, 0, 0, 89.994506835938);
	CreateDynamicObject(11426, 2630.8999023438, -1020.4000244141, 79.400001525879, 0, 0, 91.9990234375);
	CreateDynamicObject(11426, 2631.6999511719, -1027.3000488281, 78.800003051758, 0, 0, 93.994018554688);
	CreateObject(11444, 2631.6999511719, -1027, 78.800003051758, 0, 0, 273.74182128906);
	CreateDynamicObject(9131, 2628.3000488281, -1029.5999755859, 78.300003051758, 0, 0, 275.97827148438);
	CreateDynamicObject(9131, 2628.1000976563, -1025.4000244141, 78.300003051758, 0, 0, 277.9765625);
	CreateDynamicObject(3061, 2635.5, -1013.799987793, 87, 0, 0, 0);
	CreateDynamicObject(3109, 2652.3000488281, -1030.3000488281, 78.800003051758, 0, 0, 4);
	CreateDynamicObject(3109, 2617.6999511719, -1012.1300048828, 85.900001525879, 0, 0, 272);
	CreateDynamicObject(3109, 2609.8999023438, -1025.4000244141, 81.099998474121, 0, 0, 316);
	CreateDynamicObject(1440, 2638.8999023438, -1039.4000244141, 69.099998474121, 0, 0, 0);
	CreateDynamicObject(1440, 2618.5, -1039.2998046875, 69.099998474121, 0, 0, 0);
	CreateDynamicObject(1440, 2615.8000488281, -1039.0999755859, 69.099998474121, 0, 0, 0);
	CreateDynamicObject(1440, 2607.1999511719, -1039, 69.099998474121, 0, 0, 0);
	CreateDynamicObject(1440, 2662.1999511719, -1039, 69.099998474121, 0, 0, 0);
	CreateDynamicObject(1440, 2677.8000488281, -1039.4000244141, 69.099998474121, 0, 0, 0);
	CreateDynamicObject(1440, 2667.5, -1039, 69.099998474121, 0, 0, 0);
	CreateDynamicObject(1372, 2657.8000488281, -997.20001220703, 85.099998474121, 0, 0, 88);
	CreateDynamicObject(1372, 2657.8999023438, -995.5, 85.099998474121, 0, 0, 87.994995117188);
	CreateDynamicObject(1365, 2690.3000488281, -1006.5999755859, 85, 0, 0, 266);
	CreateDynamicObject(1358, 2626.1000976563, -981.5, 81.099998474121, 0, 0, 88);
	CreateDynamicObject(1211, 2671.3000488281, -1042.4000244141, 69, 0, 0, 0);
	CreateDynamicObject(1211, 2686.8999023438, -1042.4000244141, 69, 0, 0, 0);
	CreateDynamicObject(1211, 2647.1999511719, -1042.5, 69, 0, 0, 0);
	CreateDynamicObject(1211, 2624.3000488281, -1042.5999755859, 69, 0, 0, 0);
	CreateDynamicObject(1211, 2607.1000976563, -1042.5, 69, 0, 0, 0);
	CreateDynamicObject(1280, 2670.8000488281, -987.79998779297, 85.5, 0, 0, 88);
	CreateDynamicObject(1280, 2666.1999511719, -987.59997558594, 85.5, 0, 0, 87.994995117188);
	CreateDynamicObject(1280, 2661, -987.20001220703, 85.5, 0, 0, 87.994995117188);
	CreateDynamicObject(1280, 2674.8000488281, -987.79998779297, 85.5, 0, 0, 87.994995117188);
	CreateDynamicObject(2192, 2638.5, -1030.5999755859, 80.099998474121, 0, 0, 212);
	CreateDynamicObject(947, 2675.6000976563, -993.29998779297, 87.300003051758, 0, 0, 86);
	CreateDynamicObject(947, 2658.6000976563, -992.59997558594, 87.300003051758, 0, 0, 268);
	CreateDynamicObject(3031, 2646.6000976563, -1010.700012207, 90.199996948242, 0, 0, 0);
	CreateDynamicObject(3031, 2636.8999023438, -1020.5999755859, 83.900001525879, 0, 0, 216);
	CreateDynamicObject(3031, 2618.8999023438, -1028.0999755859, 78.900001525879, 0, 0, 283.99621582031);
	CreateDynamicObject(3031, 2610.8999023438, -1033.9000244141, 76, 0, 0, 307.99621582031);
	CreateDynamicObject(3031, 2612.5, -1027, 84.5, 0, 0, 233.99621582031);
	CreateDynamicObject(3031, 2617.1999511719, -1015.5, 89.5, 0, 0, 219.99621582031);
	CreateDynamicObject(3031, 2628.6000976563, -1008, 89.900001525879, 0, 0, 307.99621582031);
	CreateDynamicObject(3031, 2661.6999511719, -1029.0999755859, 84, 0, 0, 307.99621582031);
	CreateDynamicObject(3031, 2683.6999511719, -1033.6999511719, 81.599998474121, 0, 0, 283.99621582031);
	CreateDynamicObject(3031, 2681.6000976563, -1025.0999755859, 84.5, 0, 0, 235.99621582031);
	CreateDynamicObject(3031, 2679, -1014.200012207, 89.599998474121, 0, 0, 283.99108886719);
	CreateDynamicObject(3031, 2656.1000976563, -1017, 89, 0, 0, 231.99621582031);
	CreateDynamicObject(3031, 2605.6999511719, -1004, 83.099998474121, 0, 0, 219.99572753906);
	CreateDynamicObject(3031, 2610.8000488281, -986.59997558594, 85, 0, 0, 219.99572753906);
	CreateDynamicObject(3031, 2634.3000488281, -997, 92.900001525879, 0, 0, 219.99572753906);
	CreateDynamicObject(3031, 2664.8999023438, -983.90002441406, 91.099998474121, 0, 0, 219.99572753906);
	CreateDynamicObject(2114, 2675.3000488281, -992.40002441406, 85.199996948242, 0, 0, 0);
	CreateDynamicObject(1450, 2663.8999023438, -987.5, 85.699996948242, 0, 0, 0);
	CreateDynamicObject(1450, 2635.3000488281, -1039.0999755859, 69.199996948242, 0, 0, 0);
	CreateDynamicObject(1450, 2683.3000488281, -1039.5999755859, 69.199996948242, 0, 0, 0);
	CreateDynamicObject(1442, 2676.5, -988.09997558594, 85.699996948242, 0, 0, 0);
	CreateDynamicObject(1442, 2658.1000976563, -987.40002441406, 85.699996948242, 0, 0, 0);
	CreateDynamicObject(1440, 2658.1999511719, -990.29998779297, 85.599998474121, 0, 0, 84);
	CreateDynamicObject(1440, 2675.6000976563, -995.90002441406, 85.599998474121, 0, 1, 262);
	CreateDynamicObject(1438, 2658.1000976563, -1000.700012207, 85.5, 0, 0, 88);
	CreateDynamicObject(1264, 2671.3000488281, -999.20001220703, 85.5, 0, 0, 0);
	CreateDynamicObject(1264, 2672, -999.40002441406, 85.5, 0, 0, 0);
	CreateDynamicObject(1264, 2634.3999023438, -1034.5999755859, 74.699996948242, 0, 0, 0);
	CreateDynamicObject(1264, 2615.6000976563, -1034.5, 72, 0, 0, 0);
	CreateDynamicObject(1264, 2607.3000488281, -1035.3000488281, 71.900001525879, 0, 0, 0);
	CreateDynamicObject(1264, 2662.3999023438, -1034.1999511719, 71.699996948242, 0, 0, 0);
	CreateDynamicObject(1264, 2682.6000976563, -1021.0999755859, 84.099998474121, 0, 0, 0);
	CreateDynamicObject(1328, 2629.1000976563, -1038.8000488281, 69.099998474121, 0, 0, 0);
	CreateDynamicObject(1328, 2655.6999511719, -1004.0999755859, 86, 0, 0, 0);
	CreateDynamicObject(2673, 2674.8999023438, -988.29998779297, 85.099998474121, 0, 0, 0);
	CreateDynamicObject(2673, 2672.8999023438, -988.29998779297, 85.099998474121, 0, 0, 0);
	CreateDynamicObject(2673, 2676, -989.09997558594, 85.099998474121, 0, 0, 0);
	CreateDynamicObject(2673, 2658.3999023438, -997.79998779297, 85.099998474121, 0, 0, 0);
	CreateDynamicObject(2673, 2658.3000488281, -988.20001220703, 85.099998474121, 0, 0, 0);
	CreateDynamicObject(2676, 2658.6000976563, -995.29998779297, 85.199996948242, 0, 0, 300);
	CreateDynamicObject(926, 2658.6999511719, -987, 85.300003051758, 0, 0, 0);
	CreateDynamicObject(3109, 2656, -1004.5999755859, 86.699996948242, 0, 0, 270);
	CreateDynamicObject(1728, 2668.8000488281, -999.20001220703, 85.099998474121, 0, 0, 180);
	CreateDynamicObject(1440, 2614.5, -1003.299987793, 82.300003051758, 0, 0, 270);
	CreateDynamicObject(2969, 2612.5, -1001.9000244141, 81.800003051758, 0, 0, 0);
	CreateDynamicObject(3380, 2594.8999023438, -1036.8000488281, 68.699996948242, 0, 0, 0);
	CreateDynamicObject(1481, 2632.3999023438, -1017.4000244141, 81.199996948242, 0, 0, 178);
	CreateDynamicObject(1481, 2676.5, -1022.5999755859, 84.400001525879, 0, 0, 177.99499511719);
	CreateDynamicObject(1428, 2678.8000488281, -1021, 85.199996948242, 0, 0, 0);
	CreateDynamicObject(1428, 2658.6000976563, -1032.4000244141, 76, 0, 0, 0);
	CreateDynamicObject(1428, 2629.6999511719, -1034.5, 72.800003051758, 0, 0, 0);
	CreateDynamicObject(1428, 2631, -1036, 72.800003051758, 0, 0, 272);
	CreateDynamicObject(1428, 2623.3000488281, -1023.700012207, 78, 0, 0, 0);
	CreateDynamicObject(1428, 2635.3000488281, -1034.9000244141, 75.699996948242, 0, 0, 0);
	CreateDynamicObject(1474, 2646.1000976563, -1020.200012207, 80.199996948242, 0, 0, 0);
	CreateDynamicObject(1474, 2633.3999023438, -1034.9000244141, 75.599998474121, 0, 0, 0);
	CreateDynamicObject(1474, 2617.3000488281, -1034.6999511719, 73, 0, 0, 0);
	CreateDynamicObject(1474, 2621.3000488281, -1020.4000244141, 80.699996948242, 0, 0, 0);
	CreateDynamicObject(1474, 2680.8000488281, -1021.299987793, 85.099998474121, 0, 0, 0);
	CreateDynamicObject(1474, 2661.1000976563, -1034.4000244141, 72.699996948242, 0, 0, 0);
	CreateDynamicObject(1428, 2673, -1025.4000244141, 78.199996948242, 0, 0, 0);
	CreateDynamicObject(1428, 2678.1999511719, -1023.700012207, 82.400001525879, 0, 0, 0);
	CreateDynamicObject(1428, 2676.6000976563, -1028.5, 79.599998474121, 0, 0, 268);
	CreateDynamicObject(1280, 2650.3999023438, -1039.4000244141, 69, 1.99951171875, 0, 92);
	CreateDynamicObject(1280, 2658.3000488281, -1038.3900146484, 69, 1.99951171875, 0, 89.99951171875);
	CreateDynamicObject(1280, 2681, -1039.4000244141, 69, 1.99951171875, 0, 89.994506835938);
	CreateDynamicObject(17969, 2656.3000488281, -1037.9000244141, 73, 0, 0, 90);
	CreateDynamicObject(1292, 2643.6000976563, -1038.9000244141, 69.099998474121, 0, 0, 0);
	CreateDynamicObject(1292, 2626.8000488281, -1038.8000488281, 69.099998474121, 0, 0, 0);
	CreateDynamicObject(1292, 2688, -1038.3000488281, 69.099998474121, 0, 0, 20);
	CreateDynamicObject(17969, 2662.8999023438, -1031.6999511719, 78.5, 0, 0, 90);
	//CNN
	CreateDynamicObject(18980, 1784.57007, -1763.47070, 24.92045,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1760.55115, -1763.47070, 24.92050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1784.04211, 90.00000, 16.52140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1772.55420, -1763.47437, 13.02870,   0.00000, 89.94000, 0.00000);
	CreateDynamicObject(19325, 1770.35840, -1763.41052, 16.77040,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(18980, 1772.55420, -1763.47437, 33.85670,   0.00000, 89.94000, 0.00000);
	CreateDynamicObject(19325, 1766.23743, -1763.41052, 16.77040,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1774.46326, -1763.41052, 16.77040,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1778.57629, -1763.41052, 16.77040,   89.82000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1782.68726, -1763.41052, 16.77040,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1762.11743, -1763.41052, 16.77040,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1782.68726, -1763.41052, 23.40240,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1782.68726, -1763.41052, 30.04240,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1778.57629, -1763.41052, 23.40240,   89.82000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1774.46326, -1763.41052, 23.40240,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1770.35840, -1763.41052, 23.40240,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1766.23743, -1763.41052, 23.40240,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1762.11743, -1763.41052, 23.40240,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1778.57629, -1763.41052, 30.04240,   89.82000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1774.46326, -1763.41052, 30.04240,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1770.35840, -1763.41052, 30.04240,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1766.23743, -1763.41052, 30.04240,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1762.11743, -1763.41052, 30.04240,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(18980, 1784.56885, -1775.47144, 13.02870,   0.00000, 89.94000, 90.00000);
	CreateDynamicObject(18980, 1760.55310, -1775.47144, 13.02870,   0.00000, 89.94000, 90.00000);
	CreateDynamicObject(18980, 1772.55420, -1787.50244, 13.02870,   0.00000, 89.94000, 0.00000);
	CreateDynamicObject(18980, 1764.62915, -1787.50635, 24.92050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1784.57007, -1787.50635, 24.92050,   -0.06000, -0.06000, 0.00000);
	CreateDynamicObject(18980, 1760.55310, -1775.47144, 33.85470,   0.00000, 89.94000, 90.00000);
	CreateDynamicObject(18980, 1784.55676, -1775.47144, 33.86070,   0.00000, 89.94000, 90.00000);
	CreateDynamicObject(18980, 1772.55420, -1787.49243, 33.86070,   0.00000, 89.94000, 0.00000);
	CreateDynamicObject(19325, 1782.68726, -1787.50635, 16.77040,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1778.57629, -1787.50635, 16.77040,   89.82000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1774.46326, -1787.50635, 16.77040,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1770.35840, -1787.50635, 16.77040,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1766.23743, -1787.50635, 16.77040,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1782.68726, -1787.50635, 23.40240,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1778.57629, -1787.50635, 23.40240,   89.82000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1774.46326, -1787.50635, 23.40240,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1770.35840, -1787.50635, 23.40240,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1766.23743, -1787.50635, 23.40240,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1762.11743, -1787.50635, 23.40240,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1782.68726, -1787.50635, 30.04240,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1778.57629, -1787.50635, 30.04240,   89.82000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1774.46326, -1787.50635, 30.04240,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19325, 1770.35840, -1787.50635, 30.04240,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1766.23743, -1787.50635, 30.04240,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1762.11743, -1787.50635, 30.04240,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1784.57007, -1769.33936, 16.77040,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1773.44336, 16.77040,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1785.78027, 16.77040,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1777.55945, 16.77040,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1781.66736, 16.77040,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1769.33936, 23.40240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1773.44336, 23.40240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1777.55945, 23.40240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1781.66736, 23.40240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1785.78027, 23.40240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1769.33936, 30.04240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1773.44336, 30.04240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1777.55945, 30.04240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1781.66736, 30.04240,   89.88000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1785.78027, 30.04240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1765.22729, 16.77040,   89.82000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1765.22729, 23.40240,   89.82000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1784.57007, -1765.22131, 30.04240,   89.82000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1765.19727, 16.77040,   89.82000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1769.30725, 16.77040,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1773.43140, 16.77040,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1777.54944, 16.77040,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1781.65942, 16.77040,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1785.78027, 23.40240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1781.65942, 23.40240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1777.54944, 23.40240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1773.43140, 23.40240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1769.30725, 23.40240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1765.19727, 23.40240,   89.82000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1765.19727, 30.04240,   89.82000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1769.30725, 30.04240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1773.43140, 30.04240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1781.65942, 30.04240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1785.78027, 30.04240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1760.55115, -1777.54944, 30.04240,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(18980, 1760.54907, -1783.42627, 24.92050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1760.55115, -1787.50635, 32.58050,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18980, 1772.55420, -1787.50244, 20.58870,   0.00000, 89.94000, 0.00000);
	CreateDynamicObject(18980, 1760.55310, -1775.47144, 20.59270,   0.00000, 89.94000, 90.00000);
	CreateDynamicObject(19379, 1779.27673, -1769.19971, 13.09360,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(18980, 1784.57007, -1775.47144, 20.59270,   0.00000, 89.94000, 90.00000);
	CreateDynamicObject(18980, 1772.55420, -1763.47070, 20.58870,   0.00000, 89.94000, 0.00000);
	CreateDynamicObject(14411, 1772.23486, -1771.05334, 16.92570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14411, 1772.23486, -1779.67773, 10.79170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1765.30615, -1783.08154, 20.21060,   0.06000, 89.94000, 0.00000);
	CreateDynamicObject(19377, 1765.30615, -1773.49756, 20.21060,   0.12000, 89.94000, 0.00000);
	CreateDynamicObject(19377, 1779.12244, -1773.48254, 20.21060,   0.12000, 89.94000, 0.00000);
	CreateDynamicObject(19377, 1765.30615, -1768.09766, 20.20260,   0.12000, 89.94000, 0.00000);
	CreateDynamicObject(19377, 1779.12244, -1768.09766, 20.20260,   0.12000, 89.94000, 0.00000);
	CreateDynamicObject(19377, 1779.12244, -1783.08154, 20.20060,   -0.06000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1774.29810, -1773.97278, 15.03160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1770.32996, -1773.97278, 15.03160,   0.00000, 0.06000, 0.00000);
	CreateDynamicObject(19454, 1772.64246, -1769.28625, 15.34960,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1772.03052, -1769.29028, 15.34960,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1806.40955, -1788.20996, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1806.40955, -1797.75989, 12.44590,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1758.36523, -1790.57117, 12.88530,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1758.36523, -1799.75916, 12.72330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1758.36523, -1807.33020, 12.58725,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(3440, 1770.30090, -1778.79016, 17.89670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1770.30090, -1778.79016, 13.13570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1774.25391, -1778.79016, 17.89670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1774.25391, -1778.79016, 13.13570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1758.36523, -1786.68127, 12.88130,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19454, 1761.44226, -1789.73694, 12.88330,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19454, 1758.36523, -1808.62463, 12.42430,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1764.88745, -1791.44348, 11.46700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1760.12598, -1796.16931, 11.46900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1760.12598, -1805.64136, 11.46900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1760.12598, -1808.32544, 11.46700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1756.64368, -1807.41528, 11.46900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1756.64368, -1797.80835, 11.46900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1756.64368, -1788.18030, 11.46900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1762.54285, -1787.68445, 13.24780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 1762.54480, -1787.93835, 12.99580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 1761.39075, -1787.68835, 13.24580,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 1761.13477, -1787.94238, 12.99380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1698, 1760.35742, -1785.65759, 13.24380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1760.10339, -1785.65759, 12.99380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1775.64246, -1783.08154, 20.19660,   -0.06000, 90.00000, 0.00000);
	CreateDynamicObject(14411, 1776.15820, -1775.65417, 23.27970,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19377, 1774.18506, -1773.37476, 25.34660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1770.31799, -1773.37476, 25.34660,   0.00000, 0.06000, 0.00000);
	CreateDynamicObject(19377, 1778.02112, -1773.53979, 25.37260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1779.30835, -1782.67749, 26.68100,   -0.06000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1765.80823, -1782.67749, 26.68300,   0.06000, 89.94000, 0.00000);
	CreateDynamicObject(19377, 1775.64246, -1782.67749, 26.68700,   -0.06000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1772.14624, -1764.66968, 20.21730,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1772.14624, -1766.25574, 20.21730,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1772.14624, -1767.84167, 20.21730,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1772.14624, -1768.35376, 20.21330,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19325, 1772.42615, -1778.26709, 23.44040,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(14411, 1772.20276, -1770.97217, 29.91370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1770.28979, -1778.37329, 22.67770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1774.22046, -1778.37134, 22.67770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1774.22046, -1778.37134, 27.41770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1770.28979, -1778.37329, 27.41770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1776.17798, -1778.07080, 21.08630,   -90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1776.17798, -1778.07080, 22.68730,   -90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1776.17798, -1778.07080, 24.28830,   -90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1776.17798, -1778.07080, 25.88630,   -90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1765.80823, -1773.05151, 26.68300,   0.06000, 89.94000, 0.00000);
	CreateDynamicObject(19377, 1768.99316, -1773.05151, 26.67700,   0.06000, 89.94000, 0.00000);
	CreateDynamicObject(19377, 1765.80823, -1768.23755, 26.68300,   0.06000, 89.94000, 0.00000);
	CreateDynamicObject(19377, 1768.99316, -1768.23755, 26.67900,   0.06000, 89.94000, 0.00000);
	CreateDynamicObject(19435, 1775.97620, -1767.80676, 26.67900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1775.97620, -1766.18884, 26.67900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1775.97424, -1764.21875, 26.67900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1775.97424, -1764.79285, 26.67300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19325, 1776.16833, -1768.60315, 29.91840,   89.88000, 0.06000, 90.00000);
	CreateDynamicObject(19435, 1772.12683, -1768.75391, 27.67900,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(3440, 1778.09314, -1778.19104, 27.38870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1784.24805, -1778.19104, 27.38870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1784.25403, -1778.19104, 30.98970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1778.09705, -1778.19104, 30.98770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1774.18311, -1773.37683, 27.93860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1778.01904, -1773.37683, 27.93860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, 1770.31201, -1773.37476, 27.93860,   0.00000, 0.06000, 0.00000);
	CreateDynamicObject(3440, 1774.22046, -1778.36926, 30.98770,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1770.29175, -1778.37317, 31.00570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1776.35620, -1767.80481, 26.67500,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1776.35620, -1766.19885, 26.67700,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1776.35620, -1764.21875, 26.67700,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1776.35620, -1764.79285, 26.66900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19325, 1778.06311, -1765.77832, 29.91840,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19435, 1772.12683, -1768.75391, 29.27700,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1772.12683, -1768.75391, 30.87500,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1772.12683, -1768.75586, 32.33800,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(3440, 1778.10205, -1768.66797, 22.50070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1774.14209, -1768.66797, 22.50070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1774.14209, -1768.66797, 27.26070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1778.10205, -1768.66797, 27.26070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1778.10413, -1768.66797, 30.98570,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1774.14014, -1768.66797, 30.98970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1777.77405, -1763.73206, 31.02170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1777.77612, -1763.73206, 29.01370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1778.06311, -1769.90125, 29.91840,   89.88000, 0.06000, 0.00000);
	CreateDynamicObject(19325, 1781.14844, -1778.22278, 28.80240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1781.14844, -1778.22278, 31.31240,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19377, 1779.30835, -1782.67749, 33.29300,   -0.06000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1775.64246, -1782.67749, 33.29700,   -0.06000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1765.80823, -1782.67749, 33.29700,   0.06000, 89.94000, 0.00000);
	CreateDynamicObject(19377, 1765.38416, -1773.05151, 33.29700,   0.06000, 89.94000, 0.00000);
	CreateDynamicObject(19377, 1779.30835, -1773.01550, 33.29700,   -0.06000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1775.64246, -1778.33545, 33.29900,   -0.06000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1779.30835, -1768.52747, 33.29300,   -0.06000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1765.38416, -1768.50952, 33.29700,   0.06000, 89.94000, 0.00000);
	CreateDynamicObject(19435, 1772.34094, -1768.14465, 33.29300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1772.34094, -1766.54871, 33.29300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1772.34094, -1764.96472, 33.29300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1772.34094, -1764.49475, 33.28700,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19401, 1770.57727, -1771.90076, 35.13980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19401, 1774.14136, -1771.90076, 35.13980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19466, 1770.57068, -1771.89136, 35.28312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 1770.57727, -1769.48340, 35.13980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 1774.14136, -1769.48340, 35.13980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 1773.42615, -1773.56494, 35.13980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 1771.82385, -1773.56287, 35.13980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 1771.29175, -1773.56494, 35.13980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1774.14136, -1771.89136, 35.28310,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, 1772.41211, -1772.68286, 36.79580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19428, 1772.41211, -1769.48792, 36.79580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19428, 1772.41406, -1771.07996, 36.79580,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19385, 1772.34607, -1767.23315, 35.13980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19428, 1770.63855, -1767.93921, 35.13980,   0.00000, 0.00000, -4.00000);
	CreateDynamicObject(19428, 1774.08472, -1767.93921, 35.13980,   0.00000, 0.00000, 4.00000);
	CreateDynamicObject(19428, 1772.35010, -1768.03186, 36.79980,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1763.88647, -1778.40540, 35.13980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1768.66406, -1773.66272, 35.13980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1768.66406, -1783.16064, 35.13980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1776.72815, -1783.15857, 35.13980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1776.72815, -1773.66272, 35.13980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1781.45349, -1778.40540, 35.13980,   0.00000, 0.00000, 0.00000);
	CreateObject(3567, 1772.65186, -1775.41162, 36.02090,   0.00000, 0.00000, 90.00000);
	CreateObject(3567, 1772.65186, -1778.73254, 36.02090,   0.00000, 0.00000, 90.00000);
	CreateObject(3567, 1772.63977, -1781.43164, 36.01690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(3280, 1775.45691, -1773.04932, 37.24690,   30.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1773.91589, -1773.04932, 37.24690,   30.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1772.35388, -1773.04932, 37.24690,   30.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1770.79187, -1773.04932, 37.24690,   30.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1769.22986, -1773.04932, 37.24690,   30.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1767.66785, -1773.04932, 37.24690,   30.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1766.10596, -1773.04932, 37.24690,   30.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1763.19165, -1774.49255, 37.24690,   30.00000, 0.00000, 90.00000);
	CreateDynamicObject(3280, 1764.54395, -1773.04932, 37.24690,   30.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1763.19165, -1776.01062, 37.24690,   30.00000, 0.00000, 90.00000);
	CreateDynamicObject(3280, 1763.19165, -1777.59460, 37.24690,   30.00000, 0.00000, 90.00000);
	CreateDynamicObject(3280, 1763.19165, -1779.17859, 37.24690,   30.00000, 0.00000, 90.00000);
	CreateDynamicObject(3280, 1763.19165, -1780.76257, 37.24690,   30.00000, 0.00000, 90.00000);
	CreateDynamicObject(3280, 1764.54395, -1783.76880, 37.24690,   30.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 1763.19165, -1782.34656, 37.24690,   30.00000, 0.00000, 90.00000);
	CreateDynamicObject(3280, 1766.10596, -1783.76880, 37.24690,   30.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 1767.66785, -1783.76880, 37.24690,   30.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 1769.22986, -1783.76880, 37.24690,   30.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 1772.35388, -1783.76880, 37.24690,   30.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 1770.79187, -1783.76880, 37.24690,   30.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 1775.45691, -1783.76880, 37.24690,   30.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 1773.91589, -1783.76880, 37.24690,   30.00000, 0.00000, 180.00000);
	CreateDynamicObject(11544, 1780.29688, -1774.85388, 35.22840,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 1777.03687, -1773.04932, 37.24690,   30.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1778.30090, -1773.04932, 37.24690,   30.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1780.84753, -1773.29712, 36.37100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1779.78735, -1773.29712, 36.36700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1780.84753, -1774.23315, 36.58300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1779.78748, -1774.23315, 36.57900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1777.04089, -1783.76880, 37.24690,   30.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 1778.62488, -1783.76880, 37.24690,   30.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 1780.20886, -1783.76880, 37.24690,   30.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 1780.77087, -1783.76880, 37.24690,   30.00000, 0.00000, 180.00000);
	CreateDynamicObject(3280, 1782.10632, -1782.35486, 37.24690,   30.00000, 0.00000, -90.00000);
	CreateDynamicObject(3280, 1782.10632, -1780.81494, 37.24690,   30.00000, 0.00000, -90.00000);
	CreateDynamicObject(3280, 1782.10632, -1779.23889, 37.24690,   30.00000, 0.00000, -90.00000);
	CreateDynamicObject(3280, 1782.10632, -1777.67896, 37.24690,   30.00000, 0.00000, -90.00000);
	CreateDynamicObject(3280, 1782.10632, -1776.11890, 37.24690,   30.00000, 0.00000, -90.00000);
	CreateDynamicObject(3280, 1782.10632, -1774.55896, 37.24690,   30.00000, 0.00000, -90.00000);
	CreateDynamicObject(19425, 1772.73206, -1782.39929, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1774.25427, -1776.77307, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1774.25427, -1780.14905, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1771.03027, -1780.14893, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1772.57837, -1778.43701, 36.81220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1772.73206, -1774.47546, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1771.03027, -1776.77307, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1766.23706, -1774.47546, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1769.47107, -1774.47546, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1775.98108, -1774.47546, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1779.20007, -1774.47546, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1766.23706, -1782.37952, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1769.47107, -1782.39929, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1775.98108, -1782.39929, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1779.20007, -1782.39929, 36.81220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1764.66895, -1780.80859, 36.81220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1764.66895, -1776.04163, 36.81220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1764.66895, -1778.14160, 36.81020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1780.75415, -1776.04163, 36.81220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1780.75415, -1778.14246, 36.81420,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1780.75415, -1780.80859, 36.81020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1596, 1763.16943, -1770.15771, 35.79790,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(1596, 1766.96069, -1766.48254, 35.79790,   0.00000, 0.00000, 138.87399);
	CreateDynamicObject(1687, 1768.39587, -1772.79565, 34.08736,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1770.18005, -1768.66797, 22.50070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1770.18005, -1768.66797, 27.26070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1770.17810, -1768.66797, 30.98970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1715, 1766.57971, -1782.11621, 13.17670,   0.00000, 0.00000, 314.86459);
	CreateDynamicObject(1723, 1763.76440, -1765.55457, 13.17480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1762.05200, -1770.67053, 13.17480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 1767.56445, -1768.69385, 13.17480,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1765.82446, -1772.73987, 13.17480,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1827, 1765.08167, -1769.61169, 13.16744,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1689, 1762.70300, -1778.72803, 34.42050,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2700, 1769.98206, -1777.30481, 16.40380,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2700, 1769.98206, -1770.95984, 16.40380,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2700, 1774.64758, -1770.82544, 16.40380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2700, 1774.64758, -1776.56335, 16.40380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2434, 1766.36804, -1784.29199, 13.17560,   0.00000, 0.00000, -44.00000);
	CreateDynamicObject(2435, 1765.70984, -1783.64502, 13.17560,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(2435, 1765.05176, -1782.98694, 13.17560,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(2434, 1767.27368, -1783.59241, 13.17560,   0.00000, 0.00000, 46.10600);
	CreateDynamicObject(2434, 1764.38159, -1782.06006, 13.17560,   0.00000, 0.00000, -135.16800);
	CreateDynamicObject(2434, 1765.30798, -1781.38245, 13.17560,   0.00000, 0.00000, -225.19800);
	CreateDynamicObject(2438, 1774.70532, -1774.84656, 15.62340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(955, 1774.83362, -1771.21826, 13.56780,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1776, 1774.79028, -1772.66907, 14.23980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2424, 1774.76953, -1774.79346, 13.17630,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1776.28015, -1778.88086, 13.71660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1782.34009, -1778.88086, 13.71660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1774.35754, -1766.57813, 13.71660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1781.88611, -1776.31128, 13.17494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1777.72876, -1775.55090, 13.17494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1781.93823, -1771.94080, 13.17494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1780.94543, -1768.92358, 13.17494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1779.10669, -1766.01318, 13.17494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1782.75562, -1765.80945, 13.17494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1779.19507, -1772.16663, 13.17494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1777.20923, -1768.34167, 13.17494,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1778.77698, -1785.87329, 13.17480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 1780.79883, -1782.42236, 13.17480,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1827, 1781.62598, -1785.26965, 13.16744,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19391, 1770.31604, -1765.02246, 22.05590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1770.31799, -1767.58789, 22.05590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1770.31604, -1767.38794, 22.05590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1770.31396, -1768.23035, 24.86890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1770.31201, -1782.67542, 24.86890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1770.31409, -1782.67542, 21.99690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2435, 1763.07617, -1775.04431, 20.11340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2434, 1762.91626, -1776.16467, 20.11340,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1761.56641, -1774.63464, 20.28940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2435, 1763.07617, -1774.11426, 20.11340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2434, 1763.08044, -1773.18115, 20.11340,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1783, 1767.28467, -1769.52576, 21.16080,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2169, 1768.19983, -1769.52136, 20.29910,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(14391, 1766.76794, -1782.29150, 21.10710,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2169, 1766.25378, -1769.52136, 20.29910,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1783, 1767.28467, -1769.52576, 21.30680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1783, 1767.28467, -1769.52576, 21.44680,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2104, 1770.29248, -1769.73718, 20.27500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2104, 1770.29248, -1770.32520, 20.27500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2104, 1770.29248, -1770.88525, 20.27500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2190, 1768.06873, -1769.85596, 21.08650,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2225, 1770.19080, -1771.67737, 20.30320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2229, 1768.62463, -1771.17273, 20.37820,   0.00000, 0.00000, -45.00000);
	CreateDynamicObject(2700, 1769.94385, -1772.06262, 22.62650,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2700, 1769.94385, -1773.89258, 22.62650,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2700, 1769.94385, -1775.62659, 22.62650,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2700, 1769.94385, -1777.12866, 22.62650,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2229, 1767.60950, -1778.11865, 20.37820,   0.00000, 0.00000, -120.00000);
	CreateDynamicObject(1952, 1762.54126, -1773.52490, 21.02260,   30.00000, -90.00000, 160.00000);
	CreateDynamicObject(1952, 1762.52698, -1775.62964, 21.02260,   30.00000, -90.00000, 40.00000);
	CreateDynamicObject(19435, 1767.80811, -1781.30762, 21.04580,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1764.80005, -1781.30957, 21.04580,   90.00000, 90.00000, 0.00000);
	CreateDynamicObject(2894, 1762.86548, -1774.65637, 21.15860,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1958, 1767.81201, -1769.51855, 21.08710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3025, 1766.17957, -1778.24329, 20.21020,   180.00000, 0.00000, 45.00000);
	CreateDynamicObject(2388, 1767.12573, -1774.01599, 20.29966,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1886, 1766.82947, -1774.23547, 22.30490,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2388, 1767.06152, -1771.45239, 20.29966,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1886, 1766.74536, -1771.70679, 22.30490,   0.00000, 0.00000, -60.40000);
	CreateDynamicObject(2388, 1767.24561, -1776.62537, 20.29966,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1886, 1767.05176, -1776.84607, 22.30490,   0.00000, 0.00000, -110.00000);
	CreateDynamicObject(2388, 1766.20764, -1777.90735, 20.29970,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19143, 1766.02612, -1778.45142, 22.96300,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19143, 1766.30615, -1778.17139, 22.96300,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19143, 1766.02612, -1778.45142, 23.71900,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(2388, 1764.63416, -1770.02368, 20.29970,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(3025, 1764.63086, -1770.34717, 20.21020,   180.00000, 0.00000, -25.00000);
	CreateDynamicObject(19143, 1764.38757, -1770.31702, 22.95470,   0.00000, 0.00000, -210.00000);
	CreateDynamicObject(19143, 1764.43262, -1770.31702, 22.29470,   0.00000, 0.00000, -210.00000);
	CreateDynamicObject(19143, 1764.74756, -1770.48206, 22.29470,   0.00000, 0.00000, -210.00000);
	CreateDynamicObject(19143, 1764.38757, -1770.31702, 23.73470,   0.00000, 0.00000, -210.00000);
	CreateDynamicObject(641, 1761.13867, -1792.56934, 10.15337,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(641, 1760.74402, -1802.86450, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1761.13867, -1813.00232, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1756.13464, -1811.33435, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1756.09827, -1795.81653, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1756.11670, -1777.38489, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1757.72766, -1765.61865, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1766.83228, -1760.40076, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1784.49060, -1758.79236, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1774.07214, -1752.55591, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1790.52795, -1746.43201, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1789.49463, -1767.54944, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1789.44299, -1778.42444, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1789.49463, -1785.89746, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1809.51062, -1792.56946, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1798.25159, -1792.56946, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1786.15857, -1792.56946, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1774.06555, -1792.56946, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(4173, 1800.31128, -1771.18420, 13.35280,   0.00000, 0.00000, 269.58749);
	CreateDynamicObject(4173, 1799.61963, -1763.61047, 13.89380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(647, 1802.77673, -1767.01941, 12.47920,   3.14160, 0.00000, 0.83690);
	CreateDynamicObject(647, 1797.92944, -1773.63098, 12.74220,   3.14160, 0.00000, 0.83690);
	CreateDynamicObject(647, 1801.07056, -1747.88831, 13.52220,   3.14160, 0.00000, 0.83690);
	CreateDynamicObject(647, 1797.21326, -1755.52222, 12.48320,   3.14160, 0.00000, 0.83690);
	CreateDynamicObject(629, 1805.87671, -1774.97644, 12.51147,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(629, 1799.30981, -1776.95593, 12.51147,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(629, 1799.62866, -1765.64307, 12.51147,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(629, 1805.45715, -1757.36670, 12.51147,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(629, 1774.91064, -1746.13513, 12.51147,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(629, 1781.40930, -1752.26086, 12.51147,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(629, 1769.46631, -1754.30334, 12.51147,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(647, 1780.52454, -1748.00500, 12.78426,   3.14159, 0.00000, 0.83693);
	CreateDynamicObject(647, 1770.04419, -1747.73987, 12.78426,   3.14159, 0.00000, 0.83693);
	CreateDynamicObject(647, 1760.70679, -1754.55005, 12.78426,   3.14159, 0.00000, 0.83693);
	CreateDynamicObject(629, 1760.91846, -1745.87756, 12.51150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2104, 1770.29248, -1773.89526, 20.27500,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2225, 1770.19080, -1774.68738, 20.30320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1663, 1767.88879, -1768.21484, 20.73930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 1765.81775, -1768.19727, 20.73930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 1766.73413, -1784.59827, 20.73930,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2198, 1781.29370, -1780.20142, 26.76260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1780.78833, -1779.16199, 27.37400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2606, 1765.89294, -1769.58008, 21.31270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2606, 1765.89294, -1769.58008, 21.73270,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2637, 1774.49915, -1782.89294, 20.68920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19391, 1779.71118, -1778.22815, 22.02790,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19408, 1775.18628, -1782.92285, 22.02790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2637, 1773.41504, -1782.89294, 20.68920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19466, 1775.23157, -1782.75269, 22.06510,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1775.18628, -1785.32336, 22.05590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1775.18433, -1786.69336, 22.05590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1775.18433, -1782.67334, 24.86890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1952, 1773.80725, -1782.64453, 22.18170,   -30.00000, 0.00000, 20.00000);
	CreateDynamicObject(1897, 1774.48523, -1782.84985, 23.14570,   140.00000, 0.00000, -90.00000);
	CreateDynamicObject(1952, 1773.76721, -1783.09155, 22.18170,   -30.00000, 0.00000, 200.00000);
	CreateDynamicObject(1714, 1773.99963, -1780.72900, 20.28940,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1773.94812, -1785.05139, 20.28940,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1714, 1771.68970, -1783.00476, 20.28940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1952, 1773.55566, -1782.84949, 22.18170,   -30.00000, 0.00000, 110.00000);
	CreateDynamicObject(2894, 1773.04346, -1782.95544, 21.15660,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1491, 1775.17615, -1780.48291, 20.27360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 1770.31799, -1765.76794, 20.27360,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1775.71704, -1782.89185, 20.68920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1777.40295, -1782.95325, 20.28940,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1783, 1775.51624, -1782.17151, 21.17980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1775.54907, -1783.20972, 21.08710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2229, 1775.72485, -1780.86975, 20.37820,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(2104, 1775.45544, -1785.40735, 20.27500,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2190, 1775.33557, -1783.43079, 21.08650,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2104, 1776.01038, -1785.40735, 20.27500,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2104, 1776.58044, -1785.40735, 20.27500,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2104, 1777.15039, -1785.40735, 20.27500,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1958, 1775.54907, -1782.89465, 21.08710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1775.54907, -1782.57971, 21.08710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1776.07410, -1783.36267, 21.07910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1776.07410, -1783.04785, 21.07910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1776.07410, -1782.73267, 21.07910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1776.07410, -1783.68054, 21.07910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1783, 1775.51624, -1782.17151, 21.32380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1783, 1775.51624, -1782.17151, 21.44380,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1776.07410, -1782.40869, 21.07910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1776.07410, -1782.08459, 21.07910,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1783, 1775.62415, -1782.17151, 21.17980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1776.07410, -1782.00061, 21.06710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1776.07410, -1783.76453, 21.06710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 1780.40686, -1786.15845, 20.27980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 1781.51794, -1782.46973, 20.27980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19391, 1775.18628, -1779.73425, 22.02790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1782.10864, -1778.22815, 22.02990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1783.70459, -1778.22815, 22.02990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1491, 1778.93420, -1778.22815, 20.27360,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1781.23840, -1778.22278, 24.84440,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3440, 1784.24805, -1778.19104, 22.64370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1778.09314, -1778.19104, 22.64370,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 1782.59216, -1783.22449, 26.76260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1663, 1783.57703, -1782.55750, 27.37400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2198, 1782.55945, -1786.94739, 26.76260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1663, 1783.64868, -1786.48071, 27.37400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2198, 1779.24231, -1783.16113, 26.76260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2198, 1779.29980, -1786.06799, 26.76260,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1663, 1780.28589, -1785.28723, 27.37400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1663, 1780.35925, -1782.46643, 27.37400,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2198, 1776.13123, -1785.52966, 26.76260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 1772.27344, -1785.48022, 26.76260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 1776.84155, -1786.51245, 27.37400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1772.90857, -1786.59473, 27.37400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19435, 1769.45593, -1773.37476, 28.51990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19391, 1768.66638, -1778.05249, 28.50690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19391, 1768.66638, -1768.67847, 28.50690,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1767.87195, -1773.37476, 28.51990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1769.45593, -1773.37683, 31.45990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1767.86792, -1773.37280, 31.45990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1769.45593, -1778.05444, 31.45990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1767.86792, -1778.05444, 31.45990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1767.86792, -1768.68445, 31.45990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1769.45593, -1768.68848, 31.45990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1769.42139, -1778.06726, 26.76480,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1523, 1769.42688, -1768.64746, 26.76480,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2186, 1761.69202, -1768.34473, 26.76850,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1846, 1766.16675, -1769.71387, 28.13920,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(19435, 1769.45593, -1771.85083, 28.51990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1769.45593, -1770.42285, 28.51990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1768.72070, -1773.29309, 26.76480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1768.72070, -1771.86511, 26.76480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2514, 1769.70886, -1771.20996, 26.77760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2514, 1769.70886, -1772.57495, 26.77760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2523, 1767.63989, -1770.59241, 26.75740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2523, 1767.63989, -1769.95239, 26.75740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1523, 1768.72070, -1774.94006, 26.76480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1769.45593, -1774.85876, 28.51990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2514, 1769.70886, -1774.12598, 26.77760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1523, 1768.72070, -1776.44409, 26.76480,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2514, 1769.70886, -1775.44202, 26.77760,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 1769.45593, -1776.36279, 28.51990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1846, 1766.16675, -1777.02393, 28.13920,   0.00000, -90.00000, 180.00000);
	CreateDynamicObject(2523, 1767.61792, -1777.93835, 26.74940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2523, 1767.63989, -1770.59241, 26.75740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2523, 1767.61792, -1777.21045, 26.74940,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2186, 1770.15601, -1786.71777, 26.76850,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1723, 1765.71643, -1784.28967, 26.75380,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1723, 1762.31787, -1782.67554, 26.75380,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2198, 1762.62231, -1778.50134, 26.76260,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1663, 1761.34839, -1779.13501, 27.37400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2198, 1762.62231, -1774.57532, 26.76260,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1663, 1761.34839, -1775.20898, 27.37400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2198, 1762.62231, -1770.95129, 26.76260,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1663, 1761.34839, -1771.88696, 27.37400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2198, 1763.86328, -1765.41724, 26.76260,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1663, 1763.25598, -1764.16809, 27.37400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19391, 1770.14978, -1765.02563, 28.51790,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1770.14978, -1767.40417, 28.51990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1770.15381, -1769.00220, 28.51990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1770.15381, -1769.00220, 31.45990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1770.15186, -1767.40417, 31.45990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1770.15186, -1764.23621, 31.45990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1770.15186, -1765.80420, 31.45990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1491, 1770.15002, -1765.76794, 26.75660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1767.00879, -1773.36670, 28.50120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 1767.01477, -1773.36670, 31.45990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1714, 1777.24182, -1766.07178, 26.76450,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2161, 1772.70740, -1768.20056, 26.72200,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1771.39136, -1768.20056, 26.73000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1771.39136, -1768.20056, 28.03800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, 1772.70740, -1768.20056, 28.03800,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2568, 1780.79529, -1778.82947, 20.25870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2008, 1776.00830, -1766.50000, 26.77000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1714, 1774.37610, -1765.96814, 26.76450,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1663, 1782.26428, -1779.70264, 20.68990,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2740, 1763.70874, -1766.30225, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1767.90869, -1766.30225, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1767.90869, -1772.10217, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1767.90869, -1777.30225, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1767.90869, -1781.90222, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1763.70874, -1772.10217, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1763.70874, -1777.30225, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1763.70874, -1781.90222, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1773.05176, -1781.90222, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1777.98376, -1781.90222, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1763.70874, -1786.42322, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1767.90869, -1786.42322, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1773.05176, -1786.42322, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1777.98376, -1786.42322, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.50476, -1781.90222, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.50476, -1786.42322, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1777.98376, -1777.30225, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.50476, -1777.30225, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1777.98376, -1772.10217, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.50476, -1772.10217, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1777.98376, -1766.30225, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.50476, -1766.30225, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1774.69580, -1766.30225, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1770.99683, -1766.30225, 19.97660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1762.42407, -1781.90515, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1766.38416, -1781.90515, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1766.38416, -1775.78516, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1766.38416, -1770.38525, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1766.38416, -1764.98523, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1762.42407, -1775.78516, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1762.42407, -1770.38525, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1762.42407, -1764.98523, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1772.15344, -1774.41687, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1772.15344, -1769.73694, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1772.15344, -1765.77686, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1776.83337, -1765.77686, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1772.87341, -1784.85693, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1772.87341, -1780.17688, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1777.19336, -1780.17688, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.95337, -1780.17688, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1777.19336, -1784.85693, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.95337, -1784.85693, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.58215, -1780.85303, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.58215, -1785.24194, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1776.23621, -1785.24194, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1770.55823, -1785.24194, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1765.88220, -1785.24194, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1761.20618, -1785.24194, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1776.23621, -1780.85303, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1770.55823, -1780.85303, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1765.88220, -1780.85303, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1761.20618, -1780.85303, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1765.88220, -1775.84302, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1765.88220, -1771.50098, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1765.88220, -1767.82703, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1765.88220, -1764.15295, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1761.20618, -1771.50098, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1761.20618, -1767.82703, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1761.20618, -1764.15295, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1769.22217, -1767.82703, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1769.22217, -1764.15295, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1776.90417, -1767.82703, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1776.90417, -1764.15295, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1772.22815, -1767.82703, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1772.22815, -1764.15295, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1772.22815, -1774.17297, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1772.22815, -1777.17896, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1772.52673, -1768.77197, 36.59230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1772.52673, -1772.26404, 36.59230,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1776.23621, -1776.67505, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1776.23621, -1772.91003, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1776.23621, -1768.89404, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.61218, -1776.77295, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.61218, -1772.69299, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.61218, -1768.88501, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.61218, -1765.07703, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1780.02820, -1765.07703, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1780.02820, -1768.88501, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1780.02820, -1772.69299, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1780.02820, -1776.77295, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1723, 1778.61694, -1774.06177, 20.27980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(631, 1777.52869, -1778.50220, 21.23840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1778.51367, -1769.93530, 21.23840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1781.00549, -1777.90784, 21.23840,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1770.67078, -1766.34424, 27.67930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1769.68384, -1766.34424, 27.67930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1769.89844, -1777.89746, 14.06870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1769.89844, -1769.71948, 14.06870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1770.94238, -1768.84949, 14.06870,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 1770.28979, -1774.63599, 16.03560,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19325, 1784.04211, 90.00000, 16.52140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19325, 1762.11743, -1787.50635, 23.40240,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(19325, 1762.11743, -1787.50635, 30.04240,   89.94000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 1758.36218, -1808.30396, 12.49730,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19447, 1760.12598, -1808.32544, 11.46700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1775.97620, -1767.80676, 26.67900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1775.97620, -1766.18884, 26.67900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1775.97424, -1764.21875, 26.67900,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19435, 1775.97424, -1764.79285, 26.67300,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19377, 1774.18311, -1773.37683, 27.93860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1778.10205, -1768.66797, 22.50070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3440, 1774.14209, -1768.66797, 22.50070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 1772.34094, -1764.49475, 33.28700,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1698, 1780.84753, -1773.29712, 36.37100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1779.78735, -1773.29712, 36.36700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1780.84753, -1774.23315, 36.58300,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1698, 1779.78748, -1774.23315, 36.57900,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1764.66895, -1780.80859, 36.81220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2388, 1766.20764, -1777.90735, 20.29970,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(2388, 1764.63416, -1770.02368, 20.29970,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(2637, 1774.49915, -1782.89294, 20.68920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2637, 1775.71704, -1782.89185, 20.68920,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1783, 1775.51624, -1782.17151, 21.17980,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1775.54907, -1782.57971, 21.08710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1776.07410, -1782.00061, 21.06710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1958, 1776.07410, -1783.76453, 21.06710,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2198, 1776.13123, -1785.52966, 26.76260,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1663, 1776.84155, -1786.51245, 27.37400,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19435, 1769.45593, -1773.37683, 31.45990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 1767.86792, -1773.37280, 31.45990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2523, 1767.63989, -1770.59241, 26.75740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2740, 1772.15344, -1774.41687, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1772.15344, -1769.73694, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.95337, -1780.17688, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1782.95337, -1784.85693, 26.45850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1769.22217, -1767.82703, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1769.22217, -1764.15295, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1776.23621, -1776.67505, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1776.23621, -1772.91003, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2740, 1776.23621, -1768.89404, 33.04660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(631, 1770.67078, -1766.34424, 27.67930,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2257, 1770.21484, -1774.22546, 15.72350,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2258, 1778.11401, -1772.92773, 23.07570,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2256, 1766.88635, -1772.90674, 29.34340,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19377, 1796.21155, -1677.79822, 6.47590,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19124, 1760.55115, -1763.47070, 37.32660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1760.54907, -1783.42627, 37.32660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1764.62915, -1787.50635, 37.32660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1760.55115, -1787.50635, 44.95170,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1784.57007, -1787.50635, 37.32660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19124, 1784.57007, -1763.47070, 37.32660,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1756.24133, -1787.91431, 15.15850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1756.08752, -1803.40015, 15.15850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1760.83057, -1797.16223, 15.15850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1760.82910, -1807.72852, 15.15850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1767.15320, -1791.68921, 15.15850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1779.50122, -1791.89661, 15.15850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1791.54651, -1792.04663, 15.15850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1232, 1803.85645, -1792.08386, 15.15850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1763.92529, -1783.09119, 36.42240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1781.38733, -1783.13818, 36.42240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1781.38635, -1773.72522, 36.42240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19121, 1763.92224, -1773.70923, 36.42240,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 1763.93396, -1773.81055, 36.81590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 1763.93982, -1782.94238, 36.81590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 1781.33081, -1783.05872, 36.81590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19125, 1781.35156, -1773.77820, 36.81590,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19373, 1757.30200, -1810.72424, 12.47090,   0.00000, 89.99800, -15.26400);
	CreateDynamicObject(19373, 1760.60168, -1811.50720, 12.48290,   0.00000, 89.99800, 0.00000);
	CreateDynamicObject(641, 1790.49451, -1817.64954, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1785.15149, -1816.71729, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1796.48999, -1817.60266, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(641, 1803.46362, -1817.15295, 10.15340,   356.85840, 0.00000, 3.14160);
	CreateDynamicObject(10183, 1789.95923, -1797.18018, 12.55300,   0.00000, -0.04000, 45.44900);
	CreateDynamicObject(10183, 1784.88245, -1797.28088, 12.55300,   0.00000, -0.04000, 45.44900);
	CreateDynamicObject(4597, 1793.68188, -1793.21655, 12.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4597, 1780.26489, -1793.21655, 12.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(4597, 1762.30591, -1791.26416, 12.22000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19381, 1751.81274, -1805.94946, 12.50490,   0.00000, 90.00000, -15.26400);
	CreateDynamicObject(19381, 1750.90955, -1803.23755, 12.51090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(629, 1751.69080, -1803.53845, 12.51150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(629, 1749.62244, -1789.47827, 12.51150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(647, 1752.06873, -1795.06030, 12.78426,   3.14159, 0.00000, 0.83693);
	CreateDynamicObject(629, 1756.58765, -1756.74011, 12.51150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(629, 1749.69971, -1754.29797, 12.51150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(647, 1748.92163, -1765.09534, 12.78426,   3.14159, 0.00000, 0.83693);
	CreateDynamicObject(647, 1752.11975, -1781.48730, 12.78426,   3.14159, 0.00000, 0.83693);
	CreateDynamicObject(629, 1752.15417, -1776.01099, 12.51150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(620, 1701.35754, -1793.95068, 10.80469,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(620, 1701.62769, -1777.69409, 10.80469,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(620, 1701.69434, -1761.43323, 10.80469,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(620, 1701.36682, -1746.38489, 10.80469,   356.85840, 0.00000, 3.14159);
	CreateDynamicObject(19454, 1764.93396, -1789.64539, 12.86330,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19447, 1769.68713, -1786.68530, 11.38700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, 1761.41895, -1781.88208, 11.41700,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19447, 1756.64026, -1786.61523, 11.46700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1744.64746, -1756.60535, 12.90630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1744.63452, -1769.24329, 12.90630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1280, 1744.54602, -1780.99146, 12.90630,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19381, 1806.40955, -1778.58997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1806.40955, -1769.08997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1806.40955, -1759.58997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1806.40955, -1750.08997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1806.40955, -1747.08997, 12.50290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1795.90955, -1747.08997, 12.50290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1785.40955, -1747.08997, 12.50290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1774.90955, -1747.08997, 12.50290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1764.40955, -1747.08997, 12.50290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1753.90955, -1747.08997, 12.50290,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1750.90955, -1747.08997, 12.49490,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1750.90955, -1750.08997, 12.49090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1750.90955, -1759.58997, 12.49490,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1750.90955, -1769.08997, 12.49490,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1750.90955, -1778.58997, 12.49490,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1750.90955, -1788.20996, 12.49490,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1795.90955, -1750.08997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1764.40955, -1750.08997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1774.90955, -1750.08997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1785.40955, -1750.08997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1795.90955, -1759.58997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1795.90955, -1769.08997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1795.90955, -1778.58997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1795.90955, -1788.20996, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1785.40955, -1759.58997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1785.40955, -1769.08997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1785.40955, -1778.58997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1785.40955, -1788.20996, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1774.90955, -1759.58997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1764.40955, -1759.58997, 12.48090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1753.90955, -1750.08997, 12.49890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1753.90955, -1759.58997, 12.49890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1761.31982, -1769.08997, 12.49890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1761.31982, -1778.58997, 12.49490,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1761.31982, -1788.20996, 12.49490,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1774.90955, -1788.20996, 12.49490,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1768.40955, -1788.20996, 12.48890,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1750.90955, -1795.23755, 12.50690,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1757.09302, -1805.24524, 12.50090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19381, 1757.09302, -1795.64575, 12.50090,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19379, 1779.27673, -1779.69971, 13.09360,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1769.64465, -1779.69971, 13.09360,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1769.64465, -1769.19971, 13.09360,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1765.74097, -1769.19971, 13.08960,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1765.74097, -1779.69971, 13.08960,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1779.27673, -1781.94373, 13.08360,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1769.64465, -1781.94373, 13.08360,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19379, 1765.74097, -1781.94373, 13.07960,   0.00000, 90.00000, 90.00000);
		// Gimnasio fabela //by enzo
	CreateDynamicObject(14794, 1000.60, -43.60, 989.40, 0.00, 0.00, 0.00);
	CreateDynamicObject(14791, 1000.70, -43.30, 989.00, 0.00, 0.00, 0.00);
	CreateDynamicObject(1472, 997.50, -43.60, 987.40, 0.00, 0.00, 270.00);
	CreateDynamicObject(14596, 1004.35, -59.80, 980.30, 0.00, 0.00, 270.00);
	CreateDynamicObject(1499, 1007.32, -54.14, 987.00, 0.00, 0.00, 0.00);
	CreateDynamicObject(3529, 1009.50, -54.30, 990.20, 0.00, 0.00, 0.00);
	CreateDynamicObject(3529, 1006.70, -54.30, 990.20, 0.00, 0.00, 0.00);
	CreateDynamicObject(18262, 1008.20, -54.20, 990.40, 359.91, 86.00, 94.00);
	CreateDynamicObject(1508, 1006.50, -54.80, 982.40, 0.00, 0.00, 90.00);
	CreateDynamicObject(2632, 997.00, -34.50, 987.00, 0.00, 0.00, 90.00);
	CreateDynamicObject(2628, 997.00, -33.60, 987.10, 0.00, 0.00, 0.00);
	CreateDynamicObject(2631, 1000.30, -34.50, 987.00, 0.00, 0.00, 90.00);
	CreateDynamicObject(2629, 1000.30, -33.70, 987.10, 0.00, 0.00, 0.00);
	CreateDynamicObject(2627, 1009.70, -43.20, 987.00, 0.00, 0.00, 270.00);
	CreateDynamicObject(2627, 1009.70, -44.70, 987.00, 0.00, 0.00, 270.00);
	CreateDynamicObject(2627, 1009.70, -41.50, 987.00, 0.00, 0.00, 270.00);
	CreateDynamicObject(14782, 996.40, -53.60, 987.90, 0.00, 0.00, 180.00);
	CreateDynamicObject(14782, 991.20, -49.10, 988.00, 0.00, 0.00, 90.00);
	CreateDynamicObject(14778, 1000.70, -43.30, 991.50, 0.00, 0.00, 0.00);
	CreateDynamicObject(3265, 1009.53, -53.67, 987.80, 0.00, 0.00, 180.00);
	CreateDynamicObject(3265, 1006.73, -53.67, 987.80, 0.00, 0.00, 180.00);
	CreateDynamicObject(1985, 1007.50, -34.20, 990.00, 0.00, 0.00, 0.00);
	CreateDynamicObject(1985, 1007.50, -36.50, 990.20, 0.00, 0.00, 0.00);
	CreateDynamicObject(8231, 1010.10, -44.80, 977.10, 0.00, 0.00, 180.00);
	CreateDynamicObject(1499, 1007.30, -54.70, 975.40, 0.00, 0.00, 0.00);
	CreateDynamicObject(1271, 1002.50, -52.20, 977.60, 0.00, 0.00, 0.00);
	CreateDynamicObject(2359, 1002.80, -51.60, 976.53, 0.00, 0.00, 126.00);
	CreateDynamicObject(2567, 1003.70, -37.50, 977.20, 0.00, 0.00, 0.00);
	CreateDynamicObject(2971, 1002.30, -52.20, 975.40, 0.00, 0.00, 0.00);
	CreateDynamicObject(1441, 1004.70, -52.90, 976.00, 0.00, 0.00, 180.00);
	CreateDynamicObject(1431, 1009.10, -52.20, 975.90, 0.00, 0.00, 90.00);
	CreateDynamicObject(939, 1011.10, -39.00, 977.60, 0.00, 0.00, 90.00);
	CreateDynamicObject(2670, 1004.60, -39.70, 975.50, 0.00, 0.00, 0.00);
	CreateDynamicObject(2671, 1004.60, -51.10, 975.40, 0.00, 0.00, 0.00);
	CreateDynamicObject(2674, 1008.20, -41.50, 975.40, 0.00, 0.00, 0.00);
	CreateDynamicObject(1338, 1007.10, -37.40, 976.10, 0.00, 0.00, 90.00);
	CreateDynamicObject(1829, 1011.50, -42.10, 975.90, 0.00, 0.00, 270.00);
	CreateDynamicObject(1728, 1007.30, -41.80, 975.40, 0.00, 0.00, 270.00);
	CreateDynamicObject(2297, 1001.60, -39.70, 975.40, 0.00, 0.00, 348.00);
	CreateDynamicObject(1710, 1005.50, -45.20, 975.40, 0.00, 0.00, 180.00);
	CreateDynamicObject(941, 1001.90, -48.50, 975.90, 0.00, 0.00, 90.00);
	CreateDynamicObject(19447, 1011.86, -61.57, 977.14, 0.00, 0.00, 90.00);
	CreateDynamicObject(19447, 1011.86, -61.58, 977.66, 0.00, 0.00, 90.00);
	CreateDynamicObject(19448, 1001.67, -53.39, 976.44, 0.00, 0.00, 90.00);
	CreateDynamicObject(2891, 1001.63, -48.79, 976.37, 0.00, 0.00, 0.00);
	CreateDynamicObject(2891, 1001.61, -48.51, 976.47, -40.00, 0.00, 0.00);
	CreateDynamicObject(2891, 1001.64, -47.83, 976.37, 0.00, 0.00, 25.00);
	CreateDynamicObject(1497, 993.78, -32.52, 986.95, 0.00, 0.00, 180.00);
	// ============== BurgerShot Vinewood========================= ///
	CreateObject(19363, 1447.81580, -1077.80139, 22.69500,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(9131, 1219.07996, -897.83002, 42.73000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1220.55005, -909.46997, 49.68000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(1491, 1217.18994, -909.65002, 42.03000,   0.00000, 0.00000, 6.57000);
	CreateDynamicObject(1491, 1220.19995, -909.28998, 42.02000,   0.00000, 0.00000, 186.25000);
	CreateDynamicObject(9131, 1216.83997, -909.84003, 42.13000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1216.82996, -909.84003, 44.36000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(3280, 1217.92004, -909.57001, 45.32000,   270.13000, 0.00000, 5.03000);
	CreateDynamicObject(3280, 1219.44995, -909.40997, 45.32000,   270.13000, 0.00000, 6.71000);
	CreateDynamicObject(3858, 1209.37000, -910.71002, 43.18000,   0.00000, 0.00000, 51.95000);
	CreateDynamicObject(3095, 1215.70996, -905.37000, 41.51000,   0.00000, 0.00000, 7.19000);
	CreateDynamicObject(3095, 1206.79004, -906.48999, 41.51000,   0.00000, 0.00000, 7.18000);
	CreateDynamicObject(1472, 1217.85999, -909.33002, 41.57000,   0.00000, 0.00000, 6.06000);
	CreateDynamicObject(1472, 1219.34998, -909.16998, 41.57000,   0.00000, 0.00000, 6.06000);
	CreateDynamicObject(3095, 1214.58997, -896.45001, 41.51000,   0.00000, 0.00000, 7.19000);
	CreateDynamicObject(3095, 1205.68005, -897.57001, 41.51000,   0.00000, 0.00000, 7.19000);
	CreateDynamicObject(9131, 1210.67004, -892.65002, 42.75000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(3857, 1214.68005, -891.84998, 48.01000,   0.00000, 0.00000, 52.20000);
	CreateDynamicObject(9131, 1210.67004, -892.65002, 45.02000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(1491, 1207.25000, -892.90002, 42.03000,   0.00000, 0.00000, 6.56000);
	CreateDynamicObject(1491, 1210.26001, -892.52002, 42.03000,   0.00000, 0.00000, 187.35001);
	CreateDynamicObject(9131, 1206.90002, -893.15002, 42.57000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1206.90002, -893.15002, 44.80000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(3095, 1215.70996, -905.37000, 46.52000,   0.00000, 0.00000, 7.20000);
	CreateDynamicObject(3095, 1206.98999, -906.46997, 46.53000,   0.00000, 0.00000, 7.19000);
	CreateDynamicObject(3095, 1215.94995, -905.90997, 50.60000,   0.00000, 0.00000, 7.19000);
	CreateDynamicObject(9131, 1219.07996, -897.83002, 47.27000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(3095, 1214.72998, -896.32001, 50.60000,   0.00000, 0.00000, 7.20000);
	CreateDynamicObject(9131, 1219.07996, -897.83002, 49.52000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(3095, 1206.39001, -897.46997, 46.52000,   0.00000, 0.00000, 7.19000);
	CreateDynamicObject(9131, 1218.30005, -891.72998, 49.68000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1210.67004, -892.65002, 47.25000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1210.67004, -892.65002, 49.50000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(3857, 1214.68005, -891.84998, 42.19000,   0.00000, 0.00000, 52.19000);
	CreateDynamicObject(3857, 1219.03003, -894.73999, 47.32000,   44.81000, 90.12000, 97.06000);
	CreateDynamicObject(3857, 1219.06006, -894.75000, 39.87000,   44.81000, 90.12000, 97.06000);
	CreateDynamicObject(3095, 1205.81995, -897.44000, 50.60000,   0.00000, 0.00000, 7.20000);
	CreateDynamicObject(3095, 1207.04004, -907.03003, 50.60000,   0.00000, 0.00000, 7.19000);
	CreateDynamicObject(9131, 1219.07996, -897.83002, 45.00000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(3859, 1220.43005, -906.83002, 43.26000,   286.35999, 94.42000, 101.38000);
	CreateDynamicObject(3859, 1220.45996, -906.71002, 48.37000,   286.35999, 94.42000, 101.38000);
	CreateDynamicObject(3859, 1219.70996, -901.06000, 43.26000,   286.35999, 94.42000, 101.38000);
	CreateDynamicObject(3859, 1219.73999, -900.95001, 48.16000,   286.35999, 94.42000, 101.38000);
	CreateDynamicObject(9131, 1201.22998, -893.88000, 49.48000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1218.30005, -891.72998, 47.41000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1218.30005, -891.72998, 45.14000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1218.30005, -891.72998, 42.87000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1201.22998, -893.88000, 47.22000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1220.55005, -909.46997, 47.42000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1220.55005, -909.46997, 45.16000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1220.55005, -909.46997, 42.89000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1202.22998, -902.00000, 47.22000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(3857, 1216.52002, -909.79999, 48.01000,   0.00000, 0.00000, 52.31000);
	CreateDynamicObject(3857, 1201.38000, -897.92999, 48.01000,   0.00000, 0.00000, 142.31000);
	CreateDynamicObject(9131, 1202.22998, -902.00000, 49.49000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(3859, 1203.64001, -893.26001, 48.10000,   0.00000, 0.00000, 113.99000);
	CreateDynamicObject(3859, 1208.22998, -892.71002, 47.70000,   0.00000, 0.00000, 113.99000);
	CreateDynamicObject(2714, 1208.70996, -892.48999, 44.80000,   0.00000, 0.00000, 186.13000);
	CreateDynamicObject(3095, 1206.39001, -901.95001, 50.61000,   0.00000, 0.00000, 7.19000);
	CreateDynamicObject(3095, 1215.31995, -900.96002, 50.61000,   0.00000, 0.00000, 7.20000);
	CreateDynamicObject(3095, 1205.88000, -897.58002, 46.53000,   0.00000, 0.00000, 7.19000);
	CreateDynamicObject(3857, 1207.62000, -910.92999, 48.01000,   0.00000, 0.00000, 52.31000);
	CreateDynamicObject(9131, 1203.43005, -911.10999, 49.45000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1203.43005, -911.10999, 47.18000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1212.43005, -910.16998, 47.42000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1211.67004, -910.26001, 47.42000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1211.67004, -910.26001, 49.67000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(9131, 1212.43005, -910.16998, 49.69000,   0.00000, 0.00000, 6.45000);
	CreateDynamicObject(638, 1200.51001, -896.10999, 47.76000,   0.00000, 0.00000, 6.42000);
	CreateDynamicObject(638, 1200.95996, -900.09998, 47.76000,   0.00000, 0.00000, 6.42000);
	CreateDynamicObject(3498, 1206.52002, -893.07001, 44.74000,   270.57999, 0.00000, 276.42999);
	CreateDynamicObject(16500, 1203.31995, -912.77002, 48.09000,   270.50000, 0.00000, 5.58000);
	CreateDynamicObject(1491, 1203.05005, -910.84998, 46.60000,   0.00000, 0.00000, 186.85001);
	CreateDynamicObject(16500, 1199.54004, -911.22998, 46.61000,   270.45999, 179.99001, 94.98000);
	CreateDynamicObject(16500, 1197.78003, -911.38000, 46.62000,   270.45999, 179.98000, 94.98000);
	CreateDynamicObject(16500, 1195.98999, -913.45001, 48.09000,   270.50000, 0.00000, 7.00000);
	CreateDynamicObject(16500, 1200.92004, -912.87000, 50.57000,   359.70001, 267.42999, 95.42000);
	CreateDynamicObject(16500, 1198.42004, -913.10999, 50.56000,   359.70001, 267.42999, 95.42000);
	CreateDynamicObject(1649, 1199.88000, -911.19000, 48.48000,   0.00000, 270.13000, 5.37000);
	CreateDynamicObject(1649, 1197.43005, -911.42999, 48.48000,   0.00000, 270.13000, 5.37000);
	CreateDynamicObject(3280, 1202.29004, -910.89001, 49.92000,   271.29999, 180.00000, 187.00999);
	CreateDynamicObject(18553, 1200.08997, -914.29999, 47.12000,   270.34000, 45.04000, 50.75000);
	CreateDynamicObject(18553, 1198.79004, -914.40997, 47.12000,   270.34000, 45.04000, 50.74000);
	CreateDynamicObject(18553, 1197.42004, -914.53003, 47.12000,   270.34000, 45.04000, 50.74000);
	CreateDynamicObject(2518, 1203.04004, -913.96997, 47.10000,   0.00000, 0.00000, 188.67999);
	CreateDynamicObject(2518, 1201.81995, -914.12000, 47.10000,   0.00000, 0.00000, 188.67000);
	CreateDynamicObject(2514, 1199.44995, -914.45001, 47.02000,   0.00000, 0.00000, 186.71001);
	CreateDynamicObject(2514, 1198.06995, -914.59003, 47.02000,   0.00000, 0.00000, 186.71001);
	CreateDynamicObject(2514, 1196.75000, -914.73999, 47.02000,   0.00000, 0.00000, 186.71001);
	CreateDynamicObject(984, 1185.70996, -900.52002, 47.70000,   0.00000, 0.00000, 6.91000);
	CreateDynamicObject(984, 1186.67004, -908.45001, 47.70000,   0.00000, 0.00000, 6.90000);
	CreateDynamicObject(984, 1191.29004, -893.41998, 47.70000,   0.00000, 358.57001, 97.06000);
	CreateDynamicObject(984, 1194.44995, -893.06000, 47.70000,   0.00000, 358.57001, 97.05000);
	CreateDynamicObject(984, 1194.44995, -893.06000, 47.70000,   0.00000, 358.57001, 97.05000);
	CreateDynamicObject(984, 1201.01001, -892.90002, 41.91000,   271.54001, 291.60999, 299.25000);
	CreateDynamicObject(626, 1200.43994, -893.01001, 49.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(626, 1185.69995, -894.81000, 49.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1195.00000, -913.06000, 47.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1187.98999, -914.00000, 47.75000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1364, 1191.57996, -913.39001, 47.81000,   0.00000, 0.00000, 187.74001);
	CreateDynamicObject(3802, 1202.67004, -901.91998, 49.46000,   0.00000, 0.00000, 9.99000);
	CreateDynamicObject(3802, 1202.16003, -893.77002, 49.46000,   0.00000, 0.00000, 9.98000);
	CreateDynamicObject(3802, 1201.41003, -894.82001, 49.46000,   0.00000, 0.00000, 272.17999);
	CreateDynamicObject(3802, 1210.80005, -893.56000, 49.46000,   0.00000, 0.00000, 272.17999);
	CreateDynamicObject(3920, 1214.55005, -910.31000, 50.12000,   0.00000, 0.00000, 186.14000);
	CreateDynamicObject(3802, 1209.75000, -909.62000, 44.30000,   0.00000, 0.00000, 9.98000);
	CreateDynamicObject(3802, 1208.72998, -902.33002, 43.90000,   0.00000, 0.00000, 9.98000);
	CreateDynamicObject(3802, 1216.69995, -909.08002, 43.90000,   0.00000, 0.00000, 92.76000);
	CreateDynamicObject(3802, 1220.37000, -908.60999, 43.90000,   0.00000, 0.00000, 92.76000);
	CreateDynamicObject(3802, 1218.10999, -897.84003, 43.90000,   0.00000, 0.00000, 181.23000);
	CreateDynamicObject(3802, 1217.32996, -891.96002, 43.90000,   0.00000, 0.00000, 181.22000);
	CreateDynamicObject(3802, 1218.29004, -892.70001, 43.90000,   0.00000, 0.00000, 275.23999);
	CreateDynamicObject(1280, 1188.15002, -894.13000, 47.43000,   0.00000, 0.00000, 96.67000);
	CreateDynamicObject(1280, 1197.47998, -893.14001, 47.43000,   0.00000, 0.00000, 97.03000);
	CreateDynamicObject(638, 1192.90002, -893.65997, 47.76000,   0.00000, 0.00000, 276.89999);
	CreateDynamicObject(9833, 1192.27002, -903.02002, 49.28000,   0.00000, 0.00000, 5.71000);
	CreateDynamicObject(1280, 1185.77002, -897.77002, 47.43000,   0.00000, 0.00000, 187.23000);
	CreateDynamicObject(1280, 1186.83997, -905.98999, 47.43000,   0.00000, 0.00000, 187.23000);
	CreateDynamicObject(638, 1186.25000, -901.83002, 47.76000,   0.00000, 0.00000, 6.42000);
	CreateDynamicObject(638, 1187.27002, -910.28998, 47.76000,   0.00000, 0.00000, 6.42000);
	CreateDynamicObject(1432, 1196.21997, -897.54999, 47.06000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1189.92004, -898.59003, 47.06000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1191.18005, -908.27002, 47.06000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1432, 1198.03003, -907.71002, 47.06000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3472, 1192.81995, -897.04999, 42.98000,   0.00000, 0.00000, 332.89999);
	CreateDynamicObject(3472, 1194.25000, -908.09998, 42.98000,   0.00000, 0.00000, 149.22000);
	CreateDynamicObject(14399, 1212.25000, -908.91998, 41.90000,   0.00000, 0.00000, 276.79001);
	CreateDynamicObject(3498, 1210.02002, -897.78003, 38.71000,   0.54000, 0.00000, 276.42999);
	CreateDynamicObject(3498, 1208.21997, -898.09003, 38.71000,   0.54000, 0.00000, 276.42999);
	CreateDynamicObject(3280, 1209.03003, -897.90997, 42.45000,   270.13000, 0.00000, 8.87000);
	CreateDynamicObject(3498, 1212.58997, -897.45001, 38.75000,   0.54000, 0.00000, 278.95001);
	CreateDynamicObject(3498, 1212.98999, -897.40997, 38.75000,   0.53000, 0.00000, 278.94000);
	CreateDynamicObject(1825, 1218.60999, -903.42999, 42.04000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1218.07996, -899.70001, 42.04000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12958, 1213.32996, -897.88000, 43.92000,   0.00000, 0.00000, 187.53000);
	CreateDynamicObject(3095, 1215.30005, -902.02002, 46.51000,   0.00000, 0.00000, 7.19000);
	CreateDynamicObject(2964, 1206.69995, -907.94000, 47.08000,   0.00000, 0.00000, 275.29999);
	CreateDynamicObject(2964, 1210.73999, -907.83002, 47.08000,   0.00000, 0.00000, 275.29999);
	CreateDynamicObject(3004, 1206.95996, -908.29999, 47.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3004, 1206.90002, -908.07001, 47.99000,   0.00000, 0.00000, 25.68000);
	CreateDynamicObject(3004, 1211.04004, -908.40002, 47.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3004, 1211.28003, -907.69000, 47.99000,   0.00000, 0.00000, 44.22000);
	CreateDynamicObject(970, 1213.02002, -897.84003, 47.62000,   0.00000, 0.00000, 7.25000);
	CreateDynamicObject(970, 1210.57996, -895.56000, 47.62000,   0.00000, 0.00000, 98.36000);
	CreateDynamicObject(2286, 1212.03003, -909.81000, 49.27000,   0.00000, 0.00000, 186.86000);
	CreateDynamicObject(1703, 1219.34998, -905.21002, 47.07000,   0.00000, 0.00000, 277.06000);
	CreateDynamicObject(1703, 1218.92004, -908.64001, 47.07000,   0.00000, 0.00000, 186.95000);
	CreateDynamicObject(1416, 1203.93994, -900.15997, 47.65000,   0.00000, 0.00000, 278.26999);
	CreateDynamicObject(1416, 1203.72998, -898.75000, 47.65000,   0.00000, 0.00000, 278.26001);
	CreateDynamicObject(1814, 1217.06995, -907.02002, 47.07000,   0.00000, 0.00000, 7.51000);
	CreateDynamicObject(1958, 1204.06006, -900.51001, 48.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14820, 1203.90002, -899.09998, 48.34000,   0.00000, 0.00000, 276.98001);
	CreateDynamicObject(1703, 1215.70996, -899.53003, 47.07000,   0.00000, 359.76001, 8.17000);
	CreateDynamicObject(1703, 1218.62000, -899.96997, 47.07000,   0.00000, 359.76001, 278.54001);
	CreateDynamicObject(1814, 1216.43005, -901.82001, 47.07000,   0.00000, 0.00000, 7.50000);
	CreateDynamicObject(1487, 1213.48999, -903.53003, 43.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1213.19995, -901.78998, 43.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1213.09998, -899.92999, 43.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1213.77002, -906.09998, 43.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1487, 1213.60999, -908.40002, 43.48000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1213.45996, -904.54999, 43.28000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1208.33997, -899.75000, 43.27000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1520, 1208.31995, -898.58002, 43.92000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1541, 1208.12000, -901.52002, 43.40000,   0.00000, 0.00000, 279.31000);
	CreateDynamicObject(1543, 1208.31995, -900.21002, 43.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1543, 1208.26001, -898.91998, 43.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1543, 1208.35999, -899.51001, 43.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1208.41003, -900.46002, 43.79000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1544, 1208.31006, -899.32001, 43.21000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1664, 1208.43994, -899.96997, 43.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16151, 1205.54004, -894.26001, 47.38000,   0.00000, 0.00000, 97.26000);
	CreateDynamicObject(1226, 1229.65002, -918.40997, 45.77000,   0.00000, 0.00000, 9.53000);
	CreateDynamicObject(1360, 1230.68005, -915.35999, 42.61000,   0.00000, 0.00000, 9.52000);
	CreateDynamicObject(1360, 1229.75000, -910.04999, 42.73000,   0.00000, 0.00000, 9.51000);
	CreateDynamicObject(1360, 1228.94995, -905.21997, 42.71000,   0.00000, 0.00000, 9.51000);
	CreateDynamicObject(1360, 1228.12000, -900.23999, 42.63000,   0.00000, 0.00000, 9.51000);
	CreateDynamicObject(1360, 1227.27002, -895.14001, 42.65000,   0.00000, 0.00000, 9.51000);
	CreateDynamicObject(1360, 1226.43005, -890.19000, 42.73000,   0.00000, 0.00000, 9.51000);
	CreateDynamicObject(1360, 1225.63000, -885.46997, 42.71000,   0.00000, 0.00000, 9.51000);
	CreateDynamicObject(1360, 1224.84998, -880.78003, 42.66000,   0.00000, 0.00000, 9.51000);
	CreateDynamicObject(1360, 1224.02002, -875.77002, 42.69000,   0.00000, 0.00000, 9.51000);
	CreateDynamicObject(1226, 1228.84998, -913.29999, 45.77000,   0.00000, 0.00000, 9.53000);
	CreateDynamicObject(1226, 1227.92004, -908.21997, 45.77000,   0.00000, 0.00000, 9.53000);
	CreateDynamicObject(1226, 1227.06995, -902.96997, 45.77000,   0.00000, 0.00000, 9.53000);
	CreateDynamicObject(1226, 1226.25000, -898.13000, 45.77000,   0.00000, 0.00000, 9.53000);
	CreateDynamicObject(1226, 1225.42004, -893.12000, 45.77000,   0.00000, 0.00000, 9.53000);
	CreateDynamicObject(1226, 1224.57996, -888.14001, 45.77000,   0.00000, 0.00000, 9.53000);
	CreateDynamicObject(1226, 1223.82996, -883.58002, 45.77000,   0.00000, 0.00000, 9.53000);
	CreateDynamicObject(1226, 1223.06995, -878.95001, 45.77000,   0.00000, 0.00000, 9.53000);
	CreateDynamicObject(1226, 1218.33997, -872.03003, 45.77000,   0.00000, 0.00000, 98.92000);
	CreateDynamicObject(1360, 1220.29004, -870.13000, 42.62000,   0.00000, 0.00000, 280.39001);
	CreateDynamicObject(1360, 1215.19995, -871.04999, 42.76000,   0.00000, 0.00000, 280.39001);
	CreateDynamicObject(1360, 1210.48999, -871.88000, 42.69000,   0.00000, 0.00000, 280.39001);
	CreateDynamicObject(1360, 1205.75000, -872.71002, 42.79000,   0.00000, 0.00000, 280.39001);
	CreateDynamicObject(1360, 1201.27002, -873.48999, 42.86000,   0.00000, 0.00000, 280.39001);
	CreateDynamicObject(1360, 1196.79004, -874.27002, 42.85000,   0.00000, 0.00000, 280.39001);
	CreateDynamicObject(1360, 1191.63000, -875.17999, 42.88000,   0.00000, 0.00000, 280.39001);
	CreateDynamicObject(1360, 1186.73999, -876.06000, 42.91000,   0.00000, 0.00000, 280.39001);
	CreateDynamicObject(1360, 1181.82996, -876.90997, 43.00000,   0.00000, 0.00000, 280.39001);
	CreateDynamicObject(1360, 1176.76001, -877.79999, 42.98000,   0.00000, 0.00000, 280.39001);
	CreateDynamicObject(1360, 1172.20996, -878.59998, 42.99000,   0.00000, 0.00000, 280.39001);
	CreateDynamicObject(1226, 1213.19995, -872.90002, 45.77000,   0.00000, 0.00000, 98.92000);
	CreateDynamicObject(1226, 1208.47998, -873.71002, 45.84000,   0.00000, 0.00000, 98.92000);
	CreateDynamicObject(1226, 1204.03003, -874.53998, 45.80000,   0.00000, 0.00000, 98.92000);
	CreateDynamicObject(1226, 1199.38000, -875.34003, 45.85000,   0.00000, 0.00000, 98.92000);
	CreateDynamicObject(1226, 1194.56995, -876.17999, 45.92000,   0.00000, 0.00000, 98.92000);
	CreateDynamicObject(1226, 1189.64001, -877.06000, 45.94000,   0.00000, 0.00000, 98.92000);
	CreateDynamicObject(1226, 1184.65002, -877.91998, 45.96000,   0.00000, 0.00000, 98.92000);
	CreateDynamicObject(1226, 1179.71997, -878.81000, 46.05000,   0.00000, 0.00000, 98.92000);
	CreateDynamicObject(1226, 1174.93005, -879.65002, 46.02000,   0.00000, 0.00000, 98.92000);
	CreateDynamicObject(1226, 1169.72998, -880.51001, 46.02000,   0.00000, 0.00000, 98.92000);
	// Bar esquina
	CreateDynamicObject(1569, 1647.90, -1460.25, 12.50,   0.00, 0.00, 90.00);
	CreateDynamicObject(1569, 1647.98, -1457.46, 12.50,   0.00, 0.00, 200.00);
	CreateDynamicObject(13007, 1638.67, -1459.50, 10.39,   0.00, 0.00, 0.00);
	CreateDynamicObject(16151, 1637.44, -1459.56, 12.88,   0.00, 0.00, 180.00);
	CreateDynamicObject(2964, 1641.40, -1455.20, 12.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(2964, 1645.50, -1455.20, 12.60,   0.00, 0.00, 0.00);
	CreateDynamicObject(2289, 1643.29, -1452.35, 14.20,   0.00, 0.00, 0.00);
	CreateDynamicObject(2287, 1636.85, -1457.60, 13.90,   0.00, 0.00, 90.00);
	CreateDynamicObject(2280, 1642.51, -1463.37, 13.85,   0.00, 0.00, 180.00);
	CreateDynamicObject(3859, 1647.95, -1454.80, 12.14,   0.00, 0.00, 17.06);
	CreateDynamicObject(3859, 1647.95, -1462.85, 12.14,   0.00, 0.00, 17.06);
	CreateDynamicObject(2357, 1643.83, -1461.70, 12.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(1703, 1646.16, -1463.36, 12.55,   0.00, 0.00, 180.00);
	CreateDynamicObject(1703, 1643.61, -1463.36, 12.55,   0.00, 0.00, 180.00);
	CreateDynamicObject(1703, 1640.84, -1462.69, 12.55,   0.00, 0.00, 90.00);
	CreateDynamicObject(2011, 1647.09, -1463.37, 12.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(2241, 1647.47, -1452.72, 13.05,   0.00, 0.00, 0.00);
	CreateDynamicObject(2251, 1636.65, -1463.58, 13.40,   0.00, 0.00, 0.00);
	CreateDynamicObject(338, 1644.66, -1452.37, 13.50,   355.00, 0.00, 0.00);
	CreateDynamicObject(338, 1645.52, -1452.37, 13.50,   355.00, 0.00, 0.00);
	CreateDynamicObject(338, 1642.29, -1452.37, 13.50,   355.00, 0.00, 0.00);
	CreateDynamicObject(338, 1641.46, -1452.37, 13.50,   355.00, 0.00, 0.00);
	CreateDynamicObject(2011, 1636.95, -1452.80, 12.55,   0.00, 0.00, 0.00);
	CreateDynamicObject(2596, 1638.54, -1452.62, 14.36,   0.00, 0.00, 0.00);
	CreateDynamicObject(1936, 1646.35, -1452.10, 13.71,   0.00, 0.00, 90.00);
	CreateDynamicObject(19366, 1646.35, -1452.23, 13.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(19366, 1643.14, -1452.23, 13.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(19366, 1639.93, -1452.23, 13.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(19366, 1636.73, -1452.23, 13.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(19366, 1636.30, -1453.91, 13.43,   0.00, 0.00, 0.00);
	CreateDynamicObject(19366, 1636.30, -1457.11, 13.43,   0.00, 0.00, 0.00);
	CreateDynamicObject(19366, 1636.30, -1460.32, 13.43,   0.00, 0.00, 0.00);
	CreateDynamicObject(19366, 1636.30, -1463.53, 13.43,   0.00, 0.00, 0.00);
	CreateDynamicObject(19366, 1646.35, -1463.97, 13.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(19366, 1643.14, -1463.97, 13.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(19366, 1639.93, -1463.97, 13.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(19366, 1636.74, -1463.97, 13.43,   0.00, 0.00, 90.00);
	CreateDynamicObject(19366, 1646.35, -1457.57, 15.09,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1646.35, -1454.07, 15.09,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1646.35, -1461.06, 15.09,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1646.35, -1464.56, 15.09,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1643.14, -1454.07, 15.09,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1643.14, -1457.57, 15.09,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1643.14, -1461.06, 15.09,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1643.14, -1464.56, 15.09,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1639.93, -1464.56, 15.10,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1639.93, -1461.06, 15.10,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1639.93, -1457.57, 15.09,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1639.93, -1454.07, 15.09,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1636.73, -1464.56, 15.10,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1636.73, -1461.06, 15.10,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1636.73, -1457.57, 15.10,   0.00, 90.00, 90.00);
	CreateDynamicObject(19366, 1636.73, -1454.07, 15.10,   0.00, 90.00, 90.00);
	CreateDynamicObject(1704, 1646.78, -1461.87, 12.55,   0.00, 0.00, 270.00);
	CreateDynamicObject(1704, 1646.78, -1460.69, 12.55,   0.00, 0.00, 270.00);
	CreateDynamicObject(16780, 1643.93, -1461.44, 15.17,   0.00, 0.00, 0.00);
	CreateDynamicObject(16780, 1643.93, -1455.19, 15.17,   0.00, 0.00, 0.00);
	//Mecanicos
	CreateDynamicObject(19457, 1836.77002, -1411.06006, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1831.87000, -1406.32996, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19365, 1818.72998, -1406.32996, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1836.80005, -1443.05005, 14.07000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3851, 1828.87000, -1450.83997, 14.07000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19365, 1821.09998, -1450.80005, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1813.96997, -1449.85999, 14.07000,   0.00000, 0.00000, 80.01000);
	CreateDynamicObject(19457, 1806.31006, -1448.50000, 17.80000,   0.00000, 0.00000, 80.01000);
	CreateDynamicObject(19457, 1801.69995, -1442.95996, 17.80000,   0.00000, 0.00000, 359.07999);
	CreateDynamicObject(19365, 1801.80005, -1437.88000, 17.80000,   0.00000, 0.00000, 359.07999);
	CreateDynamicObject(19394, 1835.64001, -1449.73999, 14.30000,   0.00000, 0.00000, 313.32999);
	CreateDynamicObject(19394, 1836.77002, -1435.78003, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1818.35999, -1430.30005, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1832.00000, -1430.30005, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1836.81006, -1428.58997, 14.05000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1836.77002, -1425.56995, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1806.73999, -1436.35999, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19365, 1813.63000, -1431.98999, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 1813.64001, -1434.68994, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 1812.14001, -1436.38000, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19365, 1815.15002, -1421.71997, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19438, 1816.31995, -1421.68005, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19438, 1813.63000, -1422.58997, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19438, 1813.62000, -1429.41003, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1817.22998, -1411.21997, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1817.20996, -1416.95996, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19438, 1836.75000, -1420.26001, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19438, 1836.76001, -1416.21997, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3278, 1836.78003, -1422.03003, 17.74000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19394, 1824.77002, -1430.29004, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19438, 1826.77002, -1430.28003, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3361, 1818.84998, -1431.34998, 14.08000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19457, 1801.73999, -1442.80005, 14.30000,   0.00000, 0.00000, 359.07999);
	CreateDynamicObject(19365, 1801.81995, -1437.88000, 14.30000,   0.00000, 0.00000, 359.07999);
	CreateDynamicObject(19457, 1806.56995, -1436.35999, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19365, 1811.93005, -1436.34998, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19411, 1836.78003, -1447.08997, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 1821.62000, -1450.81006, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1831.66003, -1450.81995, 17.70000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19438, 1836.76001, -1407.04004, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 1835.64001, -1449.73999, 17.80000,   0.00000, 0.00000, 313.32999);
	CreateDynamicObject(19457, 1806.31006, -1448.50000, 14.30000,   0.00000, 0.00000, 80.01000);
	CreateDynamicObject(19457, 1814.76001, -1449.96997, 17.80000,   0.00000, 0.00000, 80.01000);
	CreateDynamicObject(19457, 1824.31006, -1450.80005, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19411, 1832.92004, -1450.79004, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19411, 1830.42004, -1450.81995, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1649, 1831.66003, -1450.83997, 17.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19411, 1836.76001, -1444.58997, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1649, 1836.76001, -1445.83997, 17.70000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1649, 1836.78003, -1445.83997, 17.70000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1836.76001, -1438.19995, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 1836.78003, -1418.15002, 14.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1836.78003, -1428.56006, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19411, 1836.77002, -1422.18005, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19411, 1836.76001, -1419.00000, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19411, 1836.77002, -1415.83997, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19411, 1836.76001, -1412.66003, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3278, 1836.76001, -1419.10999, 17.74000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3278, 1836.78003, -1415.92004, 17.74000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3278, 1836.75000, -1412.66003, 17.74000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19365, 1836.76001, -1409.44995, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1831.83997, -1406.33997, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1822.21997, -1406.32996, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1817.20996, -1411.06006, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1817.21997, -1416.95996, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19438, 1817.98999, -1406.33997, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1813.64001, -1426.43994, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19438, 1816.31995, -1421.68994, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19438, 1827.10999, -1449.98999, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 1815.15002, -1421.69995, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1813.62000, -1431.63000, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1828.14001, -1430.30005, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1818.51001, -1430.30005, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19411, 1835.16003, -1430.31006, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19438, 1833.16003, -1430.32996, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19378, 1826.42004, -1435.63000, 16.05600,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19378, 1826.40002, -1445.62000, 16.06000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1834.39001, -1448.42004, 16.05800,   0.00000, 90.00000, 313.32999);
	CreateDynamicObject(19378, 1831.89001, -1435.60999, 16.06000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19378, 1831.88452, -1443.40271, 16.06400,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19366, 1832.81995, -1449.00000, 16.06000,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19457, 1821.69995, -1437.18005, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19411, 1821.69995, -1443.59998, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19411, 1821.69995, -1449.10999, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 1821.70996, -1446.34998, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3278, 1821.69995, -1443.59998, 17.74000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3278, 1821.69995, -1449.09998, 17.74000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19457, 1826.58997, -1432.44995, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19394, 1827.12000, -1444.70996, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19457, 1831.84998, -1439.81995, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19365, 1827.12000, -1441.50000, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 1827.13000, -1447.92004, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19394, 1833.37000, -1441.52002, 17.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19365, 1835.06995, -1443.04004, 17.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19375, 1822.38000, -1411.07996, 19.49000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1831.58997, -1411.07996, 19.51000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1831.58997, -1420.69995, 19.51000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1822.38000, -1420.69995, 19.49000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1831.58997, -1430.32996, 19.51000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1821.09998, -1430.29004, 19.49000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1831.57996, -1439.95996, 19.51000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1821.08997, -1439.92004, 19.51000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1807.01001, -1441.09998, 19.51000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1829.27002, -1446.05005, 19.53000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19375, 1815.14001, -1445.20996, 19.53000,   0.00000, 90.00000, 350.22000);
	CreateDynamicObject(19375, 1807.55005, -1443.88000, 19.49000,   0.00000, 90.00000, 350.22000);
	CreateDynamicObject(19375, 1824.65002, -1446.05005, 19.49000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1815.39001, -1426.45996, 19.51000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1815.40002, -1436.07996, 19.55000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1813.31995, -1441.09998, 19.50000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19448, 1835.06995, -1443.89001, 19.55000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(19356, 1834.46997, -1448.51001, 19.51000,   0.00000, 90.00000, 313.32999);
	CreateDynamicObject(3498, 1821.89001, -1440.94995, 11.54000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1502, 1827.07996, -1443.91003, 16.09600,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1502, 1833.35803, -1440.73401, 16.05000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2460, 1818.85999, -1450.30005, 12.55000,   0.00000, 0.00000, 169.92000);
	CreateDynamicObject(2461, 1832.45996, -1450.43994, 12.55000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19457, 1812.00000, -1444.59998, 14.30000,   0.00000, 0.00000, 348.34000);
	CreateDynamicObject(19457, 1812.68005, -1441.18005, 17.80000,   0.00000, 0.00000, 348.34000);
	CreateDynamicObject(19457, 1812.00000, -1444.59998, 17.80000,   0.00000, 0.00000, 348.34000);
	CreateDynamicObject(19457, 1812.68005, -1441.18005, 14.30000,   0.00000, 0.00000, 348.34000);
	CreateDynamicObject(2460, 1816.07996, -1449.78003, 12.55000,   0.00000, 0.00000, 169.92000);
	CreateDynamicObject(2460, 1813.30005, -1449.28003, 12.55000,   0.00000, 0.00000, 169.92000);
	CreateDynamicObject(2458, 1821.63000, -1450.31995, 12.55000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2423, 1826.97998, -1431.80005, 12.55000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2424, 1826.97998, -1430.87000, 12.55000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2424, 1828.02002, -1431.87000, 12.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2424, 1828.94995, -1431.87000, 12.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2424, 1829.88000, -1431.87000, 12.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2424, 1830.81006, -1431.87000, 12.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2433, 1836.42004, -1431.81995, 12.56000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2433, 1836.41003, -1438.37000, 12.56000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2433, 1836.41003, -1446.82996, 12.56000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2376, 1817.68005, -1444.95996, 12.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2376, 1817.82996, -1437.63000, 12.55000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2385, 1811.81995, -1446.02002, 12.55000,   0.00000, 0.00000, 78.23000);
	CreateDynamicObject(2385, 1812.28003, -1443.78003, 12.55000,   0.00000, 0.00000, 78.23000);
	CreateDynamicObject(2385, 1812.75000, -1441.55005, 12.55000,   0.00000, 0.00000, 78.23000);
	CreateDynamicObject(2385, 1813.22998, -1439.27002, 12.55000,   0.00000, 0.00000, 78.23000);
	CreateDynamicObject(2369, 1828.27002, -1431.64001, 13.61000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1886, 1835.54004, -1431.50000, 15.98000,   0.00000, 0.00000, 299.69000);
	CreateDynamicObject(14578, 1831.80005, -1422.13000, 18.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14687, 1830.54004, -1451.67004, 14.49000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14687, 1830.56995, -1435.95996, 14.53000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14687, 1830.55005, -1443.67004, 14.53000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18608, 1816.52002, -1441.50000, 18.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2967, 1827.10999, -1431.56006, 13.61000,   0.00000, 0.00000, 139.77000);
	CreateDynamicObject(3281, 1836.54004, -1443.08997, 13.21000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2461, 1828.85999, -1450.43994, 12.55000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2461, 1825.37000, -1450.43994, 12.55000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1003, 1818.18994, -1450.10999, 12.80000,   0.00000, 0.00000, 349.23999);
	CreateDynamicObject(1008, 1828.92004, -1450.42004, 12.82000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1009, 1825.43005, -1450.38000, 12.82000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1010, 1832.45996, -1450.39001, 12.82000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1001, 1815.39001, -1449.60999, 12.79000,   0.00000, 0.00000, 349.54999);
	CreateDynamicObject(1002, 1812.58997, -1449.06006, 12.80000,   0.00000, 0.00000, 350.29001);
	CreateDynamicObject(1076, 1812.09998, -1446.07996, 14.42000,   0.00000, 0.00000, 347.54999);
	CreateDynamicObject(3096, 1835.70996, -1449.89001, 17.68000,   0.00000, 0.00000, 43.47000);
	CreateDynamicObject(2798, 1819.56995, -1437.27002, 12.90000,   90.00000, 0.00000, 19.00000);
	CreateDynamicObject(2798, 1818.47998, -1437.33997, 12.90000,   90.00000, 0.00000, 226.75000);
	CreateDynamicObject(1076, 1812.35999, -1444.98999, 14.42000,   0.00000, 0.00000, 347.54999);
	CreateDynamicObject(1076, 1812.72998, -1442.68005, 14.42000,   0.00000, 0.00000, 347.54999);
	CreateDynamicObject(1001, 1818.82996, -1444.79004, 13.42000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1002, 1818.83997, -1444.39001, 13.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1499, 1823.98999, -1430.28003, 12.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1830.55005, -1444.93005, 13.08000,   0.00000, 0.00000, 316.64001);
	CreateDynamicObject(2773, 1828.93005, -1445.67004, 13.06000,   0.00000, 0.00000, 273.25000);
	CreateDynamicObject(2773, 1831.27002, -1443.29004, 13.06000,   0.00000, 0.00000, 355.78000);
	CreateDynamicObject(1008, 1836.01819, -1424.99500, 14.64700,   0.00000, 0.00000, 68.76850);
	CreateDynamicObject(1010, 1836.06226, -1424.95105, 14.18500,   0.00000, 0.00000, 304.12601);
	CreateDynamicObject(1009, 1836.01819, -1424.95105, 13.83300,   0.00000, 0.00000, 59.88499);
	CreateDynamicObject(19456, 1831.88000, -1422.35999, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1650, 1836.16309, -1426.39990, 14.13604,   0.00000, 0.00000, 253.25999);
	CreateDynamicObject(3761, 1833.56006, -1407.20996, 14.49000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(939, 1818.42004, -1409.03003, 14.99000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(942, 1818.40002, -1414.27002, 14.99000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(930, 1836.05005, -1423.33997, 13.04000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(927, 1827.91003, -1406.44995, 13.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(958, 1836.00000, -1413.12000, 13.44000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1431, 1817.85999, -1429.84998, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 1835.04004, -1421.05005, 13.19000,   0.00000, 90.00000, 35.83000);
	CreateDynamicObject(923, 1817.91003, -1418.93994, 13.44000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3278, 1835.10999, -1430.31995, 17.74000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2674, 1830.18005, -1424.96997, 12.58000,   0.00000, 0.00000, 246.03000);
	CreateDynamicObject(1428, 1836.24280, -1419.84790, 14.09000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1428, 1822.48999, -1429.77002, 14.09000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1436, 1815.31995, -1422.55005, 14.11000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1437, 1817.90002, -1420.45996, 13.75000,   3.50000, 0.00000, 90.00000);
	CreateDynamicObject(2886, 1813.68005, -1428.95996, 14.06000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3280, 1833.71997, -1426.23999, 12.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1832.12000, -1426.23999, 12.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3393, 1831.73999, -1429.60999, 12.56000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16779, 1832.62000, -1447.44995, 19.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2008, 1833.87000, -1448.64001, 16.19000,   0.00000, 0.00000, 42.88000);
	CreateDynamicObject(1671, 1835.53003, -1449.08997, 16.60000,   0.00000, 0.00000, 223.81000);
	CreateDynamicObject(2120, 1833.56995, -1446.39001, 16.82000,   0.00000, 0.00000, 124.24000);
	CreateDynamicObject(2120, 1832.44995, -1447.43994, 16.82000,   0.00000, 0.00000, 153.33000);
	CreateDynamicObject(2007, 1828.42004, -1450.18994, 16.17000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2163, 1836.64001, -1446.43994, 16.19000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2162, 1836.65002, -1444.43994, 16.19000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2164, 1834.26001, -1443.16003, 16.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2292, 1827.69995, -1440.42004, 16.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2291, 1828.18994, -1440.41003, 16.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2291, 1829.17004, -1440.41003, 16.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2291, 1830.15002, -1440.42004, 16.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2291, 1827.71997, -1441.89001, 16.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2291, 1827.71997, -1442.87000, 16.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2608, 1827.43994, -1448.06006, 17.61000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1808, 1823.44641, -1429.97046, 12.56000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2190, 1829.31995, -1432.12000, 13.60000,   0.00000, 0.00000, 190.07001);
	CreateDynamicObject(2514, 1834.87000, -1440.43005, 16.19000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2518, 1836.18005, -1441.05005, 15.96000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19425, 1837.17004, -1400.76001, 12.56000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1799.85999, -1447.43005, 12.56000,   0.00000, 0.00000, 160.16000);
	CreateDynamicObject(10281, 1832.12000, -1405.47998, 16.05000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1494, 1835.09998, -1450.22998, 12.56000,   0.00000, 0.00000, 44.15000);
	CreateDynamicObject(1494, 1836.78003, -1436.52002, 12.56000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2254, 1836.65002, -1435.02002, 17.80000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2256, 1834.12000, -1439.71997, 17.86000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2262, 1829.92004, -1439.23999, 17.48000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2257, 1826.82996, -1432.57996, 17.69000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2267, 1821.83997, -1436.87000, 17.86000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2010, 1836.10999, -1439.20996, 16.18000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2010, 1822.39001, -1433.10999, 16.18000,   0.00000, 0.00000, 92.61000);
	CreateDynamicObject(2010, 1826.54004, -1449.89001, 16.18000,   0.00000, 0.00000, 92.61000);
	CreateDynamicObject(1702, 1825.07996, -1450.16003, 16.17000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2886, 1813.56995, -1428.94995, 14.06000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2886, 1827.39001, -1406.27002, 14.06000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(17969, 1836.90002, -1414.28003, 14.04000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(2690, 1820.39001, -1429.95996, 12.91000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2690, 1836.12329, -1426.82239, 14.18010,   0.00000, 0.00000, 242.43840);
	CreateDynamicObject(2596, 1813.30005, -1440.28003, 14.81000,   0.00000, 0.00000, 77.54000);
	CreateDynamicObject(2596, 1821.44995, -1450.41003, 15.13000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1697, 1829.72998, -1443.82996, 21.25000,   0.00000, 0.00000, 222.00000);
	CreateDynamicObject(1697, 1830.40002, -1435.59998, 21.25000,   0.00000, 0.00000, 222.00000);
	CreateDynamicObject(1697, 1830.76001, -1426.94995, 21.25000,   0.00000, 0.00000, 222.00000);
	CreateDynamicObject(1237, 1837.27002, -1398.45996, 12.55000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1653, 1830.41003, -1391.20996, 13.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1653, 1817.59998, -1391.20996, 13.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1653, 1804.80005, -1391.20996, 13.22000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19425, 1837.17004, -1393.00000, 12.56000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1837.17004, -1403.91003, 12.56000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1653, 1788.19995, -1436.93994, 13.22000,   0.00000, 0.00000, 41.79000);
	CreateDynamicObject(1653, 1803.09998, -1423.51001, 13.22000,   0.00000, 0.00000, 41.79000);
	CreateDynamicObject(19425, 1837.17004, -1396.14001, 12.56000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19425, 1796.93005, -1446.38000, 12.56000,   0.00000, 0.00000, 160.16000);
	CreateDynamicObject(1653, 1789.38000, -1443.46997, 13.22000,   0.00000, 0.00000, 340.35001);
	CreateDynamicObject(11392, 1827.19897, -1419.76331, 12.56000,   0.00000, 0.00000, 64.76000);
	CreateDynamicObject(11392, 1824.01001, -1414.95996, 12.56000,   0.00000, 0.00000, 145.48000);
	CreateDynamicObject(1327, 1835.26001, -1420.94995, 12.56000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1327, 1835.14001, -1420.75000, 13.83000,   0.00000, 90.00000, 0.45000);
	CreateDynamicObject(3280, 1831.94995, -1418.20996, 12.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1830.37000, -1418.20996, 12.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1832.12000, -1413.32996, 12.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3280, 1830.53003, -1413.32996, 12.56000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19437, 1826.27002, -1422.35999, 14.30000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2007, 1827.56995, -1421.73999, 12.55000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3393, 1831.19995, -1421.65002, 12.56000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(18635, 1831.57996, -1421.50000, 13.45000,   90.00000, 90.00000, 55.00000);
	CreateDynamicObject(19903, 1831.32629, -1423.07788, 12.55660,   0.00000, 0.00000, 214.31485);
	CreateDynamicObject(19900, 1827.40479, -1429.85461, 12.55700,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19900, 1828.19995, -1429.65796, 12.55700,   0.00000, 0.00000, -21.00000);
	CreateDynamicObject(19917, 1831.47961, -1407.35095, 13.27400,   0.00000, 0.00000, 275.00000);
	CreateDynamicObject(19899, 1836.23523, -1425.80042, 12.56670,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19815, 1836.68604, -1416.40344, 14.11510,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(19815, 1827.77002, -1422.47327, 14.04910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19899, 1836.12512, -1410.03931, 12.56670,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1075, 1836.64026, -1413.88428, 16.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1076, 1836.64026, -1414.88428, 16.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1077, 1836.64026, -1415.88428, 16.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1078, 1836.64026, -1416.88428, 16.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1079, 1836.64026, -1417.88428, 16.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1080, 1836.64026, -1418.88428, 16.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1083, 1836.64026, -1413.88428, 15.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1084, 1836.64026, -1414.88428, 15.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1085, 1836.62024, -1415.88428, 15.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1096, 1836.62024, -1416.88428, 15.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1097, 1836.62024, -1417.88428, 15.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1082, 1836.64026, -1412.88428, 15.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1074, 1836.64026, -1412.88428, 16.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1073, 1836.64026, -1411.88428, 16.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1081, 1836.64026, -1411.88428, 15.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1098, 1836.62024, -1418.88428, 15.54290,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(19366, 1832.81995, -1449.00000, 16.05400,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19378, 1831.88452, -1443.40271, 16.05200,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(19621, 1835.73059, -1409.79822, 13.92980,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19621, 1835.73059, -1409.99817, 13.92980,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19621, 1836.13062, -1409.79822, 13.92980,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19621, 1836.13062, -1409.99817, 13.92980,   0.00000, 0.00000, 45.00000);
	CreateDynamicObject(19622, 1833.46631, -1422.15259, 13.27100,   9.50000, 0.00000, 0.00000);
//Callejon Willowfield
	CreateDynamicObject(12957, 2457.9050292969, -1970.7340087891, 13.36674785614, 0, 0, 0);
	CreateDynamicObject(1299, 2457.6420898438, -1967.6436767578, 12.970049858093, 0, 0, 0);
	CreateDynamicObject(1299, 2449.9672851563, -1981.5068359375, 13.009767532349, 0, 0, 0);
	CreateDynamicObject(1338, 2448.7248535156, -1981.3687744141, 13.258184432983, 0, 0, 0);
	CreateDynamicObject(1327, 2440.6455078125, -1971.3641357422, 13.514849662781, 0, 0, 0);
	CreateDynamicObject(1347, 2440.2854003906, -1975.4294433594, 13.113211631775, 0, 0, 0);
	CreateDynamicObject(1349, 2452.8215332031, -1967.3859863281, 13.124292373657, 0, 0, 318);
	CreateDynamicObject(1357, 2441.4765625, -1964.4039306641, 12.813890457153, 0, 0, 0);
	CreateDynamicObject(1357, 2442.2941894531, -1968.4669189453, 12.813890457153, 0, 0, 0);
	CreateDynamicObject(1369, 2440.4321289063, -1963.1262207031, 13.168748855591, 0, 0, 40);
	CreateDynamicObject(1415, 2439.9938964844, -1965.5795898438, 12.546875, 0, 0, 88);
	CreateDynamicObject(1438, 2444.2282714844, -1971.9632568359, 12.546875, 0, 0, 0);
	CreateDynamicObject(1440, 2445.3803710938, -1972.7781982422, 13.065991401672, 0, 0, 262);
	CreateDynamicObject(1441, 2451.2390136719, -1962.3370361328, 13.205555915833, 0, 0, 0);
	CreateDynamicObject(1450, 2444.421875, -1962.5339355469, 13.147141456604, 0, 0, 0);
	CreateDynamicObject(1462, 2448.5144042969, -1962.7856445313, 12.546875, 0, 0, 0);
	CreateDynamicObject(2674, 2447.8178710938, -1963.5460205078, 12.568614959717, 0, 0, 0);
	CreateDynamicObject(2673, 2446.4812011719, -1964.2377929688, 12.634702682495, 0, 0, 0);
	CreateDynamicObject(2672, 2449.1140136719, -1964.0174560547, 12.826336860657, 0, 0, 0);
	CreateDynamicObject(2671, 2446.9274902344, -1966.6361083984, 12.546875, 0, 0, 0);
	CreateDynamicObject(2670, 2444.3828125, -1967.1302490234, 12.638927459717, 0, 0, 0);
	CreateDynamicObject(3594, 2452.4936523438, -1987.2731933594, 13.178051948547, 0, 0, 2);
	CreateDynamicObject(1570, 2446.5634765625, -1964.1044921875, 13.878001213074, 0, 0, 0);
	CreateDynamicObject(1570, 2442.4313964844, -1964.2156982422, 13.878001213074, 0, 0, 34);
	CreateDynamicObject(1570, 2453.9033203125, -1963.5849609375, 13.878001213074, 0, 0, 0);
	CreateDynamicObject(1570, 2445.0478515625, -1974.6160888672, 13.878001213074, 0, 0, 0);
	CreateDynamicObject(1570, 2447.8100585938, -1974.6257324219, 13.878001213074, 0, 0, 0);
	CreateDynamicObject(1570, 2442.5551757813, -1979.5885009766, 13.878001213074, 0, 0, 123.99996948242);
	CreateDynamicObject(1570, 2446.2729492188, -1980.6798095703, 13.878001213074, 0, 0, 177.99719238281);
	CreateDynamicObject(1570, 2440.7822265625, -1968.6605224609, 13.878001213074, 0, 0, 87.994995117188);
	CreateDynamicObject(1570, 2445.5395507813, -1968.7702636719, 13.878001213074, 0, 0, 179.98950195313);
	CreateDynamicObject(1570, 2448.8127441406, -1968.6304931641, 13.878001213074, 0, 0, 179.98901367188);
	CreateDynamicObject(1570, 2451.9873046875, -1971.5775146484, 13.885033607483, 0, 0, 51.997192382813);
//hood Willowfield y Grove
	CreateDynamicObject(1412,2308.8999023,-1543.0000000,25.5599995,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (1)
	CreateDynamicObject(1412,2314.1699219,-1543.0000000,25.5599995,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (2)
	CreateDynamicObject(1412,2319.4399414,-1543.0000000,25.5599995,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (3)
	CreateDynamicObject(1412,2324.6999512,-1543.0000000,25.5599995,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (4)
	CreateDynamicObject(1412,2327.3500977,-1540.3399658,25.5599995,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (5)
	CreateDynamicObject(1412,2327.3500977,-1535.0699463,25.5599995,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (6)
	CreateDynamicObject(1412,2327.3500977,-1529.8000488,25.5599995,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (7)
	CreateDynamicObject(1412,2327.3500977,-1524.5400391,25.5599995,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (8)
	CreateDynamicObject(1412,2324.6999512,-1513.0000000,25.5599995,0.0000000,0.0000000,180.0000000); //object(dyn_mesh_2) (9)
	CreateDynamicObject(1412,2319.4299316,-1513.0000000,25.5599995,0.0000000,0.0000000,180.0000000); //object(dyn_mesh_2) (10)
	CreateDynamicObject(1412,2314.1699219,-1513.0000000,25.5599995,0.0000000,0.0000000,180.0000000); //object(dyn_mesh_2) (11)
	CreateDynamicObject(1412,2308.8999023,-1513.0000000,25.5599995,0.0000000,0.0000000,179.9945068); //object(dyn_mesh_2) (12)
	CreateDynamicObject(1412,2327.3500977,-1515.6700439,25.5599995,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (13)
	CreateDynamicObject(1412,2306.2299805,-1540.3900146,25.5599995,0.0000000,0.0000000,270.0000000); //object(dyn_mesh_2) (14)
	CreateDynamicObject(1412,2306.2299805,-1535.1199951,25.5599995,0.0000000,0.0000000,270.0000000); //object(dyn_mesh_2) (15)
	CreateDynamicObject(1412,2306.2299805,-1515.6500244,25.5599995,0.0000000,0.0000000,270.0000000); //object(dyn_mesh_2) (16)
	CreateDynamicObject(1412,2306.2299805,-1520.9200439,25.5599995,0.0000000,0.0000000,270.0000000); //object(dyn_mesh_2) (17)
	CreateDynamicObject(1412,2306.2299805,-1526.1899414,25.5599995,0.0000000,0.0000000,270.0000000); //object(dyn_mesh_2) (18)
	CreateDynamicObject(1472,2303.1999512,-1530.6999512,25.2000008,0.0000000,0.0000000,90.0000000); //object(dyn_porch_1) (1)
	CreateDynamicObject(1412,2302.0000000,-1545.6600342,27.0799999,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (19)
	CreateDynamicObject(1412,2302.0000000,-1540.3900146,27.0799999,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (20)
	CreateDynamicObject(1412,2302.0000000,-1535.1199951,27.0799999,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (21)
	CreateDynamicObject(1412,2302.0000000,-1526.1899414,27.0799999,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (22)
	CreateDynamicObject(1412,2302.0000000,-1520.9200439,27.0799999,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (23)
	CreateDynamicObject(1412,2302.0000000,-1515.6500244,27.0799999,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (24)
	CreateDynamicObject(1412,2299.3601074,-1513.0000000,27.0799999,0.0000000,0.0000000,179.9945068); //object(dyn_mesh_2) (25)
	CreateDynamicObject(1412,2294.0900879,-1513.0000000,27.0799999,0.0000000,0.0000000,179.9945068); //object(dyn_mesh_2) (26)
	CreateDynamicObject(1412,2288.8200684,-1513.0000000,27.0799999,0.0000000,0.0000000,179.9945068); //object(dyn_mesh_2) (27)
	CreateDynamicObject(1412,2280.0000000,-1513.0000000,27.0799999,0.0000000,0.0000000,179.9945068); //object(dyn_mesh_2) (28)
	CreateDynamicObject(1412,2277.3000488,-1515.6400146,27.0799999,0.0000000,0.0000000,270.0000000); //object(dyn_mesh_2) (29)
	CreateDynamicObject(1412,2277.3000488,-1520.9000244,27.0799999,0.0000000,0.0000000,270.0000000); //object(dyn_mesh_2) (30)
	CreateDynamicObject(1412,2277.3000488,-1526.1700439,27.0799999,0.0000000,0.0000000,270.0000000); //object(dyn_mesh_2) (31)
	CreateDynamicObject(1412,2277.3000488,-1531.4300537,27.0799999,0.0000000,0.0000000,270.0000000); //object(dyn_mesh_2) (32)
	CreateDynamicObject(1412,2299.3000488,-1548.3000488,27.0799999,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (33)
	CreateDynamicObject(1412,2294.0300293,-1548.3000488,27.0799999,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (34)
	CreateDynamicObject(1412,2288.7600098,-1548.3000488,27.0799999,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (35)
	CreateDynamicObject(1412,2279.9199219,-1548.3000488,27.0799999,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (36)
	CreateDynamicObject(1412,2277.3000488,-1545.5999756,27.0799999,0.0000000,0.0000000,270.0000000); //object(dyn_mesh_2) (37)
	CreateDynamicObject(1412,2277.3000488,-1540.3299561,27.0799999,0.0000000,0.0000000,270.0000000); //object(dyn_mesh_2) (38)
	CreateDynamicObject(2114,2291.6999512,-1541.1999512,26.0200005,0.0000000,0.0000000,0.0000000); //object(basketball) (1)
	CreateDynamicObject(1764,2279.3999023,-1547.3000488,25.8899994,0.0000000,0.0000000,140.0000000); //object(low_couch_2) (1)
	CreateDynamicObject(1549,2280.1000977,-1547.5000000,25.8899994,0.0000000,0.0000000,0.0000000); //object(cj_ashtray_b) (1)
	CreateDynamicObject(1355,2279.3000488,-1545.5999756,26.1000004,0.0000000,180.0000000,320.0000000); //object(cj_fruitcrate1) (1)
	CreateDynamicObject(1220,2281.3999023,-1547.5999756,26.1800003,0.0000000,0.0000000,15.0000000); //object(cardboardbox2) (1)
	CreateDynamicObject(2670,2279.8999023,-1545.6999512,25.9650002,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_1) (1)
	CreateDynamicObject(2672,2307.5000000,-1523.3000488,24.5900002,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_4) (1)
	CreateDynamicObject(2674,2299.6999512,-1514.3000488,25.8899994,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_2) (1)
	CreateDynamicObject(3594,2309.1992188,-1547.5000000,24.7999992,3.9990234,0.0000000,59.9963379); //object(la_fuckcar1) (1)
	CreateDynamicObject(933,2299.7998047,-1546.5996094,25.8500004,0.0000000,0.0000000,0.0000000); //object(cj_cableroll) (1)
	CreateDynamicObject(2223,2279.2998047,-1545.5996094,26.3600006,0.0000000,0.0000000,0.0000000); //object(rustymed) (1)
	CreateDynamicObject(2837,2277.8994141,-1544.3994141,25.8899994,0.0000000,0.0000000,0.0000000); //object(gb_takeaway02) (1)
	CreateDynamicObject(1412,2789.5595703,-2006.3681641,13.7900000,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (1)
	CreateDynamicObject(1412,2784.3000488,-2006.3690186,13.7900000,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (2)
	CreateDynamicObject(1412,2779.0300293,-2006.3690186,13.7900000,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (3)
	CreateDynamicObject(1412,2773.7600098,-2006.3690186,13.7900000,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (4)
	CreateDynamicObject(1412,2765.6000977,-2006.3690186,13.7900000,0.0000000,0.0000000,0.0000000); //object(dyn_mesh_2) (5)
	CreateDynamicObject(1412,2762.8999023,-2021.8000488,13.7900000,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (6)
	CreateDynamicObject(1412,2762.8898926,-2016.5699463,13.7900000,0.0000000,0.0000000,90.0000000); //object(dyn_mesh_2) (7)
	CreateDynamicObject(935,2768.3000488,-2032.6999512,13.0799999,0.0000000,0.0000000,0.0000000); //object(cj_drum) (1)
	CreateDynamicObject(2114,2768.1999512,-2020.8000488,12.6750002,0.0000000,0.0000000,0.0000000); //object(basketball) (1)
	CreateDynamicObject(1768,2765.1999512,-2033.5999756,12.5799999,0.0000000,0.0000000,130.0000000); //object(low_couch_3) (1)
	CreateDynamicObject(1759,2764.1999512,-2030.5000000,12.5799999,0.0000000,0.0000000,25.0000000); //object(low_single_1) (1)
	CreateDynamicObject(1549,2766.3999023,-2033.1999512,12.5799999,0.0000000,0.0000000,0.0000000); //object(cj_ashtray_b) (1)
	CreateDynamicObject(1441,2765.8000488,-2006.9000244,13.1899996,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_4) (1)
	CreateDynamicObject(1440,2760.4394531,-1968.0000000,13.0799999,0.0000000,0.0000000,90.0000000); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(12957,2806.1000977,-1995.8000488,13.3000002,0.0000000,0.0000000,30.0000000); //object(sw_pickupwreck01) (1)
	CreateDynamicObject(2670,2769.3000488,-2032.0000000,12.6300001,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_1) (1)
	CreateDynamicObject(2671,2793.1999512,-2011.5000000,12.5600004,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_3) (1)
	CreateDynamicObject(2672,2758.1000977,-1982.5000000,12.8299999,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_4) (1)
	CreateDynamicObject(2674,2779.3999023,-2026.3000488,12.5600004,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_2) (1)
	CreateDynamicObject(2676,2806.8000488,-1992.6999512,12.6499996,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_8) (1)
	CreateDynamicObject(1271,2766.3994141,-2032.0000000,12.8500004,0.0000000,0.0000000,14.9963379); //object(gunbox) (1)
	CreateDynamicObject(1271,2766.3000488,-2031.0999756,12.8500004,0.0000000,0.0000000,25.0000000); //object(gunbox) (2)
	CreateDynamicObject(7894,2789.3000488,-1994.7199707,12.8900003,0.0000000,0.0000000,90.0000000); //object(vegascrashbar05) (1)
	CreateDynamicObject(3035,2776.3999023,-2005.3000488,13.2989998,0.0000000,0.0000000,180.0000000); //object(tmp_bin) (1)
	CreateDynamicObject(3035,2734.8999023,-1934.6999512,13.3000002,0.0000000,0.0000000,275.0000000); //object(tmp_bin) (3)
	CreateDynamicObject(1450,2736.6999512,-1971.3000488,13.1199999,0.0000000,0.0000000,270.0000000); //object(dyn_crate_3) (1)
	CreateDynamicObject(1415,2778.6999512,-1936.5999756,12.6000004,0.0000000,0.0000000,270.0000000); //object(dyn_dumpster) (1)
	CreateDynamicObject(1372,2650.1999512,-2013.1999512,12.6660004,0.0000000,0.0000000,180.0000000); //object(cj_dump2_low) (1)
	CreateDynamicObject(1409,2677.8994141,-1994.8994141,12.5900002,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low) (1)
	CreateDynamicObject(1372,2648.8999023,-1994.6999512,12.6660004,0.0000000,0.0000000,0.0000000); //object(cj_dump2_low) (2)
	CreateDynamicObject(1409,2696.5996094,-2013.3994141,12.5900002,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low) (2)
	CreateDynamicObject(1528,2762.9746094,-2010.5000000,15.0000000,0.0000000,0.0000000,179.9945068); //object(tag_seville) (1)
	CreateDynamicObject(1211,2776.5000000,-1957.5999756,13.1000004,0.0000000,0.0000000,0.0000000); //object(fire_hydrant) (1)
	CreateDynamicObject(1211,2722.6000977,-1963.3000488,13.1000004,0.0000000,0.0000000,0.0000000); //object(fire_hydrant) (2)
	CreateDynamicObject(1211,2700.5000000,-1998.3000488,13.1000004,0.0000000,0.0000000,0.0000000); //object(fire_hydrant) (3)
	CreateDynamicObject(1216,2723.5000000,-2030.1999512,13.1999998,0.0000000,0.0000000,270.0000000); //object(phonebooth1) (1)
	CreateDynamicObject(1257,2720.8999023,-1959.8000488,13.7500000,0.0000000,0.0000000,0.0000000); //object(bustopm) (1)
	CreateDynamicObject(1257,2707.1999512,-1976.0000000,13.7500000,0.0000000,0.0000000,179.9945068); //object(bustopm) (2)
	CreateDynamicObject(1258,2676.6000977,-2013.0000000,13.1499996,0.0000000,0.0000000,0.0000000); //object(mpostbox1) (1)
	CreateDynamicObject(1290,2782.3999023,-2032.5000000,18.5499992,0.0000000,0.0000000,0.0000000); //object(lamppost2) (1)
	CreateDynamicObject(1432,2740.1999512,-1942.4000244,16.2999992,0.0000000,0.0000000,0.0000000); //object(dyn_table_2) (1)
	CreateDynamicObject(1432,2738.5000000,-1945.9000244,16.2999992,0.0000000,0.0000000,0.0000000); //object(dyn_table_2) (2)
	CreateDynamicObject(642,2738.1999512,-1943.8000488,17.6800003,0.0000000,0.0000000,0.0000000); //object(kb_canopy_test) (1)
	CreateDynamicObject(1432,2701.1000977,-2016.5999756,12.5500002,0.0000000,0.0000000,0.0000000); //object(dyn_table_2) (3)
	CreateDynamicObject(1281,2659.3000488,-1992.0999756,13.3500004,0.0000000,0.0000000,0.0000000); //object(parktable1) (1)
	CreateDynamicObject(1368,2639.0000000,-1990.0000000,13.6499996,0.0000000,0.0000000,45.0000000); //object(cj_blocker_bench) (1)
	CreateDynamicObject(1764,2653.1999512,-2030.5999756,12.6499996,0.0000000,0.0000000,15.0000000); //object(low_couch_2) (1)
	CreateDynamicObject(1429,2651.3999023,-2013.3000488,12.7799997,0.0000000,0.0000000,90.0000000); //object(dyn_tv) (1)
	CreateDynamicObject(1759,2634.3000488,-2009.8000488,12.7799997,0.0000000,0.0000000,90.0000000); //object(low_single_1) (2)
	CreateDynamicObject(1759,2635.6999512,-2011.1899414,12.7799997,0.0000000,0.0000000,150.0000000); //object(low_single_1) (3)
	CreateDynamicObject(1765,2657.8000488,-2030.1999512,12.6499996,0.0000000,0.0000000,300.0000000); //object(low_single_2) (1)
	CreateDynamicObject(1813,2653.6992188,-2032.5996094,12.6000004,0.0000000,0.0000000,0.0000000); //object(coffee_low_5) (1)
	CreateDynamicObject(1481,2655.9892578,-2032.0000000,13.3000002,0.0000000,0.0000000,219.9957275); //object(dyn_bar_b_q) (1)
	CreateDynamicObject(2103,2669.1000977,-1989.5999756,12.9779997,0.0000000,0.0000000,0.0000000); //object(low_hi_fi_1) (1)
	CreateDynamicObject(2232,2638.1000977,-2014.5000000,13.3500004,0.0000000,0.0000000,150.0000000); //object(med_speaker_4) (1)
	CreateDynamicObject(2629,2671.8000488,-2016.5000000,12.5500002,0.0000000,0.0000000,150.0000000); //object(gym_bench1) (1)
	CreateDynamicObject(2816,2669.3999023,-1991.1999512,12.9899998,0.0000000,0.0000000,0.0000000); //object(gb_bedmags01) (1)
	CreateDynamicObject(1440,2669.5000000,-1995.0000000,13.0799999,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_3) (2)
	CreateDynamicObject(1264,2650.3000488,-1994.5000000,12.9499998,0.0000000,0.0000000,0.0000000); //object(blackbag1) (1)
	CreateDynamicObject(2673,2675.6000977,-2016.3000488,12.6300001,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_5) (1)
	CreateDynamicObject(2675,2691.1999512,-1991.5999756,12.6300001,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_6) (1)
	CreateDynamicObject(2676,2635.6999512,-1994.5999756,13.0990000,0.0000000,0.0000000,50.0000000); //object(proc_rubbish_8) (2)
	CreateDynamicObject(2677,2689.6000977,-2016.1999512,12.8199997,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_7) (1)
	CreateDynamicObject(843,2635.8999023,-2001.5999756,13.1999998,0.0000000,0.0000000,90.0000000); //object(dead_tree_15) (1)
	CreateDynamicObject(11292,2655.6015625,-2032.1298828,11.0500002,0.0000000,0.0000000,0.0000000); //object(gasstatiohut) (1)
	CreateDynamicObject(1483,2655.6015625,-2031.5498047,14.3900003,0.0000000,0.0000000,90.0000000); //object(dyn_garrage2) (1)
	CreateDynamicObject(2913,2671.9499512,-2017.1999512,13.5299997,0.0000000,90.0000000,150.0000000); //object(kmb_bpress) (1)
	CreateDynamicObject(1520,2766.3999023,-2032.0999756,13.2399998,0.0000000,0.0000000,0.0000000); //object(dyn_wine_bounce) (1)
	CreateDynamicObject(1520,2763.8999023,-2031.5000000,12.6000004,0.0000000,0.0000000,0.0000000); //object(dyn_wine_bounce) (2)
	CreateDynamicObject(1544,2740.3999023,-1942.3000488,16.8999996,0.0000000,0.0000000,0.0000000); //object(cj_beer_b_1) (1)
	CreateDynamicObject(1551,2738.6999512,-1946.0999756,17.1499996,0.0000000,0.0000000,0.0000000); //object(dyn_wine_big) (1)
	CreateDynamicObject(2838,2740.1000977,-1944.4000244,16.3199997,0.0000000,0.0000000,0.0000000); //object(gb_takeaway03) (1)
	CreateDynamicObject(1481,2697.8999023,-2019.5000000,13.1999998,0.0000000,0.0000000,150.0000000); //object(dyn_bar_b_q) (1)
	CreateDynamicObject(1479,2683.0700684,-1976.0000000,13.8999996,0.0000000,0.0000000,270.0000000); //object(dyn_gaz_1) (1)
	CreateDynamicObject(1479,2686.1499023,-1976.0000000,13.8999996,0.0000000,0.0000000,90.0000000); //object(dyn_gaz_1) (2)
	CreateDynamicObject(2345,2682.6000977,-1979.4000244,15.1999998,0.0000000,0.0000000,0.0000000); //object(plant_pot_23) (1)
	CreateDynamicObject(2345,2686.6000977,-1979.4000244,15.1899996,0.0000000,0.0000000,0.0000000); //object(plant_pot_23) (2)
	CreateDynamicObject(2345,2684.6000977,-1979.4000244,15.1999998,0.0000000,0.0000000,0.0000000); //object(plant_pot_23) (3)
	CreateDynamicObject(1487,2653.8000488,-2032.0000000,13.3000002,0.0000000,0.0000000,0.0000000); //object(dyn_wine_1) (1)
	CreateDynamicObject(1665,2654.5000000,-2032.0999756,13.1300001,0.0000000,0.0000000,0.0000000); //object(propashtray1) (1)
	CreateDynamicObject(1512,2656.3999023,-2031.1999512,12.8199997,0.0000000,0.0000000,0.0000000); //object(dyn_wine_03) (1)
	CreateDynamicObject(1528,2738.1000977,-1900.6600342,11.3999996,0.0000000,0.0000000,270.0000000); //object(tag_seville) (3)
	CreateDynamicObject(911,2499.5000000,-2000.4000244,13.0799999,0.0000000,0.0000000,0.0000000); //object(bust_cabinet_1) (1)
	CreateDynamicObject(910,2501.3000488,-2000.4000244,13.7900000,0.0000000,0.0000000,0.0000000); //object(bust_cabinet_4) (1)
	CreateDynamicObject(853,2535.1999512,-2032.8000488,12.8900003,0.0000000,0.0000000,0.0000000); //object(cj_urb_rub_5) (1)
	CreateDynamicObject(1462,2450.1000977,-1998.3699951,12.5000000,0.0000000,0.0000000,0.0000000); //object(dyn_woodpile) (1)
	CreateDynamicObject(1441,2479.1000977,-2000.1999512,13.1899996,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_4) (2)
	CreateDynamicObject(1430,2504.5000000,-2019.0000000,12.8900003,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2460.3999023,-2019.0000000,12.8900003,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (2)
	CreateDynamicObject(1372,2527.1000977,-2005.0999756,12.6599998,0.0000000,0.0000000,0.0000000); //object(cj_dump2_low) (3)
	CreateDynamicObject(1372,2529.2998047,-2005.0996094,12.6599998,0.0000000,0.0000000,4.0000000); //object(cj_dump2_low) (4)
	CreateDynamicObject(1358,2430.0000000,-2042.5000000,13.7500000,0.0000000,0.0000000,0.0000000); //object(cj_skip_rubbish) (1)
	CreateDynamicObject(1339,2432.1000977,-2019.0000000,13.1899996,0.0000000,0.0000000,180.0000000); //object(binnt09_la) (1)
	CreateDynamicObject(1264,2431.3000488,-2019.0000000,12.8999996,0.0000000,0.0000000,0.0000000); //object(blackbag1) (2)
	CreateDynamicObject(2670,2515.3000488,-2018.1999512,12.6300001,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_1) (2)
	CreateDynamicObject(2673,2457.1999512,-1999.5999756,12.6300001,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_5) (2)
	CreateDynamicObject(2674,2486.0000000,-1998.0000000,12.8500004,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_2) (2)
	CreateDynamicObject(13591,2534.1000977,-1986.3000488,12.8000002,0.0000000,0.0000000,340.0000000); //object(kickcar28) (1)
	CreateDynamicObject(947,2535.0000000,-2009.2998047,14.7100000,0.0000000,0.0000000,90.0000000); //object(bskballhub_lax01) (1)
	CreateDynamicObject(2114,2535.1999512,-2008.5999756,12.6899996,0.0000000,0.0000000,0.0000000); //object(basketball) (2)
	CreateDynamicObject(1770,2462.0000000,-1995.9000244,12.6800003,0.0000000,0.0000000,0.0000000); //object(low_dinning_2) (1)
	CreateDynamicObject(1768,2485.8999023,-1995.5500488,12.7799997,0.0000000,0.0000000,0.0000000); //object(low_couch_3) (2)
	CreateDynamicObject(1759,2521.5000000,-1997.4000244,12.7799997,0.0000000,0.0000000,0.0000000); //object(low_single_1) (4)
	CreateDynamicObject(1281,2430.1000977,-2033.5999756,13.3500004,0.0000000,0.0000000,0.0000000); //object(parktable1) (2)
	CreateDynamicObject(1432,2493.1999512,-2028.8000488,12.6000004,0.0000000,0.0000000,0.0000000); //object(dyn_table_2) (4)
	CreateDynamicObject(1810,2461.0000000,-1996.5000000,12.6800003,0.0000000,0.0000000,15.0000000); //object(cj_foldchair) (1)
	CreateDynamicObject(1810,2464.0000000,-1996.3000488,12.6800003,0.0000000,0.0000000,340.0000000); //object(cj_foldchair) (2)
	CreateDynamicObject(2096,2512.3000488,-2020.1999512,12.5799999,0.0000000,0.0000000,210.0000000); //object(cj_rockingchair) (1)
	CreateDynamicObject(1481,2492.8999023,-2031.0000000,13.2600002,0.0000000,0.0000000,160.0000000); //object(dyn_bar_b_q) (3)
	CreateDynamicObject(1841,2467.3999023,-2020.5999756,13.1199999,0.0000000,0.0000000,300.0000000); //object(speaker_1) (1)
	CreateDynamicObject(1841,2463.3000488,-2020.5000000,13.1199999,0.0000000,0.0000000,250.0000000); //object(speaker_1) (2)
	CreateDynamicObject(1487,2462.8999023,-1996.0000000,13.6999998,0.0000000,0.0000000,0.0000000); //object(dyn_wine_1) (2)
	CreateDynamicObject(1517,2466.8000488,-2020.6999512,13.3000002,0.0000000,0.0000000,0.0000000); //object(dyn_wine_break) (1)
	CreateDynamicObject(1544,2524.1999512,-2016.5999756,13.1000004,0.0000000,0.0000000,0.0000000); //object(cj_beer_b_1) (2)
	CreateDynamicObject(2915,2510.6000977,-2020.6999512,13.3199997,0.0000000,0.0000000,0.0000000); //object(kmb_dumbbell2) (1)
	CreateDynamicObject(1763,2279.8999023,-1874.4000244,13.1899996,0.0000000,0.0000000,180.0000000); //object(low_couch_1) (1)
	CreateDynamicObject(1549,2280.5000000,-1874.0000000,13.1999998,0.0000000,0.0000000,0.0000000); //object(cj_ashtray_b) (2)
	CreateDynamicObject(1450,2281.4499512,-1875.9899902,13.7900000,0.0000000,0.0000000,90.0000000); //object(dyn_crate_3) (2)
	CreateDynamicObject(1372,2273.8999023,-1885.1999512,12.6800003,0.0000000,0.0000000,0.0000000); //object(cj_dump2_low) (5)
	CreateDynamicObject(2670,2279.3999023,-1872.8000488,13.3199997,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_1) (3)
	CreateDynamicObject(2676,2275.6999512,-1885.9000244,12.6610003,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_8) (3)
	CreateDynamicObject(1372,2306.8994141,-1885.1992188,12.7299995,0.0000000,0.0000000,0.0000000); //object(cj_dump2_low) (6)
	CreateDynamicObject(2677,2253.0000000,-1905.6999512,12.8199997,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_7) (2)
	CreateDynamicObject(1257,2322.3000488,-1930.5999756,13.8900003,0.0000000,0.0000000,0.0000000); //object(bustopm) (3)
	CreateDynamicObject(1257,2305.3000488,-1918.6999512,13.8900003,0.0000000,0.0000000,180.0000000); //object(bustopm) (4)
	CreateDynamicObject(1528,2750.8999023,-1947.8299561,14.1000004,0.0000000,0.0000000,270.0000000); //object(tag_seville) (5)
	CreateDynamicObject(1528,2654.0000000,-2016.3000488,14.5000000,0.0000000,0.0000000,270.0000000); //object(tag_seville) (9)
	CreateDynamicObject(1528,2459.5200195,-1975.5999756,13.9899998,0.0000000,0.0000000,0.0000000); //object(tag_seville) (10)
	CreateDynamicObject(1528,2280.8300781,-1878.0000000,15.6999998,0.0000000,0.0000000,180.0000000); //object(tag_seville) (11)
	CreateDynamicObject(1409,2679.8000488,-2013.5000000,12.5900002,0.0000000,0.0000000,12.0000000); //object(cj_dump1_low) (2)
	CreateDynamicObject(1409,2698.6000977,-1998.0999756,12.5900002,0.0000000,0.0000000,22.0000000); //object(cj_dump1_low) (1)
	CreateDynamicObject(3035,2778.3999023,-1933.3000488,13.3000002,0.0000000,0.0000000,275.0000000); //object(tmp_bin) (2)
	CreateDynamicObject(3035,2734.8999023,-1937.3000488,13.3000002,0.0000000,0.0000000,259.0000000); //object(tmp_bin) (3)
	CreateDynamicObject(1440,2733.0000000,-1936.0000000,13.0799999,0.0000000,0.0000000,277.0000000); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(1430,2468.8999023,-2000.6999512,12.8999996,0.0000000,0.0000000,12.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1372,2516.3000488,-1941.3000488,12.6599998,0.0000000,0.0000000,188.0000000); //object(cj_dump2_low) (8)
	CreateDynamicObject(1372,2514.3000488,-1941.5000000,12.6599998,0.0000000,0.0000000,181.0000000); //object(cj_dump2_low) (9)
	CreateDynamicObject(1344,2276.8999023,-1757.8000488,13.3599997,0.0000000,0.0000000,188.0000000); //object(cj_dumpster2) (1)
	CreateDynamicObject(1344,2279.3999023,-1757.5999756,13.3599997,0.0000000,0.0000000,180.0000000); //object(cj_dumpster2) (2)
	CreateDynamicObject(1344,2282.0000000,-1757.6999512,13.3599997,0.0000000,0.0000000,179.9945068); //object(cj_dumpster2) (3)
	CreateDynamicObject(1344,2356.3999023,-1758.0999756,13.3599997,0.0000000,0.0000000,179.9945068); //object(cj_dumpster2) (4)
	CreateDynamicObject(1344,2353.8000488,-1758.1999512,13.3599997,0.0000000,0.0000000,175.0000000); //object(cj_dumpster2) (5)
	CreateDynamicObject(1344,2351.3000488,-1757.9000244,13.3599997,0.0000000,0.0000000,178.0000000); //object(cj_dumpster2) (6)
	CreateDynamicObject(1372,2305.0000000,-1885.3000488,12.7299995,0.0000000,0.0000000,12.0000000); //object(cj_dump2_low) (6)
	CreateDynamicObject(1372,2271.8000488,-1885.0999756,12.7200003,0.0000000,0.0000000,11.9970703); //object(cj_dump2_low) (6)
	CreateDynamicObject(1372,2245.8000488,-1885.3000488,12.7200003,0.0000000,0.0000000,5.0000000); //object(cj_dump2_low) (6)
	CreateDynamicObject(1372,2257.1000977,-1903.8000488,12.7200003,0.0000000,0.0000000,185.0000000); //object(cj_dump2_low) (6)
	CreateDynamicObject(1372,2255.1000977,-1903.8000488,12.7200003,0.0000000,0.0000000,184.9987793); //object(cj_dump2_low) (6)
	CreateDynamicObject(1372,2288.1000977,-1903.4000244,12.7200003,0.0000000,0.0000000,184.9987793); //object(cj_dump2_low) (6)
	CreateDynamicObject(1372,2323.0000000,-1939.3000488,12.7200003,0.0000000,0.0000000,275.0000000); //object(cj_dump2_low) (6)
	CreateDynamicObject(1372,2322.8999023,-1937.4000244,12.7200003,0.0000000,0.0000000,270.0000000); //object(cj_dump2_low) (6)
	CreateDynamicObject(1264,2413.1000977,-1668.0999756,12.8999996,0.0000000,0.0000000,0.0000000); //object(blackbag1) (3)
	CreateDynamicObject(2670,2509.1000977,-1685.9000244,12.6450005,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_1) (4)
	CreateDynamicObject(2670,2482.3000488,-1690.9000244,12.6400003,0.0000000,0.0000000,12.0000000); //object(proc_rubbish_1) (5)
	CreateDynamicObject(2670,2434.5000000,-1675.5000000,12.7720003,0.0000000,0.0000000,11.9970703); //object(proc_rubbish_1) (6)
	CreateDynamicObject(2670,2410.3999023,-1652.8000488,12.5699997,0.0000000,0.0000000,11.9970703); //object(proc_rubbish_1) (7)
	CreateDynamicObject(2670,2328.3999023,-1667.5999756,12.9350004,0.0000000,0.0000000,55.0000000); //object(proc_rubbish_1) (8)
	CreateDynamicObject(2670,2270.6000977,-1665.1999512,14.4600000,0.0000000,0.0000000,54.9975586); //object(proc_rubbish_1) (9)
	CreateDynamicObject(2671,2505.3999023,-1664.6999512,12.3999004,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_3) (2)
	CreateDynamicObject(2671,2470.6000977,-1668.1999512,12.3199997,0.0000000,0.0000000,12.0000000); //object(proc_rubbish_3) (3)
	CreateDynamicObject(2671,2355.3000488,-1651.5999756,12.6000004,0.0000000,0.0000000,11.9970703); //object(proc_rubbish_3) (4)
	CreateDynamicObject(2671,2329.3999023,-1752.8000488,12.3900003,0.0000000,0.0000000,55.0000000); //object(proc_rubbish_3) (5)
	CreateDynamicObject(2671,2353.6000977,-1721.3000488,12.5799999,0.0000000,0.0000000,54.9975586); //object(proc_rubbish_3) (6)
	CreateDynamicObject(2672,2421.6000977,-1674.0000000,12.9388800,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_4) (2)
	CreateDynamicObject(2672,2365.3000488,-1789.1999512,12.8280001,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_4) (3)
	CreateDynamicObject(2673,2489.3999023,-1645.5999756,13.1549997,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_5) (3)
	CreateDynamicObject(2673,2423.1999512,-1648.6999512,12.6269999,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_5) (4)
	CreateDynamicObject(2673,2314.1000977,-1646.0999756,13.9099998,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_5) (5)
	CreateDynamicObject(2674,2247.8999023,-1647.5999756,14.4879999,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_2) (3)
	CreateDynamicObject(2674,2228.8000488,-1759.0000000,12.5799999,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_2) (4)
	CreateDynamicObject(2675,2277.6000977,-1756.0999756,12.6099997,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_6) (2)
	CreateDynamicObject(2675,2349.6999512,-1757.0000000,12.6099997,0.0000000,0.0000000,22.0000000); //object(proc_rubbish_6) (3)
	CreateDynamicObject(2676,2535.3999023,-1703.9000244,12.4799995,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_8) (4)
	CreateDynamicObject(2676,2254.1999512,-1786.9000244,12.6499996,0.0000000,0.0000000,22.0000000); //object(proc_rubbish_8) (5)
	CreateDynamicObject(2677,2526.8000488,-1668.3000488,14.4399996,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_7) (3)
	CreateDynamicObject(3594,2481.0000000,-1714.0000000,13.1700001,0.0000000,0.0000000,12.0000000); //object(la_fuckcar1) (1)
	CreateDynamicObject(933,2480.1000977,-1698.1999512,12.4549999,0.0000000,0.0000000,0.0000000); //object(cj_cableroll) (1)
	CreateDynamicObject(933,2427.6999512,-1676.5000000,12.6700001,0.0000000,0.0000000,0.0000000); //object(cj_cableroll) (2)
	CreateDynamicObject(928,2379.8999023,-1667.5999756,12.8100004,0.0000000,0.0000000,0.0000000); //object(rubbish_box1) (1)
	CreateDynamicObject(928,2313.8999023,-1653.3000488,13.5990000,0.0000000,0.0000000,0.0000000); //object(rubbish_box1) (2)
	CreateDynamicObject(924,2480.8000488,-1689.5000000,12.6899996,0.0000000,0.0000000,23.0000000); //object(fruitcrate3) (1)
	CreateDynamicObject(913,2480.1000977,-1692.0000000,13.3000002,0.0000000,0.0000000,87.0000000); //object(bust_cabinet_3) (1)
	CreateDynamicObject(911,2482.1000977,-1708.8000488,13.0699997,0.0000000,0.0000000,140.0000000); //object(bust_cabinet_1) (2)
	CreateDynamicObject(851,2482.0000000,-1705.9000244,12.7880001,0.0000000,0.0000000,0.0000000); //object(cj_urb_rub_2) (1)
	CreateDynamicObject(850,2442.6000977,-1675.4000244,12.7200003,0.0000000,0.0000000,0.0000000); //object(cj_urb_rub_1) (1)
	CreateDynamicObject(3119,2480.3000488,-1701.0000000,12.8079996,0.0000000,0.0000000,0.0000000); //object(cs_ry_props) (1)
	CreateDynamicObject(2971,2479.5000000,-1708.9000244,12.4799995,0.0000000,0.0000000,4.0000000); //object(k_smashboxes) (1)
	CreateDynamicObject(2890,2439.3000488,-1673.5000000,12.6000004,0.0000000,0.0000000,150.0000000); //object(kmb_skip) (1)
	CreateDynamicObject(1773,2483.6999512,-1693.3000488,13.2799997,0.0000000,0.0000000,188.0000000); //object(cj_cooker2) (1)
	CreateDynamicObject(1281,2526.0000000,-1665.5000000,14.8800001,1.0000000,0.0000000,0.0000000); //object(parktable1) (3)
	CreateDynamicObject(1281,2376.3999023,-1789.1999512,13.3299999,0.0000000,0.0000000,0.0000000); //object(parktable1) (4)
	CreateDynamicObject(1432,2513.3000488,-1687.4000244,12.6000004,0.0000000,0.0000000,0.0000000); //object(dyn_table_2) (5)
	CreateDynamicObject(1711,2425.1999512,-1678.0999756,12.6999998,0.0000000,0.0000000,45.0000000); //object(kb_chair01) (1)
	CreateDynamicObject(1711,2487.8999023,-1645.5999756,13.1000004,0.0000000,0.0000000,44.9945068); //object(kb_chair01) (2)
	CreateDynamicObject(1728,2482.8999023,-1703.0999756,12.5000000,0.0000000,0.0000000,188.0000000); //object(mrk_seating3) (1)
	CreateDynamicObject(1811,2490.3999023,-1647.0000000,13.6899996,0.0000000,0.0000000,0.0000000); //object(med_din_chair_5) (1)
	CreateDynamicObject(2315,2425.5000000,-1679.4000244,12.7799997,0.0000000,0.0000000,5.0000000); //object(cj_tv_table4) (1)
	CreateDynamicObject(1711,2429.1999512,-1679.0999756,12.8000002,0.0000000,0.0000000,210.0000000); //object(kb_chair01) (3)
	CreateDynamicObject(1768,2529.1000977,-1670.6999512,14.1899996,0.0000000,0.0000000,181.0000000); //object(low_couch_3) (3)
	CreateDynamicObject(1763,2495.3999023,-1642.8000488,12.7799997,0.0000000,0.0000000,0.0000000); //object(low_couch_1) (2)
	CreateDynamicObject(1421,2505.8000488,-1649.8000488,13.4499998,0.0000000,358.0000000,0.0000000); //object(dyn_boxes) (1)
	CreateDynamicObject(1765,2448.8000488,-1642.4000244,12.6000004,0.0000000,0.0000000,45.0000000); //object(low_single_2) (2)
	CreateDynamicObject(1813,2488.3000488,-1648.0000000,13.1000004,0.0000000,0.0000000,0.0000000); //object(coffee_low_5) (2)
	CreateDynamicObject(1481,2423.6000977,-1679.9000244,13.4799995,0.0000000,0.0000000,170.0000000); //object(dyn_bar_b_q) (4)
	CreateDynamicObject(1481,2381.8999023,-1719.9000244,13.2900000,0.0000000,0.0000000,169.9969482); //object(dyn_bar_b_q) (5)
	CreateDynamicObject(2103,2489.8000488,-1648.1999512,14.1169996,0.0000000,0.0000000,0.0000000); //object(low_hi_fi_1) (2)
	CreateDynamicObject(2629,2465.3999023,-1687.1999512,12.4799995,0.0000000,0.0000000,45.0000000); //object(gym_bench1) (2)
	CreateDynamicObject(2816,2526.3999023,-1670.6999512,14.1800003,0.0000000,0.0000000,0.0000000); //object(gb_bedmags01) (2)
	CreateDynamicObject(2826,2466.1000977,-1686.6999512,12.5200005,0.0000000,0.0000000,0.0000000); //object(gb_novels04) (1)
	CreateDynamicObject(2915,2465.3000488,-1689.5000000,12.6285000,0.0000000,0.0000000,0.0000000); //object(kmb_dumbbell2) (2)
	CreateDynamicObject(2913,2464.6989746,-1687.1400146,13.4600000,0.0000000,90.0000000,45.0000000); //object(kmb_bpress) (2)
	CreateDynamicObject(1486,2428.1000977,-1676.4000244,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_beer_1) (1)
	CreateDynamicObject(1486,2427.3000488,-1676.4000244,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_beer_1) (2)
	CreateDynamicObject(1486,2427.6000977,-1675.9000244,13.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_beer_1) (3)
	CreateDynamicObject(1486,2426.6000977,-1679.4000244,13.4099998,0.0000000,0.0000000,0.0000000); //object(dyn_beer_1) (4)
	CreateDynamicObject(1486,2426.0000000,-1679.0999756,13.4099998,0.0000000,0.0000000,0.0000000); //object(dyn_beer_1) (5)
	CreateDynamicObject(1486,2525.5000000,-1665.6999512,15.0299997,0.0000000,0.0000000,0.0000000); //object(dyn_beer_1) (6)
	CreateDynamicObject(1520,2426.0000000,-1679.4000244,13.3199997,0.0000000,0.0000000,0.0000000); //object(dyn_wine_bounce) (3)
	CreateDynamicObject(1520,2427.8999023,-1677.0000000,13.6949997,0.0000000,0.0000000,0.0000000); //object(dyn_wine_bounce) (4)
	CreateDynamicObject(1520,2480.3999023,-1698.5999756,13.4799995,0.0000000,0.0000000,0.0000000); //object(dyn_wine_bounce) (5)
	CreateDynamicObject(1520,2526.6000977,-1670.3000488,14.2200003,0.0000000,0.0000000,0.0000000); //object(dyn_wine_bounce) (6)
	CreateDynamicObject(1544,2531.8999023,-1665.4000244,14.1999998,0.0000000,0.0000000,0.0000000); //object(cj_beer_b_1) (3)
	CreateDynamicObject(1544,2524.6999512,-1663.4000244,14.5000000,0.0000000,0.0000000,0.0000000); //object(cj_beer_b_1) (4)
	CreateDynamicObject(1544,2488.6999512,-1647.5000000,13.6000004,0.0000000,0.0000000,0.0000000); //object(cj_beer_b_1) (5)
	CreateDynamicObject(1430,2397.6000977,-1723.1999512,12.8999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2396.6000977,-1723.1999512,12.8999996,0.0000000,0.0000000,22.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2314.8000488,-1723.5999756,12.8999996,0.0000000,0.0000000,21.9946289); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2313.6999512,-1723.5999756,12.8999996,0.0000000,0.0000000,2.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2248.3000488,-1647.0999756,14.8000002,0.0000000,0.0000000,1.9995117); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2247.1000977,-1647.1999512,14.8000002,0.0000000,0.0000000,330.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2276.0000000,-1649.9000244,14.6000004,0.0000000,0.0000000,329.9963379); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2314.6999512,-1653.1999512,13.6000004,0.0000000,0.0000000,329.9963379); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2313.1000977,-1653.4000244,13.6999998,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2359.1000977,-1650.0000000,12.8999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2397.6999512,-1649.8000488,12.8999996,0.0000000,0.0000000,0.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2407.1000977,-1652.3000488,12.8000002,0.0000000,0.0000000,12.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2474.3999023,-1652.5000000,12.8000002,0.0000000,0.0000000,11.9970703); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2473.5000000,-1653.0999756,12.8000002,0.0000000,0.0000000,55.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2504.8999023,-1657.1999512,12.8999996,0.0000000,0.0000000,54.9975586); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2504.1999512,-1656.5000000,12.8999996,0.0000000,0.0000000,120.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2485.3999023,-1684.6999512,12.8000002,0.0000000,0.0000000,119.9981384); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2486.6000977,-1684.5000000,12.8000002,0.0000000,0.0000000,1.0000000); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2412.1000977,-1668.0000000,12.8999996,0.0000000,0.0000000,0.9997559); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2377.8000488,-1668.0000000,12.8999996,0.0000000,0.0000000,0.9997559); //object(cj_dump1_low01) (1)
	CreateDynamicObject(1430,2378.8999023,-1667.9000244,12.8999996,0.0000000,0.0000000,12.0000000); //object(cj_dump1_low01) (1)
		//idlewood bajo el puente
	CreateDynamicObject(933,2136.3000488,-1673.0999756,14.0500002,0.0000000,0.0000000,0.0000000); //object(cj_cableroll) (1)
	CreateDynamicObject(926,2157.1000977,-1681.5999756,14.3120003,0.0000000,0.0000000,0.0000000); //object(rubbish_box2) (1)
	CreateDynamicObject(916,2136.3000488,-1687.0999756,14.1700001,0.0000000,0.0000000,15.0000000); //object(fruitcrate2) (1)
	CreateDynamicObject(913,2150.8100586,-1658.0000000,14.8999996,0.0000000,0.0000000,45.0000000); //object(bust_cabinet_3) (1)
	CreateDynamicObject(910,2180.3000488,-1675.9000244,14.5299997,0.0000000,357.5000000,80.0000000); //object(bust_cabinet_4) (1)
	CreateDynamicObject(851,2168.8000488,-1686.0000000,14.3699999,0.0000000,0.0000000,0.0000000); //object(cj_urb_rub_2) (1)
	CreateDynamicObject(850,2182.1999512,-1651.5999756,14.4300003,1.0000000,359.0000000,0.0000000); //object(cj_urb_rub_1) (1)
	CreateDynamicObject(2971,2148.8999023,-1707.0000000,14.0699997,0.0000000,0.0000000,0.0000000); //object(k_smashboxes) (1)
	CreateDynamicObject(2890,2170.0000000,-1725.1999512,12.4600000,0.0000000,0.0000000,70.0000000); //object(kmb_skip) (1)
	CreateDynamicObject(1773,2171.8999023,-1723.8000488,13.2799997,0.0000000,0.0000000,130.0000000); //object(cj_cooker2) (1)
	CreateDynamicObject(1549,2150.3999023,-1678.0999756,14.1000004,0.0000000,0.0000000,0.0000000); //object(cj_ashtray_b) (1)
	CreateDynamicObject(1462,2160.2600098,-1694.0000000,14.1000004,0.0000000,0.0000000,90.0000000); //object(dyn_woodpile) (1)
	CreateDynamicObject(1450,2130.3000488,-1699.3599854,14.6499996,0.0000000,0.0000000,0.0000000); //object(dyn_crate_3) (1)
	CreateDynamicObject(1449,2182.0000000,-1622.6999512,14.1000004,0.0000000,0.0000000,0.0000000); //object(dyn_crate_2) (1)
	CreateDynamicObject(1442,2139.1999512,-1678.4000244,14.6999998,0.0000000,0.0000000,0.0000000); //object(dyn_firebin0) (1)
	CreateDynamicObject(1441,2150.1000977,-1609.4000244,13.9300003,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_4) (1)
	CreateDynamicObject(1441,2149.1999512,-1660.0000000,14.6899996,0.0000000,0.0000000,34.0000000); //object(dyn_box_pile_4) (2)
	CreateDynamicObject(1440,2179.6999512,-1678.3000488,13.6999998,0.0000000,358.0000000,90.0000000); //object(dyn_box_pile_3) (1)
	CreateDynamicObject(1438,2155.8000488,-1588.6999512,13.2880001,0.0000000,0.0000000,12.0000000); //object(dyn_box_pile_2) (1)
	CreateDynamicObject(1438,2126.0000000,-1637.0000000,12.4499998,0.0000000,0.0000000,11.9970703); //object(dyn_box_pile_2) (2)
	CreateDynamicObject(1372,2135.3000488,-1613.5000000,12.6999998,0.0000000,0.0000000,340.0000000); //object(cj_dump2_low) (1)
	CreateDynamicObject(1372,2133.3000488,-1612.5000000,12.6999998,0.0000000,0.0000000,335.0000000); //object(cj_dump2_low) (2)
	CreateDynamicObject(1358,2095.3000488,-1599.3000488,13.6000004,0.0000000,0.0000000,80.0000000); //object(cj_skip_rubbish) (1)
	CreateDynamicObject(1355,2169.3000488,-1684.3000488,14.2700005,0.0000000,0.0000000,0.0000000); //object(cj_fruitcrate1) (1)
	CreateDynamicObject(1349,2137.1000977,-1698.9000244,14.6999998,0.0000000,0.0000000,23.0000000); //object(cj_shtrolly) (1)
	CreateDynamicObject(1265,2170.3999023,-1685.3000488,14.5000000,0.0000000,0.0000000,0.0000000); //object(blackbag2) (1)
	CreateDynamicObject(1265,2159.3000488,-1708.5000000,14.5000000,0.0000000,0.0000000,45.0000000); //object(blackbag2) (2)
	CreateDynamicObject(1265,2136.3000488,-1711.0000000,14.5000000,0.0000000,0.0000000,300.0000000); //object(blackbag2) (3)
	CreateDynamicObject(1219,2130.1000977,-1660.5999756,14.2799997,0.0000000,0.0000000,0.0000000); //object(palette) (1)
	CreateDynamicObject(1429,2136.6999512,-1613.5000000,12.8000002,0.0000000,0.0000000,0.0000000); //object(dyn_tv) (1)
	CreateDynamicObject(1265,2136.5000000,-1614.1992188,13.0000000,0.0000000,0.0000000,0.0000000); //object(blackbag2) (4)
	CreateDynamicObject(2670,2181.3000488,-1675.0000000,13.4200001,2.5000000,0.0000000,0.0000000); //object(proc_rubbish_1) (1)
	CreateDynamicObject(2670,2162.1999512,-1695.5000000,14.1669998,0.0000000,0.0000000,34.0000000); //object(proc_rubbish_1) (2)
	CreateDynamicObject(2670,2121.1000977,-1636.0000000,12.6000004,0.0000000,0.0000000,184.0000000); //object(proc_rubbish_1) (3)
	CreateDynamicObject(2671,2164.8000488,-1594.0000000,13.3555002,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_3) (1)
	CreateDynamicObject(2671,2130.5000000,-1591.0000000,13.3555002,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_3) (2)
	CreateDynamicObject(2671,2152.1999512,-1668.1999512,14.0869999,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_3) (3)
	CreateDynamicObject(2671,2132.0000000,-1679.0999756,14.0869999,0.0000000,0.0000000,23.0000000); //object(proc_rubbish_3) (4)
	CreateDynamicObject(2672,2148.6999512,-1677.5000000,14.3555002,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_4) (1)
	CreateDynamicObject(2673,2135.1000977,-1701.5999756,14.1700001,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_5) (1)
	CreateDynamicObject(2673,2142.0000000,-1593.0000000,13.4329996,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_5) (2)
	CreateDynamicObject(2674,2167.3999023,-1701.9000244,14.0999002,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_2) (1)
	CreateDynamicObject(2674,2096.1000977,-1596.1999512,12.3587999,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_2) (2)
	CreateDynamicObject(2676,2083.6999512,-1552.3000488,12.4899998,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_8) (1)
	CreateDynamicObject(3594,2118.0000000,-1582.1999512,13.1000004,0.0000000,0.0000000,35.0000000); //object(la_fuckcar1) (1)
	CreateDynamicObject(933,2118.3999023,-1574.0000000,12.4499998,0.0000000,0.0000000,0.0000000); //object(cj_cableroll) (2)
	CreateDynamicObject(2971,2069.0000000,-1577.0000000,12.4499998,0.0000000,0.0000000,10.0000000); //object(k_smashboxes) (2)
	CreateDynamicObject(1450,2066.1000977,-1597.7900391,13.0799999,0.0000000,0.0000000,0.0000000); //object(dyn_crate_3) (2)
	CreateDynamicObject(1440,2060.1999512,-1554.0999756,12.9799995,0.0000000,0.0000000,0.0000000); //object(dyn_box_pile_3) (2)
	CreateDynamicObject(1264,2073.3000488,-1596.3000488,13.0000000,0.0000000,0.0000000,0.0000000); //object(blackbag1) (1)
	CreateDynamicObject(1336,2096.5000000,-1570.0000000,13.1949997,0.0000000,0.0000000,270.0000000); //object(binnt06_la) (1)
	CreateDynamicObject(1335,2096.5000000,-1572.0000000,13.2500000,0.0000000,0.0000000,270.0000000); //object(binnt05_la) (1)
	CreateDynamicObject(1333,2096.2998047,-1574.0000000,13.0880003,0.0000000,0.0000000,279.9975586); //object(binnt03_la) (1)
	CreateDynamicObject(1332,2096.5996094,-1576.5000000,13.2399998,0.0000000,0.0000000,274.9987793); //object(binnt02_la) (1)
	CreateDynamicObject(3594,2112.3000488,-1566.4000244,13.0000000,0.0000000,0.0000000,13.0000000); //object(la_fuckcar1) (2)
	CreateDynamicObject(2670,2116.6000977,-1575.0999756,12.5769997,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_1) (4)
	CreateDynamicObject(2671,2074.3999023,-1570.6999512,12.4200001,0.0000000,0.0000000,14.0000000); //object(proc_rubbish_3) (5)
	CreateDynamicObject(2671,2094.1999512,-1575.0000000,12.2299995,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_3) (6)
	CreateDynamicObject(2673,2057.5000000,-1568.1999512,12.5500002,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_5) (3)
	CreateDynamicObject(1347,2116.1000977,-1570.0999756,12.9799995,0.0000000,0.0000000,0.0000000); //object(cj_wastebin) (1)
	CreateDynamicObject(1211,2060.0000000,-1603.0000000,13.1000004,0.0000000,0.0000000,0.0000000); //object(fire_hydrant) (1)
	CreateDynamicObject(1216,2076.5000000,-1603.0000000,13.1800003,0.0000000,0.0000000,0.0000000); //object(phonebooth1) (1)
	CreateDynamicObject(1216,2077.5000000,-1603.0000000,13.1980000,0.0000000,0.0000000,0.0000000); //object(phonebooth1) (2)
	CreateDynamicObject(1216,2078.5000000,-1603.0000000,13.1800003,0.0000000,0.0000000,0.0000000); //object(phonebooth1) (3)
	CreateDynamicObject(11292,2139.0000000,-1678.6992188,12.6000004,0.0000000,0.0000000,44.9945068); //object(gasstatiohut) (1)
	CreateDynamicObject(947,2092.5000000,-1554.8000488,14.2799997,0.0000000,0.0000000,180.0000000); //object(bskballhub_lax01) (1)
	CreateDynamicObject(2114,2091.8000488,-1554.5999756,12.2500000,0.0000000,0.0000000,0.0000000); //object(basketball) (1)
	CreateDynamicObject(1764,2139.1999512,-1676.5999756,14.1599998,0.0000000,0.0000000,0.0000000); //object(low_couch_2) (1)
	CreateDynamicObject(1765,2144.6000977,-1592.9000244,13.3500004,0.0000000,0.0000000,200.0000000); //object(low_single_2) (1)
	CreateDynamicObject(1487,2141.5000000,-1677.0000000,14.3900003,0.0000000,0.0000000,0.0000000); //object(dyn_wine_1) (1)
	CreateDynamicObject(1517,2139.6999512,-1678.4000244,14.3900003,0.0000000,0.0000000,0.0000000); //object(dyn_wine_break) (1)
	CreateDynamicObject(1520,2117.8000488,-1573.5999756,13.4799995,0.0000000,0.0000000,0.0000000); //object(dyn_wine_bounce) (1)
	CreateDynamicObject(1668,2118.0000000,-1574.1999512,13.5799999,0.0000000,0.0000000,0.0000000); //object(propvodkabotl1) (1)
	CreateDynamicObject(1669,2118.5000000,-1573.3000488,13.6000004,0.0000000,0.0000000,0.0000000); //object(propwinebotl1) (1)
	CreateDynamicObject(1280,2098.0000000,-1560.0000000,12.6899996,0.0000000,0.0000000,0.0000000); //object(parkbench1) (1)
	CreateDynamicObject(1280,2098.0000000,-1565.0000000,12.6899996,0.0000000,0.0000000,0.0000000); //object(parkbench1) (2)
	CreateDynamicObject(1368,2159.5800781,-1689.0000000,14.7700005,0.0000000,0.0000000,90.0000000); //object(cj_blocker_bench) (1)
	CreateDynamicObject(1368,2136.9899902,-1575.0000000,13.9799995,0.0000000,0.0000000,250.0000000); //object(cj_blocker_bench) (2)
	CreateDynamicObject(1368,2081.3000488,-1563.9000244,13.0799999,0.0000000,0.0000000,90.0000000); //object(cj_blocker_bench) (3)
	CreateDynamicObject(1432,2136.1999512,-1679.6999512,14.2299995,0.0000000,0.0000000,0.0000000); //object(dyn_table_2) (1)
	CreateDynamicObject(2103,2136.3000488,-1673.6600342,15.0249996,0.0000000,0.0000000,0.0000000); //object(low_hi_fi_1) (1)
	CreateDynamicObject(2232,2081.5000000,-1550.5999756,12.9799995,0.0000000,0.0000000,35.0000000); //object(med_speaker_4) (1)
	CreateDynamicObject(2331,2140.5000000,-1677.9499512,14.3900003,0.0000000,0.0000000,15.0000000); //object(cj_bed_furn_1) (1)
	CreateDynamicObject(2629,2146.5000000,-1663.0999756,14.0799999,0.0000000,0.0000000,0.0000000); //object(gym_bench1) (1)
	CreateDynamicObject(2852,2139.5000000,-1677.6999512,14.1899996,0.0000000,0.0000000,0.0000000); //object(gb_bedmags02) (1)
	CreateDynamicObject(2967,2140.5000000,-1677.9000244,14.7950001,0.0000000,0.0000000,180.0000000); //object(mobile1993a) (1)
	CreateDynamicObject(2923,2096.6999512,-1578.8000488,12.1499996,0.0000000,0.0000000,270.0000000); //object(bottle_bank) (1)
	CreateDynamicObject(1265,2096.8999023,-1580.3000488,12.6999998,0.0000000,0.0000000,0.0000000); //object(blackbag2) (4)
	CreateDynamicObject(2915,2139.8000488,-1592.0999756,13.4680004,0.0000000,0.0000000,0.0000000); //object(kmb_dumbbell2) (1)
	CreateDynamicObject(2913,2146.0500488,-1662.5999756,15.0699997,0.0000000,90.0000000,0.0000000); //object(kmb_bpress) (1)
	CreateDynamicObject(2619,2115.0000000,-1592.4200439,15.0000000,10.0000000,0.0000000,270.0000000); //object(mp_ammoambient) (1)
	CreateDynamicObject(1226,2095.8000488,-1562.6999512,15.8999996,0.0000000,0.0000000,0.0000000); //object(lamppost3) (1)
	CreateDynamicObject(1222,2109.6000977,-1564.6999512,12.7880001,0.0000000,0.0000000,0.0000000); //object(barrel3) (1)
	CreateDynamicObject(2045,2159.6999512,-1688.5999756,14.1400003,0.0000000,0.0000000,15.0000000); //object(cj_bbat_nails) (1)
	CreateDynamicObject(2045,2137.0000000,-1670.5300293,14.4750004,260.0000000,0.0000000,14.9963379); //object(cj_bbat_nails) (2)
	CreateDynamicObject(16501,2108.5000000,-1592.4000244,11.9659996,90.0000000,0.0000000,90.0000000); //object(cn2_savgardr2_) (1)
	CreateDynamicObject(16501,2106.1989746,-1589.0000000,13.3129997,0.0000000,0.0000000,0.0000000); //object(cn2_savgardr2_) (2)
	CreateDynamicObject(16501,2108.5000000,-1589.0000000,12.5000000,0.0000000,90.0000000,0.0000000); //object(cn2_savgardr2_) (3)
	CreateDynamicObject(16637,2110.6550293,-1587.5000000,14.0000000,0.0000000,0.0000000,180.0000000); //object(ghostgardoor) (3)
	CreateDynamicObject(16501,2108.5000000,-1585.5500488,11.9659996,90.0000000,0.0000000,90.0000000); //object(cn2_savgardr2_) (5)
	CreateDynamicObject(16501,2108.5000000,-1589.0000000,15.5100002,0.0000000,90.0000000,0.0000000); //object(cn2_savgardr2_) (6)
	CreateDynamicObject(1492,2110.6499023,-1590.9150391,12.5900002,0.0000000,0.0000000,90.0000000); //object(gen_doorint02) (1)
	CreateDynamicObject(16637,2110.6550293,-1592.8199463,14.0000000,0.0000000,0.0000000,179.9945068); //object(ghostgardoor) (5)
	CreateDynamicObject(16637,2106.1579590,-1588.0000000,14.0000000,0.0000000,0.0000000,0.0000000); //object(ghostgardoor) (7)
	CreateDynamicObject(2110,2107.3999023,-1587.1999512,12.5799999,0.0000000,0.0000000,15.0000000); //object(low_dinning_4) (1)
	CreateDynamicObject(1647,2106.8000488,-1591.0000000,12.7500000,0.0000000,0.0000000,0.0000000); //object(lounge_wood_dn) (1)
	CreateDynamicObject(1759,2109.1000977,-1586.5999756,12.5799999,0.0000000,0.0000000,5.0000000); //object(low_single_1) (1)
	CreateDynamicObject(1769,2107.5000000,-1589.0000000,12.5799999,0.0000000,0.0000000,110.0000000); //object(low_single_3) (1)
	CreateDynamicObject(2915,2107.1000977,-1589.5000000,12.7139997,0.0000000,0.0000000,10.0000000); //object(kmb_dumbbell2) (2)
	CreateDynamicObject(2056,2108.6000977,-1585.6600342,14.5000000,0.0000000,0.0000000,0.0000000); //object(cj_target6) (1)
	CreateDynamicObject(2838,2108.1000977,-1587.5000000,12.5889997,0.0000000,0.0000000,0.0000000); //object(gb_takeaway03) (1)
	CreateDynamicObject(2859,2111.3000488,-1591.6999512,12.5450001,0.0000000,0.0000000,0.0000000); //object(gb_kitchtakeway04) (1)
	CreateDynamicObject(1575,2109.5000000,-1586.3000488,12.5699997,0.0000000,0.0000000,15.0000000); //object(drug_white) (1)
	CreateDynamicObject(1650,2110.1000977,-1592.0000000,12.8900003,0.0000000,0.0000000,10.0000000); //object(petrolcanm) (1)
	CreateDynamicObject(2045,2107.3000488,-1591.5999756,12.6499996,3.0000000,0.0000000,0.0000000); //object(cj_bbat_nails) (3)
	CreateDynamicObject(2057,2109.3000488,-1591.9000244,12.7600002,0.0000000,0.0000000,0.0000000); //object(flame_tins) (1)
	CreateDynamicObject(2672,2108.3000488,-1591.1999512,12.8800001,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_4) (2)
	CreateDynamicObject(18066,2110.6550293,-1590.9000244,15.2449999,0.0000000,0.0000000,90.0000000); //object(posterv) (1)
	CreateDynamicObject(18066,2110.6450195,-1589.4699707,15.2449999,0.0000000,0.0000000,270.0000000); //object(posterv) (2)
	CreateDynamicObject(926,2072.1999512,-1651.5999756,12.8000002,0.0000000,0.0000000,12.0000000); //object(rubbish_box2) (2)
	CreateDynamicObject(926,2072.1000977,-1713.9000244,12.8000002,0.0000000,0.0000000,78.0000000); //object(rubbish_box2) (3)
	CreateDynamicObject(926,2011.1999512,-1721.1999512,12.8000002,0.0000000,0.0000000,77.9974365); //object(rubbish_box2) (4)
	CreateDynamicObject(926,1992.4000244,-1722.4000244,12.8000002,0.0000000,0.0000000,56.0000000); //object(rubbish_box2) (5)
	CreateDynamicObject(853,2038.5999756,-1703.0000000,12.8999996,0.0000000,0.0000000,0.0000000); //object(cj_urb_rub_5) (1)
	CreateDynamicObject(850,2016.6999512,-1581.1999512,12.7399998,0.0000000,0.0000000,0.0000000); //object(cj_urb_rub_1) (2)
	CreateDynamicObject(1450,2037.3900146,-1700.5000000,13.1199999,0.0000000,0.0000000,90.0000000); //object(dyn_crate_3) (3)
	CreateDynamicObject(1441,2037.5000000,-1657.0000000,13.1680002,0.0000000,0.0000000,99.0000000); //object(dyn_box_pile_4) (3)
	CreateDynamicObject(1441,1992.3000488,-1666.6999512,13.1680002,0.0000000,0.0000000,98.9978027); //object(dyn_box_pile_4) (4)
	CreateDynamicObject(1441,1985.8800049,-1611.3000488,13.1680002,0.0000000,0.0000000,78.0000000); //object(dyn_box_pile_4) (5)
	CreateDynamicObject(1440,2010.6999512,-1713.1999512,13.1000004,0.0000000,0.0000000,275.0000000); //object(dyn_box_pile_3) (3)
	CreateDynamicObject(1440,2010.6999512,-1624.4000244,13.1000004,0.0000000,0.0000000,274.9987793); //object(dyn_box_pile_3) (4)
	CreateDynamicObject(1440,2020.0999756,-1600.4000244,13.1000004,0.0000000,0.0000000,274.9987793); //object(dyn_box_pile_3) (5)
	CreateDynamicObject(1440,2101.1000977,-1649.9000244,13.0000000,0.0000000,0.0000000,274.9987793); //object(dyn_box_pile_3) (6)
	CreateDynamicObject(1265,2072.1999512,-1724.1999512,12.8999996,0.0000000,0.0000000,0.0000000); //object(blackbag2) (5)
	CreateDynamicObject(1265,2071.1000977,-1624.4000244,12.8999996,0.0000000,0.0000000,0.0000000); //object(blackbag2) (6)
	CreateDynamicObject(1265,1957.6999512,-1561.9000244,12.9899998,0.0000000,0.0000000,0.0000000); //object(blackbag2) (7)
	CreateDynamicObject(1333,2017.0999756,-1663.4000244,13.4300003,0.0000000,0.0000000,0.0000000); //object(binnt03_la) (2)
	CreateDynamicObject(1333,2019.5999756,-1663.3000488,13.4300003,0.0000000,0.0000000,5.0000000); //object(binnt03_la) (3)
	CreateDynamicObject(1332,2021.9000244,-1663.4000244,13.5649996,0.0000000,0.0000000,355.0000000); //object(binnt02_la) (2)
	CreateDynamicObject(1332,2064.1999512,-1663.1999512,13.5649996,0.0000000,0.0000000,354.9957275); //object(binnt02_la) (3)
	CreateDynamicObject(1333,2066.5000000,-1663.4000244,13.4300003,0.0000000,0.0000000,2.0000000); //object(binnt03_la) (4)
	CreateDynamicObject(1333,2019.9000244,-1743.4000244,13.4300003,0.0000000,0.0000000,1.9995117); //object(binnt03_la) (5)
	CreateDynamicObject(1333,2022.1999512,-1743.4000244,13.4300003,0.0000000,0.0000000,358.0000000); //object(binnt03_la) (6)
	CreateDynamicObject(1333,2063.1000977,-1743.1999512,13.4300003,0.0000000,0.0000000,357.9949951); //object(binnt03_la) (7)
	CreateDynamicObject(1332,2065.3999023,-1743.1999512,13.5649996,0.0000000,0.0000000,354.9957275); //object(binnt02_la) (4)
	CreateDynamicObject(1265,2067.0000000,-1743.1999512,12.8999996,0.0000000,0.0000000,0.0000000); //object(blackbag2) (8)
	CreateDynamicObject(1265,2066.6000977,-1744.0999756,12.8999996,0.0000000,0.0000000,23.0000000); //object(blackbag2) (9)
	CreateDynamicObject(1265,2018.5000000,-1664.4000244,12.8999996,0.0000000,0.0000000,22.9998779); //object(blackbag2) (10)
	CreateDynamicObject(1331,1992.5999756,-1703.5999756,13.4300003,0.0000000,0.0000000,90.0000000); //object(binnt01_la) (1)
	CreateDynamicObject(1331,1992.8000488,-1701.1999512,13.4300003,0.0000000,0.0000000,95.0000000); //object(binnt01_la) (2)
	CreateDynamicObject(1331,1992.9000244,-1653.0999756,13.4300003,0.0000000,0.0000000,94.9987793); //object(binnt01_la) (3)
	CreateDynamicObject(1331,1992.9000244,-1650.9000244,13.4300003,0.0000000,0.0000000,88.0000000); //object(binnt01_la) (4)
	CreateDynamicObject(1331,1993.0000000,-1648.5999756,13.4300003,0.0000000,0.0000000,83.0000000); //object(binnt01_la) (5)
	CreateDynamicObject(1331,1988.8000488,-1549.9000244,13.5600004,0.0000000,0.0000000,12.0000000); //object(binnt01_la) (6)
	CreateDynamicObject(1331,1991.0999756,-1549.9000244,13.5600004,0.0000000,0.0000000,1.0000000); //object(binnt01_la) (7)
	CreateDynamicObject(1331,1993.4000244,-1550.0000000,13.5600004,0.0000000,0.0000000,355.0000000); //object(binnt01_la) (8)
	CreateDynamicObject(1333,1995.5999756,-1549.8000488,13.5600004,0.0000000,0.0000000,0.0000000); //object(binnt03_la) (8)
	CreateDynamicObject(1429,1994.6999512,-1550.6999512,12.8900003,0.0000000,0.0000000,23.0000000); //object(dyn_tv) (2)
	CreateDynamicObject(2670,1993.4000244,-1702.5000000,12.6379995,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_1) (5)
	CreateDynamicObject(2670,1992.5000000,-1551.0999756,12.7299995,0.0000000,0.0000000,12.0000000); //object(proc_rubbish_1) (6)
	CreateDynamicObject(2670,1990.9000244,-1578.4000244,12.6920004,0.0000000,0.0000000,11.9970703); //object(proc_rubbish_1) (7)
	CreateDynamicObject(2670,1949.9000244,-1663.8000488,12.6379995,0.0000000,0.0000000,20.0000000); //object(proc_rubbish_1) (8)
	CreateDynamicObject(2670,2010.3000488,-1626.5000000,12.6379995,0.0000000,0.0000000,19.9951172); //object(proc_rubbish_1) (9)
	CreateDynamicObject(2670,2072.1999512,-1631.6999512,12.6379995,0.0000000,0.0000000,120.0000000); //object(proc_rubbish_1) (10)
	CreateDynamicObject(2670,2071.1000977,-1688.0000000,12.6379995,0.0000000,0.0000000,119.9981384); //object(proc_rubbish_1) (11)
	CreateDynamicObject(2671,2041.0999756,-1724.5999756,12.5660000,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_3) (7)
	CreateDynamicObject(2671,2039.6999512,-1660.6999512,12.5570002,0.0000000,0.0000000,26.0000000); //object(proc_rubbish_3) (8)
	CreateDynamicObject(2671,2064.8999023,-1664.9000244,12.5559998,0.0000000,0.0000000,25.9991455); //object(proc_rubbish_3) (9)
	CreateDynamicObject(2671,1994.0000000,-1653.0000000,12.5559998,0.0000000,0.0000000,120.0000000); //object(proc_rubbish_3) (10)
	CreateDynamicObject(2671,1993.6999512,-1598.4000244,12.5649996,0.0000000,0.0000000,119.9981384); //object(proc_rubbish_3) (11)
	CreateDynamicObject(2671,1935.6999512,-1569.5999756,12.5974998,0.0000000,0.0000000,119.9981384); //object(proc_rubbish_3) (12)
	CreateDynamicObject(2672,2013.3000488,-1577.0999756,12.9200001,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_4) (3)
	CreateDynamicObject(2672,1964.9000244,-1641.1999512,15.2500000,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_4) (4)
	CreateDynamicObject(2672,1983.9000244,-1697.4000244,15.2500000,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_4) (5)
	CreateDynamicObject(2674,1956.9000244,-1731.5999756,14.9799995,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_2) (3)
	CreateDynamicObject(2674,1977.5999756,-1637.1999512,14.9799995,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_2) (4)
	CreateDynamicObject(2676,2042.0999756,-1632.6999512,12.6499996,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_8) (2)
	CreateDynamicObject(2676,2049.6999512,-1686.1999512,12.6499996,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_8) (3)
	CreateDynamicObject(2676,2021.4000244,-1744.6999512,12.6499996,0.0000000,0.0000000,0.0000000); //object(proc_rubbish_8) (4)
	CreateDynamicObject(3594,2011.0999756,-1562.4000244,13.2700005,0.0000000,0.0000000,0.0000000); //object(la_fuckcar1) (3)
	CreateDynamicObject(1343,2011.0999756,-1627.4000244,13.2799997,0.0000000,0.0000000,90.0000000); //object(cj_dumpster3) (1)
//Unity
	CreateDynamicObject(970,1712.84863281,-1934.50781250,13.12045574,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1700.53906250,-1857.95874023,13.12855244,0.00000000,0.00000000,270.00000000); //convertffs(2)
	CreateDynamicObject(970,1700.56250000,-1870.75097656,13.12161446,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(626,1717.72851562,-1873.30468750,14.61448956,0.00000000,0.00000000,0.00000000); //convertffs(47)
	CreateDynamicObject(3858,1726.91406250,-1872.69140625,15.47740078,0.00000000,0.00000000,43.98925781); //object(ottosmash1) (1)
	CreateDynamicObject(3857,1707.08300781,-1872.79492188,15.48017693,0.00000000,0.00000000,45.99975586); //object(ottosmash3) (1)
	CreateDynamicObject(970,1727.74145508,-1859.94104004,13.13074303,0.00000000,0.00000000,179.99450684); //convertffs(1)
	CreateDynamicObject(1223,1799.36230469,-1860.27612305,12.57893467,0.00000000,0.00000000,90.00000000); //object(lampost_coast) (1)
	CreateDynamicObject(1215,1811.58666992,-1884.31872559,13.14869690,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
	CreateDynamicObject(1256,1773.20996094,-1948.95996094,13.76901054,0.00000000,0.00000000,90.00000000); //object(stonebench1) (2)
	CreateDynamicObject(1256,1735.35766602,-1948.32067871,13.77664375,0.00000000,0.00000000,90.00000000); //object(stonebench1) (5)
	CreateDynamicObject(970,1718.72753906,-1934.54589844,13.12119579,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(3857,1707.01269531,-1887.36816406,15.48019409,0.00000000,0.00000000,43.98925781); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1723.22058105,-1887.33251953,15.47623634,0.00000000,0.00000000,43.99475098); //object(ottosmash3) (1)
	CreateDynamicObject(1256,1704.25097656,-1948.31018066,13.77664375,0.00000000,0.00000000,90.00000000); //object(stonebench1) (8)
	CreateDynamicObject(9339,1760.52734375,-1849.81262207,12.31313896,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(9339,1798.56567383,-1849.81262207,12.31313896,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (2)
	CreateDynamicObject(8658,1754.61413574,-1942.36718750,13.57834911,0.00000000,0.00000000,90.00000000); //object(shabbyhouse11_lvs) (1)
	CreateDynamicObject(8658,1789.23669434,-1942.36718750,13.55449200,0.00000000,0.00000000,270.00000000); //object(shabbyhouse11_lvs) (2)
	CreateDynamicObject(970,1781.81457520,-1942.36181641,14.35768700,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1776.88378906,-1942.38769531,14.04518700,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1766.74804688,-1942.45300293,14.06904411,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1761.83764648,-1942.44140625,14.38154411,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(1215,1779.37609863,-1942.46813965,14.05802917,0.00000000,0.00000000,0.00000000); //object(bollardlight) (2)
	CreateDynamicObject(1215,1774.50964355,-1942.41345215,14.05802917,0.00000000,0.00000000,0.00000000); //object(bollardlight) (3)
	CreateDynamicObject(1215,1769.23437500,-1942.42382812,14.08188629,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1764.37304688,-1942.45275879,14.08188629,0.00000000,0.00000000,0.00000000); //object(bollardlight) (5)
	CreateDynamicObject(1215,1759.72009277,-1942.32812500,14.39438629,0.00000000,0.00000000,0.00000000); //object(bollardlight) (6)
	CreateDynamicObject(1468,1834.34777832,-1876.77319336,13.84885406,0.00000000,0.00000000,0.00000000); //object(dyn_mesh_05) (1)
	CreateDynamicObject(1468,1839.55834961,-1876.80029297,13.84728336,0.00000000,0.00000000,0.00000000); //object(dyn_mesh_05) (2)
	CreateDynamicObject(1468,1844.75378418,-1876.76330566,13.84703445,0.00000000,0.00000000,0.00000000); //object(dyn_mesh_05) (3)
	CreateDynamicObject(1468,1834.02697754,-1852.13439941,13.65865707,0.00000000,0.00000000,90.00000000); //object(dyn_mesh_05) (4)
	CreateDynamicObject(1468,1833.95324707,-1857.37658691,13.65865707,0.00000000,0.00000000,90.00000000); //object(dyn_mesh_05) (5)
	CreateDynamicObject(1468,1848.48388672,-1863.78552246,13.84703445,0.00000000,0.00000000,90.00000000); //object(dyn_mesh_05) (7)
	CreateDynamicObject(1468,1848.49743652,-1860.34338379,13.85401726,0.00000000,0.00000000,90.00000000); //object(dyn_mesh_05) (8)
	CreateDynamicObject(2790,1709.69995117,-1888.64538574,21.80695343,0.00000000,0.00000000,0.00000000); //object(cj_arrive_board) (1)
	CreateDynamicObject(2789,1720.71313477,-1888.69677734,21.79760361,0.00000000,0.00000000,0.00000000); //object(cj_depart_board) (1)
	CreateDynamicObject(10932,1719.97460938,-1907.41040039,19.82852364,0.00000000,0.00000000,0.00000000); //object(station03_sfs) (1)
	CreateDynamicObject(5170,1773.52929688,-1910.49609375,16.39614487,0.00000000,0.00000000,90.00000000); //object(imnrmpy2_las2) (1)
	CreateDynamicObject(3857,1721.41784668,-1934.52539062,18.51813889,0.00000000,0.00000000,44.99475098); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1728.87121582,-1934.52526855,18.51813889,0.00000000,0.00000000,44.99450684); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1710.13476562,-1934.52929688,18.51813889,0.00000000,0.00000000,44.98901367); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1704.91992188,-1934.58215332,18.51813889,0.00000000,0.00000000,44.99450684); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1701.16625977,-1930.79016113,18.51813889,0.00000000,0.00000000,135.00000000); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1701.16101074,-1923.37377930,18.51813889,0.00000000,0.00000000,135.00000000); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1701.16601562,-1915.92285156,18.51813889,0.00000000,0.00000000,135.00000000); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1701.14477539,-1908.47265625,18.51813889,0.00000000,0.00000000,135.00000000); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1701.13366699,-1901.00976562,18.51813889,0.00000000,0.00000000,135.00000000); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1701.12329102,-1893.55187988,18.51813889,0.00000000,0.00000000,135.00000000); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1701.07128906,-1886.15136719,18.51813889,0.00000000,0.00000000,135.00000000); //object(ottosmash3) (1)
	CreateDynamicObject(1256,1770.18261719,-1933.18164062,13.21672535,0.00000000,0.00000000,179.99450684); //object(stonebench1) (6)
	CreateDynamicObject(1256,1770.10803223,-1920.79309082,13.21687222,0.00000000,0.00000000,179.99450684); //object(stonebench1) (6)
	CreateDynamicObject(1256,1770.06323242,-1908.54260254,13.21695995,0.00000000,0.00000000,179.99450684); //object(stonebench1) (6)
	CreateDynamicObject(9339,1786.62792969,-1849.81262207,12.31313896,0.00000000,0.00000000,270.00000000); //object(sfnvilla001_cm) (1)
	CreateDynamicObject(1359,1711.22973633,-1910.74658203,13.26603699,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (1)
	CreateDynamicObject(1359,1725.41003418,-1932.17309570,13.26918221,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (2)
	CreateDynamicObject(1359,1725.62719727,-1916.52404785,13.26252079,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (3)
	CreateDynamicObject(1359,1725.75488281,-1900.84179688,13.26249027,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (4)
	CreateDynamicObject(1359,1703.53576660,-1888.89392090,13.26791668,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (5)
	CreateDynamicObject(1359,1703.35864258,-1932.29528809,13.26795959,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (6)
	CreateDynamicObject(1359,1770.01904297,-1927.47631836,13.25614738,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (7)
	CreateDynamicObject(1359,1770.37084961,-1914.15124512,13.25545883,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (9)
	CreateDynamicObject(1571,1697.47912598,-1873.35498047,13.88710403,0.00000000,0.00000000,180.00000000); //object(cj_noodle_1) (1)
	CreateDynamicObject(970,1697.60253906,-1882.88183594,13.10822392,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1706.99975586,-1863.91149902,13.11999416,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1714.85595703,-1863.90112305,13.12598991,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1723.11608887,-1863.94470215,13.12593651,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1703.85620117,-1868.06250000,13.12076283,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1726.31494141,-1867.55908203,13.12152290,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1700.62365723,-1865.84008789,13.12155151,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1700.52514648,-1847.12426758,13.10409546,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1700.87561035,-1838.22802734,13.09654140,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1723.49804688,-1849.74609375,13.12808323,0.00000000,0.00000000,179.99450684); //convertffs(1)
	CreateDynamicObject(970,1727.66870117,-1849.74694824,13.13302994,0.00000000,0.00000000,179.99450684); //convertffs(1)
	CreateDynamicObject(626,1712.57214355,-1873.36596680,14.61574936,0.00000000,0.00000000,0.00000000); //convertffs(47)
	CreateDynamicObject(970,1737.59594727,-1860.14941406,13.13057041,0.00000000,0.00000000,179.99450684); //convertffs(1)
	CreateDynamicObject(970,1748.28857422,-1860.09069824,13.13064194,0.00000000,0.00000000,179.99450684); //convertffs(1)
	CreateDynamicObject(970,1763.62316895,-1860.11914062,13.13060760,0.00000000,0.00000000,179.99450684); //convertffs(1)
	CreateDynamicObject(970,1775.92919922,-1860.06469727,13.13067341,0.00000000,0.00000000,179.99450684); //convertffs(1)
	CreateDynamicObject(970,1787.72399902,-1860.13403320,13.13058853,0.00000000,0.00000000,179.99450684); //convertffs(1)
	CreateDynamicObject(970,1811.70117188,-1846.42382812,13.12960625,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1811.68383789,-1862.44848633,13.12183380,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1811.59179688,-1897.12670898,13.12107182,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1811.63659668,-1882.14306641,13.13589096,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1809.57421875,-1880.00878906,13.13588333,0.00000000,0.00000000,179.99450684); //convertffs(1)
	CreateDynamicObject(1223,1737.86499023,-1849.55358887,12.58135891,0.00000000,0.00000000,281.99707031); //object(lampost_coast) (1)
	CreateDynamicObject(1232,1726.38732910,-1871.04028320,15.20042229,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (1)
	CreateDynamicObject(1232,1726.28698730,-1863.91345215,15.21113586,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (2)
	CreateDynamicObject(1232,1703.87695312,-1864.09082031,15.20591927,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (3)
	CreateDynamicObject(1232,1703.88232422,-1871.45422363,15.20591736,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (4)
	CreateDynamicObject(1232,1701.04760742,-1911.68640137,13.06468582,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (6)
	CreateDynamicObject(1232,1700.96533203,-1902.92395020,13.06468582,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (7)
	CreateDynamicObject(1232,1700.83728027,-1900.71618652,13.06468582,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (8)
	CreateDynamicObject(1232,1700.97973633,-1891.79357910,13.06468582,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (9)
	CreateDynamicObject(1232,1701.00390625,-1890.42565918,13.06468582,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (10)
	CreateDynamicObject(1232,1700.92150879,-1914.08325195,13.06468582,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (11)
	CreateDynamicObject(1232,1701.08459473,-1922.52575684,13.06468582,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (12)
	CreateDynamicObject(1232,1701.07690430,-1924.39184570,13.06468582,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (13)
	CreateDynamicObject(1232,1701.07910156,-1933.48913574,13.06468582,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (14)
	CreateDynamicObject(1232,1713.35241699,-1934.88989258,13.06468582,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (15)
	CreateDynamicObject(1232,1718.84240723,-1935.00073242,13.06468582,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (16)
	CreateDynamicObject(1297,1704.07983398,-1887.38513184,15.96346760,0.00000000,180.00000000,0.00000000); //object(lamppost1) (1)
	CreateDynamicObject(1297,1720.38342285,-1887.32250977,15.95948601,0.00000000,179.99450684,0.00000000); //object(lamppost1) (2)
	CreateDynamicObject(1297,1720.28784180,-1872.57019043,15.95950890,0.00000000,179.99450684,0.00000000); //object(lamppost1) (3)
	CreateDynamicObject(1297,1704.41784668,-1872.86437988,15.96338463,0.00000000,179.99450684,0.00000000); //object(lamppost1) (4)
	CreateDynamicObject(1297,1710.06774902,-1887.56274414,15.96200466,0.00000000,179.99450684,180.00000000); //object(lamppost1) (5)
	CreateDynamicObject(1297,1725.76281738,-1887.38891602,15.95817184,0.00000000,179.99450684,179.99450684); //object(lamppost1) (6)
	CreateDynamicObject(1297,1726.10449219,-1872.66076660,15.95808792,0.00000000,179.99450684,179.99450684); //object(lamppost1) (7)
	CreateDynamicObject(1297,1709.90954590,-1872.72265625,15.96204281,0.00000000,179.99450684,179.99450684); //object(lamppost1) (8)
	CreateDynamicObject(3857,1706.92089844,-1887.41772461,15.48021603,0.00000000,0.00000000,43.98925781); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1723.36755371,-1887.40722656,15.47620010,0.00000000,0.00000000,44.98901367); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1722.89111328,-1872.59704590,15.47631645,0.00000000,0.00000000,44.98901367); //object(ottosmash3) (1)
	CreateDynamicObject(3857,1706.81542969,-1872.84631348,15.48024178,0.00000000,0.00000000,44.98901367); //object(ottosmash3) (1)
	CreateDynamicObject(970,1722.12536621,-1942.63281250,13.12389851,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1706.91186523,-1942.48254395,13.12027168,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(1215,1811.56201172,-1895.03784180,13.14410877,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,1830.89111328,-1850.13012695,13.14244843,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
	CreateDynamicObject(1359,1759.02661133,-1948.25585938,13.80811119,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (9)
	CreateDynamicObject(1359,1727.35095215,-1948.11047363,13.81574440,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (9)
	CreateDynamicObject(1359,1697.46130371,-1948.21105957,13.81574440,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (9)
	CreateDynamicObject(970,1774.07922363,-1888.44824219,13.10244370,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1774.07922363,-1896.02563477,13.10261536,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1774.07922363,-1901.47937012,13.10218811,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1774.07922363,-1911.00085449,13.10198498,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1774.07922363,-1919.59106445,13.10191822,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1774.07922363,-1928.94860840,13.10114002,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1780.32873535,-1935.71472168,13.09835625,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1789.97827148,-1935.69543457,13.09835625,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1800.08056641,-1935.76794434,13.09835625,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(2792,1772.38830566,-1934.98876953,17.05756187,0.00000000,0.00000000,0.00000000); //object(cj_air_d_1) (1)
	CreateDynamicObject(2793,1772.38830566,-1922.50341797,17.05756187,0.00000000,0.00000000,0.00000000); //object(cj_air_d_2) (1)
	CreateDynamicObject(2794,1772.38830566,-1916.64001465,17.05756187,0.00000000,0.00000000,0.00000000); //object(cj_air_d_3) (1)
	CreateDynamicObject(2795,1772.38830566,-1904.29187012,17.05756187,0.00000000,0.00000000,0.00000000); //object(cj_air_d_4) (1)
	CreateDynamicObject(2792,1772.38830566,-1898.52343750,17.05756187,0.00000000,0.00000000,0.00000000); //object(cj_air_d_1) (2)
	CreateDynamicObject(626,1768.25097656,-1906.13891602,14.60964012,0.00000000,0.00000000,0.00000000); //object(veg_palmkb2) (2)
	CreateDynamicObject(626,1757.41479492,-1906.08728027,14.61429691,0.00000000,0.00000000,0.00000000); //object(veg_palmkb2) (3)
	CreateDynamicObject(626,1718.27087402,-1932.04638672,14.61741543,0.00000000,0.00000000,0.00000000); //object(veg_palmkb2) (4)
	CreateDynamicObject(626,1713.61120605,-1931.84338379,14.61617851,0.00000000,0.00000000,0.00000000); //object(veg_palmkb2) (5)
	CreateDynamicObject(626,1712.64465332,-1887.54943848,14.61573124,0.00000000,0.00000000,0.00000000); //object(veg_palmkb2) (6)
	CreateDynamicObject(626,1712.64453125,-1887.54882812,14.61573124,0.00000000,0.00000000,0.00000000); //object(veg_palmkb2) (7)
	CreateDynamicObject(626,1717.71240234,-1887.58374023,14.61449432,0.00000000,0.00000000,0.00000000); //object(veg_palmkb2) (8)
	CreateDynamicObject(1280,1728.85888672,-1875.90197754,12.96453094,0.00000000,0.00000000,0.00000000); //object(parkbench1) (1)
	CreateDynamicObject(1280,1728.70434570,-1883.80676270,12.96456909,0.00000000,0.00000000,0.00000000); //object(parkbench1) (2)
	CreateDynamicObject(1280,1701.76818848,-1883.92407227,12.97114658,0.00000000,0.00000000,180.00000000); //object(parkbench1) (3)
	CreateDynamicObject(1280,1701.74475098,-1876.20886230,12.97115231,0.00000000,0.00000000,179.99450684); //object(parkbench1) (4)
	CreateDynamicObject(1280,1707.61108398,-1873.55566406,12.96971989,0.00000000,0.00000000,90.00000000); //object(parkbench1) (5)
	CreateDynamicObject(1280,1723.07385254,-1873.16296387,12.96594334,0.00000000,0.00000000,90.00000000); //object(parkbench1) (6)
	CreateDynamicObject(1280,1707.08935547,-1887.91040039,12.96984673,0.00000000,0.00000000,90.00000000); //object(parkbench1) (7)
	CreateDynamicObject(1280,1722.98913574,-1888.12707520,12.96596432,0.00000000,0.00000000,90.00000000); //object(parkbench1) (8)
	CreateDynamicObject(1280,1707.15209961,-1886.59423828,12.96983147,0.00000000,0.00000000,270.00000000); //object(parkbench1) (9)
	CreateDynamicObject(1280,1722.97143555,-1886.71862793,12.96596813,0.00000000,0.00000000,270.00000000); //object(parkbench1) (10)
	CreateDynamicObject(1280,1723.04699707,-1871.90759277,12.96595001,0.00000000,0.00000000,270.00000000); //object(parkbench1) (11)
	CreateDynamicObject(1280,1707.63500977,-1872.22644043,12.96971321,0.00000000,0.00000000,270.00000000); //object(parkbench1) (12)
	CreateDynamicObject(1359,1728.89440918,-1879.81347656,13.26172352,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (4)
	CreateDynamicObject(1359,1701.82641602,-1880.12182617,13.26833344,0.00000000,0.00000000,0.00000000); //object(cj_bin1) (4)
	CreateDynamicObject(970,1808.20458984,-1852.51037598,12.96554375,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(8558,1790.60668945,-1851.96032715,13.93560314,0.00000000,0.00000000,0.00000000); //object(vgshseing28) (1)
	CreateDynamicObject(8558,1750.22949219,-1851.92382812,13.93560314,0.00000000,0.00000000,0.00000000); //object(vgshseing28) (2)
	CreateDynamicObject(970,1729.78417969,-1852.38574219,12.96554375,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(1223,1770.23522949,-1860.43225098,12.57874298,0.00000000,0.00000000,90.00000000); //object(lampost_coast) (1)
	CreateDynamicObject(1223,1739.68457031,-1860.24694824,12.62880039,0.00000000,0.00000000,90.00000000); //object(lampost_coast) (1)
	CreateDynamicObject(1223,1745.92419434,-1860.01513672,12.57925320,0.00000000,0.00000000,90.00000000); //object(lampost_coast) (1)
	CreateDynamicObject(970,1742.91577148,-1849.62451172,13.13291073,0.00000000,0.00000000,179.99450684); //convertffs(1)
	CreateDynamicObject(970,1698.05651855,-1899.58825684,13.10988426,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1693.91552734,-1899.58227539,13.09471607,0.00000000,0.00000000,179.99450684); //convertffs(0)
	CreateDynamicObject(970,1687.79650879,-1897.50012207,13.09009075,0.00000000,0.00000000,89.99450684); //convertffs(0)
	CreateDynamicObject(970,1687.80126953,-1893.34631348,13.08905888,0.00000000,0.00000000,89.99450684); //convertffs(0)
	CreateDynamicObject(970,1687.80297852,-1889.17700195,13.08803463,0.00000000,0.00000000,89.99450684); //convertffs(0)
	CreateDynamicObject(970,1687.81738281,-1885.02502441,13.08643723,0.00000000,0.00000000,269.99450684); //convertffs(0)
	CreateDynamicObject(2942,1701.75476074,-1871.71520996,13.21269417,0.00000000,0.00000000,180.00000000); //object(kmb_atm1) (1)
	CreateDynamicObject(970,1721.42443848,-1851.81005859,13.12922001,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(970,1721.47509766,-1857.84570312,13.12960625,0.00000000,0.00000000,270.00000000); //convertffs(3)
	CreateDynamicObject(4639,1696.55627441,-1881.36267090,14.24948692,0.00000000,0.00000000,90.00000000); //object(paypark_lan02) (1)
	CreateDynamicObject(970,1689.87988281,-1882.88439941,13.09490108,0.00000000,0.00000000,359.98901367); //convertffs(0)
	CreateDynamicObject(5170,1755.14916992,-1950.40283203,16.17534637,0.00000000,0.00000000,180.00000000); //object(imnrmpy2_las2) (1)
	CreateDynamicObject(1256,1764.35351562,-1949.05822754,13.76901054,0.00000000,0.00000000,90.00000000); //object(stonebench1) (2)
	CreateDynamicObject(5170,1706.24096680,-1950.40441895,16.17534637,0.00000000,0.00000000,179.99450684); //object(imnrmpy2_las2) (1)
	CreateDynamicObject(1232,1692.00341797,-1882.91113281,15.17287254,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (3)
	CreateDynamicObject(1232,1687.82556152,-1899.58898926,15.17565727,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (3)
	CreateDynamicObject(1232,1691.82641602,-1899.60925293,15.18529129,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (3)
	CreateDynamicObject(1232,1695.51660156,-1882.61621094,15.18416214,0.00000000,0.00000000,0.00000000); //object(streetlamp1) (3)
	CreateDynamicObject(1215,1780.22155762,-1950.45178223,13.67387772,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1779.06152344,-1950.41687012,13.67387772,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1767.76110840,-1950.48254395,13.67387772,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1766.69970703,-1950.48596191,13.67387772,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1761.89514160,-1950.47229004,13.67387772,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1760.86718750,-1950.42736816,13.67387772,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1749.47570801,-1950.51757812,13.35538197,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1748.40979004,-1950.39160156,13.54466724,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1743.61401367,-1950.44726562,13.73987865,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1742.60522461,-1950.47302246,13.68151093,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1731.23840332,-1950.46325684,13.68151093,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1730.15356445,-1950.41345215,13.68151093,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1718.82727051,-1950.51330566,13.12330914,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1717.75720215,-1950.49279785,13.31333160,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1712.97924805,-1950.46740723,13.68151093,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1711.89306641,-1950.43688965,13.68151093,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1700.57543945,-1950.45971680,13.68151093,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1699.53698730,-1950.46887207,13.68151093,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1694.74218750,-1950.43493652,13.68151093,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1693.65380859,-1950.43908691,13.68151093,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1727.15014648,-1910.09899902,13.12791634,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1727.20117188,-1914.05285645,13.12790298,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(2911,1695.45654297,-1873.16198730,12.73971272,0.00000000,0.00000000,270.00000000); //object(kmb_petroldoor) (1)
	/////////////////////////////////////KARTING///////////////////////////////////////////
	CreateDynamicObject(1327,2510.26879883,-1523.08666992,23.56292915,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (3)
	CreateDynamicObject(1437,2530.13427734,-1514.38806152,23.21956825,0.00000000,90.00000000,350.00000000); //object(dyn_ladder_2) (1)
	CreateDynamicObject(1437,2524.34887695,-1514.37426758,23.21972656,0.00000000,90.00000000,349.99694824); //object(dyn_ladder_2) (2)
	CreateDynamicObject(1437,2518.58056641,-1514.37145996,23.21975708,0.00000000,90.00000000,349.99694824); //object(dyn_ladder_2) (3)
	CreateDynamicObject(1437,2512.78173828,-1514.36157227,23.21987152,0.00000000,90.00000000,349.99694824); //object(dyn_ladder_2) (4)
	CreateDynamicObject(1437,2507.00097656,-1514.37304688,23.21973038,0.00000000,90.00000000,349.99145508); //object(dyn_ladder_2) (5)
	CreateDynamicObject(1437,2501.17041016,-1514.35888672,23.22697258,0.00000000,90.00000000,349.99694824); //object(dyn_ladder_2) (6)
	CreateDynamicObject(1437,2495.37695312,-1514.43420410,23.22387123,0.00000000,90.00000000,350.74694824); //object(dyn_ladder_2) (7)
	CreateDynamicObject(1437,2530.11816406,-1514.43066406,23.72024536,0.00000000,90.00000000,349.99145508); //object(dyn_ladder_2) (8)
	CreateDynamicObject(1437,2524.36035156,-1514.37072754,23.74774361,0.00000000,90.00000000,349.99694824); //object(dyn_ladder_2) (9)
	CreateDynamicObject(1437,2518.56250000,-1514.39208984,23.73085594,0.00000000,90.00000000,349.99694824); //object(dyn_ladder_2) (10)
	CreateDynamicObject(1437,2512.78271484,-1514.38012695,23.73420334,0.00000000,90.00000000,349.99694824); //object(dyn_ladder_2) (11)
	CreateDynamicObject(1437,2506.97851562,-1514.38256836,23.72974205,0.00000000,90.00000000,349.99694824); //object(dyn_ladder_2) (12)
	CreateDynamicObject(1437,2501.12304688,-1514.42578125,23.70696259,0.00000000,90.00000000,349.99145508); //object(dyn_ladder_2) (13)
	CreateDynamicObject(1437,2495.39257812,-1514.42480469,23.74762535,0.00000000,90.00000000,350.73852539); //object(dyn_ladder_2) (15)
	CreateDynamicObject(1327,2506.80297852,-1515.44567871,23.62248421,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (4)
	CreateDynamicObject(1327,2505.58935547,-1516.50988770,23.62248421,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (5)
	CreateDynamicObject(1327,2504.52734375,-1517.83020020,23.62248421,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (6)
	CreateDynamicObject(1327,2503.62231445,-1519.22192383,23.62248421,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (7)
	CreateDynamicObject(1327,2502.69848633,-1520.75793457,23.49748611,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (8)
	CreateDynamicObject(1327,2501.99951172,-1522.36877441,23.49748611,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (9)
	CreateDynamicObject(1327,2501.47021484,-1524.07275391,23.47248650,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (10)
	CreateDynamicObject(1327,2501.72607422,-1525.86596680,23.44748688,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (11)
	CreateDynamicObject(1327,2502.26977539,-1527.56762695,23.44748688,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (12)
	CreateDynamicObject(1327,2502.92578125,-1529.14843750,23.39748764,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (13)
	CreateDynamicObject(1327,2511.80541992,-1535.65942383,23.37248802,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (14)
	CreateDynamicObject(1327,2510.40771484,-1534.93664551,23.32248878,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (15)
	CreateDynamicObject(1327,2508.76171875,-1534.15979004,23.32248878,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (16)
	CreateDynamicObject(1327,2503.53222656,-1530.29016113,23.37248802,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (20)
	CreateDynamicObject(1327,2512.52954102,-1537.32275391,23.27248955,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (21)
	CreateDynamicObject(1327,2513.29858398,-1538.95458984,23.22249031,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (22)
	CreateDynamicObject(1327,2514.04565430,-1540.59020996,23.17249107,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (23)
	CreateDynamicObject(1327,2513.43554688,-1542.07885742,23.14749146,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (24)
	CreateDynamicObject(1327,2512.22143555,-1543.30908203,23.14749146,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (25)
	CreateDynamicObject(1327,2511.10083008,-1544.52233887,23.14438629,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (26)
	CreateDynamicObject(1327,2509.46313477,-1545.29052734,23.14026070,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (27)
	CreateDynamicObject(1327,2504.62475586,-1549.67614746,23.02929688,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (31)
	CreateDynamicObject(1327,2504.31250000,-1551.19042969,23.02602005,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (32)
	CreateDynamicObject(1327,2504.52270508,-1552.82836914,22.94339561,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (33)
	CreateDynamicObject(1327,2504.72729492,-1554.42590332,22.84739685,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (34)
	CreateDynamicObject(1327,2505.56494141,-1556.02441406,22.81351662,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (35)
	CreateDynamicObject(1327,2506.82568359,-1557.24511719,22.81300354,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (36)
	CreateDynamicObject(1327,2508.24218750,-1558.10693359,22.80768394,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (37)
	CreateDynamicObject(1327,2509.99731445,-1558.64208984,22.73885727,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (38)
	CreateDynamicObject(1327,2511.70678711,-1558.85925293,22.70621681,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (39)
	CreateDynamicObject(1327,2513.41357422,-1558.77331543,22.68424034,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (40)
	CreateDynamicObject(1327,2515.06738281,-1558.45764160,22.69534683,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (41)
	CreateDynamicObject(1327,2516.72802734,-1557.83020020,22.69242096,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (42)
	CreateDynamicObject(1327,2518.40502930,-1557.40893555,22.70724297,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (43)
	CreateDynamicObject(1327,2519.93872070,-1556.69335938,22.75741768,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (44)
	CreateDynamicObject(1327,2521.58520508,-1556.21923828,22.74909782,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (45)
	CreateDynamicObject(1327,2523.34179688,-1555.59069824,22.79621124,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (46)
	CreateDynamicObject(1327,2524.94189453,-1554.78198242,22.82466316,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (47)
	CreateDynamicObject(1327,2526.51806641,-1553.98535156,22.85269165,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (48)
	CreateDynamicObject(1327,2528.05566406,-1553.09191895,22.85912323,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (49)
	CreateDynamicObject(1327,2529.49755859,-1552.15759277,22.89199638,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (50)
	CreateDynamicObject(1327,2530.81323242,-1551.09008789,22.92955208,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (51)
	CreateDynamicObject(1327,2532.05908203,-1549.78906250,23.00032425,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (52)
	CreateDynamicObject(1327,2533.25024414,-1548.64050293,23.01573372,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (53)
	CreateDynamicObject(1327,2534.30322266,-1547.55871582,23.02879333,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (54)
	CreateDynamicObject(1327,2535.62109375,-1546.30249023,23.12298965,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (55)
	CreateDynamicObject(1327,2536.96044922,-1544.90319824,23.11734200,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (56)
	CreateDynamicObject(1327,2538.00585938,-1543.34533691,23.15071106,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (57)
	CreateDynamicObject(1327,2538.75439453,-1541.67639160,23.17076302,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (58)
	CreateDynamicObject(1327,2538.93115234,-1540.06896973,23.20262718,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (59)
	CreateDynamicObject(1327,2538.96044922,-1538.40515137,23.23350906,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (60)
	CreateDynamicObject(1327,2539.15307617,-1536.56408691,23.25994301,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (61)
	CreateDynamicObject(1327,2539.16796875,-1534.84265137,23.28726768,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (62)
	CreateDynamicObject(1327,2538.90844727,-1533.15368652,23.28907585,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (63)
	CreateDynamicObject(1327,2538.68139648,-1531.34912109,23.31772041,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (64)
	CreateDynamicObject(1327,2538.22656250,-1529.55920410,23.37113190,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (65)
	CreateDynamicObject(1327,2537.65161133,-1527.82897949,23.37359619,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (66)
	CreateDynamicObject(1327,2537.12475586,-1526.22827148,23.38147354,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (67)
	CreateDynamicObject(1327,2536.46533203,-1524.50720215,23.47947121,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (68)
	CreateDynamicObject(1327,2535.67578125,-1523.00976562,23.49561501,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (69)
	CreateDynamicObject(1327,2534.86572266,-1521.56127930,23.52474022,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (70)
	CreateDynamicObject(1327,2533.84399414,-1520.18823242,23.55004501,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (71)
	CreateDynamicObject(1327,2532.54711914,-1519.07043457,23.58460999,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (72)
	CreateDynamicObject(1327,2511.67211914,-1523.60742188,23.43212891,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (73)
	CreateDynamicObject(1327,2513.36181641,-1524.04541016,23.37394714,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (74)
	CreateDynamicObject(1327,2515.04980469,-1524.62463379,23.42025185,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (75)
	CreateDynamicObject(1327,2516.73974609,-1525.03320312,23.45042419,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (76)
	CreateDynamicObject(1327,2518.43261719,-1525.19360352,23.46849442,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (77)
	CreateDynamicObject(1327,2520.30493164,-1525.35546875,23.45452881,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (78)
	CreateDynamicObject(1327,2522.02319336,-1525.47973633,23.45803261,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (79)
	CreateDynamicObject(1327,2523.71191406,-1525.50610352,23.47604179,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (80)
	CreateDynamicObject(1327,2525.44897461,-1525.50610352,23.48838043,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (81)
	CreateDynamicObject(1327,2527.18334961,-1525.27392578,23.49844933,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (82)
	CreateDynamicObject(1327,2528.81933594,-1525.16857910,23.55761147,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (83)
	CreateDynamicObject(1327,2509.00708008,-1524.09448242,23.51518822,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (84)
	CreateDynamicObject(1327,2509.24267578,-1525.66467285,23.49188995,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (85)
	CreateDynamicObject(1327,2510.20117188,-1526.98986816,23.46485519,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (86)
	CreateDynamicObject(1327,2511.65820312,-1527.65014648,23.43657112,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (87)
	CreateDynamicObject(1327,2513.12695312,-1528.23498535,23.47835922,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (88)
	CreateDynamicObject(1327,2514.49658203,-1529.00354004,23.47097206,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (89)
	CreateDynamicObject(1327,2516.00585938,-1529.87524414,23.35130310,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (90)
	CreateDynamicObject(1327,2517.17602539,-1530.92150879,23.25827980,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (91)
	CreateDynamicObject(1327,2518.20239258,-1532.38073730,23.21061516,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (92)
	CreateDynamicObject(1327,2519.26708984,-1533.80053711,23.16616249,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (93)
	CreateDynamicObject(1327,2520.18530273,-1535.28332520,23.14695740,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (94)
	CreateDynamicObject(1327,2521.11840820,-1536.43750000,23.12646675,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (95)
	CreateDynamicObject(1327,2521.31689453,-1538.10522461,23.13298225,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (96)
	CreateDynamicObject(1327,2521.26684570,-1539.76989746,23.13948822,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (97)
	CreateDynamicObject(1327,2521.27490234,-1541.45812988,23.13584900,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (98)
	CreateDynamicObject(1327,2520.82641602,-1543.10437012,23.12700462,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (99)
	CreateDynamicObject(1327,2520.19433594,-1544.40039062,23.09504318,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (100)
	CreateDynamicObject(1327,2519.22094727,-1545.73657227,23.13786316,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (101)
	CreateDynamicObject(1327,2518.19580078,-1546.89599609,23.12710762,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (102)
	CreateDynamicObject(1327,2517.02124023,-1548.29772949,23.12779236,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (103)
	CreateDynamicObject(1327,2515.81762695,-1549.61364746,23.00649643,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (104)
	CreateDynamicObject(1327,2514.43872070,-1550.68579102,22.96877670,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (105)
	CreateDynamicObject(1327,2517.51440430,-1549.44396973,22.98746681,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (106)
	CreateDynamicObject(1327,2519.02001953,-1548.78576660,23.01062393,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (107)
	CreateDynamicObject(1327,2520.42260742,-1547.76757812,23.02144623,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (108)
	CreateDynamicObject(1327,2521.64257812,-1546.65710449,23.06051445,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (109)
	CreateDynamicObject(1327,2523.24072266,-1545.93542480,23.06179619,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (110)
	CreateDynamicObject(1327,2524.79736328,-1545.51940918,23.11403084,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (111)
	CreateDynamicObject(1327,2526.42944336,-1545.08300781,23.14137459,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (112)
	CreateDynamicObject(1327,2527.89575195,-1544.40527344,23.14501572,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (113)
	CreateDynamicObject(1327,2528.92529297,-1543.08361816,23.12711716,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (114)
	CreateDynamicObject(1327,2530.08056641,-1541.92211914,23.13335609,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (115)
	CreateDynamicObject(1327,2530.67358398,-1540.33459473,23.16669273,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (116)
	CreateDynamicObject(1327,2531.04370117,-1538.99279785,23.16145134,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (117)
	CreateDynamicObject(1327,2531.42236328,-1537.49987793,23.21949959,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (118)
	CreateDynamicObject(1327,2531.91235352,-1535.93090820,23.31028938,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (119)
	CreateDynamicObject(1327,2531.91210938,-1534.43017578,23.37264824,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (120)
	CreateDynamicObject(1327,2531.71582031,-1532.87231445,23.43321037,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (121)
	CreateDynamicObject(1327,2531.64111328,-1531.23010254,23.44986343,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (122)
	CreateDynamicObject(1327,2531.19067383,-1529.56420898,23.50951004,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (123)
	CreateDynamicObject(1327,2530.65356445,-1528.15075684,23.55682182,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (124)
	CreateDynamicObject(1327,2529.98803711,-1526.54150391,23.59580994,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (125)
	CreateDynamicObject(8557,2515.35571289,-1516.26928711,24.49452209,0.00000000,0.00000000,0.00000000); //object(vgshseing27) (1)
	CreateDynamicObject(11546,2539.88134766,-1519.37304688,23.03987503,0.00000000,0.00000000,272.00000000); //object(desn_fuelpay) (1)
	CreateDynamicObject(1327,2507.26342773,-1532.88574219,23.33867645,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (17)
	CreateDynamicObject(1327,2505.60278320,-1532.22180176,23.31779480,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (17)
	CreateDynamicObject(1327,2504.52490234,-1531.25805664,23.31883430,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (17)
	CreateDynamicObject(1327,2505.76025391,-1548.35266113,23.00086021,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (17)
	CreateDynamicObject(1327,2506.89965820,-1547.01586914,23.07289124,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (17)
	CreateDynamicObject(1327,2508.13281250,-1546.04211426,23.11122322,0.00000000,270.00000000,0.00000000); //object(junk_tyre) (17)
	CreateDynamicObject(1437,2530.11914062,-1514.42541504,24.24368858,0.00000000,90.00000000,349.99145508); //object(dyn_ladder_2) (8)
	CreateDynamicObject(1437,2524.34521484,-1514.42028809,24.22498131,0.00000000,90.00000000,349.99145508); //object(dyn_ladder_2) (8)
	CreateDynamicObject(1437,2518.55761719,-1514.40502930,24.24998093,0.00000000,90.00000000,349.99145508); //object(dyn_ladder_2) (8)
	CreateDynamicObject(1437,2512.74267578,-1514.43627930,24.22498131,0.00000000,90.00000000,349.99145508); //object(dyn_ladder_2) (8)
	CreateDynamicObject(1437,2506.97607422,-1514.39440918,24.24999619,0.00000000,90.00000000,349.99145508); //object(dyn_ladder_2) (5)
	CreateDynamicObject(1437,2501.11621094,-1514.40979004,24.22498131,0.00000000,90.00000000,349.99145508); //object(dyn_ladder_2) (13)
	CreateDynamicObject(1437,2495.35595703,-1514.49975586,24.19998169,0.00000000,90.00000000,350.73852539); //object(dyn_ladder_2) (15)
	CreateDynamicObject(4100,2504.42016602,-1564.27819824,23.85569572,0.00000000,4.00000000,320.00000000); //object(meshfence1_lan) (1)
	CreateDynamicObject(4100,2518.16113281,-1564.33471680,23.54726982,0.00000000,0.00000000,319.99877930); //object(meshfence1_lan) (2)
	CreateDynamicObject(4100,2531.92285156,-1564.36682129,23.34551620,0.00000000,0.00000000,319.99877930); //object(meshfence1_lan) (3)
	CreateDynamicObject(4100,2540.31176758,-1543.54492188,24.24152565,0.00000000,0.00000000,49.99877930); //object(meshfence1_lan) (5)
	CreateDynamicObject(4100,2539.32836914,-1557.30224609,23.56680107,0.00000000,0.00000000,43.99877930); //object(meshfence1_lan) (7)
	CreateDynamicObject(4100,2540.34692383,-1529.80529785,24.45091629,0.00000000,0.00000000,49.99877930); //object(meshfence1_lan) (8)
	//Basural/Ruinas cerca del aeropuerto
	CreateDynamicObject(2669, 1645.00562, -2162.94629, 13.89496,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2935, 1645.83801, -2159.77954, 14.00661,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3043, 1646.17761, -2152.95825, 14.00661,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3073, 1645.92566, -2156.20264, 14.21700,   0.00000, 0.00000, 273.96997);
	CreateDynamicObject(3043, 1646.30737, -2149.90063, 14.00661,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2669, 1645.51514, -2146.80249, 13.89496,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2669, 1646.97424, -2149.87036, 16.80029,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(2669, 1647.18896, -2152.95044, 16.80029,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3174, 1650.77417, -2143.92383, 12.55469,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11444, 1645.38074, -2141.04785, 12.55469,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3093, 1642.27405, -2160.46191, 14.02021,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1492, 1642.98486, -2146.04468, 12.67731,   0.00000, 0.00000, 270.67566);
	CreateDynamicObject(2904, 1635.03101, -2138.26074, 13.86085,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2904, 1632.84265, -2138.26294, 13.86085,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2904, 1636.26416, -2139.53076, 13.86085,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2904, 1631.65027, -2139.47852, 13.86085,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2904, 1635.05530, -2140.76465, 13.86085,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2904, 1634.40002, -2140.78198, 13.86085,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2904, 1635.00000, -2139.50000, 15.17702,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2904, 1632.69995, -2139.47314, 15.17702,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1499, 1631.66003, -2140.70532, 12.62312,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16637, 1635.80249, -2147.50171, 14.06256,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(16637, 1633.94629, -2145.62646, 14.06256,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16637, 1632.07910, -2147.50464, 14.06256,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16637, 1632.09241, -2149.39282, 14.06256,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(16637, 1630.17310, -2145.61304, 14.06256,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(16637, 1628.30493, -2147.48218, 14.06256,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16637, 1629.83643, -2147.55249, 15.62000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16637, 1634.34082, -2147.57642, 15.62000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16637, 1631.59998, -2147.60010, 15.75000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16501, 1636.03210, -2157.25659, 13.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(16501, 1633.81580, -2160.63257, 12.15000,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(16501, 1633.71277, -2153.67334, 12.20000,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(16501, 1634.00000, -2157.19995, 15.69000,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(16501, 1631.55994, -2155.99585, 12.20000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(16501, 1631.55994, -2156.72534, 12.10000,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(2934, 1625.92065, -2156.61792, 14.00661,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3585, 1624.29175, -2146.73511, 14.18458,   0.00000, 0.00000, 258.76575);
	CreateDynamicObject(3564, 1618.75879, -2153.72241, 14.18458,   0.00000, 0.00000, 308.39038);
	CreateDynamicObject(13025, 1645.25684, -2131.34277, 15.73667,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2679, 1623.44397, -2145.71948, 14.48768,   0.00000, 0.00000, 75.42957);
	CreateDynamicObject(2679, 1623.23352, -2146.59668, 14.48768,   0.00000, 0.00000, 75.42664);
	CreateDynamicObject(2679, 1623.28345, -2146.19067, 14.48768,   0.00000, 0.00000, 75.42664);
	CreateDynamicObject(11458, 1658.43469, -2168.24194, 12.55469,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3564, 1615.73035, -2163.10156, 14.18458,   0.00000, 0.00000, 286.55139);
	CreateDynamicObject(2669, 1627.13440, -2163.28027, 13.89496,   0.00000, 0.00000, 271.98499);
	CreateDynamicObject(2669, 1632.73718, -2163.30884, 13.89496,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(11457, 1603.56262, -2155.78760, 12.55469,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3073, 1612.95435, -2145.71533, 14.21700,   0.00000, 0.00000, 273.96606);
	CreateDynamicObject(3043, 1634.53857, -2157.35181, 17.24000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3364, 1632.05676, -2171.45313, 12.55469,   0.00000, 0.00000, 286.55554);
	CreateDynamicObject(5153, 1627.00000, -2147.87305, 16.00819,   0.00000, 25.00000, 0.00000);
	CreateDynamicObject(5153, 1637.85742, -2147.94458, 15.55551,   0.00000, 25.00000, 0.00000);
	CreateDynamicObject(5153, 1641.00000, -2147.56738, 15.55551,   0.00000, 30.00000, 0.00000);
	CreateDynamicObject(16317, 1615.65283, -2130.69434, 12.55469,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3594, 1632.16602, -2133.26514, 13.18586,   0.00000, 0.00000, 5.95496);
	CreateDynamicObject(3593, 1638.69482, -2145.81250, 13.26486,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1336, 1616.88379, -2168.01636, 13.61863,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1335, 1618.33252, -2169.02319, 13.68023,   0.00000, 0.00000, 342.13513);
	CreateDynamicObject(12957, 1622.11963, -2173.05688, 13.43290,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 1626.99731, -2174.53809, 13.52266,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1358, 1624.69238, -2131.86011, 13.75823,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1365, 1623.53845, -2135.96777, 13.69760,   0.00000, 0.00000, 334.19519);
	CreateDynamicObject(1442, 1634.03821, -2152.83008, 13.15317,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14861, 1633.37524, -2147.19653, 13.00172,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1771, 1634.73596, -2139.17212, 13.18835,   0.00000, 0.00000, 264.72070);
	CreateDynamicObject(933, 1630.85046, -2148.07056, 12.55469,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1429, 1630.45801, -2148.02612, 13.82118,   0.00000, 0.00000, 254.79578);
	CreateDynamicObject(1265, 1624.31323, -2149.19263, 13.87250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1338, 1623.86426, -2147.88721, 14.11477,   0.00000, 0.00000, 13.89490);
	CreateDynamicObject(1499, 1644.33533, -2149.11841, 15.58265,   0.00000, 0.00000, 270.67566);
	CreateDynamicObject(1575, 1648.45300, -2149.00317, 15.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1575, 1648.44836, -2149.41943, 15.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1575, 1648.42041, -2149.82764, 15.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1577, 1647.62695, -2149.10278, 15.60000,   0.00000, 0.00000, 356.03003);
	CreateDynamicObject(1578, 1647.65833, -2149.48193, 15.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2035, 1647.89282, -2150.91772, 15.60708,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2034, 1647.95166, -2150.55298, 15.61347,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1279, 1647.43506, -2150.06470, 15.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1499, 1644.61047, -2153.71533, 15.64314,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(14666, 1649.69995, -2152.83008, 16.81926,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14890, 1646.35730, -2153.89673, 15.61611,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2587, 1648.74500, -2154.54224, 17.28391,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2588, 1647.15466, -2151.59009, 17.24910,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(853, 1626.42139, -2126.25317, 12.95536,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(851, 1628.82434, -2155.33789, 12.86756,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(849, 1610.69800, -2154.61157, 12.85444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(851, 1611.15344, -2155.73364, 12.86756,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(854, 1609.45386, -2155.41382, 12.76143,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(849, 1607.86536, -2152.93604, 12.85444,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(849, 1611.40405, -2151.72363, 12.85444,   0.00000, 0.00000, 27.78979);
	CreateDynamicObject(3461, 1633.83472, -2152.85376, 11.83357,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2890, 1618.69409, -2130.32397, 14.16938,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1327, 1615.57617, -2132.61768, 15.71517,   0.00000, 90.00000, 0.00000);
	CreateDynamicObject(1299, 1612.67957, -2135.49487, 15.68411,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12954, 1616.55579, -2128.47266, 14.50312,   0.00000, 0.00000, 306.40540);
	CreateDynamicObject(12957, 1613.50757, -2137.30249, 14.42150,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(13591, 1612.89893, -2135.77930, 13.80225,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3461, 1620.31665, -2132.15405, 12.86850,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3461, 1617.93799, -2129.17871, 13.92799,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3461, 1611.25244, -2132.87354, 13.96832,   0.00000, 0.00000, 0.00000);

// BAR OCIO ¿?
	CreateDynamicObject(2395,1380.30004883,-1892.30004883,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (1)
	CreateDynamicObject(2395,1384.00000000,-1884.90002441,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (2)
	CreateDynamicObject(2395,1387.69921875,-1884.89941406,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (3)
	CreateDynamicObject(2395,1391.39941406,-1884.89941406,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (4)
	CreateDynamicObject(2395,1395.09997559,-1884.90002441,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (5)
	CreateDynamicObject(2395,1380.30004883,-1889.59997559,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (6)
	CreateDynamicObject(2395,1380.30004883,-1884.90002441,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (8)
	CreateDynamicObject(2395,1384.00000000,-1892.29980469,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (9)
	CreateDynamicObject(2395,1387.69921875,-1892.29980469,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (10)
	CreateDynamicObject(2395,1391.39941406,-1892.29980469,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (11)
	CreateDynamicObject(2395,1395.09960938,-1892.29980469,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (12)
	CreateDynamicObject(2395,1380.29980469,-1886.89941406,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (13)
	CreateDynamicObject(2395,1384.00000000,-1889.59960938,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (14)
	CreateDynamicObject(2395,1387.69921875,-1889.59960938,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (15)
	CreateDynamicObject(2395,1391.39941406,-1889.59960938,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (16)
	CreateDynamicObject(2395,1395.09960938,-1889.59960938,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (17)
	CreateDynamicObject(2395,1380.29980469,-1884.89941406,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (18)
	CreateDynamicObject(2395,1384.00000000,-1886.89941406,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (19)
	CreateDynamicObject(2395,1387.69921875,-1886.89941406,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (20)
	CreateDynamicObject(2395,1391.39941406,-1886.89941406,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (21)
	CreateDynamicObject(2395,1395.09960938,-1886.89941406,16.60000038,270.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (22)
	CreateDynamicObject(10244,1388.50000000,-1894.40002441,13.00000000,0.00000000,0.00000000,0.00000000); //object(vicjump_sfe) (1)
	CreateDynamicObject(3499,1380.29980469,-1892.89941406,16.79999924,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (2)
	CreateDynamicObject(3499,1380.29980469,-1882.29980469,17.20000076,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (3)
	CreateDynamicObject(3499,1390.89941406,-1892.89941406,16.79999924,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (4)
	CreateDynamicObject(3499,1397.30004883,-1892.90002441,16.79999924,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (5)
	CreateDynamicObject(3499,1388.79980469,-1882.29980469,16.79999924,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (6)
	CreateDynamicObject(3499,1397.29980469,-1882.29980469,16.79999924,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (7)
	CreateDynamicObject(2395,1384.00000000,-1882.00000000,13.80000019,0.00000000,0.00000000,180.00000000); //object(cj_sports_wall) (23)
	CreateDynamicObject(2395,1387.69995117,-1882.00000000,13.80000019,0.00000000,0.00000000,179.99450684); //object(cj_sports_wall) (24)
	CreateDynamicObject(2395,1387.69995117,-1882.00000000,11.10000038,0.00000000,0.00000000,179.99450684); //object(cj_sports_wall) (25)
	CreateDynamicObject(2395,1384.00000000,-1882.00000000,11.10000038,0.00000000,0.00000000,179.99450684); //object(cj_sports_wall) (26)
	CreateDynamicObject(2395,1392.59997559,-1882.00000000,13.80000019,0.00000000,0.00000000,179.99450684); //object(cj_sports_wall) (27)
	CreateDynamicObject(2395,1392.59997559,-1882.00000000,11.10000038,0.00000000,0.00000000,179.99450684); //object(cj_sports_wall) (28)
	CreateDynamicObject(2395,1396.30004883,-1882.00000000,13.80000019,0.00000000,0.00000000,179.99450684); //object(cj_sports_wall) (29)
	CreateDynamicObject(2395,1396.30004883,-1882.00000000,11.10000038,0.00000000,0.00000000,179.99450684); //object(cj_sports_wall) (30)
	CreateDynamicObject(3499,1385.79980469,-1882.29980469,17.10000038,0.00000000,90.00000000,0.00000000); //object(wdpillar02_lvs) (8)
	CreateDynamicObject(3499,1391.90002441,-1882.30004883,17.10000038,0.00000000,90.00000000,0.00000000); //object(wdpillar02_lvs) (9)
	CreateDynamicObject(3851,1397.09997559,-1882.19995117,19.50000000,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (3)
	CreateDynamicObject(3499,1392.50000000,-1882.30004883,22.10000038,0.00000000,270.00000000,0.00000000); //object(wdpillar02_lvs) (10)
	CreateDynamicObject(3499,1380.09960938,-1887.50000000,22.10000038,0.00000000,270.00000000,90.00000000); //object(wdpillar02_lvs) (11)
	CreateDynamicObject(3851,1385.79980469,-1882.19921875,19.50000000,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (6)
	CreateDynamicObject(3499,1385.19921875,-1882.29980469,22.10000038,0.00000000,269.98901367,0.00000000); //object(wdpillar02_lvs) (13)
	CreateDynamicObject(3851,1382.59960938,-1887.50000000,22.50000000,0.00000000,90.00000000,0.00000000); //object(carshowwin_sfsx) (7)
	CreateDynamicObject(3499,1385.50000000,-1892.79980469,22.10000038,0.00000000,269.98901367,0.00000000); //object(wdpillar02_lvs) (16)
	CreateDynamicObject(3499,1396.39941406,-1892.79980469,22.10000038,0.00000000,269.98901367,0.00000000); //object(wdpillar02_lvs) (17)
	CreateDynamicObject(3499,1385.69921875,-1892.59960938,17.10000038,0.00000000,90.00000000,0.00000000); //object(wdpillar02_lvs) (18)
	CreateDynamicObject(3851,1400.69995117,-1892.80004883,19.50000000,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (8)
	CreateDynamicObject(3499,1395.00000000,-1892.89941406,16.79999924,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (19)
	CreateDynamicObject(3499,1385.00000000,-1887.50000000,22.10000038,0.00000000,270.00000000,90.00000000); //object(wdpillar02_lvs) (20)
	CreateDynamicObject(3499,1388.69921875,-1887.50000000,22.10000038,0.00000000,270.00000000,90.00000000); //object(wdpillar02_lvs) (21)
	CreateDynamicObject(3499,1392.19921875,-1887.50000000,22.10000038,0.00000000,270.00000000,90.00000000); //object(wdpillar02_lvs) (22)
	CreateDynamicObject(3499,1396.00000000,-1887.50000000,22.10000038,0.00000000,270.00000000,90.00000000); //object(wdpillar02_lvs) (23)
	CreateDynamicObject(3851,1385.29980469,-1892.79980469,19.50000000,0.00000000,0.00000000,90.00000000); //object(carshowwin_sfsx) (9)
	CreateDynamicObject(3851,1387.19995117,-1887.50000000,22.50000000,0.00000000,90.00000000,0.00000000); //object(carshowwin_sfsx) (10)
	CreateDynamicObject(3851,1390.40002441,-1887.50000000,22.50000000,0.00000000,90.00000000,0.00000000); //object(carshowwin_sfsx) (11)
	CreateDynamicObject(3851,1394.19921875,-1887.50000000,22.50000000,0.00000000,90.00000000,0.00000000); //object(carshowwin_sfsx) (12)
	CreateDynamicObject(3851,1398.40002441,-1887.69995117,22.50000000,0.00000000,90.00000000,0.00000000); //object(carshowwin_sfsx) (13)
	CreateDynamicObject(3499,1400.40002441,-1892.59997559,17.10000038,0.00000000,90.00000000,0.00000000); //object(wdpillar02_lvs) (24)
	CreateDynamicObject(2395,1379.69995117,-1883.00000000,13.80000019,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (34)
	CreateDynamicObject(2395,1379.69995117,-1886.69995117,13.80000019,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (35)
	CreateDynamicObject(2395,1379.69995117,-1889.80004883,13.80000019,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (36)
	CreateDynamicObject(2395,1379.69995117,-1889.80004883,11.10000038,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (37)
	CreateDynamicObject(2395,1379.69995117,-1886.09997559,11.10000038,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (38)
	CreateDynamicObject(2395,1379.69995117,-1883.00000000,11.10000038,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (39)
	CreateDynamicObject(2395,1381.19995117,-1893.09997559,13.80000019,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (40)
	CreateDynamicObject(2395,1384.90002441,-1893.09997559,11.10000038,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (41)
	CreateDynamicObject(2395,1388.59997559,-1893.09997559,11.10000038,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (42)
	CreateDynamicObject(2395,1392.30004883,-1893.09997559,11.10000038,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (43)
	CreateDynamicObject(2395,1396.00000000,-1893.09997559,11.10000038,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (44)
	CreateDynamicObject(2395,1381.19995117,-1893.09997559,11.10000038,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (45)
	CreateDynamicObject(2395,1384.89941406,-1893.09960938,13.80000019,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (46)
	CreateDynamicObject(2395,1388.59960938,-1893.09960938,13.80000019,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (47)
	CreateDynamicObject(2395,1392.29980469,-1893.09960938,13.80000019,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (48)
	CreateDynamicObject(2395,1396.00000000,-1893.09960938,13.80000019,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (49)
	CreateDynamicObject(8661,1385.29980469,-1893.09960938,12.60000038,0.00000000,0.00000000,0.00000000); //object(gnhtelgrnd_lvs) (2)
	CreateDynamicObject(3499,1374.59997559,-1883.00000000,12.00000000,0.00000000,90.00000000,0.00000000); //object(wdpillar02_lvs) (25)
	CreateDynamicObject(3499,1363.69921875,-1883.00000000,12.00000000,0.00000000,90.00000000,0.00000000); //object(wdpillar02_lvs) (26)
	CreateDynamicObject(2395,1394.30004883,-1892.59997559,18.89999962,0.00000000,0.00000000,179.99450684); //object(cj_sports_wall) (50)
	CreateDynamicObject(2395,1391.29980469,-1893.09960938,18.89999962,0.00000000,0.00000000,0.00000000); //object(cj_sports_wall) (51)
	CreateDynamicObject(18090,1396.29980469,-1887.79980469,19.12299919,0.00000000,0.00000000,0.00000000); //object(bar_bar1) (1)
	CreateDynamicObject(2395,1397.69995117,-1883.09997559,16.70000076,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (52)
	CreateDynamicObject(2395,1397.69995117,-1883.09997559,19.39999962,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (53)
	CreateDynamicObject(2395,1397.69995117,-1883.09997559,14.00000000,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (55)
	CreateDynamicObject(2395,1397.69995117,-1886.80004883,14.00000000,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (56)
	CreateDynamicObject(2395,1397.69995117,-1886.80004883,16.70000076,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (57)
	CreateDynamicObject(2395,1397.69995117,-1886.80004883,19.39999962,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (58)
	CreateDynamicObject(2395,1397.69995117,-1889.69995117,19.39999962,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (59)
	CreateDynamicObject(2395,1397.69995117,-1889.69995117,16.70000076,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (60)
	CreateDynamicObject(2395,1397.69995117,-1889.69995117,14.00000000,0.00000000,0.00000000,270.00000000); //object(cj_sports_wall) (61)
	CreateDynamicObject(1545,1397.19995117,-1886.00000000,18.50000000,0.00000000,0.00000000,270.00000000); //object(cj_b_optic1) (1)
	CreateDynamicObject(1545,1397.19995117,-1889.69995117,18.50000000,0.00000000,0.00000000,270.00000000); //object(cj_b_optic1) (3)
	CreateDynamicObject(1487,1395.00000000,-1886.50000000,17.79999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (1)
	CreateDynamicObject(1487,1394.80004883,-1886.69995117,17.79999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (2)
	CreateDynamicObject(1487,1394.69921875,-1886.50000000,17.79999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (3)
	CreateDynamicObject(1487,1394.69995117,-1887.00000000,17.79999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (5)
	CreateDynamicObject(1487,1394.69995117,-1887.19995117,17.79999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (6)
	CreateDynamicObject(1664,1397.50000000,-1886.69995117,18.39999962,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (1)
	CreateDynamicObject(1664,1397.50000000,-1886.90002441,18.39999962,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (2)
	CreateDynamicObject(1664,1397.50000000,-1887.09997559,18.39999962,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (3)
	CreateDynamicObject(1664,1397.50000000,-1887.30004883,18.39999962,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (4)
	CreateDynamicObject(1664,1397.50000000,-1887.50000000,18.39999962,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (5)
	CreateDynamicObject(1664,1397.50000000,-1887.69995117,18.39999962,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (6)
	CreateDynamicObject(1664,1397.50000000,-1887.90002441,18.39999962,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (7)
	CreateDynamicObject(1664,1397.50000000,-1888.09997559,18.39999962,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (8)
	CreateDynamicObject(1664,1397.50000000,-1888.30004883,18.39999962,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (9)
	CreateDynamicObject(1664,1397.50000000,-1888.50000000,18.39999962,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (10)
	CreateDynamicObject(1664,1397.50000000,-1888.69995117,18.39999962,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (11)
	CreateDynamicObject(1664,1397.50000000,-1889.00000000,18.39999962,0.00000000,0.00000000,0.00000000); //object(propwinebotl2) (12)
	CreateDynamicObject(1950,1397.59997559,-1887.00000000,18.89999962,0.00000000,0.00000000,0.00000000); //object(kb_beer) (1)
	CreateDynamicObject(1950,1397.59997559,-1887.50000000,18.89999962,0.00000000,0.00000000,0.00000000); //object(kb_beer) (2)
	CreateDynamicObject(1950,1397.59997559,-1887.90002441,18.89999962,0.00000000,0.00000000,0.00000000); //object(kb_beer) (3)
	CreateDynamicObject(1950,1397.59997559,-1888.19995117,18.89999962,0.00000000,0.00000000,0.00000000); //object(kb_beer) (4)
	CreateDynamicObject(1950,1397.59997559,-1889.00000000,18.89999962,0.00000000,0.00000000,0.00000000); //object(kb_beer) (5)
	CreateDynamicObject(1950,1397.69995117,-1888.80004883,18.89999962,0.00000000,0.00000000,0.00000000); //object(kb_beer) (6)
	CreateDynamicObject(1950,1397.50000000,-1888.80004883,18.89999962,0.00000000,0.00000000,0.00000000); //object(kb_beer) (7)
	CreateDynamicObject(1520,1395.30004883,-1884.30004883,17.60000038,0.00000000,0.00000000,0.00000000); //object(dyn_wine_bounce) (1)
	CreateDynamicObject(1520,1395.19995117,-1884.59997559,17.60000038,0.00000000,0.00000000,0.00000000); //object(dyn_wine_bounce) (2)
	CreateDynamicObject(1520,1394.89941406,-1884.29980469,17.60000038,0.00000000,0.00000000,0.00000000); //object(dyn_wine_bounce) (3)
	CreateDynamicObject(1520,1394.80004883,-1886.40002441,17.60000038,0.00000000,0.00000000,0.00000000); //object(dyn_wine_bounce) (4)
	CreateDynamicObject(1487,1395.00000000,-1886.50000000,17.79999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (7)
	CreateDynamicObject(1487,1395.00000000,-1884.50000000,17.79999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (8)
	CreateDynamicObject(1487,1394.90002441,-1884.80004883,17.79999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (9)
	CreateDynamicObject(1487,1395.09997559,-1884.90002441,17.79999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (10)
	CreateDynamicObject(1487,1397.59997559,-1885.50000000,18.39999962,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (11)
	CreateDynamicObject(1487,1397.59997559,-1885.00000000,18.39999962,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (12)
	CreateDynamicObject(1487,1397.50000000,-1885.19995117,18.39999962,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (13)
	CreateDynamicObject(1487,1397.40002441,-1886.90002441,17.89999962,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (14)
	CreateDynamicObject(1487,1397.50000000,-1887.19995117,17.89999962,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (15)
	CreateDynamicObject(1546,1394.89941406,-1885.50000000,17.70000076,0.00000000,0.00000000,0.00000000); //object(cj_pint_glass) (1)
	CreateDynamicObject(14651,1382.59997559,-1887.59997559,18.79999924,0.00000000,0.00000000,270.00000000); //object(trukstp05) (2)
	CreateDynamicObject(3499,1374.80004883,-1882.30004883,20.89999962,0.00000000,76.00000000,0.00000000); //object(wdpillar02_lvs) (8)
	CreateDynamicObject(3499,1364.40002441,-1882.30004883,18.29999924,0.00000000,76.00000000,0.00000000); //object(wdpillar02_lvs) (8)
	CreateDynamicObject(3499,1374.79980469,-1892.59960938,20.89999962,0.00000000,76.00000000,0.00000000); //object(wdpillar02_lvs) (8)
	CreateDynamicObject(3499,1364.40002441,-1892.59997559,18.29999924,0.00000000,76.00000000,0.00000000); //object(wdpillar02_lvs) (8)
	CreateDynamicObject(3499,1377.59997559,-1887.59997559,21.60000038,0.00000000,270.00000000,90.00000000); //object(wdpillar02_lvs) (11)
	CreateDynamicObject(3499,1374.80004883,-1887.50000000,20.89999962,0.00000000,270.00000000,90.00000000); //object(wdpillar02_lvs) (11)
	CreateDynamicObject(3499,1371.59997559,-1887.50000000,20.10000038,0.00000000,270.00000000,90.00000000); //object(wdpillar02_lvs) (11)
	CreateDynamicObject(3499,1368.59997559,-1887.50000000,19.39999962,0.00000000,270.00000000,90.00000000); //object(wdpillar02_lvs) (11)
	CreateDynamicObject(3851,1380.00000000,-1887.59997559,19.50000000,0.00000000,0.00000000,0.00000000); //object(carshowwin_sfsx) (9)
	CreateDynamicObject(3499,1380.09997559,-1887.59997559,17.10000038,0.00000000,90.00000000,90.00000000); //object(wdpillar02_lvs) (8)
	CreateDynamicObject(1704,1386.40002441,-1884.50000000,16.60000038,0.00000000,0.00000000,56.00000000); //object(kb_chair03) (1)
	CreateDynamicObject(1704,1389.19995117,-1883.90002441,16.60000038,0.00000000,0.00000000,329.99731445); //object(kb_chair03) (2)
	CreateDynamicObject(1704,1388.90002441,-1886.90002441,16.60000038,0.00000000,0.00000000,181.74630737); //object(kb_chair03) (3)
	CreateDynamicObject(1704,1386.40002441,-1891.50000000,16.60000038,0.00000000,0.00000000,131.74133301); //object(kb_chair03) (4)
	CreateDynamicObject(1704,1388.59997559,-1891.40002441,16.60000038,0.00000000,0.00000000,187.48461914); //object(kb_chair03) (5)
	CreateDynamicObject(2350,1393.69995117,-1888.30004883,16.89999962,0.00000000,0.00000000,0.00000000); //object(cj_barstool_2) (1)
	CreateDynamicObject(2350,1393.69995117,-1887.00000000,16.89999962,0.00000000,0.00000000,0.00000000); //object(cj_barstool_2) (2)
	CreateDynamicObject(2350,1393.80004883,-1885.80004883,16.89999962,0.00000000,0.00000000,0.00000000); //object(cj_barstool_2) (3)
	CreateDynamicObject(2350,1393.80004883,-1884.80004883,16.89999962,0.00000000,0.00000000,0.00000000); //object(cj_barstool_2) (4)
	CreateDynamicObject(2350,1394.30004883,-1883.59997559,16.89999962,0.00000000,0.00000000,0.00000000); //object(cj_barstool_2) (5)
	CreateDynamicObject(2635,1387.30004883,-1890.19995117,16.70000076,0.00000000,0.00000000,0.00000000); //object(cj_pizza_table) (1)
	CreateDynamicObject(2635,1388.30004883,-1885.09997559,16.70000076,0.00000000,0.00000000,34.00000000); //object(cj_pizza_table) (2)
	CreateDynamicObject(1487,1388.30004883,-1885.09997559,17.29999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (9)
	CreateDynamicObject(1487,1388.30004883,-1885.00000000,17.29999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (9)
	CreateDynamicObject(1487,1388.50000000,-1885.40002441,17.29999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (9)
	CreateDynamicObject(1487,1388.59997559,-1885.00000000,17.29999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (9)
	CreateDynamicObject(1487,1388.09997559,-1884.90002441,17.29999924,0.00000000,0.00000000,0.00000000); //object(dyn_wine_1) (9)
	CreateDynamicObject(1546,1388.19995117,-1885.40002441,17.20000076,0.00000000,0.00000000,0.00000000); //object(cj_pint_glass) (1)
	CreateDynamicObject(1546,1388.00000000,-1885.09997559,17.20000076,0.00000000,0.00000000,0.00000000); //object(cj_pint_glass) (1)
	CreateDynamicObject(1546,1388.19995117,-1885.09997559,17.20000076,0.00000000,0.00000000,0.00000000); //object(cj_pint_glass) (1)
	CreateDynamicObject(1546,1388.69995117,-1885.09997559,17.20000076,0.00000000,0.00000000,0.00000000); //object(cj_pint_glass) (1)
	CreateDynamicObject(1520,1394.89941406,-1884.29980469,17.60000038,0.00000000,0.00000000,0.00000000); //object(dyn_wine_bounce) (3)
	CreateDynamicObject(1520,1387.40002441,-1890.19995117,17.10000038,0.00000000,0.00000000,0.00000000); //object(dyn_wine_bounce) (3)
	CreateDynamicObject(1520,1387.19995117,-1890.40002441,17.10000038,0.00000000,0.00000000,0.00000000); //object(dyn_wine_bounce) (3)
	CreateDynamicObject(1665,1387.50000000,-1890.40002441,17.14999962,0.00000000,0.00000000,0.00000000); //object(propashtray1) (1)
	CreateDynamicObject(1665,1387.50000000,-1890.39941406,17.14999962,0.00000000,0.00000000,0.00000000); //object(propashtray1) (2)
	CreateDynamicObject(1665,1387.19995117,-1890.00000000,17.20000076,0.00000000,0.00000000,0.00000000); //object(propashtray1) (4)
	CreateDynamicObject(1665,1388.50000000,-1885.19995117,17.20000076,0.00000000,0.00000000,0.00000000); //object(propashtray1) (5)
	CreateDynamicObject(1665,1388.40002441,-1884.80004883,17.20000076,0.00000000,0.00000000,78.00000000); //object(propashtray1) (6)
	CreateDynamicObject(1491,1391.50000000,-1892.90002441,16.39999962,0.00000000,0.00000000,359.25000000); //object(gen_doorint01) (1)
	CreateDynamicObject(1491,1394.50000000,-1892.90002441,16.39999962,0.00000000,0.00000000,180.00000000); //object(gen_doorint01) (2)
	CreateDynamicObject(2778,1381.09997559,-1883.80004883,16.60000038,0.00000000,0.00000000,38.25000000); //object(cj_coin_op_1) (1)
	CreateDynamicObject(2778,1382.09997559,-1883.40002441,16.60000038,0.00000000,0.00000000,358.24890137); //object(cj_coin_op_1) (2)
	CreateDynamicObject(2779,1383.09997559,-1883.40002441,16.60000038,0.00000000,0.00000000,9.50000000); //object(cj_coin_op_2) (1)
	CreateDynamicObject(2681,1384.19995117,-1883.40002441,16.60000038,0.00000000,0.00000000,356.00000000); //object(cj_coin_op) (1)
	CreateDynamicObject(14651,1382.59997559,-1890.90002441,18.79999924,0.00000000,0.00000000,270.00000000); //object(trukstp05) (2)
	CreateDynamicObject(1485,1388.30004883,-1884.90002441,17.10000038,0.00000000,0.00000000,0.00000000); //object(cj_ciggy) (1)
	CreateDynamicObject(1209,1397.50000000,-1891.40002441,16.50000000,0.00000000,0.00000000,268.50000000); //object(vendmach) (1)
	CreateDynamicObject(2425,1397.00000000,-1883.90002441,17.60000038,0.00000000,0.00000000,294.00000000); //object(cj_ff_juice) (1)
	CreateDynamicObject(3499,1366.00000000,-1901.90002441,12.00000000,0.00000000,90.00000000,90.00000000); //object(wdpillar02_lvs) (26)
	CreateDynamicObject(3499,1370.50000000,-1901.90002441,12.00000000,0.00000000,90.00000000,90.00000000); //object(wdpillar02_lvs) (26)
	CreateDynamicObject(3499,1375.19995117,-1901.90002441,12.00000000,0.00000000,90.00000000,90.00000000); //object(wdpillar02_lvs) (26)
	CreateDynamicObject(3499,1379.80004883,-1901.90002441,12.00000000,0.00000000,90.00000000,90.00000000); //object(wdpillar02_lvs) (26)
	CreateDynamicObject(1215,1379.80004883,-1896.59997559,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (1)
	CreateDynamicObject(1215,1379.79980469,-1896.59960938,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (2)
	CreateDynamicObject(1215,1375.19995117,-1896.59997559,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (3)
	CreateDynamicObject(1215,1375.19921875,-1896.59960938,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1370.50000000,-1896.59997559,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (5)
	CreateDynamicObject(1215,1370.50000000,-1896.59960938,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (6)
	CreateDynamicObject(1215,1366.00000000,-1896.59997559,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (7)
	CreateDynamicObject(1215,1366.00000000,-1896.59960938,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (8)
	CreateDynamicObject(2690,1388.80004883,-1883.00000000,18.39999962,0.00000000,0.00000000,0.00000000); //object(cj_fire_ext) (1)
	CreateDynamicObject(2075,1392.19995117,-1887.50000000,21.10000038,0.00000000,0.00000000,90.00000000); //object(cj_mlight9) (1)
	CreateDynamicObject(2075,1388.69995117,-1887.50000000,21.10000038,0.00000000,0.00000000,90.00000000); //object(cj_mlight9) (2)
	CreateDynamicObject(2075,1385.00000000,-1887.50000000,21.10000038,0.00000000,0.00000000,90.00000000); //object(cj_mlight9) (3)
	CreateDynamicObject(1215,1383.90002441,-1896.50000000,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (9)
	CreateDynamicObject(1215,1383.89941406,-1896.50000000,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (10)
	CreateDynamicObject(1215,1383.90002441,-1893.59997559,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (11)
	CreateDynamicObject(1215,1383.89941406,-1893.59960938,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (12)
	CreateDynamicObject(1215,1390.90002441,-1896.50000000,18.20000076,0.00000000,0.00000000,0.00000000); //object(bollardlight) (19)
	CreateDynamicObject(1215,1390.89941406,-1896.50000000,18.20000076,0.00000000,0.00000000,0.00000000); //object(bollardlight) (20)
	CreateDynamicObject(1215,1394.90002441,-1896.50000000,18.20000076,0.00000000,0.00000000,0.00000000); //object(bollardlight) (21)
	CreateDynamicObject(1215,1394.89941406,-1896.50000000,18.20000076,0.00000000,0.00000000,0.00000000); //object(bollardlight) (22)
	CreateDynamicObject(2232,1388.80004883,-1883.09997559,21.00000000,20.00000000,0.00000000,0.25000000); //object(med_speaker_4) (1)
	CreateDynamicObject(2232,1380.69995117,-1882.80004883,21.00000000,19.99511719,0.00000000,46.24719238); //object(med_speaker_4) (2)
	CreateDynamicObject(2232,1380.69995117,-1892.40002441,21.00000000,19.98962402,0.00000000,132.24694824); //object(med_speaker_4) (3)
	CreateDynamicObject(2232,1390.80004883,-1892.30004883,21.00000000,19.98413086,0.00000000,195.99241638); //object(med_speaker_4) (4)
	CreateDynamicObject(2104,1389.90002441,-1892.00000000,16.60000038,0.00000000,0.00000000,180.00000000); //object(swank_hi_fi) (1)
	CreateDynamicObject(2229,1390.30004883,-1891.80004883,16.60000038,0.00000000,0.00000000,148.00000000); //object(swank_speaker) (2)
	CreateDynamicObject(2229,1389.30004883,-1892.09997559,16.60000038,0.00000000,0.00000000,207.24682617); //object(swank_speaker) (3)
	CreateDynamicObject(3499,1366.19995117,-1882.30004883,13.39999962,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (8)
	CreateDynamicObject(3499,1366.19995117,-1892.59997559,13.39999962,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (8)
	CreateDynamicObject(3499,1366.30004883,-1887.50000000,18.50000000,0.00000000,270.00000000,90.00000000); //object(wdpillar02_lvs) (11)
	CreateDynamicObject(3499,1366.19995117,-1887.19995117,13.39999962,0.00000000,0.00000000,0.00000000); //object(wdpillar02_lvs) (8)
	CreateDynamicObject(1215,1381.00000000,-1881.90002441,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1381.00000000,-1881.89941406,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1388.00000000,-1881.90002441,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1388.00000000,-1881.89941406,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1389.59997559,-1881.80004883,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1389.59960938,-1881.79980469,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1396.59997559,-1881.90002441,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)
	CreateDynamicObject(1215,1396.59960938,-1881.89941406,12.80000019,0.00000000,0.00000000,0.00000000); //object(bollardlight) (4)

	// Pizzeria Idlewood
	CreateDynamicObject(3115, 2115.15698, -1799.59326, 17.51401,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3115, 2114.92920, -1814.48950, 17.53400,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2106.00879, -1798.98535, 11.83526,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2106.00977, -1795.88550, 11.85518,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2106.03638, -1814.20105, 11.83530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2106.02881, -1817.45276, 11.83530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2110.67407, -1822.19409, 11.83530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 2118.83813, -1822.20874, 11.83530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 2123.58154, -1817.48108, 11.83526,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2123.58667, -1807.96606, 11.83530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2123.57788, -1798.38953, 11.83530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2123.58789, -1795.87158, 11.83530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19454, 2118.85352, -1791.15405, 11.83530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19454, 2110.64551, -1791.15637, 11.83530,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2106.08081, -1803.22290, 13.97060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.06079, -1803.22290, 15.72190,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.74707, -1809.42688, 14.12550,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2106.05396, -1809.98047, 15.50420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.03760, -1810.01367, 14.03100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2107.54272, -1809.44275, 14.12550,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2106.91528, -1803.73547, 14.12550,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2107.46216, -1803.73877, 14.12550,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2108.18799, -1804.47754, 14.11124,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2108.20508, -1807.61841, 14.09771,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2108.20923, -1808.70264, 14.11120,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.91528, -1803.73547, 15.51422,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2107.46216, -1803.73877, 15.52239,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2108.21167, -1805.39502, 16.97120,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2107.54272, -1809.44275, 15.83734,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2106.76709, -1809.42688, 15.58120,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2106.02637, -1812.53296, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.01123, -1815.97266, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.00610, -1818.51831, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.05103, -1821.09668, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.07031, -1821.48572, 15.50420,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.03027, -1821.48572, 13.44530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.98511, -1822.18958, 14.12550,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19454, 2106.03638, -1814.20105, 11.83530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.98511, -1822.16980, 15.49320,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2123.56299, -1821.31641, 13.94826,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.54663, -1821.32788, 15.75973,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2122.75415, -1822.20068, 14.23050,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2122.75415, -1822.20068, 15.56459,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2109.49365, -1822.18115, 16.60720,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2112.86841, -1822.16992, 16.60720,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2116.20532, -1822.16968, 16.60720,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2119.52417, -1822.18433, 16.60720,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2120.18359, -1822.19495, 16.60720,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2122.67993, -1791.18274, 14.23050,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2122.69458, -1791.16907, 15.55692,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2123.54785, -1792.01111, 13.94826,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.54785, -1792.01111, 15.54464,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.02124, -1792.05457, 14.24921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.87842, -1791.16443, 14.23050,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2106.02124, -1792.05457, 15.60980,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.87842, -1791.16443, 15.84384,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2109.44604, -1791.17334, 16.60720,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2112.84521, -1791.17065, 16.60720,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2116.08545, -1791.19141, 16.60720,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2120.17920, -1791.17322, 16.60720,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2119.23950, -1791.18457, 16.60720,   90.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2106.07422, -1800.68140, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.02979, -1797.40698, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.02832, -1794.47241, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.54590, -1794.54175, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.52588, -1798.04004, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.52588, -1801.54004, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.55200, -1818.79004, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.55225, -1815.30005, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.55225, -1811.80005, 16.60720,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.54126, -1809.34253, 13.94826,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.54126, -1809.34253, 16.80712,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.50415, -1803.13770, 13.94830,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.51929, -1803.79749, 17.03100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.55054, -1807.87305, 16.80712,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.54736, -1806.29663, 16.80712,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.52344, -1805.18103, 16.80710,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.55054, -1807.87305, 14.20320,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.54736, -1806.29663, 14.22250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2123.52344, -1805.18103, 14.08745,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3858, 2123.62158, -1814.57727, 12.95845,   0.00000, 0.00000, -45.12000);
	CreateDynamicObject(3858, 2123.56177, -1798.70483, 12.95845,   0.00000, 0.00000, -45.12000);
	CreateDynamicObject(3858, 2115.07275, -1822.20630, 12.95850,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(3858, 2114.85376, -1791.17542, 12.95850,   0.00000, 0.00000, -135.00000);
	CreateDynamicObject(19435, 2106.05347, -1817.32788, 13.44530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.05347, -1817.32788, 15.83187,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.08789, -1813.06824, 13.44530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.08789, -1813.06824, 15.65387,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.01514, -1795.62805, 14.24921,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.03516, -1795.62805, 15.54499,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.09058, -1799.92786, 14.21060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2106.09058, -1799.92786, 15.74970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2115.22534, -1791.19458, 14.23050,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2115.22534, -1791.19458, 15.74161,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2115.09229, -1822.15430, 14.23050,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2115.09229, -1822.15430, 15.73671,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2416, 2123.06104, -1804.20288, 12.53554,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2416, 2122.99609, -1807.90149, 12.51654,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(2451, 2122.85498, -1806.03809, 12.59995,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2121.90894, -1803.67883, 12.47884,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2122.69312, -1809.48132, 12.41049,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2121.21655, -1809.46863, 12.39049,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2119.04663, -1803.81018, 12.47023,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(19435, 2119.64282, -1809.47009, 12.39049,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1984, 2118.67676, -1806.36584, 12.47740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1984, 2118.67847, -1809.09814, 12.47740,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19435, 2118.98242, -1809.50476, 12.39049,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1523, 2119.76563, -1803.75830, 11.22309,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2122.81909, -1803.68665, 12.47884,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1970, 2107.30054, -1792.28943, 12.88670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1970, 2107.42065, -1798.91455, 12.88670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1970, 2107.31885, -1802.60828, 12.88670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1970, 2107.22803, -1795.57019, 12.88670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1970, 2107.34937, -1821.06250, 12.88670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1970, 2107.28613, -1817.34497, 12.88670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1970, 2107.34399, -1810.50000, 12.88670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1970, 2107.31860, -1813.91650, 12.88670,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 2112.71997, -1794.00696, 12.81690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 2118.65576, -1793.86304, 12.81690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 2119.07275, -1797.44641, 12.81690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 2118.88696, -1801.06519, 12.81690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 2112.74756, -1797.48645, 12.81690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 2112.72168, -1800.93359, 12.81690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 2113.18408, -1818.08643, 12.81690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 2113.21167, -1814.54346, 12.81690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 2113.29883, -1811.17542, 12.81690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 2118.60107, -1811.32349, 12.81690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 2118.77563, -1815.20618, 12.81690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1968, 2118.82935, -1819.44910, 12.81690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2114.20728, -1807.87915, 12.84690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 2116.26221, -1805.88977, 12.84690,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 2114.16748, -1809.33081, 12.84690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2645, 2123.43115, -1804.36707, 15.48660,   0.00000, 0.00000, -90.12003);
	CreateDynamicObject(2682, 2118.34863, -1806.48730, 13.57689,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2118.34863, -1806.48730, 13.57689,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2118.34302, -1804.73804, 13.57689,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2118.84741, -1801.38110, 13.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2119.08447, -1797.72107, 13.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2118.66992, -1793.89465, 13.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2112.64502, -1793.95166, 13.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2112.65942, -1797.53137, 13.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2112.49731, -1800.94507, 13.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2113.25391, -1811.12512, 13.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2113.19751, -1814.61536, 13.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2113.18408, -1818.09546, 13.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2118.84131, -1819.28723, 13.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2118.76636, -1815.15344, 13.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2682, 2118.52222, -1811.33984, 13.25690,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2453, 2121.28687, -1809.27002, 13.80251,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2453, 2120.84546, -1809.25964, 13.80250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2453, 2120.40454, -1809.24670, 13.80250,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2645, 2123.42822, -1805.15210, 15.48660,   0.00000, 0.00000, -90.12003);
	CreateDynamicObject(2645, 2123.45020, -1806.96008, 15.48660,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(2645, 2123.45020, -1808.00000, 15.48660,   0.00000, 0.00000, -90.12000);
	CreateDynamicObject(8417, 2104.87158, -1772.74878, 12.30530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 2104.07520, -1812.72974, 12.32530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 2153.08667, -1812.66272, 12.32530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 2153.04565, -1772.69934, 12.32530,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3858, 2106.04248, -1813.66870, 9.00000,   45.00000, 90.00000, 90.00000);
	CreateDynamicObject(3858, 2106.08496, -1819.12769, 9.00000,   45.00000, 90.00000, 90.00000);
	CreateDynamicObject(19435, 2108.23169, -1807.75500, 16.65120,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3858, 2106.02075, -1800.01196, 9.00000,   45.00000, 90.00000, 90.00000);
	CreateDynamicObject(1687, 2122.46143, -1806.87683, 18.62660,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8417, 2131.10156, -1812.65222, 12.28289,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8417, 2135.09033, -1773.08569, 12.22070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(5430, 2148.94458, -1791.79688, 18.82160,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19435, 2108.21167, -1805.39502, 15.61120,   90.00000, 0.00000, 0.00000);
	CreateDynamicObject(3858, 2106.02466, -1794.19434, 9.00000,   45.00000, 90.00000, 90.00000);
	CreateDynamicObject(1491, 2108.20874, -1806.80225, 12.29500,   0.00000, 0.00000, 90.00000);

//subsidio
	SetDynamicObjectMaterial(CreateDynamicObject(19340, -818.34149, 1558.63623, 999.99402,   0.00000, 0.00000, 0.00000), 0, 19340, "venice_law","stonewall_la", 0xFF000000);
	SetDynamicObjectMaterial(CreateDynamicObject(19340, -824.50842, 1459.82617, 1000.00000,   0.00000, 0.00000, 0.00000), 0, 19340, "venice_law","stonewall_la", 0xFF000000);
	SetDynamicObjectMaterial(CreateDynamicObject(19340, -871.79749, 1560.34985, 1012.47998,   0.00000, -180.00000, 0.30000), 0, 19340, "venice_law","stonewall_la", 0xFF000000);
	CreateDynamicObject(2946, -832.06018, 1619.70203, 1003.68140,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2946, -832.04620, 1622.88916, 1003.68140,   0.00000, 0.00000, -180.00000);
	CreateDynamicObject(14576, -848.02521, 1618.79199, 999.35358,   0.00000, 0.00000, -90.24010);
	CreateDynamicObject(19447, -862.80408, 1630.63000, 1005.47998,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, -862.80408, 1630.63000, 1008.94000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19452, -864.46973, 1616.85461, 1008.53998,   -90.00000, -359.00000, -88.08000);
	CreateDynamicObject(2414, -861.48883, 1621.27087, 1003.53137,   0.00000, 0.00000, 180.83971);
	CreateDynamicObject(19452, -853.11487, 1625.63843, 1002.85999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, -859.49622, 1621.30005, 1003.53137,   0.00000, 0.00000, 180.83971);
	CreateDynamicObject(19452, -857.95770, 1620.91052, 1002.85999,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(2414, -857.50330, 1621.32971, 1003.53137,   0.00000, 0.00000, 180.83971);
	CreateDynamicObject(2414, -855.50562, 1621.35559, 1003.53137,   0.00000, 0.00000, 180.83971);
	CreateDynamicObject(2414, -853.61768, 1621.37695, 1003.53137,   0.00000, 0.00000, 180.83971);
	CreateDynamicObject(2414, -853.58258, 1623.32678, 1003.53137,   0.00000, 0.00000, 270.41949);
	CreateDynamicObject(2414, -853.60089, 1625.30835, 1003.53137,   0.00000, 0.00000, 270.41949);
	CreateDynamicObject(19452, -853.11102, 1635.24524, 1002.85999,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2414, -853.60754, 1627.31592, 1003.53137,   0.00000, 0.00000, 270.41949);
	CreateDynamicObject(2414, -853.61707, 1629.28345, 1003.53137,   0.00000, 0.00000, 270.41949);
	CreateDynamicObject(2414, -853.61670, 1631.24622, 1003.53137,   0.00000, 0.00000, 270.41949);
	CreateDynamicObject(2414, -853.61621, 1633.20911, 1003.53137,   0.00000, 0.00000, 270.41949);
	CreateDynamicObject(19447, -853.11493, 1625.63843, 1007.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, -853.11102, 1635.24524, 1007.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19447, -857.95770, 1620.91052, 1007.88000,   0.00000, 0.00000, -89.94000);
	CreateDynamicObject(1846, -852.09961, 1622.21924, 1005.84430,   -90.00000, -89.00000, 1.02000);
	CreateDynamicObject(1846, -854.44897, 1619.88208, 1005.84430,   -90.00000, -89.00000, -88.92000);
	CreateDynamicObject(1846, -852.09961, 1624.99915, 1005.84430,   -90.00000, -89.00000, 1.02000);
	CreateDynamicObject(1846, -852.09961, 1627.77917, 1005.84430,   -90.00000, -89.00000, 1.02000);
	CreateDynamicObject(1846, -852.09961, 1630.55920, 1005.84430,   -90.00000, -89.00000, 1.02000);
	CreateDynamicObject(1846, -852.09961, 1633.33923, 1005.84430,   -90.00000, -89.00000, 1.02000);
	CreateDynamicObject(1846, -857.22900, 1619.88208, 1005.84430,   -90.00000, -89.00000, -88.92000);
	CreateDynamicObject(1846, -860.00897, 1619.88208, 1005.84430,   -90.00000, -89.00000, -88.92000);
	CreateDynamicObject(1846, -862.78900, 1619.88208, 1005.84430,   -90.00000, -89.00000, -88.92000);
	CreateDynamicObject(2414, -853.62970, 1635.16907, 1003.53137,   0.00000, 0.00000, 270.41949);
	CreateDynamicObject(2773, -838.87128, 1624.15808, 1004.24329,   0.00000, 0.00000, 92.33995);
	CreateDynamicObject(2773, -841.17700, 1624.06226, 1004.24329,   0.00000, 0.00000, 92.34000);
	CreateDynamicObject(2773, -843.51691, 1623.99988, 1004.24329,   0.00000, 0.00000, 92.34000);
	CreateDynamicObject(2773, -844.54437, 1625.31201, 1004.24329,   0.00000, 0.00000, 1.62001);
	CreateDynamicObject(2773, -838.87128, 1625.69812, 1004.24329,   0.00000, 0.00000, 92.34000);
	CreateDynamicObject(2773, -841.17700, 1625.69812, 1004.24329,   0.00000, 0.00000, 92.34000);
	CreateDynamicObject(2773, -842.20660, 1627.01208, 1004.24329,   0.00000, 0.00000, 1.62000);
	CreateDynamicObject(2773, -842.29907, 1629.32690, 1004.24329,   0.00000, 0.00000, 1.62001);
	CreateDynamicObject(2773, -844.62238, 1627.61584, 1004.24329,   0.00000, 0.00000, 1.62001);
	CreateDynamicObject(2773, -843.64856, 1630.27527, 1004.24329,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(2773, -842.29907, 1629.32690, 1004.24329,   0.00000, 0.00000, 1.62001);
	CreateDynamicObject(2773, -845.95007, 1630.24316, 1004.24329,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(2773, -845.96069, 1628.56140, 1004.24329,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(2773, -849.21271, 1628.84558, 1004.24329,   0.00000, 0.00000, 179.15981);
	CreateDynamicObject(2773, -849.22412, 1626.52625, 1004.24329,   0.00000, 0.00000, 179.15981);
	CreateDynamicObject(2773, -846.94781, 1627.22961, 1004.24329,   0.00000, 0.00000, 179.15981);
	CreateDynamicObject(2773, -846.94910, 1624.93323, 1004.24329,   0.00000, 0.00000, 179.15981);
	CreateDynamicObject(2773, -848.32056, 1623.92920, 1004.24329,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(2773, -850.53229, 1625.50415, 1004.24329,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(2773, -850.64807, 1623.94238, 1004.24329,   0.00000, 0.00000, 90.90000);
	CreateDynamicObject(2773, -849.23395, 1631.13025, 1004.24329,   0.00000, 0.00000, 179.15981);
	CreateDynamicObject(2773, -846.98029, 1631.54980, 1004.24329,   0.00000, 0.00000, 179.15981);
	CreateDynamicObject(2773, -846.95099, 1633.45801, 1004.24329,   0.00000, 0.00000, 179.33980);
	CreateDynamicObject(2773, -848.30261, 1634.44702, 1004.24329,   0.00000, 0.00000, 268.97968);
	CreateDynamicObject(2773, -846.95099, 1633.45801, 1004.24329,   0.00000, 0.00000, 179.33980);
	CreateDynamicObject(2773, -850.61023, 1634.45544, 1004.24329,   0.00000, 0.00000, 270.29959);
	CreateDynamicObject(2773, -850.58264, 1632.07288, 1004.24329,   0.00000, 0.00000, 270.29959);
	CreateDynamicObject(2369, -853.94196, 1633.30896, 1004.44299,   0.00000, 0.00000, 89.94010);
	CreateDynamicObject(2369, -853.88611, 1630.81250, 1004.44299,   0.00000, 0.00000, 89.94010);
	CreateDynamicObject(2369, -853.92694, 1628.89026, 1004.44299,   0.00000, 0.00000, 89.94010);
	CreateDynamicObject(2369, -853.93372, 1626.88611, 1004.44299,   0.00000, 0.00000, 89.94010);
	CreateDynamicObject(2369, -853.89410, 1624.85876, 1004.44299,   0.00000, 0.00000, 89.94010);
	CreateDynamicObject(2369, -853.88599, 1622.95435, 1004.44299,   0.00000, 0.00000, 89.94010);
	CreateDynamicObject(2369, -855.86841, 1621.68445, 1004.44299,   0.00000, 0.00000, 0.42011);
	CreateDynamicObject(2369, -857.71240, 1621.66504, 1004.44299,   0.00000, 0.00000, 0.42011);
	CreateDynamicObject(2369, -859.49402, 1621.67200, 1004.44299,   0.00000, 0.00000, 0.42011);
	CreateDynamicObject(2369, -861.39966, 1621.60461, 1004.44299,   0.00000, 0.00000, 0.42011);
	CreateDynamicObject(1714, -855.23688, 1633.16528, 1003.74573,   0.00000, 0.00000, 89.52020);
	CreateDynamicObject(1714, -855.23688, 1630.58533, 1003.74573,   0.00000, 0.00000, 89.52020);
	CreateDynamicObject(1714, -855.23688, 1628.68530, 1003.74573,   0.00000, 0.00000, 89.52020);
	CreateDynamicObject(1714, -855.23688, 1626.68530, 1003.74573,   0.00000, 0.00000, 89.52020);
	CreateDynamicObject(1714, -855.23688, 1624.66528, 1003.74573,   0.00000, 0.00000, 89.52020);
	CreateDynamicObject(1714, -855.23688, 1622.94531, 1003.74573,   0.00000, 0.00000, 89.52020);
	CreateDynamicObject(1714, -856.07275, 1622.75586, 1003.74573,   0.00000, 0.00000, 2.04022);
	CreateDynamicObject(1714, -857.89282, 1622.79590, 1003.74573,   0.00000, 0.00000, 2.04020);
	CreateDynamicObject(1714, -859.69281, 1622.79590, 1003.74573,   0.00000, 0.00000, 2.04020);
	CreateDynamicObject(1714, -861.53278, 1622.79590, 1003.74573,   0.00000, 0.00000, 2.04020);
	CreateDynamicObject(1569, -865.34161, 1613.18713, 999.55261,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19377, -867.54321, 1613.11169, 1001.34741,   0.00000, 0.00000, -90.30000);
	CreateDynamicObject(1569, -862.77832, 1614.01794, 999.55261,   0.00000, 0.00000, 90.24003);
	CreateDynamicObject(1569, -865.13721, 1613.19763, 1003.75513,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1568, -843.84967, 1632.93933, 1013.66431,   0.00000, 178.00000, 0.00000);
	CreateDynamicObject(19428, -835.96222, 1615.75000, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -835.25677, 1616.47351, 1005.42529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -834.54132, 1615.75806, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -835.25842, 1615.02051, 1005.42529,   0.00000, 0.00000, -89.64000);
	CreateDynamicObject(19428, -859.47760, 1629.79675, 1005.42529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -860.19611, 1629.06860, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -859.47449, 1628.35205, 1005.42529,   0.00000, 0.00000, -90.54000);
	CreateDynamicObject(19428, -858.75720, 1629.07263, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -858.75720, 1629.07263, 1008.90527,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -859.47760, 1629.79675, 1008.90527,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -859.47449, 1628.35205, 1008.90527,   0.00000, 0.00000, -90.54000);
	CreateDynamicObject(19428, -860.19611, 1629.06860, 1008.90527,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -836.46637, 1631.85474, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -835.74902, 1632.57324, 1005.42529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -835.74719, 1631.14136, 1005.42529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -835.02863, 1631.85999, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -835.02863, 1631.85999, 1008.92529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -835.74719, 1631.14136, 1008.92529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -836.46637, 1631.85474, 1008.92529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -835.74902, 1632.57324, 1008.92529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -835.25842, 1615.02051, 1008.92529,   0.00000, 0.00000, -89.64000);
	CreateDynamicObject(19428, -835.96222, 1615.75000, 1008.92529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -835.25677, 1616.47351, 1008.92529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -834.54132, 1615.75806, 1008.92529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -843.38373, 1615.71582, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -844.09979, 1614.99500, 1005.42529,   0.00000, 0.00000, -89.64000);
	CreateDynamicObject(19428, -844.09680, 1616.42883, 1005.42529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -844.82373, 1615.71582, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -844.82373, 1615.71582, 1008.92529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -844.09680, 1616.42883, 1008.92529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -843.38373, 1615.71582, 1008.92529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -844.09979, 1614.99500, 1008.92529,   0.00000, 0.00000, -89.64000);
	CreateDynamicObject(19428, -843.66638, 1633.63916, 1005.42529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -842.95551, 1632.91003, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -843.67157, 1632.19360, 1005.42529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19433, -844.38550, 1632.90698, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -843.67157, 1632.19360, 1008.92529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -842.95551, 1632.91003, 1008.92529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -843.66638, 1633.63916, 1008.92529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -853.94873, 1615.34265, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -853.21368, 1616.10071, 1005.42529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -853.22571, 1614.62683, 1005.42529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -852.48651, 1615.35974, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -853.21368, 1616.10071, 1008.92529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -852.48651, 1615.35974, 1008.92529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -853.22571, 1614.62683, 1008.92529,   0.00000, 0.00000, -89.82000);
	CreateDynamicObject(19428, -853.94873, 1615.34265, 1008.92529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2161, -862.71710, 1625.68445, 1003.71399,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.71710, 1625.68445, 1005.05402,   0.00000, 0.00000, 87.72010);
	CreateDynamicObject(2161, -862.71710, 1625.68445, 1006.37402,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.69708, 1626.96436, 1003.71399,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.67712, 1626.98438, 1005.03400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.67712, 1626.98438, 1006.37402,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.65723, 1628.26440, 1003.71399,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.65723, 1632.28625, 1003.71399,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.65723, 1628.26440, 1005.03400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.65723, 1628.26440, 1006.37402,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.65723, 1632.28625, 1005.03400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.65723, 1632.28625, 1006.37402,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.65723, 1633.58630, 1003.71399,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.65723, 1633.58630, 1005.03400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.65723, 1633.58630, 1006.37402,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.71710, 1624.36340, 1003.71399,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.71710, 1624.36340, 1005.03400,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.71710, 1624.36340, 1006.37402,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1704, -842.08740, 1612.72656, 1003.72632,   0.00000, 0.00000, 179.10030);
	CreateDynamicObject(1704, -840.98743, 1612.72656, 1003.72632,   0.00000, 0.00000, 179.10030);
	CreateDynamicObject(1704, -839.84741, 1612.72656, 1003.72632,   0.00000, 0.00000, 179.10030);
	CreateDynamicObject(1704, -838.72742, 1612.72656, 1003.72632,   0.00000, 0.00000, 179.10030);
	CreateDynamicObject(1704, -837.60742, 1612.70654, 1003.72632,   0.00000, 0.00000, 179.10030);
	CreateDynamicObject(1704, -836.48743, 1612.68652, 1003.72632,   0.00000, 0.00000, 179.10030);
	CreateDynamicObject(1704, -854.58624, 1612.95959, 1003.72632,   0.00000, 0.00000, 179.10030);
	CreateDynamicObject(1704, -855.70618, 1612.95959, 1003.72632,   0.00000, 0.00000, 179.10030);
	CreateDynamicObject(1704, -856.78619, 1612.95959, 1003.72632,   0.00000, 0.00000, 179.10030);
	CreateDynamicObject(1704, -857.90619, 1612.95959, 1003.72632,   0.00000, 0.00000, 179.10030);
	CreateDynamicObject(2161, -862.65723, 1630.98633, 1003.71399,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.65723, 1630.98633, 1005.05402,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2161, -862.65723, 1630.98633, 1006.37402,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1568, -835.89716, 1631.82788, 1013.66431,   0.00000, 178.00000, 0.00000);
	CreateDynamicObject(1568, -835.37421, 1615.77551, 1013.66431,   0.00000, 178.00000, 0.00000);
	CreateDynamicObject(1568, -844.22516, 1615.66992, 1013.66431,   0.00000, 178.00000, 0.00000);
	CreateDynamicObject(1568, -853.36914, 1615.51379, 1013.66431,   0.00000, 178.00000, 0.00000);
	CreateDynamicObject(1568, -859.61017, 1629.15710, 1013.66431,   0.00000, 178.00000, 0.00000);
	CreateDynamicObject(19464, -859.85059, 1634.85339, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, -853.92059, 1634.85339, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, -847.99060, 1634.85339, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, -842.06061, 1634.85339, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, -836.13062, 1634.85339, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, -830.21057, 1634.85339, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, -831.96820, 1631.91699, 1006.19537,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, -831.96820, 1625.99695, 1006.19537,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, -831.96820, 1620.08704, 1006.19537,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, -831.96820, 1614.15698, 1006.19537,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, -836.13062, 1612.06335, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, -830.21057, 1612.06335, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, -842.06061, 1612.06335, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, -847.99060, 1612.06335, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, -853.92059, 1612.06335, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, -853.92059, 1612.06335, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19464, -859.85059, 1612.06335, 1006.19537,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19362, -864.43579, 1616.83606, 1005.51123,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19465, -862.83801, 1615.22998, 1006.19537,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, -862.83801, 1621.16345, 1006.19537,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, -862.83801, 1627.09351, 1006.19537,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19465, -862.83801, 1609.30005, 1006.19537,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19464, -862.83801, 1633.02148, 1006.19537,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -844.39948, 1632.91003, 1005.42529,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19428, -844.39948, 1632.91003, 1008.92529,   0.00000, 0.00000, 0.00000);
	//LSPD
	CreateDynamicObject(3749, 1543.93616, -1627.76526, 18.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(984, 1556.00000, -1617.80005, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(984, 1568.80005, -1617.80005, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(984, 1568.80005, -1622.80005, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(984, 1556.00000, -1622.80005, 13.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(983, 1541.00000, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1546.00000, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1550.50000, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1555.09998, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1559.69995, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1564.50000, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1569.19995, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1574.19995, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1578.90002, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1584.00000, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1589.00000, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1593.50000, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1598.30005, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1602.50000, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1607.80005, -1605.90002, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(7891, 1595.40002, -1637.90002, 14.70000,   0.00000, 0.00000, 88.74756);
	CreateDynamicObject(1251, 1541.09998, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1545.90002, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1546.09998, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1550.39941, -1605.79980, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1550.59998, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1555.00000, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1555.19995, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1559.59998, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1559.80005, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1564.40002, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1564.59998, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1569.09998, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1569.30005, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1574.09998, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1574.30005, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1578.80005, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1579.00000, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1583.90002, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1584.09998, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1588.90002, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1589.09998, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1593.40002, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1593.59998, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1598.19995, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1598.40002, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1602.40002, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1602.59998, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1607.80005, -1605.80005, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18014, 1574.90002, -1620.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1539.50000, -1653.50000, 13.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1539.50000, -1657.69995, 13.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1539.50000, -1661.90002, 13.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1539.50000, -1670.30005, 13.10000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1539.40002, -1680.69995, 13.10000,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(970, 1539.39941, -1689.09961, 13.10000,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(970, 1539.40002, -1693.30005, 13.10000,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(970, 1539.40002, -1697.50000, 13.10000,   0.00000, 0.00000, 89.99451);
	CreateDynamicObject(1361, 1540.59998, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1545.80005, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1550.50000, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1555.00000, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1559.69995, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1564.50000, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1569.09998, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1574.09998, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1578.80005, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1584.00000, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1589.00000, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1593.50000, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1598.19995, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1602.50000, -1609.50000, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1547.56836, -1622.16919, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1361, 1548.33276, -1633.87720, 13.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.09998, -1686.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.80005, -1686.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.80005, -1688.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.80005, -1687.50000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.50000, -1687.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.50000, -1690.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.50000, -1691.50000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.50000, -1692.80005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.50000, -1694.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1547.30005, -1694.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1547.30005, -1692.50000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1547.30005, -1690.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1547.30005, -1689.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1547.30005, -1687.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1547.30005, -1686.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1548.19995, -1686.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1548.09998, -1689.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1548.19995, -1690.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1548.19995, -1688.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1548.19995, -1692.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1548.19995, -1693.80005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.00000, -1657.19995, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.19995, -1658.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1546.69995, -1657.50000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1546.69995, -1661.80005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1546.69995, -1664.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.40002, -1664.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.40002, -1665.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1547.09998, -1665.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1548.09998, -1665.00000, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1548.09998, -1663.30005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1548.00000, -1661.80005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1545.26917, -1661.41748, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1548.00000, -1657.40002, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1548.00000, -1658.90002, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1223, 1539.59998, -1664.09998, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1223, 1539.59998, -1668.09998, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1223, 1539.59961, -1668.09961, 12.50000,   0.00000, 0.00000, 122.50000);
	CreateDynamicObject(1223, 1539.59961, -1664.09961, 12.50000,   0.00000, 0.00000, 243.75000);
	CreateDynamicObject(1223, 1539.50000, -1682.90002, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1223, 1539.50000, -1682.89941, 12.50000,   0.00000, 0.00000, 240.74995);
	CreateDynamicObject(1223, 1539.50000, -1686.90002, 12.50000,   0.00000, 0.00000, 122.24893);
	CreateDynamicObject(1223, 1539.50000, -1686.90002, 12.50000,   0.00000, 0.00000, 0.74890);
	CreateDynamicObject(1215, 1575.69995, -1622.69995, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1577.09998, -1622.59998, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1578.00000, -1622.40002, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1579.00000, -1621.30005, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1579.19995, -1620.69995, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1579.00000, -1619.09998, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1578.59998, -1618.50000, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1577.19995, -1618.09998, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1576.40002, -1618.09998, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1575.80005, -1618.09998, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1576.40002, -1622.69995, 12.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18014, 1571.41162, -1620.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18014, 1567.36365, -1620.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18014, 1563.94958, -1620.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18014, 1559.77356, -1620.15918, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18014, 1556.64990, -1620.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18014, 1553.35254, -1620.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18014, 1550.35291, -1620.30005, 13.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1548.00000, -1661.80005, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.22717, -1645.21094, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.49719, -1640.83521, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.30151, -1643.52942, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.06445, -1705.50464, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.19446, -1707.76526, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(870, 1541.02002, -1710.03613, 13.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1539.72913, -1605.58826, 16.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1539.72913, -1611.96313, 16.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1539.72400, -1613.54382, 16.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1539.67151, -1617.02087, 16.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1539.68787, -1617.58643, 16.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1543.03772, -1617.71179, 16.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(983, 1546.20251, -1617.72913, 16.20000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1552.51917, -1602.44580, 16.21020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1578.11719, -1602.44141, 16.21020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(982, 1594.09839, -1602.44836, 16.21020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 1607.28503, -1602.48584, 16.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1607.90552, -1602.48218, 16.42000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1608.07031, -1615.40369, 16.21020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(982, 1608.06262, -1624.98572, 16.21020,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(983, 1604.82703, -1637.89087, 16.21020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3928, 1565.45569, -1653.64404, 27.39970,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1536, 1571.41394, -1677.33325, 27.33950,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1536, 1571.37952, -1674.41162, 27.33950,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1573.19556, -1677.50220, 27.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1571.44910, -1673.97974, 27.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1575.20239, -1677.50146, 27.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1577.26868, -1675.42700, 27.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.26758, -1671.32678, 27.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1573.49292, -1671.91516, 27.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1573.49292, -1667.76575, 27.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.26758, -1667.20349, 27.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1573.49292, -1663.63123, 27.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.26758, -1663.09241, 27.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.26758, -1658.98889, 27.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.26758, -1654.88721, 27.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.26770, -1650.72693, 27.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1577.26758, -1648.67603, 27.88000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1575.17786, -1646.65076, 27.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1571.49426, -1661.58496, 27.88000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(729, 1546.37073, -1661.12170, 12.79060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(729, 1546.56494, -1690.62744, 12.79060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(729, 1540.94543, -1708.48950, 12.79060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(729, 1541.30017, -1642.97778, 12.79060,   0.00000, 0.00000, 0.00000);
	//Estacionamiento Parking Gobierno
	CreateDynamicObject(1225, -4505.29980, 802.09998, 0.00000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(866, -4466.00000, 941.70001, 5.80000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(866, -4496.00000, 918.79999, 5.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1251, 1363.30005, -1662.69995, 12.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3881, 1393.69922, -1654.89941, 14.20000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1232, 1358.59998, -1631.69995, 15.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1389.80005, -1654.59998, 7.40000,   0.00000, 179.99451, 0.00000);
	CreateDynamicObject(2774, 1390.09998, -1644.09998, 7.40000,   0.00000, 179.99451, 0.00000);
	CreateDynamicObject(3660, 1405.89941, -1653.89941, 15.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8843, 1409.19995, -1648.69995, 12.40000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3851, 1391.29980, -1627.39941, 13.25000,   90.00000, 180.00549, 269.97803);
	CreateDynamicObject(3934, 1386.87488, -1638.10144, 37.30000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3851, 1393.30005, -1629.40002, 13.30000,   90.00000, 179.99451, 0.00000);
	CreateDynamicObject(3851, 1389.30005, -1629.40002, 24.50000,   90.00000, 179.99451, 359.99451);
	CreateDynamicObject(3851, 1393.30005, -1629.40002, 24.50000,   90.00000, 180.00549, 359.98901);
	CreateDynamicObject(3851, 1393.30005, -1629.40002, 35.80000,   90.00000, 179.99451, 359.99448);
	CreateDynamicObject(3851, 1391.30005, -1627.40002, 24.50000,   90.00000, 180.00549, 269.97803);
	CreateDynamicObject(3851, 1391.30005, -1627.40002, 35.80000,   90.00000, 179.99451, 269.98901);
	CreateDynamicObject(3851, 1389.30005, -1629.40002, 35.80000,   90.00000, 180.00549, 359.98352);
	CreateDynamicObject(1232, 1415.59961, -1653.00000, 15.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1352.19995, -1618.80005, 3.90000,   0.00000, 179.99451, 0.00000);
	CreateDynamicObject(4100, 1386.59961, -1679.59961, 15.30000,   0.00000, 0.00000, 317.99927);
	CreateDynamicObject(3578, 1384.50000, -1679.50000, 13.30000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1359.40002, -1684.30005, 12.60000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1359.19995, -1618.80005, 12.60000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(996, 1355.90002, -1618.90002, 14.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1354.90002, -1684.30005, 13.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1363.89941, -1618.89941, 13.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1354.69922, -1618.79980, 13.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1364.00000, -1684.30005, 13.90000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3660, 1359.19995, -1653.30005, 15.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3660, 1359.19995, -1641.30005, 15.10000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1251, 1363.40002, -1658.30005, 12.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 1363.30005, -1654.00000, 12.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 1363.00000, -1649.59998, 12.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 1363.40002, -1640.80005, 12.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 1363.19922, -1645.19922, 12.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 1363.30005, -1636.50000, 12.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1251, 1363.30005, -1632.09998, 12.50000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1232, 1358.40002, -1663.09998, 15.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2774, 1352.30005, -1684.09998, 4.90000,   0.00000, 179.99451, 0.00000);
	CreateDynamicObject(996, 1356.09961, -1684.19922, 14.10000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 1374.40002, -1598.50000, 12.60000,   0.00000, 0.00000, 339.99451);
	CreateDynamicObject(4100, 1376.27063, -1599.10229, 14.90000,   0.00000, 0.00000, 299.99817);
	CreateDynamicObject(975, 1352.69995, -1682.00000, 12.60000,   0.00000, 270.00000, 89.99982);
	CreateDynamicObject(2774, 1352.19922, -1623.50000, 3.90000,   0.00000, 179.99451, 0.00000);
	CreateDynamicObject(2774, 1352.40002, -1676.90002, 4.70000,   0.00000, 179.99451, 0.00000);
	CreateDynamicObject(975, 1352.19922, -1621.00000, 12.40000,   0.00000, 270.00000, 89.99451);
	CreateDynamicObject(975, 1352.69995, -1678.80005, 12.60000,   0.00000, 270.00000, 89.99451);
	CreateDynamicObject(2922, 1388.80005, -1631.40002, 14.20000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2922, 1393.59961, -1632.29980, 38.40000,   0.00000, 0.00000, 89.99597);
	CreateDynamicObject(4100, 1375.77356, -1679.40356, 15.30000,   0.00000, 0.00000, 317.99927);
	CreateDynamicObject(4100, 1375.77344, -1679.40332, 12.52501,   0.00000, 0.00000, 317.99927);
	//24-7 Vinewood
	CreateDynamicObject(3850, 1342.30005, -856.72998, 40.07000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1342.31006, -860.19000, 40.07000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1342.30005, -863.65002, 40.07000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1342.31006, -867.10999, 40.07000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1342.32996, -870.58002, 40.07000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1342.32996, -874.03003, 40.07000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1340.57996, -854.81000, 40.07000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(3850, 1337.14001, -854.45001, 40.07000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(3850, 1333.69995, -854.09003, 40.07000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(3850, 1330.25000, -853.72998, 40.07000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(3850, 1326.81006, -853.35999, 40.07000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(3850, 1323.37000, -853.00000, 40.07000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(3850, 1319.93005, -852.64001, 40.07000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(3850, 1316.48999, -852.28003, 40.07000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(3850, 1313.05005, -851.92999, 40.07000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(3850, 1309.60999, -851.56000, 40.07000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(3850, 1306.18005, -851.21002, 40.07000,   0.00000, 0.00000, 84.00000);
	CreateDynamicObject(1483, 1307.85999, -852.54999, 41.21000,   0.00000, 0.00000, 265.00000);
	CreateDynamicObject(1483, 1314.34998, -853.15002, 41.21000,   0.00000, 0.00000, 265.00000);
	CreateDynamicObject(1483, 1320.84998, -853.71997, 41.21000,   0.00000, 0.00000, 265.00000);
	CreateDynamicObject(1483, 1327.33997, -854.28998, 41.21000,   0.00000, 0.00000, 265.00000);
	CreateDynamicObject(1483, 1333.84998, -854.84998, 41.21000,   0.00000, 0.00000, 265.00000);
	CreateDynamicObject(1483, 1333.84998, -854.84998, 41.21000,   0.00000, 0.00000, 265.00000);
	CreateDynamicObject(1483, 1338.71997, -855.28003, 41.21000,   0.00000, 0.00000, 265.00000);
	CreateDynamicObject(1597, 1313.71997, -864.59998, 41.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1597, 1328.44995, -864.65002, 41.19000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1281, 1325.12000, -909.69000, 39.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1329.54004, -909.76001, 39.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1325.06006, -901.09998, 39.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1281, 1329.59998, -901.09998, 39.38000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3467, 1316.96997, -899.48999, 39.16000,   0.00000, 0.00000, -25.00000);
	CreateDynamicObject(2773, 1305.35999, -901.40997, 39.09000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1305.39001, -899.54999, 39.09000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1280, 1307.69995, -907.63000, 38.97000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1232, 1310.52002, -910.21002, 41.19000,   356.85999, 0.00000, 3.14000);
	CreateDynamicObject(1280, 1333.56995, -905.26001, 38.97000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2714, 1315.44995, -897.35999, 40.51000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3920, 1311.04004, -897.97998, 44.41000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3920, 1319.63000, -897.71997, 44.41000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3522, 1311.92004, -898.16998, 38.65000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3522, 1319.04004, -898.16998, 38.65000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(14469, 1311.57996, -896.95001, 38.57000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, 1319.25000, -897.04999, 38.57000,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(870, 1312.90002, -897.59003, 38.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(870, 1310.78003, -897.52002, 38.87000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(870, 1318.03003, -897.34003, 38.87000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(870, 1320.18005, -897.35999, 38.87000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(1232, 1320.70996, -911.28998, 41.19000,   356.85999, 0.00000, 3.14000);
	CreateDynamicObject(1232, 1310.91003, -901.83002, 41.19000,   356.85999, 0.00000, 3.14000);
	CreateDynamicObject(1232, 1320.44995, -901.83002, 41.19000,   356.85999, 0.00000, 3.14000);
	CreateDynamicObject(3504, 1304.77002, -876.12000, 39.92000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3504, 1304.76001, -874.35999, 39.92000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(3504, 1304.77002, -872.58002, 39.92000,   0.00000, 0.00000, 270.00000);
	CreateDynamicObject(929, 1315.60999, -879.15997, 45.16000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1482, 1315.65002, -899.20001, 44.55000,   0.00000, 0.00000, 270.29999);
	CreateDynamicObject(1482, 1322.18994, -899.15997, 44.55000,   0.00000, 0.00000, 270.29999);
	CreateDynamicObject(1482, 1309.13000, -899.23999, 44.55000,   0.00000, 0.00000, 270.29999);
	CreateDynamicObject(7313, 1315.66003, -900.98999, 44.58000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2345, 1314.38000, -901.19000, 45.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2345, 1316.50000, -901.16998, 45.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2345, 1318.63000, -901.16998, 45.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2345, 1320.77002, -901.15997, 45.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2345, 1322.90002, -901.15997, 45.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2345, 1324.46997, -901.16998, 45.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2345, 1312.30005, -901.20001, 45.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2345, 1310.19995, -901.22998, 45.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2345, 1308.12000, -901.23999, 45.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2345, 1306.90002, -901.22998, 45.77000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2923, 1322.18994, -912.76001, 36.01000,   0.00000, 0.00000, -15.00000);
	CreateDynamicObject(1216, 1326.66003, -892.81000, 39.27000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1216, 1326.67004, -893.48999, 39.27000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1234, 1326.42004, -893.12000, 40.12000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1344, 1326.94995, -888.46997, 39.36000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2957, 1315.37000, -877.00000, 40.17000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1692, 1308.80005, -888.64001, 45.06000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1692, 1315.53003, -888.67999, 45.06000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1692, 1322.29004, -888.75000, 45.06000,   0.00000, 0.00000, 90.00000);
		//gasolineras
	////////gasolineras exterior by macia espinoza///////////////////////////
	CreateDynamicObject(7971, 1364.28003, -1816.85999, 17.30000,   0.00000, 0.00000, 359.26001);
	CreateDynamicObject(1265, 1339.97998, -1774.62000, 12.97000,   356.85999, 0.00000, 3.14000);
	CreateDynamicObject(1265, 1339.87000, -1776.04004, 12.97000,   356.85999, 0.00000, 3.14000);
	CreateDynamicObject(19378, 1364.93994, -1783.41003, 12.93000,   0.00000, 0.00000, 359.60001);
	CreateDynamicObject(19378, 1365.01001, -1778.07996, 12.93000,   0.00000, 0.00000, 359.39999);
	CreateDynamicObject(19378, 1360.16003, -1788.13000, 12.93000,   0.00000, 0.00000, 89.29000);
	CreateDynamicObject(19378, 1345.72998, -1797.35999, 12.93000,   0.00000, 0.00000, 89.18000);
	CreateDynamicObject(19378, 1350.56006, -1797.41003, 12.93000,   0.00000, 0.00000, 89.18000);
	CreateDynamicObject(19378, 1355.34998, -1792.73999, 12.93000,   0.00000, 0.00000, 359.60001);
	CreateDynamicObject(970, 1357.56006, -1822.93005, 13.10000,   0.00000, 0.00000, 359.25000);
	CreateDynamicObject(970, 1353.40002, -1822.88000, 13.10000,   0.00000, 0.00000, 359.54999);
	CreateDynamicObject(970, 1361.67004, -1822.98999, 13.10000,   0.00000, 0.00000, 359.25000);
	CreateDynamicObject(970, 1353.77002, -1821.56995, 13.10000,   0.00000, 0.00000, 359.54999);
	CreateDynamicObject(970, 1357.92004, -1821.58997, 13.10000,   0.00000, 0.00000, 359.54999);
	CreateDynamicObject(970, 1362.05005, -1821.62000, 13.10000,   0.00000, 0.00000, 359.54999);
	CreateDynamicObject(970, 1361.76001, -1812.57996, 13.10000,   0.00000, 0.00000, 359.54999);
	CreateDynamicObject(970, 1357.59998, -1812.55005, 13.10000,   0.00000, 0.00000, 359.54999);
	CreateDynamicObject(970, 1353.46997, -1812.52002, 13.10000,   0.00000, 0.00000, 359.54999);
	CreateDynamicObject(970, 1353.47998, -1810.56995, 13.10000,   0.00000, 0.00000, 359.54999);
	CreateDynamicObject(970, 1357.65002, -1810.60999, 13.10000,   0.00000, 0.00000, 359.54999);
	 // Gasolinera St.Maria Beach - Grotti
	CreateDynamicObject(11547, 203.03999, -1440.76001, 14.98000,   0.00000, 0.00000, 318.29001);
	CreateDynamicObject(11546, 215.48000, -1427.27002, 12.16000,   0.00000, 0.00000, 44.42000);
	CreateDynamicObject(970, 198.17000, -1446.31006, 12.62000,   0.00000, 0.00000, 317.76001);
	CreateDynamicObject(970, 197.00999, -1447.58997, 12.58000,   0.00000, 0.00000, 317.76001);
	CreateDynamicObject(970, 201.75000, -1442.22998, 12.62000,   0.00000, 0.00000, 317.76001);
	CreateDynamicObject(970, 200.69000, -1443.41003, 12.62000,   0.00000, 0.00000, 317.76001);
	CreateDynamicObject(970, 204.44000, -1439.43005, 12.62000,   0.00000, 0.00000, 318.28000);
	CreateDynamicObject(970, 205.56000, -1438.25000, 12.62000,   0.00000, 0.00000, 318.28000);
	CreateDynamicObject(970, 208.06000, -1435.31006, 12.62000,   0.00000, 0.00000, 318.28000);
	CreateDynamicObject(970, 209.30000, -1434.19995, 12.62000,   0.00000, 0.00000, 318.28000);

	// Gasolinera Ganton
	CreateDynamicObject(4100, 2387.14990, -1930.65002, 14.00000,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(4100, 2373.45996, -1930.63000, 14.00000,   0.00000, 0.00000, 140.00000);
	CreateDynamicObject(10789, 2381.59009, -1905.20996, 15.04000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2393.98999, -1913.73999, 13.00000,   0.00000, 0.00000, 269.95999);
	CreateDynamicObject(970, 2394.00000, -1909.58997, 13.00000,   0.00000, 0.00000, 269.95999);
	CreateDynamicObject(970, 2394.00000, -1905.44995, 13.00000,   0.00000, 0.00000, 269.95999);
	CreateDynamicObject(970, 2394.01001, -1901.29004, 13.00000,   0.00000, 0.00000, 269.95999);
	CreateDynamicObject(970, 2394.01001, -1897.12000, 13.00000,   0.00000, 0.00000, 269.95999);
	CreateDynamicObject(970, 2392.00000, -1913.57996, 13.00000,   0.00000, 0.00000, 269.95999);
	CreateDynamicObject(970, 2392.00000, -1909.43994, 13.00000,   0.00000, 0.00000, 269.95999);
	CreateDynamicObject(970, 2391.98999, -1905.27002, 13.00000,   0.00000, 0.00000, 269.95999);
	CreateDynamicObject(970, 2391.91992, -1901.12000, 13.00000,   0.00000, 0.00000, 269.95999);
	CreateObject(8661, 2383.90991, -1912.12000, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateObject(8661, 2383.76001, -1932.06995, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateObject(8661, 2383.92993, -1892.23999, 12.50000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3578, 2403.66992, -1921.30005, 11.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2403.66992, -1892.30005, 11.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2403.64990, -1902.59998, 11.80000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2403.64990, -1912.35999, 11.78000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3578, 2403.64990, -1925.48999, 11.78000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 2391.90991, -1896.95996, 13.00000,   0.00000, 0.00000, 269.95999);
	CreateDynamicObject(970, 2384.64990, -1896.55005, 13.00000,   0.00000, 0.00000, 270.16000);
	CreateDynamicObject(970, 2384.66992, -1900.71997, 13.00000,   0.00000, 0.00000, 270.16000);
	CreateDynamicObject(970, 2384.68994, -1904.89001, 13.00000,   0.00000, 0.00000, 270.16000);
	CreateDynamicObject(970, 2384.69995, -1909.05005, 13.00000,   0.00000, 0.00000, 270.16000);
	CreateDynamicObject(970, 2384.71997, -1913.19995, 13.00000,   0.00000, 0.00000, 270.16000);
	CreateDynamicObject(970, 2382.62012, -1913.16003, 13.00000,   0.00000, 0.00000, 270.16000);
	CreateDynamicObject(970, 2382.60010, -1909.00000, 13.00000,   0.00000, 0.00000, 270.16000);
	CreateDynamicObject(970, 2382.60010, -1904.85999, 13.00000,   0.00000, 0.00000, 270.16000);
	CreateDynamicObject(970, 2382.59009, -1900.69995, 13.00000,   0.00000, 0.00000, 270.16000);
	CreateDynamicObject(970, 2382.57007, -1896.56006, 13.00000,   0.00000, 0.00000, 270.16000);
	//Restaurante Gob
	CreateDynamicObject(19461, 1300.856689, -1862.322631, 14.256855, 0.000000, 0.000000, -90.599990);//noname
	CreateDynamicObject(19397, 1294.496704, -1862.276367, 14.246870, 0.000000, 0.000000, -90.000000);//noname
	CreateDynamicObject(19415, 1288.101074, -1862.332763, 14.236867, 0.000000, 0.000000, -89.900001);//noname
	CreateDynamicObject(19415, 1291.322875, -1862.314819, 14.236865, 0.000000, 0.000000, -89.000000);//noname
	CreateDynamicObject(19397, 1287.374023, -1878.516479, 14.316875, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19367, 1287.358154, -1881.371093, 14.276881, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19446, 1305.038085, -1867.270263, 14.286869, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19446, 1305.041259, -1876.894897, 14.282505, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19446, 1300.899902, -1862.327148, 14.276881, 0.000000, 0.000000, 89.400024);//noname
	CreateDynamicObject(19384, 1294.500732, -1862.292358, 14.266871, 0.000000, 0.000000, -89.899993);//noname
	CreateDynamicObject(19446, 1287.372558, -1867.353271, 14.236865, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19446, 1287.388183, -1872.655883, 14.236865, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19446, 1300.156250, -1880.642578, 14.256872, 0.000000, 0.000000, -90.000007);//noname
	CreateDynamicObject(19446, 1292.250854, -1880.623901, 14.286870, 0.000000, 0.000000, -90.400009);//noname
	CreateDynamicObject(19384, 1287.380493, -1878.516479, 14.226873, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19384, 1287.388793, -1881.606933, 14.236877, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19400, 1291.334716, -1862.328125, 14.256875, 0.000000, 0.000000, 91.300003);//noname
	CreateDynamicObject(19400, 1288.139648, -1862.434814, 14.266880, 0.000000, 0.000000, -87.599983);//noname
	CreateDynamicObject(19449, 1289.190795, -1867.118652, 15.978837, 0.000000, 90.400001, 0.000000);//noname
	CreateDynamicObject(19449, 1292.641357, -1867.094848, 15.977119, 0.000000, -90.000000, 0.000000);//noname
	CreateDynamicObject(19449, 1296.065307, -1867.087280, 15.983592, 0.000000, 90.599998, 0.000000);//noname
	CreateDynamicObject(19449, 1299.469482, -1867.087402, 15.950279, 0.000000, -89.899978, 0.000000);//noname
	CreateDynamicObject(19449, 1306.376586, -1867.109497, 15.944888, 0.000000, -90.000007, 0.000000);//noname
	CreateDynamicObject(19449, 1302.900512, -1867.082641, 15.940600, 0.000000, -89.999977, 0.000000);//noname
	CreateDynamicObject(19449, 1300.155151, -1871.648437, 19.896549, 0.000000, 0.000000, 90.099983);//noname
	CreateDynamicObject(19449, 1291.525756, -1871.736083, 19.888921, 0.000000, 0.000000, -89.899993);//noname
	CreateDynamicObject(19449, 1304.433593, -1876.458984, 21.577606, 0.000000, 90.299995, -0.099999);//noname
	CreateDynamicObject(19449, 1300.902221, -1876.471191, 21.555501, 0.000000, -90.099960, 0.000000);//noname
	CreateDynamicObject(19449, 1297.612670, -1876.476806, 21.530109, 0.000000, -90.799995, 0.000000);//noname
	CreateDynamicObject(19449, 1294.267089, -1876.457519, 21.562549, 0.000000, -90.100006, 0.000000);//noname
	CreateDynamicObject(19449, 1290.876220, -1876.434814, 21.530338, 0.000000, -90.000068, 0.000000);//noname
	CreateDynamicObject(19449, 1288.950683, -1876.465820, 21.550909, 0.000000, -90.000038, 0.000000);//noname
	CreateDynamicObject(19449, 1299.228393, -1881.150390, 19.932205, 0.000000, 0.199999, 90.500038);//noname
	CreateDynamicObject(19449, 1291.994873, -1881.187622, 19.908241, 0.000000, 0.000000, -90.000015);//noname
	CreateDynamicObject(19449, 1299.225830, -1881.161010, 16.371223, 0.000000, 0.000000, 90.599998);//noname
	CreateDynamicObject(19449, 1291.953002, -1881.172119, 16.543472, 0.000000, 0.000000, -89.800025);//noname
	CreateDynamicObject(19449, 1287.265502, -1876.334228, 17.849399, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19449, 1287.274291, -1876.513061, 19.903692, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19449, 1308.703857, -1879.910156, 18.064785, 0.000000, 0.000000, -75.800010);//noname
	CreateDynamicObject(19449, 1308.760253, -1880.435302, 19.875904, 0.000000, 0.000000, -82.300003);//noname
	CreateDynamicObject(19446, 1305.029052, -1876.551757, 17.702526, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19446, 1305.046142, -1876.551513, 19.882535, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19446, 1300.184204, -1880.647460, 17.706886, 0.000000, 0.000000, -90.100021);//noname
	CreateDynamicObject(19446, 1300.293945, -1880.734008, 19.846904, 0.000000, 0.000000, 90.000007);//noname
	CreateDynamicObject(19446, 1292.202880, -1880.619506, 17.696886, 0.000000, 0.000000, -90.399971);//noname
	CreateDynamicObject(19446, 1292.202148, -1880.629394, 19.806915, 0.000000, 0.000000, -90.399978);//noname
	CreateDynamicObject(19446, 1287.432739, -1876.641357, 19.882556, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19446, 1287.459960, -1876.506103, 17.702539, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19446, 1300.411865, -1871.689697, 19.892538, 0.000000, 0.000000, -89.500007);//noname
	CreateDynamicObject(19446, 1291.514160, -1871.748413, 19.872528, 0.000000, 0.000000, -89.799987);//noname
	CreateDynamicObject(3920, 1299.284545, -1871.617553, 15.072930, 0.000000, 0.000000, -179.900192);//noname
	CreateDynamicObject(19452, 1294.088134, -1867.086303, 12.466876, 0.000000, 89.899971, 0.000000);//noname
	CreateDynamicObject(19452, 1297.576538, -1867.049926, 12.473670, 0.000000, -90.100013, 0.000000);//noname
	CreateDynamicObject(19452, 1301.041137, -1867.051757, 12.470579, 0.000000, -90.000038, 0.000000);//noname
	CreateDynamicObject(19452, 1304.339233, -1867.064086, 12.465450, 0.000000, -89.899971, 0.000000);//noname
	CreateDynamicObject(19452, 1290.601928, -1867.051879, 12.469447, 0.000000, -89.900062, 0.000000);//noname
	CreateDynamicObject(19452, 1288.914672, -1867.145385, 12.467470, 0.000000, 90.100028, 0.000000);//noname
	CreateDynamicObject(19452, 1303.629516, -1876.608276, 12.470005, 0.000000, 89.799995, 0.000000);//noname
	CreateDynamicObject(19452, 1300.224853, -1876.626098, 12.469447, 0.000000, 90.199989, 0.000000);//noname
	CreateDynamicObject(19452, 1296.807128, -1876.606933, 12.468647, 0.000000, 89.800025, 0.000000);//noname
	CreateDynamicObject(19452, 1293.324951, -1876.664062, 12.461665, 0.000000, 90.000038, 0.000000);//noname
	CreateDynamicObject(19452, 1289.841308, -1876.647338, 12.497240, 0.000000, 90.099945, 0.000000);//noname
	CreateDynamicObject(19452, 1289.031494, -1875.988769, 12.467144, 0.000000, -89.900047, 0.000000);//noname
	CreateDynamicObject(1536, 1293.745849, -1862.197998, 12.466876, 0.000000, 0.000000, -88.499946);//noname
	CreateDynamicObject(1536, 1287.339111, -1877.771606, 12.452733, 0.000000, 0.000000, -89.899993);//noname
	CreateDynamicObject(2412, 1293.569335, -1862.430664, 12.533473, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2412, 1295.757812, -1862.402343, 12.536801, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2435, 1287.802001, -1873.340820, 12.507589, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2435, 1288.678344, -1873.308715, 12.502831, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2435, 1289.611206, -1873.306884, 12.501567, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2435, 1290.520141, -1873.302612, 12.510162, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2434, 1291.418457, -1873.333374, 12.527601, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2435, 1291.582275, -1872.219360, 12.519968, 0.000000, 0.000000, 89.699981);//noname
	CreateDynamicObject(2435, 1291.585205, -1871.304077, 12.521340, 0.000000, 0.000000, 89.700012);//noname
	CreateDynamicObject(2435, 1291.606079, -1870.374633, 12.532094, 0.000000, 0.000000, 89.200004);//noname
	CreateDynamicObject(2435, 1291.630126, -1869.514038, 12.531620, 0.000000, 0.000000, 87.800003);//noname
	CreateDynamicObject(2434, 1291.651977, -1868.650878, 12.541419, 0.000000, 0.000000, 89.799972);//noname
	CreateDynamicObject(2435, 1290.529541, -1868.465087, 12.535387, 0.000000, 0.000000, 178.600036);//noname
	CreateDynamicObject(2435, 1289.623291, -1868.460205, 12.527647, 0.000000, 0.000000, 179.399978);//noname
	CreateDynamicObject(2417, 1288.021362, -1870.354492, 12.517509, 0.000000, 0.000000, 88.200004);//noname
	CreateDynamicObject(2636, 1292.502197, -1869.144165, 13.117383, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2636, 1292.629760, -1872.151977, 13.132657, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2636, 1290.298217, -1874.283325, 13.130635, 0.000000, 0.000000, -60.599998);//noname
	CreateDynamicObject(2636, 1288.900512, -1874.301391, 13.084854, 0.000000, 0.000000, -85.799987);//noname
	CreateDynamicObject(2636, 1290.565917, -1869.588867, 12.683958, 0.000000, 69.600006, -121.499992);//noname
	CreateDynamicObject(2747, 1298.170410, -1870.775390, 12.946014, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2747, 1298.268066, -1867.466674, 12.948616, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2747, 1298.157104, -1863.825317, 12.938385, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2747, 1302.620483, -1870.957519, 12.976511, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2747, 1302.784912, -1867.762695, 12.946513, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2747, 1302.714111, -1863.915039, 12.916513, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2747, 1289.766113, -1876.503417, 12.942502, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2252, 1298.330566, -1867.376098, 13.559453, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2747, 1290.468139, -1866.432861, 12.913306, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(12950, 1292.338500, -1875.567504, 12.802496, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2636, 1299.341552, -1871.018920, 13.105319, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2636, 1299.661621, -1867.760498, 13.106509, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2636, 1299.719726, -1863.636108, 13.086503, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2636, 1304.048950, -1863.982543, 13.143239, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2636, 1304.127319, -1867.824707, 13.141921, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2636, 1303.811523, -1870.970092, 13.216341, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2240, 1290.907348, -1862.713500, 12.882555, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2636, 1290.267089, -1876.437500, 13.091382, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2636, 1291.147460, -1866.383056, 13.169832, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(1549, 1296.320678, -1862.582153, 12.456596, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2636, 1296.754638, -1867.508056, 13.047673, 0.000000, 0.000000, 177.499969);//noname
	CreateDynamicObject(2636, 1296.701049, -1863.937133, 13.148468, 0.000000, 0.000000, 177.199966);//noname
	CreateDynamicObject(2636, 1301.943237, -1863.714355, 13.116513, 0.000000, 0.000000, -178.000015);//noname
	CreateDynamicObject(2636, 1301.873046, -1867.574340, 13.126515, 0.000000, 0.000000, -175.000030);//noname
	CreateDynamicObject(2636, 1301.767211, -1870.980224, 13.106513, 0.000000, 0.000000, -179.400070);//noname
	CreateDynamicObject(2636, 1298.124511, -1871.249633, 13.097187, 0.000000, 0.000000, -90.199981);//noname
	CreateDynamicObject(2636, 1298.373901, -1868.607177, 13.108736, 0.000000, 0.000000, -88.699981);//noname
	CreateDynamicObject(2636, 1298.323852, -1865.131103, 13.141510, 0.000000, 0.000000, -86.700004);//noname
	CreateDynamicObject(2636, 1302.496459, -1864.519531, 13.146512, 0.000000, 0.000000, -100.200042);//noname
	CreateDynamicObject(2636, 1302.748657, -1868.234497, 13.066514, 0.000000, 0.000000, -83.599998);//noname
	CreateDynamicObject(2636, 1302.853637, -1871.531982, 13.042510, 0.000000, 0.000000, -87.600013);//noname
	CreateDynamicObject(2245, 1298.285888, -1863.735961, 13.557967, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2249, 1303.044555, -1871.800170, 14.066514, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2636, 1289.078002, -1876.394653, 13.192517, 0.000000, 0.000000, -177.400009);//noname
	CreateDynamicObject(2636, 1298.016845, -1870.122314, 13.148281, 0.000000, 0.000000, 99.899955);//noname
	CreateDynamicObject(2636, 1298.060668, -1866.310668, 13.207139, 0.000000, 0.000000, 96.199981);//noname
	CreateDynamicObject(2436, 1287.782592, -1869.422485, 12.512594, 0.000000, 0.000000, 90.999977);//noname
	CreateDynamicObject(2011, 1300.799194, -1862.936645, 12.462509, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2011, 1287.796142, -1863.243286, 12.403193, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2010, 1291.684936, -1867.870849, 12.416543, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2010, 1294.546142, -1871.606079, 12.448040, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2011, 1292.680541, -1862.680664, 12.520689, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(1723, 1299.978271, -1874.851928, 12.480360, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(1723, 1302.031616, -1879.584716, 12.500144, 0.000000, 0.000000, -179.000030);//noname
	CreateDynamicObject(1723, 1298.140258, -1878.329345, 12.413940, 0.000000, 0.000000, 92.400009);//noname
	CreateDynamicObject(1724, 1303.501464, -1876.740112, 12.494498, 0.000000, 0.000000, -89.999984);//noname
	CreateDynamicObject(1827, 1300.727416, -1877.282836, 12.392511, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(3660, 1307.949951, -1872.860107, 15.106524, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(3660, 1296.831787, -1884.248168, 15.122509, 0.000000, 0.000000, -89.099990);//noname
	CreateDynamicObject(2252, 1291.532836, -1870.498168, 13.833394, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(3433, 1290.011108, -1861.257202, 15.269886, 0.000000, 0.000000, -91.200012);//noname
	CreateDynamicObject(1893, 1293.852294, -1870.917480, 15.974804, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(1893, 1299.387695, -1871.141357, 15.966876, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2862, 1291.212524, -1868.615112, 13.575042, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2788, 1296.056152, -1864.021606, 16.555118, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2788, 1299.138549, -1864.182983, 16.558826, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19466, 1291.306274, -1862.274902, 14.176876, 0.000000, 0.000000, -90.499977);//noname
	CreateDynamicObject(19466, 1288.250122, -1862.365234, 14.316864, 0.000000, 0.000000, -85.599990);//noname
	CreateDynamicObject(1893, 1296.099853, -1867.604248, 15.950590, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(1893, 1300.445556, -1867.575683, 15.996520, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(1893, 1291.616943, -1867.603759, 15.952645, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2863, 1289.680541, -1873.340209, 13.533356, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(1893, 1298.446899, -1864.455200, 15.946535, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(1893, 1302.851562, -1863.556152, 15.936525, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(3785, 1293.179809, -1862.151611, 14.736881, 0.000000, 0.000000, 87.099983);//noname
	CreateDynamicObject(3785, 1295.852416, -1862.098510, 14.586886, 0.000000, 0.000000, 87.000015);//noname
	CreateDynamicObject(2240, 1303.681030, -1879.282958, 12.926980, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2245, 1300.784423, -1877.280029, 13.040578, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2854, 1300.638793, -1876.764892, 12.853858, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2853, 1300.246582, -1877.648681, 12.807891, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2764, 1303.826416, -1864.222656, 16.463047, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2764, 1303.786254, -1870.148315, 16.433181, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2764, 1300.979980, -1867.448364, 16.427057, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2764, 1297.751953, -1864.010864, 16.444919, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2764, 1297.636108, -1870.258056, 16.431211, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2764, 1287.910278, -1864.005249, 16.453041, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2764, 1289.038940, -1870.239501, 16.458589, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2764, 1292.000488, -1867.451171, 16.448593, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2764, 1294.627319, -1864.023071, 16.462669, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2764, 1294.653930, -1870.231811, 16.473047, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2788, 1303.932861, -1865.020751, 16.527683, 0.000000, 0.000000, -83.899993);//noname
	CreateDynamicObject(2788, 1292.488403, -1867.368408, 16.577213, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2788, 1289.481811, -1870.222656, 16.573045, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2788, 1300.628295, -1866.872436, 16.593248, 0.000000, 0.000000, 96.300033);//noname
	CreateDynamicObject(2788, 1303.762939, -1869.694213, 16.494251, 0.000000, 0.000000, 89.899978);//noname
	CreateDynamicObject(2788, 1299.033813, -1870.138671, 16.548349, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2788, 1296.235961, -1870.209960, 16.608366, 0.000000, 0.000000, 174.699966);//noname
	CreateDynamicObject(2788, 1291.462402, -1867.427978, 16.567588, 0.000000, 0.000000, 169.300033);//noname
	CreateDynamicObject(2788, 1294.282592, -1863.968750, 16.553045, 0.000000, 0.000000, 162.700027);//noname
	CreateDynamicObject(2788, 1293.983398, -1870.185180, 16.583044, 0.000000, 0.000000, -177.199966);//noname
	CreateDynamicObject(2788, 1295.028442, -1870.179809, 16.621799, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2788, 1288.170043, -1864.587036, 16.573051, 0.000000, 0.000000, -96.099990);//noname
	CreateDynamicObject(2788, 1288.494262, -1870.021972, 16.639003, 0.000000, 0.000000, -176.299957);//noname
	CreateDynamicObject(2788, 1300.152221, -1867.510864, 16.524164, 0.000000, 0.000000, 173.900039);//noname
	CreateDynamicObject(2788, 1301.247924, -1867.440917, 16.533737, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2788, 1300.865478, -1868.020385, 16.543478, 0.000000, 0.000000, -93.399978);//noname
	CreateDynamicObject(2788, 1297.338623, -1864.115722, 16.558988, 0.000000, 0.000000, -173.599975);//noname
	CreateDynamicObject(2788, 1297.848266, -1864.721313, 16.566686, 0.000000, 0.000000, -94.899978);//noname
	CreateDynamicObject(2788, 1294.885620, -1864.798339, 16.596090, 0.000000, 0.000000, -73.899993);//noname
	CreateDynamicObject(2011, 1287.867919, -1866.729980, 16.043878, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2011, 1292.532836, -1863.187622, 15.973034, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2011, 1304.760742, -1867.270385, 16.023042, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2010, 1301.897338, -1862.922485, 15.986515, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(2010, 1295.260131, -1867.237915, 16.056915, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(19430, 1293.588378, -1871.738403, 17.683055, 0.000000, 0.000000, -89.900016);//noname
	CreateDynamicObject(19430, 1290.893798, -1871.745605, 17.753339, 0.000000, 0.000000, -90.000015);//noname
	CreateDynamicObject(1649, 1289.444702, -1871.750366, 17.673294, 0.000000, 0.000000, -179.199996);//
	CreateDynamicObject(970, 1303.192382, -1862.416992, 16.493984, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(970, 1299.017578, -1862.422729, 16.505115, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(970, 1294.883544, -1862.419433, 16.510757, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(970, 1290.779541, -1862.402221, 16.503044, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(970, 1286.650756, -1862.397827, 16.504604, 0.000000, 0.000000, 0.000000);//noname
	CreateDynamicObject(1649, 1296.403198, -1871.699462, 17.723058, 0.000000, 0.000000, 0.000000);//
	CreateDynamicObject(1649, 1300.791625, -1871.710571, 17.706232, 0.000000, 0.000000, 0.000000);//
	CreateDynamicObject(1649, 1305.063964, -1871.690429, 17.676353, 0.000000, 0.000000, 0.000000);//
	CreateDynamicObject(1649, 1289.087158, -1871.833251, 17.692825, 0.000000, 0.000000, 0.000000);//
	CreateDynamicObject(1649, 1303.861694, -1871.627685, 17.687921, 0.000000, 0.000000, 179.999786);//
	CreateDynamicObject(1649, 1299.443115, -1871.639648, 17.685724, 0.000000, 0.000000, -179.799987);//
	CreateDynamicObject(1649, 1295.052246, -1871.684448, 17.705921, 0.000000, 0.000000, -178.799926);//
	CreateDynamicObject(1536, 1291.691772, -1871.766479, 15.943043, 0.000000, 0.000000, 89.899986);//
	CreateDynamicObject(1214, 1299.30004883, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(1)
	CreateDynamicObject(1214, 1298.30004883, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(2)
	CreateDynamicObject(1214, 1297.30004883, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(3)
	CreateDynamicObject(1214, 1296.30004883, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(4)
	CreateDynamicObject(1214, 1300.30004883, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(5)
	CreateDynamicObject(1214, 1301.19995117, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(6)
	CreateDynamicObject(1214, 1302.00000000, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(7)
	CreateDynamicObject(1214, 1302.80004883, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(8)
	CreateDynamicObject(1214, 1303.59997559, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(9)
	CreateDynamicObject(1214, 1295.30004883, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(10)
	CreateDynamicObject(1214, 1294.40002441, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(11)
	CreateDynamicObject(1214, 1292.90002441, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(12)
	CreateDynamicObject(1214, 1292.09997559, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(13)
	CreateDynamicObject(1214, 1291.30004883, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(14)
	CreateDynamicObject(1214, 1290.59997559, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(15)
	CreateDynamicObject(1214, 1289.80004883, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(16)
	CreateDynamicObject(1214, 1289.09997559, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(17)
	CreateDynamicObject(1214, 1288.40002441, -1857.90002441, 12.50000000, 0.00000000, 0.00000000, 0.00000000);//object(bollard)(18)
	//Mercado Negro
	CreateDynamicObject(19393, 1419.37427, -1251.29370, 14.23823, 0.00000, 0.00000, 89.57997);
	CreateDynamicObject(19364, 1416.19531, -1251.30505, 14.23820, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(19364, 1422.58740, -1251.33521, 14.23820, 0.00000, 0.00000, 89.58000);
	CreateDynamicObject(1411, 1419.38928, -1251.55505, 16.98174, 0.00000, 0.00000, -180.65999);
	CreateDynamicObject(1499, 1418.60803, -1251.19983, 12.53308, 0.00000, 0.00000, -1.02000);
	CreateDynamicObject(1313, 1420.72766, -1251.21765, 14.57068, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1217, 1421.01135, -1250.78223, 12.92290, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1217, 1417.21387, -1250.42126, 12.93990, 0.00000, 0.00000, 128.22000);
	CreateDynamicObject(1233, 1417.90100, -1251.00354, 13.45823, 0.00000, 0.00000, -181.68002);
	CreateDynamicObject(1217, 1416.66907, -1249.68469, 12.93990, 0.00000, 0.00000, 238.32001);
	CreateDynamicObject(1224, 1421.74133, -1249.31604, 13.09942, 0.00000, 0.00000, 25.14000);
	CreateDynamicObject(954, 1417.89844, -1251.15881, 15.14952, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(954, 1418.12817, -1251.16516, 14.86154, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19393, 1419.39429, -1251.31372, 14.23823, 0.00000, 0.00000, 89.57997);
	CreateDynamicObject(19313, 1409.85730, -1302.43140, 15.70749, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1411, 1414.18188, -1302.59998, 20.20041, 0.00000, 0.00000, 179.94000);
	CreateDynamicObject(1411, 1409.02234, -1302.58887, 20.20041, 0.00000, 0.00000, 179.94000);
	CreateDynamicObject(1411, 1403.84863, -1302.59143, 20.20041, 0.00000, 0.00000, 179.94000);
	CreateDynamicObject(19313, 1417.07202, -1309.38562, 15.70749, 0.00000, 0.00000, -89.88000);
	CreateDynamicObject(1411, 1416.83020, -1304.92078, 20.33763, 0.00000, 0.00000, 90.41998);
	CreateDynamicObject(1411, 1416.85852, -1310.13489, 20.33763, 0.00000, 0.00000, 90.41998);
	CreateDynamicObject(1411, 1416.86023, -1313.60291, 20.33760, 0.00000, 0.00000, 90.42000);
	CreateDynamicObject(19313, 1417.09741, -1316.19397, 15.70749, 0.00000, 0.00000, -89.88000);
	CreateDynamicObject(1411, 1416.96350, -1320.44702, 20.33760, 0.00000, 0.00000, 90.42000);
	CreateDynamicObject(1411, 1416.91309, -1334.02954, 20.33760, 0.00000, 0.00000, 90.42000);
	CreateDynamicObject(19313, 1417.16016, -1338.42126, 15.70749, 0.00000, 0.00000, -89.88000);
	CreateDynamicObject(19313, 1417.17151, -1352.38586, 15.70749, 0.00000, 0.00000, -89.88000);
	CreateDynamicObject(1411, 1416.93030, -1318.71191, 20.33760, 0.00000, 0.00000, 90.42000);
	CreateDynamicObject(1411, 1416.97253, -1339.24133, 20.33760, 0.00000, 0.00000, 90.42000);
	CreateDynamicObject(1411, 1416.96472, -1344.40088, 20.33760, 0.00000, 0.00000, 90.42000);
	CreateDynamicObject(1411, 1416.97449, -1349.55249, 20.33760, 0.00000, 0.00000, 90.42000);
	CreateDynamicObject(1411, 1416.99780, -1354.68872, 20.33760, 0.00000, 0.00000, 90.42000);
	CreateDynamicObject(19364, 1421.68884, -1252.93567, 14.22889, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1421.68896, -1256.13818, 14.22889, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1421.69165, -1259.23633, 14.23272, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1421.69543, -1262.45032, 14.22889, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1421.68286, -1265.63794, 14.22889, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1421.68408, -1268.74207, 14.22889, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1421.67590, -1271.90710, 14.22889, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1421.68909, -1275.10352, 14.22889, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1421.69043, -1278.24597, 14.22889, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1421.69019, -1281.34766, 14.22889, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1421.68250, -1284.46606, 14.22889, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1421.68018, -1287.66174, 14.22889, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1421.65942, -1288.84265, 14.22889, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1423.25769, -1290.33752, 14.22889, 0.00000, 0.00000, 89.93996);
	CreateDynamicObject(19364, 1426.10156, -1290.33069, 14.22889, 0.00000, 0.00000, 90.05996);
	CreateDynamicObject(19364, 1426.34705, -1291.95044, 14.22889, 0.00000, 0.00000, 0.47996);
	CreateDynamicObject(19364, 1426.36829, -1295.13245, 14.22889, 0.00000, 0.00000, -0.24004);
	CreateDynamicObject(19364, 1426.34644, -1298.30090, 14.22889, 0.00000, 0.00000, -0.24004);
	CreateDynamicObject(19364, 1426.33044, -1301.50525, 14.22889, 0.00000, 0.00000, -0.42004);
	CreateDynamicObject(19364, 1426.31372, -1304.66931, 14.22889, 0.00000, 0.00000, -0.24004);
	CreateDynamicObject(19364, 1426.28162, -1307.87048, 14.22889, 0.00000, 0.00000, -0.24004);
	CreateDynamicObject(19364, 1426.26428, -1311.03943, 14.22889, 0.00000, 0.00000, -0.24004);
	CreateDynamicObject(19364, 1426.23584, -1314.15039, 14.22889, 0.00000, 0.00000, -0.24004);
	CreateDynamicObject(19364, 1426.23010, -1317.30591, 14.22889, 0.00000, 0.00000, -0.24004);
	CreateDynamicObject(19364, 1426.21899, -1320.48840, 14.22889, 0.00000, 0.00000, -0.24004);
	CreateDynamicObject(19364, 1426.21777, -1321.19507, 14.22889, 0.00000, 0.00000, -0.24004);
	CreateDynamicObject(19364, 1427.73792, -1322.85583, 14.22889, 0.00000, 0.00000, 90.17997);
	CreateDynamicObject(19364, 1430.88708, -1322.85486, 14.22889, 0.00000, 0.00000, 90.17997);
	CreateDynamicObject(19364, 1434.06543, -1322.84717, 14.22889, 0.00000, 0.00000, 90.17997);
	CreateDynamicObject(19364, 1437.22974, -1322.81799, 14.22889, 0.00000, 0.00000, 90.17997);
	CreateDynamicObject(19364, 1440.44067, -1322.75610, 14.22889, 0.00000, 0.00000, 90.17997);
	CreateDynamicObject(19364, 1443.03015, -1322.76038, 14.22889, 0.00000, 0.00000, 90.17997);
	CreateDynamicObject(19364, 1444.52661, -1324.35156, 14.22889, 0.00000, 0.00000, 179.51990);
	CreateDynamicObject(19364, 1442.91357, -1334.79358, 14.22889, 0.00000, 0.00000, 270.23965);
	CreateDynamicObject(19364, 1440.14221, -1334.82678, 14.22889, 0.00000, 0.00000, 270.83954);
	CreateDynamicObject(19364, 1437.05225, -1334.84729, 14.22889, 0.00000, 0.00000, 270.05957);
	CreateDynamicObject(19364, 1433.87622, -1334.83325, 14.22889, 0.00000, 0.00000, 270.05957);
	CreateDynamicObject(19364, 1430.76147, -1334.85083, 14.22889, 0.00000, 0.00000, 270.05957);
	CreateDynamicObject(19364, 1428.83044, -1334.85596, 14.22889, 0.00000, 0.00000, 270.05957);
	CreateDynamicObject(19364, 1427.21558, -1336.37659, 14.22889, 0.00000, 0.00000, 180.35962);
	CreateDynamicObject(19364, 1427.23157, -1339.47876, 14.22889, 0.00000, 0.00000, 180.35962);
	CreateDynamicObject(19364, 1427.22864, -1342.61206, 14.22889, 0.00000, 0.00000, 180.35962);
	CreateDynamicObject(19364, 1427.23755, -1345.80432, 14.22889, 0.00000, 0.00000, 179.51944);
	CreateDynamicObject(19364, 1427.23279, -1349.00208, 14.22889, 0.00000, 0.00000, 179.51944);
	CreateDynamicObject(19364, 1427.20569, -1352.09949, 14.22889, 0.00000, 0.00000, 179.51944);
	CreateDynamicObject(19364, 1427.17444, -1355.27893, 14.22889, 0.00000, 0.00000, 179.51944);
	CreateDynamicObject(19364, 1427.14771, -1358.41077, 14.22889, 0.00000, 0.00000, 179.51944);
	CreateDynamicObject(19364, 1425.50659, -1357.70911, 14.22889, 0.00000, 0.00000, 269.63922);
	CreateDynamicObject(19364, 1422.36121, -1357.69482, 14.22367, 0.00000, 0.00000, 269.27924);
	CreateDynamicObject(19364, 1420.18188, -1357.65674, 14.22889, 0.00000, 0.00000, 269.27924);
	CreateDynamicObject(19364, 1418.67029, -1357.66846, 14.22889, 0.00000, 0.00000, 269.27924);
	CreateDynamicObject(19364, 1416.97620, -1252.91467, 14.22889, 0.00000, 0.00000, 0.30000);
	CreateDynamicObject(19364, 1417.00024, -1256.11511, 14.22889, 0.00000, 0.00000, 0.12000);
	CreateDynamicObject(19364, 1417.00891, -1259.27075, 14.22889, 0.00000, 0.00000, 0.30000);
	CreateDynamicObject(19364, 1417.02612, -1262.46533, 14.22889, 0.00000, 0.00000, 0.30000);
	CreateDynamicObject(19364, 1417.04309, -1265.58325, 14.22889, 0.00000, 0.00000, 0.30000);
	CreateDynamicObject(19364, 1417.06628, -1268.74609, 14.22889, 0.00000, 0.00000, 0.30000);
	CreateDynamicObject(19364, 1417.07788, -1271.95618, 14.22889, 0.00000, 0.00000, 0.30000);
	CreateDynamicObject(19364, 1417.08740, -1275.03027, 14.22889, 0.00000, 0.00000, 0.30000);
	CreateDynamicObject(19364, 1417.10938, -1278.21545, 14.22889, 0.00000, 0.00000, 0.30000);
	CreateDynamicObject(19364, 1417.14587, -1281.36145, 14.22889, 0.00000, 0.00000, 1.32000);
	CreateDynamicObject(19364, 1417.14026, -1284.45911, 14.22889, 0.00000, 0.00000, -1.92000);
	CreateDynamicObject(19364, 1417.02637, -1287.66382, 14.22889, 0.00000, 0.00000, -2.10000);
	CreateDynamicObject(19364, 1416.97400, -1290.86938, 14.22889, 0.00000, 0.00000, 0.24000);
	CreateDynamicObject(19364, 1416.98694, -1293.98999, 14.22889, 0.00000, 0.00000, 0.24000);
	CreateDynamicObject(19364, 1416.99048, -1296.63293, 14.22889, 0.00000, 0.00000, 0.24000);
	CreateDynamicObject(19364, 1415.46790, -1298.22351, 14.22889, 0.00000, 0.00000, -90.72002);
	CreateDynamicObject(19364, 1412.29175, -1298.20325, 14.22889, 0.00000, 0.00000, -90.72002);
	CreateDynamicObject(19364, 1409.10815, -1298.16980, 14.22889, 0.00000, 0.00000, -90.72002);
	CreateDynamicObject(19364, 1405.91919, -1298.13904, 14.22889, 0.00000, 0.00000, -90.72002);
	CreateDynamicObject(19364, 1402.77319, -1298.09705, 14.22889, 0.00000, 0.00000, -90.60002);
	CreateDynamicObject(19364, 1403.37415, -1297.65308, 14.22889, 0.00000, 0.00000, -181.01996);
	CreateDynamicObject(19364, 1403.33264, -1300.80969, 14.22889, 0.00000, 0.00000, -181.01996);
	CreateDynamicObject(1411, 1414.18188, -1302.59998, 20.20041, 0.00000, 0.00000, 179.94000);
	CreateDynamicObject(1411, 1444.34229, -1334.30823, 17.19988, 0.00000, 0.00000, -270.95993);
	CreateDynamicObject(1411, 1444.34680, -1323.12524, 17.19988, 0.00000, 0.00000, -270.95993);
	CreateDynamicObject(1217, 1445.77332, -1332.74646, 13.14811, 0.00000, 0.00000, 0.90000);
	CreateDynamicObject(1265, 1445.97668, -1334.06726, 13.07352, 0.00000, 0.00000, 14.88000);
	CreateDynamicObject(1264, 1447.09705, -1332.87610, 13.03553, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1221, 1447.51611, -1334.46741, 13.02545, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1230, 1446.28870, -1335.12927, 12.97525, 0.00000, 0.00000, -16.32000);
	CreateDynamicObject(1230, 1446.72534, -1331.93945, 12.97525, 0.00000, 0.00000, -65.64000);
	CreateDynamicObject(1222, 1445.77502, -1331.63757, 13.06714, 0.00000, 0.00000, 26.76000);
	CreateDynamicObject(1233, 1445.23364, -1325.44653, 13.76327, 0.00000, 0.00000, 92.28000);
	CreateDynamicObject(1233, 1445.23511, -1333.70190, 13.52893, 0.00000, 0.00000, 140.04001);
	CreateDynamicObject(1313, 1444.66650, -1333.11987, 14.43348, 0.00000, 0.00000, -93.65998);
	CreateDynamicObject(954, 1444.69995, -1332.46228, 14.91083, 0.00000, 0.00000, 89.88000);
	CreateDynamicObject(954, 1444.70264, -1332.21179, 14.73449, 0.00000, 0.00000, 89.88000);
	CreateDynamicObject(18698, 1446.94922, -1333.05945, 13.52351, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19364, 1444.52686, -1333.13989, 14.22889, 0.00000, 0.00000, 177.77979);
	CreateDynamicObject(18661, 1444.62317, -1333.08105, 14.25034, 0.00000, 0.00000, 177.83983);
	CreateDynamicObject(18665, 1444.61987, -1324.28943, 14.51555, 0.00000, 0.00000, 179.58000);
	CreateDynamicObject(1217, 1446.11694, -1324.88586, 13.14811, 0.00000, 0.00000, 42.18000);
	CreateDynamicObject(1230, 1446.39978, -1325.85339, 12.97525, 0.00000, 0.00000, 3.18000);
	CreateDynamicObject(1264, 1447.48804, -1324.74780, 13.31106, 0.00000, 0.00000, 62.34000);
	CreateDynamicObject(1221, 1445.82422, -1323.69592, 13.02545, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1264, 1447.48047, -1323.50964, 13.01427, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1222, 1445.63928, -1322.59558, 13.06714, 0.00000, 0.00000, 26.76000);
	CreateDynamicObject(18698, 1446.46436, -1324.87451, 13.55690, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(910, 1417.91370, -1353.83521, 13.72042, 0.00000, 0.00000, -270.78009);
	CreateDynamicObject(2063, 1422.94092, -1357.06580, 13.34265, 0.00000, 0.00000, -181.31996);
	CreateDynamicObject(1227, 1426.31714, -1354.61780, 13.38281, 356.85840, 0.00000, -89.07837);
	CreateDynamicObject(1265, 1425.14905, -1355.57422, 12.98438, 3.14159, 0.00000, 0.34907);
	CreateDynamicObject(923, 1425.41443, -1356.77966, 13.52733, 0.00000, 0.00000, -1.26000);
	CreateDynamicObject(1265, 1417.82214, -1357.05286, 12.98438, 3.14159, 0.00000, 0.34907);
	CreateDynamicObject(2037, 1422.68518, -1356.96875, 13.34460, 0.00000, 0.00000, -182.45999);
	CreateDynamicObject(2037, 1422.00220, -1356.84912, 13.81048, 0.00000, 0.00000, -167.21997);
	CreateDynamicObject(2037, 1423.72144, -1357.01355, 13.77332, 0.00000, 0.00000, -187.07999);
	CreateDynamicObject(2037, 1423.39624, -1357.04285, 12.86158, 0.00000, 0.00000, -187.13998);
	CreateDynamicObject(2060, 1422.61707, -1357.10754, 12.82861, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1575, 1423.58411, -1357.13965, 13.20418, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1577, 1423.87915, -1357.12427, 12.73681, 0.00000, 0.00000, -64.73999);
	CreateDynamicObject(2060, 1423.30103, -1357.14795, 14.24047, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2033, 1421.98413, -1356.92358, 14.17148, -10.92000, -3.78000, -11.28000);
	CreateDynamicObject(2033, 1423.20667, -1356.96069, 13.74424, -15.36000, -4.86000, -27.30000);
	CreateDynamicObject(1575, 1422.09326, -1357.02686, 13.20565, 0.00000, 0.00000, -1.26000);
	CreateDynamicObject(2037, 1422.50610, -1357.01794, 14.19564, 0.00000, 0.00000, -221.52005);
	CreateDynamicObject(2237, 1418.38293, -1353.25500, 13.60737, 13.08000, -0.90000, -84.48003);
	CreateDynamicObject(2033, 1422.55579, -1356.94580, 13.74424, -15.36000, -4.86000, 28.62000);
	CreateDynamicObject(3525, 1425.32788, -1356.58191, 13.61409, 0.00000, 0.00000, -92.10004);
	CreateDynamicObject(18661, 1427.08972, -1350.23938, 14.55176, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18665, 1427.11853, -1342.97693, 14.38501, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18661, 1418.82434, -1357.51416, 14.41679, 0.00000, 0.00000, -91.56001);
	CreateDynamicObject(18660, 1426.95630, -1354.43994, 14.65573, 0.00000, 0.00000, 4.44004);
	CreateDynamicObject(18663, 1424.51392, -1357.54224, 14.41154, 0.00000, 0.00000, -91.19999);
	CreateDynamicObject(3525, 1436.94788, -1334.35156, 12.09823, 0.00000, 0.00000, -177.29997);
	CreateDynamicObject(3525, 1436.02039, -1334.33496, 12.41242, 0.00000, 0.00000, -177.29997);
	CreateDynamicObject(18661, 1444.40112, -1333.16016, 14.35827, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18665, 1434.30737, -1322.98682, 14.36416, 0.00000, 0.00000, 91.31997);
	CreateDynamicObject(18666, 1434.19812, -1334.72351, 14.39327, 0.00000, 0.00000, -90.59996);
	CreateDynamicObject(923, 1430.01917, -1323.45142, 13.29499, 0.00000, 0.00000, -181.73997);
	CreateDynamicObject(1227, 1419.93359, -1357.03149, 13.38281, 356.85840, 0.00000, -181.11836);
	CreateDynamicObject(910, 1436.62048, -1334.26306, 13.62330, 0.00000, 0.00000, 179.88004);
	CreateDynamicObject(1810, 1440.43835, -1334.14246, 12.48170, 0.00000, 0.00000, -173.22002);
	CreateDynamicObject(1617, 1421.59961, -1276.66162, 14.96752, 3.14159, 0.00000, 4.44000);
	CreateDynamicObject(1617, 1403.50574, -1300.23975, 14.63121, 3.14159, 0.00000, -177.48003);
	CreateDynamicObject(1617, 1426.21228, -1307.67114, 14.96752, 3.14159, 0.00000, -0.30000);
	CreateDynamicObject(1217, 1413.55884, -1299.18799, 12.98993, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(923, 1404.85876, -1299.34192, 13.37851, 0.00000, 0.00000, 53.04000);
	CreateDynamicObject(910, 1410.30762, -1298.90540, 13.42155, 0.00000, 0.00000, 0.42000);
	CreateDynamicObject(1224, 1408.27087, -1301.36511, 13.17058, 0.00000, 0.00000, -27.42000);
	CreateDynamicObject(1217, 1415.73511, -1301.78723, 12.92387, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18661, 1421.59705, -1255.06274, 14.51220, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18665, 1417.12817, -1260.36951, 14.56111, 0.00000, 0.00000, -179.16000);
	CreateDynamicObject(18659, 1417.31079, -1282.91187, 14.35616, 0.00000, 0.00000, 178.91995);
	CreateDynamicObject(1221, 1420.82385, -1268.59631, 12.94313, 0.00000, 0.00000, -25.38000);
	CreateDynamicObject(1221, 1417.73254, -1260.18750, 12.94313, 0.00000, 0.00000, -63.60000);
	CreateDynamicObject(1217, 1420.92737, -1251.91321, 12.95893, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1617, 1417.04688, -1296.51843, 14.84084, 3.14159, 0.00000, 0.00000);
	CreateDynamicObject(1227, 1417.76782, -1263.58350, 13.37770, 356.85840, 0.00000, 90.80159);
	CreateDynamicObject(14469, 1416.40283, -1255.48303, 12.98760, 0.00000, 0.00000, -89.34000);
	CreateDynamicObject(14469, 1422.56506, -1260.89612, 12.94116, 0.00000, 0.00000, -90.18002);
	CreateDynamicObject(910, 1421.03577, -1286.53320, 13.77460, 0.00000, 0.00000, -91.67999);
	CreateDynamicObject(3525, 1421.00366, -1287.18872, 12.64620, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3525, 1421.27283, -1285.92944, 12.56576, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18013, 1423.63269, -1283.26941, 14.40732, -0.36000, -0.42000, -270.06000);
	CreateDynamicObject(14469, 1426.76807, -1296.41943, 12.71885, 0.00000, 0.00000, -85.01998);
	CreateDynamicObject(18013, 1432.64050, -1304.44653, 13.91066, 0.00000, 0.00000, -90.30001);
	CreateDynamicObject(18013, 1432.57654, -1313.58667, 13.94267, 0.00000, 0.00000, -90.00002);
	CreateDynamicObject(3525, 1410.79065, -1298.84583, 12.11158, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3525, 1409.68701, -1298.60840, 12.68397, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18013, 1407.86047, -1291.84045, 13.96640, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18661, 1426.22839, -1292.92578, 14.51099, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18665, 1426.19507, -1298.54956, 14.44271, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1265, 1417.81909, -1280.42639, 13.01000, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1230, 1417.77209, -1274.96826, 12.94916, 0.00000, 0.00000, -43.98000);
	CreateDynamicObject(1264, 1420.99878, -1284.46155, 12.67771, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8614, 1426.29382, -1338.91333, 14.78863, 0.00000, 0.00000, -90.29998);
	CreateDynamicObject(2047, 1427.04724, -1336.45984, 14.49018, 0.00000, 0.00000, -91.38002);
	CreateDynamicObject(2063, 1426.90601, -1336.70386, 16.69705, 0.00000, 0.00000, -90.23999);
	CreateDynamicObject(1217, 1425.92981, -1335.28528, 16.40497, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1485, 1426.82629, -1335.63733, 17.47940, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1577, 1426.92590, -1336.10364, 17.02090, 0.00000, 0.00000, 35.82000);
	CreateDynamicObject(1575, 1426.85596, -1337.45947, 16.12408, 1.98000, -0.18000, -51.77999);
	CreateDynamicObject(2033, 1426.87683, -1337.62964, 17.50198, 0.00000, 0.00000, 34.32000);
	CreateDynamicObject(2060, 1426.83972, -1336.26648, 16.22386, 0.00000, 0.00000, -88.98001);
	CreateDynamicObject(2037, 1426.79468, -1337.21655, 17.13766, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2033, 1426.88330, -1336.06946, 16.67191, 0.00000, 0.00000, -48.72000);
	CreateDynamicObject(1575, 1426.93066, -1336.57068, 17.46845, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2060, 1426.91016, -1337.18848, 16.71728, 0.12000, 0.06000, -83.09999);
	CreateDynamicObject(18013, 1435.38855, -1316.63611, 13.95104, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(14469, 1430.24585, -1335.21130, 13.05402, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18013, 1433.54187, -1346.84888, 13.98856, 0.00000, 0.00000, -90.12002);
	CreateDynamicObject(18663, 1444.39697, -1324.54248, 14.41154, 0.00000, 0.00000, -1.79998);
	CreateDynamicObject(18698, 1421.12695, -1260.93311, 13.31094, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18698, 1420.99939, -1284.65955, 12.94752, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18698, 1425.61426, -1295.97375, 13.24489, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18698, 1411.26465, -1299.02686, 13.42763, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18698, 1405.13062, -1299.74084, 13.36056, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18698, 1425.68115, -1315.95532, 13.02550, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18698, 1430.03247, -1334.31885, 13.12328, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18698, 1430.01465, -1323.93787, 13.59470, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18698, 1425.16382, -1355.14856, 12.98460, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18698, 1417.95459, -1356.61133, 12.85992, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18698, 1421.59790, -1260.31348, 12.78621, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18698, 1417.74512, -1256.38354, 11.20332, 0.00000, 0.00000, 0.00000);
	//REJAS PAY&SPRAY 8-Ball Transfender
	CreateObject(19870, 1843.33020, -1858.50464, 13.66282,   0.00000, 0.00000, 90.00000);
	CreateObject(19870, 2071.51294, -1833.70325, 14.29454,   0.00000, 0.00000, 90.00000);
	CreateObject(19870, 1022.56116, -1029.34790, 32.90882,   0.00000, 0.00000, 0.00000);
	CreateObject(19912, 1050.24390, -1026.02197, 33.56157,   0.00000, 0.00000, 0.00000);
	CreateObject(19912, -1896.60034, 278.11880, 42.78907,   0.00000, 0.00000, 0.00000);
	CreateObject(19912, 2008.28467, 2317.86987, 9.82031,   0.00000, 0.00000, 0.00000);
	CreateObject(19912, 2008.28467, 2303.62378, 9.82031,   0.00000, 0.00000, 0.00000);
	CreateObject(19912, 2008.28467, 2303.62378, 9.82031,   0.00000, 0.00000, 0.00000);
	CreateObject(19912, 1968.56702, 2166.52051, 11.62032,   0.00000, 0.00000, 90.00000);
	CreateObject(19912, -92.75473, 1111.56897, 20.45219,   0.00000, 0.00000, 0.00000);
	CreateObject(19912, -1416.28833, 2590.71191, 56.96749,   0.00000, 0.00000, 0.00000);
	CreateObject(19912, -2421.96265, 1028.03955, 52.15059,   0.00000, 0.00000, 0.00000);
	CreateObject(19870, 722.40906, -462.47809, 16.70370,   0.00000, 0.00000, 180.00000);
	CreateObject(19870, 485.88943, -1734.36731, 11.81461,   0.00000, 0.00000, -8.79999);
	CreateObject(19870, 485.88943, -1734.36731, 15.28460,   0.00000, 0.00000, -8.79999);
	//Exterior Alhambra
	CreateDynamicObject(2773, 1836.57996, -1687.07996, 13.08000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3850, 1831.65002, -1672.83997, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1831.65002, -1676.31006, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1831.65002, -1691.87000, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(3850, 1831.65002, -1688.40002, 13.09000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1835.58997, -1678.80005, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1837.07996, -1677.84998, 13.08000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(2773, 1835.58997, -1681.15002, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1835.58997, -1683.50000, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1833.70996, -1685.72998, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1833.70996, -1683.37000, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1833.70996, -1681.02002, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1831.72998, -1679.29004, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1831.72998, -1681.64001, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2773, 1831.72998, -1683.97998, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1833.71997, -1675.05005, 13.03000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1835.57996, -1675.05005, 13.03000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1833.71997, -1670.90002, 13.03000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1835.57996, -1670.90002, 13.03000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1833.71997, -1689.77002, 13.03000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1835.57996, -1689.77002, 13.03000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1835.57996, -1693.93994, 13.03000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1833.71997, -1693.93994, 13.03000,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1215, 1831.48999, -1670.60999, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1215, 1831.43005, -1694.01001, 13.08000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1832.21997, -1687.19995, 12.47000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1214, 1832.22998, -1677.46997, 12.47000,   0.00000, 0.00000, 0.00000);
	//palco ayuntamiento
	CreateDynamicObject(18769, 1477.39673, -1770.23840, 31.66810, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18769, 1488.69177, -1769.63037, 31.71210, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(11237, 1429.77612, -1784.67969, 41.17510, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(18766, 1482.74109, -1751.50574, 33.52420, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(18766, 1482.79517, -1758.52222, 34.80020, -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(1557, 1488.08264, -1772.70068, 32.37910, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(1557, 1485.09302, -1772.70117, 32.37910, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1231, 1481.33228, -1760.29114, 37.89070, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1825, 1479.54688, -1759.39612, 35.24830, -0.04400, 0.00000, 0.00000);
	CreateDynamicObject(1897, 1482.48010, -1751.26196, 36.92100, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(2232, 1473.33606, -1750.50720, 25.95690, 16.00000, 0.00000, -180.00000);
	CreateDynamicObject(2232, 1478.46326, -1750.73413, 34.22890, 16.00000, 0.00000, -180.00000);
	CreateDynamicObject(2232, 1483.91357, -1750.39819, 25.95690, 16.00000, 0.00000, -180.00000);
	CreateDynamicObject(2232, 1478.71448, -1750.54895, 25.95690, 16.00000, 0.00000, -180.00000);
	CreateDynamicObject(2232, 1489.60547, -1750.50415, 25.95690, 16.00000, 0.00000, -180.00000);
	CreateDynamicObject(2232, 1486.66064, -1750.57776, 34.14090, 16.00000, 0.00000, -180.00000);
	CreateDynamicObject(2232, 1483.76672, -1750.96155, 34.09690, 16.00000, 0.00000, -180.00000);
	CreateDynamicObject(2232, 1480.99438, -1750.91357, 34.05290, 16.00000, 0.00000, -180.00000);
	CreateDynamicObject(7091, 1461.94226, -1750.42090, 28.94250, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7091, 1471.47400, -1750.94263, 29.60250, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7091, 1490.95630, -1750.97046, 29.60250, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(7091, 1500.12231, -1750.31970, 28.94250, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1723, 1484.41125, -1760.03552, 35.23200, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(14394, 1481.87695, -1756.07617, 35.19320, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(19458, 1482.46472, -1753.29114, 36.00130, 0.00000, -90.00000, -90.00000);
	CreateDynamicObject(11544, 1486.48132, -1759.16248, 34.07280, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(18766, 1482.83679, -1758.49292, 34.75620, -90.00000, 0.00000, 0.00000);
	CreateDynamicObject(18766, 1478.15271, -1756.02148, 32.55620, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18766, 1487.45105, -1756.03088, 32.55620, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(18766, 1482.58289, -1760.23450, 32.73220, 0.00000, 0.00000, -180.00000);
	CreateDynamicObject(970, 1483.07336, -1760.75513, 35.77660, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1487.69751, -1758.38574, 35.73260, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1477.83130, -1758.72437, 35.73260, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(14394, 1483.78040, -1756.07495, 35.20320, 0.00000, 0.00000, 90.00000);
	CreateDynamicObject(970, 1487.69189, -1753.20337, 36.56860, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1477.76318, -1753.16553, 36.56860, 0.00000, 0.00000, -90.00000);
	CreateDynamicObject(970, 1483.54529, -1751.12244, 36.56860, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1479.90454, -1760.76904, 35.77660, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1479.81018, -1751.11096, 36.56860, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(970, 1485.65759, -1751.13916, 36.56860, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(19458, 1482.83191, -1753.31238, 35.95730, 0.00000, -90.00000, -90.00000);
	CreateDynamicObject(9131, 1487.49475, -1756.35779, 35.29848, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1487.49023, -1755.64636, 35.91450, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1478.15576, -1756.28357, 35.29848, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(9131, 1478.09399, -1755.54346, 35.91450, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1846, 1478.76929, -1752.65845, 35.05510, -90.00000, -90.00000, 0.00000);
	CreateDynamicObject(1846, 1488.60449, -1753.97827, 35.05510, -90.00000, -90.00000, 0.00000);
	CreateDynamicObject(1846, 1488.64636, -1752.95056, 35.05510, -90.00000, -90.00000, 0.00000);
	CreateDynamicObject(1846, 1478.82825, -1753.79517, 35.05510, -90.00000, -90.00000, 0.00000);
		//Aeropuerto Original - ZZ
	CreateDynamicObject(3851, 1971.61169434, -2183.27465820, 14.54687500, 0.00000000, 0.00000000, 0.00000000);//object(carshowwin_sfsx)(2)
	CreateDynamicObject(3851, 1971.61169434, -2183.98608398, 14.54687500, 0.00000000, 0.00000000, 0.00000000);//object(carshowwin_sfsx)(3)
	CreateDynamicObject(3851, 1951.51367188, -2183.26855469, 14.55418587, 0.00000000, 0.00000000, 0.00000000);//object(carshowwin_sfsx)(4)
	CreateDynamicObject(3851, 1951.56665039, -2184.39892578, 14.55418587, 0.00000000, 0.00000000, 0.00000000);//object(carshowwin_sfsx)(5)
	CreateDynamicObject(1649, 1969.47033691, -2189.60791016, 14.21261692, 0.00000000, 0.00000000, 179.07324219);//object(wglasssmash)(4)
	CreateDynamicObject(1649, 1969.16796875, -2189.60253906, 14.21261692, 0.00000000, 0.00000000, 179.07165527);//object(wglasssmash)(5)
	CreateDynamicObject(1649, 1953.85571289, -2189.60791016, 14.21261692, 0.00000000, 0.00000000, 179.07165527);//object(wglasssmash)(6)
	CreateDynamicObject(1649, 1969.42150879, -2189.91259766, 14.21261692, 0.00000000, 0.00000000, 0.00000000);//object(wglasssmash)(7)
	CreateDynamicObject(1649, 1969.11376953, -2189.91259766, 14.21261692, 0.00000000, 0.00000000, 0.00000000);//object(wglasssmash)(8)
	CreateDynamicObject(1649, 1953.85083008, -2189.91259766, 14.21261692, 0.00000000, 0.00000000, 0.00000000);//object(wglasssmash)(9)
	CreateDynamicObject(1692, 1954.66076660, -2183.95458984, 16.82754135, 0.00000000, 0.00000000, 90.91796875);//object(roofstuff18)(1)
	CreateDynamicObject(1692, 1952.92956543, -2183.97607422, 16.82754135, 0.00000000, 0.00000000, 90.91735840);//object(roofstuff18)(2)
	CreateDynamicObject(3749, 1961.43688965, -2178.53564453, 18.33028984, 0.00000000, 0.00000000, 0.00000000);//object(clubgate01_lax)(1)
	CreateDynamicObject(3749, 2054.90136719, -2194.87402344, 18.15528870, 0.00000000, 0.00000000, 90.00549316);//object(clubgate01_lax)(2)
	CreateDynamicObject(5837, 2054.25878906, -2182.19067383, 14.19650841, 0.00000000, 0.00000000, 268.17077637);//object(ci_guardhouse1)(1)
	CreateDynamicObject(16770, 1947.55029297, -2197.30371094, 14.13743401, 0.00000000, 0.00000000, 179.07324219);//object(des_gunbldg01)(1)
	CreateDynamicObject(2680, 1956.38208008, -2183.10424805, 13.58006287, 0.00000000, 0.00000000, 88.19042969);//object(cj_padlock)(1)
	CreateDynamicObject(1622, 1967.26965332, -2178.60595703, 17.54320335, 0.00000000, 0.00000000, 0.00000000);//object(nt_securecam2_01)(1)
	CreateDynamicObject(1622, 1943.70471191, -2192.67602539, 18.61160660, 0.00000000, 0.00000000, 127.28521729);//object(nt_securecam2_01)(2)
	CreateDynamicObject(979, 1998.09228516, -2226.93652344, 13.38709545, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(2)
	CreateDynamicObject(979, 2006.93420410, -2226.94140625, 13.38709545, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(3)
	CreateDynamicObject(979, 2016.16210938, -2226.94140625, 13.38709545, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(4)
	CreateDynamicObject(979, 2025.20031738, -2226.94140625, 13.38709545, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(5)
	CreateDynamicObject(979, 2034.28979492, -2226.94140625, 13.38709545, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(6)
	CreateDynamicObject(979, 2043.61804199, -2226.93896484, 13.38709545, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(7)
	CreateDynamicObject(979, 2048.26269531, -2222.34179688, 13.38709545, 0.00000000, 0.00000000, 90.91735840);//object(sub_roadleft)(8)
	CreateDynamicObject(979, 2048.15991211, -2213.26098633, 13.38709545, 0.00000000, 0.00000000, 90.91735840);//object(sub_roadleft)(9)
	CreateDynamicObject(979, 2009.96777344, -2206.73828125, 13.43609524, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(10)
	CreateDynamicObject(979, 2019.22851562, -2206.77441406, 13.39423275, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(11)
	CreateDynamicObject(979, 2026.19934082, -2206.74438477, 13.38709545, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(12)
	CreateDynamicObject(982, 1951.45214844, -2188.20190430, 13.18436050, 0.00000000, 0.00000000, 181.83599854);//object(fenceshit)(1)
	CreateDynamicObject(982, 1964.65917969, -2201.00000000, 13.23042965, 0.00000000, 0.00000000, 270.02197266);//object(fenceshit)(2)
	CreateDynamicObject(982, 1982.27832031, -2200.97753906, 13.23042965, 0.00000000, 0.00000000, 270.02197266);//object(fenceshit)(3)
	CreateDynamicObject(979, 1956.55871582, -2200.95654297, 13.38709545, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(10)
	CreateDynamicObject(979, 1965.88208008, -2200.95556641, 13.38709545, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(10)
	CreateDynamicObject(979, 1975.26525879, -2200.98803711, 13.38709545, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(10)
	CreateDynamicObject(979, 1984.63159180, -2200.98535156, 13.38709545, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(10)
	CreateDynamicObject(979, 1990.40600586, -2200.98754883, 13.38709545, 0.00000000, 0.00000000, 0.00000000);//object(sub_roadleft)(10)
	CreateDynamicObject(979, 1951.67065430, -2194.64892578, 13.41209507, 0.00000000, 0.00000000, 271.96875000);//object(sub_roadleft)(10)
	CreateDynamicObject(979, 1951.71435547, -2196.28515625, 13.45018578, 0.00000000, 0.00000000, 271.96362305);//object(sub_roadleft)(10)
	CreateDynamicObject(11547, 2039.53454590, -2224.39062500, 15.49153137, 0.00000000, 0.00000000, 90.00878906);//object(desn_tscanopy)(1)
	CreateDynamicObject(11547, 2028.50000000, -2224.15917969, 15.49153137, 0.00000000, 0.00000000, 90.00549316);//object(desn_tscanopy)(2)
	CreateDynamicObject(979, 1976.46386719, -2177.67968750, 13.38709545, 0.00000000, 0.00000000, 180.01647949);//object(sub_roadleft)(11)
	CreateDynamicObject(979, 1985.77905273, -2177.68066406, 13.38709545, 0.00000000, 0.00000000, 180.01647949);//object(sub_roadleft)(11)
	CreateDynamicObject(979, 1995.11267090, -2177.68066406, 13.38709545, 0.00000000, 0.00000000, 180.01647949);//object(sub_roadleft)(11)
	CreateDynamicObject(979, 2004.31335449, -2177.67968750, 13.38709545, 0.00000000, 0.00000000, 180.01647949);//object(sub_roadleft)(11)
	CreateDynamicObject(979, 2013.53466797, -2177.67968750, 13.38709545, 0.00000000, 0.00000000, 180.01647949);//object(sub_roadleft)(11)
	CreateDynamicObject(979, 2022.81970215, -2177.67968750, 13.38709545, 0.00000000, 0.00000000, 180.01647949);//object(sub_roadleft)(11)
	CreateDynamicObject(979, 2032.19018555, -2177.69775391, 13.38709545, 0.00000000, 0.00000000, 179.51647949);//object(sub_roadleft)(11)
	CreateDynamicObject(979, 2041.46484375, -2177.97290039, 13.39423275, 0.00000000, 0.00000000, 176.78356934);//object(sub_roadleft)(11)
	CreateDynamicObject(979, 2050.25805664, -2178.45336914, 13.39423275, 0.00000000, 0.00000000, 176.78100586);//object(sub_roadleft)(11)
	CreateDynamicObject(979, 1971.69494629, -2182.41479492, 13.38709545, 0.00000000, 0.00000000, 268.20690918);//object(sub_roadleft)(11)
	CreateDynamicObject(1216, 1943.95654297, -2198.61718750, 13.28939629, 0.00000000, 0.00000000, 90.91796875);//object(phonebooth1)(1)
	CreateDynamicObject(1216, 1943.97949219, -2197.20166016, 13.23887730, 0.00000000, 0.00000000, 90.91735840);//object(phonebooth1)(2)
	CreateDynamicObject(1216, 1944.00610352, -2195.56250000, 13.23887730, 0.00000000, 0.00000000, 90.91735840);//object(phonebooth1)(3)
	CreateDynamicObject(1216, 1944.02929688, -2194.12744141, 13.23887730, 0.00000000, 0.00000000, 90.91735840);//object(phonebooth1)(4)
	CreateDynamicObject(1216, 1944.05371094, -2192.62280273, 13.23887730, 0.00000000, 0.00000000, 90.91735840);//object(phonebooth1)(5)
	CreateDynamicObject(1216, 1944.07824707, -2191.10766602, 13.23887730, 0.00000000, 0.00000000, 90.91735840);//object(phonebooth1)(6)
	CreateDynamicObject(3578, 2072.03613281, -2202.03515625, 11.84991169, 0.00000000, 0.00000000, 0.00000000);//object(dockbarr1_la)(1)
	CreateDynamicObject(3578, 2066.73730469, -2196.80371094, 11.87493038, 0.00000000, 0.00000000, 269.74731445);//object(dockbarr1_la)(2)
	CreateDynamicObject(3578, 2033.81555176, -2206.38403320, 11.79993153, 0.00000000, 0.00000000, 0.00000000);//object(dockbarr1_la)(3)
	CreateDynamicObject(3578, 2000.11181641, -2206.05273438, 11.82493114, 0.00000000, 0.00000000, 0.00000000);//object(dockbarr1_la)(4)
	CreateDynamicObject(3578, 2000.25915527, -2201.31933594, 11.84571457, 0.00000000, 0.00000000, 359.75000000);//object(dockbarr1_la)(5)
	CreateDynamicObject(11547, 2005.01171875, -2224.30566406, 15.49153137, 0.00000000, 0.00000000, 90.00549316);//object(desn_tscanopy)(2)
	CreateDynamicObject(3578, 2034.12878418, -2201.62573242, 11.82071495, 0.00000000, 0.00000000, 0.00000000);//object(dockbarr1_la)(6)
	CreateDynamicObject(970, 1984.00500488, -2190.83447266, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(1)
	CreateDynamicObject(3578, 1976.61254883, -2190.61376953, 11.79569626, 0.00000000, 0.00000000, 359.74731445);//object(dockbarr1_la)(7)
	CreateDynamicObject(3578, 1976.77832031, -2186.11914062, 11.82068825, 0.00000000, 0.00000000, 0.00000000);//object(dockbarr1_la)(8)
	CreateDynamicObject(3578, 2047.60717773, -2191.34521484, 11.82071495, 0.00000000, 0.00000000, 0.00000000);//object(dockbarr1_la)(9)
	CreateDynamicObject(3578, 2047.64880371, -2186.67016602, 11.84571457, 0.00000000, 0.00000000, 0.00000000);//object(dockbarr1_la)(10)
	CreateDynamicObject(970, 1988.68273926, -2190.87792969, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(3)
	CreateDynamicObject(970, 1993.56347656, -2190.87109375, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(4)
	CreateDynamicObject(970, 1998.37963867, -2190.90283203, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(5)
	CreateDynamicObject(970, 2003.31030273, -2190.92626953, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(6)
	CreateDynamicObject(970, 2008.27722168, -2190.96386719, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(7)
	CreateDynamicObject(970, 2013.06103516, -2190.93750000, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(8)
	CreateDynamicObject(970, 2017.84497070, -2190.97973633, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(9)
	CreateDynamicObject(970, 2022.73388672, -2190.92358398, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(10)
	CreateDynamicObject(970, 2027.57995605, -2191.00146484, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(11)
	CreateDynamicObject(970, 2032.55871582, -2191.03320312, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(12)
	CreateDynamicObject(970, 2037.68261719, -2191.07128906, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(13)
	CreateDynamicObject(970, 2040.36462402, -2191.18432617, 13.11913967, 0.00000000, 0.00000000, 0.00000000);//object(fencesmallb)(14)
	CreateDynamicObject(3666, 1986.32141113, -2190.74926758, 13.08134365, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(1)
	CreateDynamicObject(3666, 1990.99523926, -2190.76049805, 13.08134365, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(2)
	CreateDynamicObject(3666, 1995.94824219, -2190.85595703, 13.08134365, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(3)
	CreateDynamicObject(3666, 2000.90417480, -2190.87963867, 13.08134365, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(4)
	CreateDynamicObject(3666, 2005.78857422, -2191.02490234, 13.08134365, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(5)
	CreateDynamicObject(3666, 2010.63171387, -2191.04150391, 13.08134365, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(6)
	CreateDynamicObject(3666, 2015.45776367, -2191.10644531, 13.08134365, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(7)
	CreateDynamicObject(3666, 2020.23937988, -2191.10400391, 13.08134365, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(8)
	CreateDynamicObject(3666, 2025.13928223, -2191.18505859, 13.08134365, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(9)
	CreateDynamicObject(3666, 2030.13122559, -2191.17675781, 13.08134365, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(10)
	CreateDynamicObject(3666, 2035.14074707, -2191.25561523, 13.08134365, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(11)
	CreateDynamicObject(3666, 2042.55554199, -2191.16943359, 13.11565018, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(12)
	CreateDynamicObject(3666, 1981.91613770, -2190.76245117, 13.08134365, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(13)
	CreateDynamicObject(970, 1981.67016602, -2179.82421875, 13.09835625, 0.00000000, 0.00000000, 90.91796875);//object(fencesmallb)(15)
	CreateDynamicObject(970, 1983.65649414, -2179.86230469, 13.09835625, 0.00000000, 0.00000000, 90.00817871);//object(fencesmallb)(16)
	CreateDynamicObject(970, 1985.71069336, -2179.86523438, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(17)
	CreateDynamicObject(970, 1987.84765625, -2179.83374023, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(18)
	CreateDynamicObject(970, 1990.19543457, -2179.81591797, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(19)
	CreateDynamicObject(970, 1992.50830078, -2179.83105469, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(20)
	CreateDynamicObject(970, 1994.90246582, -2179.78515625, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(21)
	CreateDynamicObject(970, 1997.15100098, -2179.81347656, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(22)
	CreateDynamicObject(970, 1999.44567871, -2180.01757812, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(23)
	CreateDynamicObject(970, 2001.78405762, -2179.93774414, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(24)
	CreateDynamicObject(970, 2004.52661133, -2179.78369141, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(25)
	CreateDynamicObject(3578, 1961.53222656, -2171.40234375, 11.64637375, 0.00000000, 0.00000000, 359.99731445);//object(dockbarr1_la)(11)
	CreateDynamicObject(3666, 1970.13085938, -2171.29882812, 12.89649773, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 1953.29296875, -2171.24316406, 12.89649773, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(15)
	CreateDynamicObject(3666, 1967.84899902, -2172.50415039, 12.93510056, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(16)
	CreateDynamicObject(3666, 1966.73168945, -2174.29370117, 12.99368858, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(17)
	CreateDynamicObject(3666, 1966.52807617, -2176.51928711, 13.06655121, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(18)
	CreateDynamicObject(3666, 1955.12426758, -2172.91210938, 12.94845676, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(19)
	CreateDynamicObject(3666, 1956.35607910, -2174.51049805, 13.00078583, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(20)
	CreateDynamicObject(3666, 1956.65063477, -2176.60791016, 13.06056023, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(21)
	CreateDynamicObject(970, 2007.59948730, -2179.73046875, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(26)
	CreateDynamicObject(970, 2011.00280762, -2179.74877930, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(27)
	CreateDynamicObject(970, 2013.50720215, -2179.78955078, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(28)
	CreateDynamicObject(970, 2016.00305176, -2179.78491211, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(29)
	CreateDynamicObject(970, 2018.65563965, -2179.85156250, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(30)
	CreateDynamicObject(970, 2021.19421387, -2179.83959961, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(31)
	CreateDynamicObject(970, 2024.15979004, -2179.80346680, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(32)
	CreateDynamicObject(970, 2027.85314941, -2179.77197266, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(33)
	CreateDynamicObject(970, 2031.72619629, -2179.78955078, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(34)
	CreateDynamicObject(970, 2034.89880371, -2179.75219727, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(35)
	CreateDynamicObject(970, 2038.00244141, -2179.89062500, 13.09835625, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(36)
	CreateDynamicObject(970, 2041.08801270, -2180.02099609, 13.10549355, 0.00000000, 0.00000000, 90.00549316);//object(fencesmallb)(37)
	CreateDynamicObject(970, 2043.84497070, -2180.26611328, 13.10549355, 0.00000000, 0.00000000, 88.36352539);//object(fencesmallb)(38)
	CreateDynamicObject(1215, 1981.68432617, -2181.91308594, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(1)
	CreateDynamicObject(1215, 1983.64599609, -2181.95117188, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(2)
	CreateDynamicObject(1215, 1985.70922852, -2181.95410156, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(3)
	CreateDynamicObject(1215, 1987.84313965, -2181.92260742, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(4)
	CreateDynamicObject(1215, 1990.26074219, -2181.90478516, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(5)
	CreateDynamicObject(1215, 1992.45837402, -2181.91992188, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(6)
	CreateDynamicObject(1215, 1994.86999512, -2181.87402344, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(7)
	CreateDynamicObject(1215, 1997.16198730, -2181.90234375, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(8)
	CreateDynamicObject(1215, 1999.43188477, -2182.10644531, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(9)
	CreateDynamicObject(1215, 2001.80615234, -2182.02661133, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(10)
	CreateDynamicObject(1215, 2004.51855469, -2181.87255859, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(11)
	CreateDynamicObject(1215, 2007.63793945, -2181.81933594, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(12)
	CreateDynamicObject(1215, 2011.00012207, -2181.83764648, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(13)
	CreateDynamicObject(1215, 2013.46716309, -2181.87841797, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(14)
	CreateDynamicObject(1215, 2016.00158691, -2181.89233398, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(15)
	CreateDynamicObject(1215, 2018.61389160, -2181.94042969, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(16)
	CreateDynamicObject(1215, 2021.19299316, -2181.92846680, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(17)
	CreateDynamicObject(1215, 2024.19091797, -2181.89233398, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(18)
	CreateDynamicObject(1215, 2027.82067871, -2181.86083984, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(19)
	CreateDynamicObject(1215, 2031.74060059, -2181.87841797, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(20)
	CreateDynamicObject(1215, 2034.92541504, -2181.84106445, 13.11119843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(21)
	CreateDynamicObject(1215, 2038.01574707, -2181.97949219, 13.11833572, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(22)
	CreateDynamicObject(1215, 2041.09082031, -2182.10937500, 13.11833572, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(23)
	CreateDynamicObject(1215, 2043.77526855, -2182.35375977, 13.21061802, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(24)
	CreateDynamicObject(2773, 1992.31152344, -2206.70776367, 13.06410313, 0.00000000, 0.00000000, 0.00000000);//object(cj_airprt_bar)(1)
	CreateDynamicObject(2773, 1991.35290527, -2205.72998047, 13.08488655, 0.00000000, 0.00000000, 90.00878906);//object(cj_airprt_bar)(2)
	CreateDynamicObject(2773, 1989.43273926, -2205.73022461, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(3)
	CreateDynamicObject(2773, 1987.51196289, -2205.73120117, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(4)
	CreateDynamicObject(2773, 1985.58129883, -2205.73730469, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(5)
	CreateDynamicObject(2773, 1983.66552734, -2205.73461914, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(6)
	CreateDynamicObject(2773, 1981.59130859, -2204.18798828, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(7)
	CreateDynamicObject(2773, 1983.50390625, -2204.18261719, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(8)
	CreateDynamicObject(2773, 1985.43518066, -2204.19970703, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(9)
	CreateDynamicObject(2773, 1987.37622070, -2204.19702148, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(10)
	CreateDynamicObject(2773, 1989.29724121, -2204.18896484, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(11)
	CreateDynamicObject(2773, 1991.19982910, -2204.18139648, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(12)
	CreateDynamicObject(2773, 1948.17773438, -2205.41503906, 13.08488655, 0.00000000, 0.00000000, 0.00000000);//object(cj_airprt_bar)(25)
	CreateDynamicObject(2773, 1948.17687988, -2203.63208008, 13.08488655, 0.00000000, 0.00000000, 0.00000000);//object(cj_airprt_bar)(26)
	CreateDynamicObject(2773, 1949.13171387, -2202.68359375, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(27)
	CreateDynamicObject(2773, 1951.07312012, -2202.66284180, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(28)
	CreateDynamicObject(2773, 1952.98498535, -2202.65161133, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(29)
	CreateDynamicObject(2773, 1954.92724609, -2202.66528320, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(30)
	CreateDynamicObject(2773, 1956.83679199, -2202.66772461, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(31)
	CreateDynamicObject(2773, 1958.75671387, -2202.66674805, 13.08488655, 0.00000000, 0.00000000, 90.00549316);//object(cj_airprt_bar)(32)
	CreateDynamicObject(970, 2052.93310547, -2179.80053711, 16.48236465, 0.00000000, 0.00000000, 87.28125000);//object(fencesmallb)(13)
	CreateDynamicObject(970, 2052.74316406, -2183.87744141, 16.48236465, 0.00000000, 0.00000000, 87.28088379);//object(fencesmallb)(13)
	CreateDynamicObject(1215, 2052.20874023, -2184.53149414, 16.49520683, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(23)
	CreateDynamicObject(1215, 2052.37158203, -2184.73535156, 16.49520683, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(23)
	CreateDynamicObject(1215, 2052.52368164, -2184.94726562, 16.49520683, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(23)
	CreateDynamicObject(1215, 2052.66479492, -2185.16674805, 16.49520683, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(23)
	CreateDynamicObject(2775, 2002.08789062, -2220.12622070, 18.06337738, 0.00000000, 0.00000000, 179.10461426);//object(cj_airprt_mon)(1)
	CreateDynamicObject(2775, 1998.57092285, -2220.12670898, 17.88389587, 0.00000000, 0.00000000, 179.10461426);//object(cj_airprt_mon)(2)
	CreateDynamicObject(2797, 1969.10412598, -2189.60156250, 14.40474129, 0.00000000, 0.00000000, 0.00000000);//object(cj_air_d_5)(1)
	CreateDynamicObject(10757, 1962.28405762, -2175.49633789, 25.25063705, 0.00000000, 0.00000000, 173.64990234);//object(airport_04_sfse)(1)
	CreateDynamicObject(2792, 2004.83227539, -2249.17407227, 20.21862602, 0.00000000, 0.00000000, 270.90039062);//object(cj_air_d_1)(1)
	CreateDynamicObject(2793, 2005.08068848, -2315.08569336, 20.52916908, 0.00000000, 0.00000000, 269.99121094);//object(cj_air_d_2)(1)
	CreateDynamicObject(2794, 2005.21862793, -2381.79443359, 19.94733620, 0.00000000, 0.00000000, 271.80957031);//object(cj_air_d_3)(1)
	CreateDynamicObject(3749, 2053.39306641, -2348.91235352, 18.40528870, 0.00000000, 0.00000000, 269.08203125);//object(clubgate01_lax)(3)
	CreateDynamicObject(3749, 2053.11914062, -2282.23803711, 18.40528870, 0.00000000, 0.00000000, 269.07714844);//object(clubgate01_lax)(4)
	CreateDynamicObject(2792, 2055.61254883, -2282.67749023, 18.66874123, 0.00000000, 0.00000000, 270.89538574);//object(cj_air_d_1)(2)
	CreateDynamicObject(2793, 2055.88696289, -2349.32031250, 18.66330719, 0.00000000, 0.00000000, 269.98901367);//object(cj_air_d_2)(2)
	CreateDynamicObject(2789, 1961.51513672, -2176.03515625, 19.63507080, 0.00000000, 0.00000000, 178.15979004);//object(cj_depart_board)(1)
	CreateDynamicObject(2791, 1969.07312012, -2176.43505859, 22.66379929, 0.00000000, 0.00000000, 0.00000000);//object(cj_index_board)(1)
	CreateDynamicObject(2791, 2070.95654297, -2362.72509766, 21.52229881, 0.00000000, 0.00000000, 0.00000000);//object(cj_index_board)(2)
	CreateDynamicObject(3264, 2041.40490723, -2191.33593750, 12.64710903, 0.00000000, 0.00000000, 0.00000000);//object(privatesign3)(1)
	CreateDynamicObject(8406, 2014.70434570, -2201.56152344, 17.84299850, 0.00000000, 0.00000000, 0.00000000);//object(carparksign01_lvs)(1)
	CreateDynamicObject(3660, 1940.57385254, -2166.17333984, 15.04317379, 0.00000000, 0.00000000, 0.00000000);//object(lasairfbed_las)(1)
	CreateDynamicObject(3660, 1982.18420410, -2166.27368164, 15.02955723, 0.00000000, 0.00000000, 0.00000000);//object(lasairfbed_las)(2)
	CreateDynamicObject(3660, 1961.36328125, -2146.26074219, 15.03588009, 0.00000000, 0.00000000, 90.00549316);//object(lasairfbed_las)(3)
	CreateDynamicObject(3666, 1930.93872070, -2166.52636719, 14.16669273, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(15)
	CreateDynamicObject(3666, 1950.19958496, -2166.48339844, 14.16669273, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(15)
	CreateDynamicObject(3666, 1972.48754883, -2166.61914062, 14.15307617, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(15)
	CreateDynamicObject(3666, 1991.91149902, -2166.58105469, 14.15307617, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(15)
	CreateDynamicObject(3666, 1961.61413574, -2155.87866211, 14.15939903, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(15)
	CreateDynamicObject(3666, 1961.64831543, -2136.58789062, 14.15939903, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(15)
	CreateDynamicObject(3578, 1961.70593262, -2156.25537109, 11.61086845, 0.00000000, 0.00000000, 359.99450684);//object(dockbarr1_la)(11)
	CreateDynamicObject(3578, 1972.21374512, -2166.41674805, 11.62954521, 0.00000000, 0.00000000, 271.80407715);//object(dockbarr1_la)(11)
	CreateDynamicObject(3578, 1950.59423828, -2166.60937500, 11.61816216, 0.00000000, 0.00000000, 269.80175781);//object(dockbarr1_la)(11)
	CreateDynamicObject(3578, 1961.69543457, -2176.87670898, 11.82493019, 0.00000000, 0.00000000, 359.99450684);//object(dockbarr1_la)(11)
	CreateDynamicObject(3578, 1961.73059082, -2136.31176758, 11.61086845, 0.00000000, 0.00000000, 359.99450684);//object(dockbarr1_la)(11)
	CreateDynamicObject(3578, 1930.53186035, -2166.50390625, 11.66086769, 0.00000000, 0.00000000, 269.79675293);//object(dockbarr1_la)(11)
	CreateDynamicObject(3578, 1992.24169922, -2166.44458008, 11.63586807, 0.00000000, 0.00000000, 271.80175781);//object(dockbarr1_la)(11)
	CreateDynamicObject(3666, 1953.23498535, -2195.64331055, 13.38452816, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 1955.01440430, -2195.64794922, 13.38452816, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 1968.90197754, -2195.89843750, 13.38452816, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 1970.72192383, -2195.91381836, 13.38452816, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 1991.13110352, -2196.08251953, 13.38452911, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 1992.37475586, -2196.12939453, 13.38452911, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2005.27746582, -2196.25146484, 13.38452816, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2006.52087402, -2196.26196289, 13.44270897, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2026.05322266, -2196.26367188, 13.38452816, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2027.29772949, -2196.21215820, 13.38452816, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2071.89868164, -2225.14868164, 13.06056786, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2071.96972656, -2236.88525391, 13.38716507, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2071.63525391, -2241.55004883, 13.44951057, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2071.53002930, -2254.86938477, 13.46842670, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2071.46850586, -2265.33325195, 13.48404503, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2071.55957031, -2278.65869141, 13.42583561, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2071.46752930, -2285.82177734, 13.45717239, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2071.25463867, -2299.42260742, 13.53047466, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2071.03491211, -2310.58666992, 13.45137119, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2070.98535156, -2323.96582031, 13.50981712, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2071.03320312, -2326.68579102, 13.52122116, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(3666, 2070.98510742, -2339.87915039, 13.45975018, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(14)
	CreateDynamicObject(11544, 1991.04980469, -2314.08227539, 13.93668175, 0.00000000, 0.00000000, 180.00000000);//object(des_ntfrescape2)(1)
	CreateDynamicObject(11544, 1988.03063965, -2222.60131836, 14.51167297, 0.00000000, 0.00000000, 359.99450684);//object(des_ntfrescape2)(2)
	CreateDynamicObject(11544, 1987.97583008, -2225.15283203, 14.51167297, 0.00000000, 0.00000000, 179.98901367);//object(des_ntfrescape2)(3)
	CreateDynamicObject(4100, 1983.64355469, -2306.30151367, 14.24854469, 0.00000000, 0.00000000, 49.75000000);//object(meshfence1_lan)(1)
	CreateDynamicObject(4100, 1983.63452148, -2292.66674805, 14.24854469, 0.00000000, 0.00000000, 50.24609375);//object(meshfence1_lan)(2)
	CreateDynamicObject(4100, 1983.64916992, -2278.93505859, 14.24854469, 0.00000000, 0.00000000, 49.99609375);//object(meshfence1_lan)(3)
	CreateDynamicObject(4100, 1983.67492676, -2265.23364258, 14.24854469, 0.00000000, 0.00000000, 49.99328613);//object(meshfence1_lan)(4)
	CreateDynamicObject(4100, 1983.72680664, -2251.52148438, 14.24854469, 0.00000000, 0.00000000, 49.99328613);//object(meshfence1_lan)(5)
	CreateDynamicObject(4100, 1983.70336914, -2237.85791016, 14.24854469, 0.00000000, 0.00000000, 49.99328613);//object(meshfence1_lan)(6)
	CreateDynamicObject(4100, 1983.69714355, -2233.94995117, 14.24854469, 0.00000000, 0.00000000, 49.99328613);//object(meshfence1_lan)(7)
	CreateDynamicObject(4100, 2004.07617188, -2313.17285156, 14.24854469, 0.00000000, 0.00000000, 318.24096680);//object(meshfence1_lan)(8)
	CreateDynamicObject(3666, 1995.35363770, -2297.69921875, 13.09847260, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(50)
	CreateDynamicObject(3666, 1994.96936035, -2283.93774414, 13.09847260, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(51)
	CreateDynamicObject(3666, 1994.81445312, -2276.71508789, 13.07347298, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(52)
	CreateDynamicObject(3666, 1994.36401367, -2259.89501953, 13.07347298, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(53)
	CreateDynamicObject(3666, 1994.23474121, -2253.63476562, 13.07347298, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(54)
	CreateDynamicObject(3666, 1993.90356445, -2244.80004883, 13.07347298, 0.00000000, 0.00000000, 0.00000000);//object(airuntest_las)(55)
	CreateDynamicObject(7939, 1995.99499512, -2277.16357422, 14.13756752, 0.00000000, 0.00000000, 90.75000000);//object(glfcrsgate29_vgn)(1)
	CreateDynamicObject(979, 1990.52258301, -2296.16699219, 12.46210957, 88.00000000, 180.00000000, 272.01770020);//object(sub_roadleft)(11)
	CreateDynamicObject(979, 1989.79101562, -2272.89941406, 12.43710995, 87.99499512, 179.99450684, 272.01599121);//object(sub_roadleft)(11)
	CreateDynamicObject(979, 1988.93615723, -2248.34155273, 12.38711071, 87.98950195, 179.99450684, 272.01049805);//object(sub_roadleft)(11)
	//Escaleras Helipuerto LSPD
	CreateDynamicObject(12958, 1578.02661, -1650.72327, 18.87016, 0.00000, 0.00000, 0.00000);
	CreateDynamicObject(12958, 1577.33240, -1651.81702, 24.19470, 0.00000, 0.00000, -270.00000);
	CreateDynamicObject(12950, 1601.18384, -1633.10400, 15.55580, 0.00000, 0.00000, -176.00000);
	CreateDynamicObject(12950, 1580.15991, -1647.22803, 18.06380, 0.00000, 0.00000, -176.00000);
	CreateDynamicObject(12950, 1601.05518, -1631.67542, 14.01580, 0.00000, 0.00000, -176.00000);
	//Anti BD
	CreateDynamicObject(984, 1851.66711, -1037.84070, 23.70750, 0.00000, 0.00000, 359.79080); //Aparcamiento grande
	CreateDynamicObject(982, 1851.57910, -1057.00916, 23.70750, 0.00000, 0.00000, 359.79080); //Aparcamiento grande
	//Vias unity
	CreateDynamicObject(9165, 1724.37500, -1987.13562, 17.15400, 0.00000, 0.00000, -70.00000);
	///AparcamientoStMar?Beach
	CreateDynamicObject(970, 359.12124600, -1812.36230500, 3.99906500, 0.00000000, 0.00000000, 0.00000000);//object(2)
	CreateDynamicObject(970, 354.99923700, -1812.35974100, 3.99511200, 0.00000000, 0.00000000, 0.00000000);//object(3)
	CreateDynamicObject(970, 350.84991500, -1812.36474600, 3.99091200, 0.00000000, 0.00000000, 0.00000000);//object(4)
	CreateDynamicObject(970, 346.74987800, -1812.36071800, 3.98702400, 0.00000000, 0.00000000, 0.00000000);//object(5)
	CreateDynamicObject(970, 342.66690100, -1812.36840800, 3.98281100, 0.00000000, 0.00000000, 0.00000000);//object(6)
	CreateDynamicObject(970, 338.61465500, -1812.36950700, 3.97882000, 0.00000000, 0.00000000, 0.00000000);//object(7)
	CreateDynamicObject(970, 330.34967000, -1812.38073700, 3.96842300, 0.00000000, 0.00000000, 0.00000000);//object(9)
	CreateDynamicObject(970, 326.17645300, -1812.37988300, 3.96640800, 0.00000000, 0.00000000, 0.00000000);//object(10)
	CreateDynamicObject(970, 322.05777000, -1812.38024900, 3.96438500, 0.00000000, 0.00000000, 0.00000000);//object(11)
	CreateDynamicObject(970, 317.92639200, -1812.36840800, 3.96270500, 0.00000000, 0.00000000, 0.00000000);//object(12)
	CreateDynamicObject(970, 313.77969400, -1812.35717800, 3.96100000, 0.00000000, 0.00000000, 0.00000000);//object(13)
	CreateDynamicObject(970, 310.37042200, -1812.34228500, 3.95976100, 0.00000000, 0.00000000, 0.00000000);//object(14)
	CreateDynamicObject(970, 308.43722500, -1810.21374500, 4.07038300, 0.00000000, 0.00000000, -89.99998128);//object(15)
	CreateDynamicObject(970, 308.43405200, -1806.07763700, 4.06154400, 0.00000000, 0.00000000, -89.99998128);//object(16)
	CreateDynamicObject(970, 308.48739600, -1801.99035600, 4.15251300, 0.00000000, 0.00000000, -89.99998128);//object(17)
	CreateDynamicObject(970, 308.49069200, -1797.84472700, 4.14371000, 0.00000000, 0.00000000, -89.99998128);//object(18)
	CreateDynamicObject(970, 308.50747700, -1793.71118200, 4.17922100, 0.00000000, 0.00000000, -89.99998128);//object(19)
	CreateDynamicObject(970, 308.52377300, -1789.55993700, 4.19075900, 0.00000000, 0.00000000, -89.99998128);//object(20)
	CreateDynamicObject(970, 308.51736500, -1788.10937500, 4.23059500, 0.00000000, 0.00000000, -89.99998128);//object(21)
	CreateDynamicObject(970, 310.52984600, -1785.98046900, 4.11960900, 0.00000000, 0.00000000, 0.00000000);//object(22)
	CreateDynamicObject(970, 314.72155800, -1786.02661100, 4.18693100, 0.00000000, 0.00000000, 0.00000000);//object(23)
	CreateDynamicObject(970, 318.83895900, -1786.04638700, 4.25279900, 0.00000000, 0.00000000, 0.00000000);//object(24)
	CreateDynamicObject(970, 327.02829000, -1786.08215300, 4.38463000, 0.00000000, 0.00000000, 0.00000000);//object(26)
	CreateDynamicObject(970, 331.18158000, -1786.10546900, 4.45146800, 0.00000000, 0.00000000, 0.00000000);//object(27)
	CreateDynamicObject(970, 335.34008800, -1786.12231400, 4.52137300, 0.00000000, 0.00000000, 0.00000000);//object(28)
	CreateDynamicObject(8041, 349.69409200, -1787.00854500, 10.07214800, 0.00000000, 0.00000000, 89.99998128);//object(32)
	CreateDynamicObject(970, 338.14315800, -1786.10229500, 4.58726100, 0.00000000, 0.00000000, 0.00000000);//object(33)
	CreateDynamicObject(970, 360.50793500, -1788.07214400, 4.86103200, 0.00000000, 0.00000000, -89.99998128);//object(34)
	CreateDynamicObject(970, 360.89669800, -1800.36132800, 4.38031800, 0.00000000, 0.00000000, -90.85941797);//object(35)
	CreateDynamicObject(970, 360.78790300, -1796.19421400, 4.49962100, 0.00000000, 0.00000000, -89.99998128);//object(36)
	CreateDynamicObject(970, 360.64831500, -1792.15332000, 4.65000100, 0.00000000, 0.00000000, -89.99998128);//object(37)
	CreateDynamicObject(1237, 360.26190200, -1786.13000500, 4.41219400, 0.00000000, 0.00000000, 0.00000000);//object(39)
	CreateDynamicObject(1237, 340.31073000, -1785.96984900, 4.09716300, 0.00000000, 0.00000000, 0.00000000);//object(40)
	CreateDynamicObject(1251, 344.81417800, -1786.03723100, 4.30694600, 0.00000000, 0.00000000, -89.99998128);//object(41)
	CreateDynamicObject(1251, 353.90399200, -1785.99792500, 4.48802100, 0.00000000, 0.00000000, -88.28110789);//object(42)
	CreateDynamicObject(1361, 336.36419700, -1812.48168900, 4.16525100, 0.00000000, 0.00000000, 0.00000000);//object(135)
	CreateDynamicObject(1361, 332.68090800, -1812.49951200, 4.15803000, 0.00000000, 0.00000000, 0.00000000);//object(136)
	CreateDynamicObject(1361, 321.11694300, -1786.00695800, 4.48197000, 0.00000000, 0.00000000, 0.00000000);//object(137)
	CreateDynamicObject(1361, 324.72979700, -1785.88439900, 4.54082700, 0.00000000, 0.00000000, 0.00000000);//object(138)
	CreateDynamicObject(1597, 313.16030900, -1800.16052200, 6.20513500, 0.00000000, 0.00000000, 89.99998128);//object(139)
	CreateDynamicObject(1597, 322.76184100, -1799.60656700, 6.33214300, 0.00000000, 0.00000000, -89.99998128);//object(140)
	CreateDynamicObject(1597, 332.42315700, -1799.56298800, 6.33773300, 0.00000000, 0.00000000, -89.99998128);//object(141)
	CreateDynamicObject(700, 327.32196000, -1799.97314500, 4.39941700, 0.00000000, 0.00000000, 0.00000000);//object(145)
	CreateDynamicObject(700, 317.76477100, -1799.86853000, 4.27240900, 0.00000000, 0.00000000, 0.00000000);//object(146)
	CreateDynamicObject(700, 308.74038700, -1800.05285600, 4.27240900, 0.00000000, 0.00000000, 0.00000000);//object(147)
	CreateDynamicObject(700, 336.71615600, -1799.91137700, 4.40500700, 0.00000000, 0.00000000, 0.00000000);//object(148)
	CreateDynamicObject(3472, 333.16851800, -1799.66430700, 3.15607600, 0.00000000, 0.00000000, 0.00000000);//object(149)
	CreateDynamicObject(3472, 312.55999800, -1799.68676800, 3.39844700, 0.00000000, 0.00000000, 0.00000000);//object(150)
	CreateDynamicObject(3472, 323.03418000, -1799.67272900, 3.02545300, 0.00000000, 0.00000000, 0.00000000);//object(151)
	CreateDynamicObject(970, 310.34433000, -1799.02294900, 4.05884900, 0.00000000, 0.00000000, 0.00000000);//object(152)
	CreateDynamicObject(970, 314.44125400, -1798.96557600, 4.12513300, 0.00000000, 0.00000000, 0.00000000);//object(153)
	CreateDynamicObject(970, 318.55984500, -1798.90222200, 4.19179100, 0.00000000, 0.00000000, 0.00000000);//object(155)
	CreateDynamicObject(970, 322.69604500, -1798.89611800, 4.20521300, 0.00000000, 0.00000000, 0.00000000);//object(156)
	CreateDynamicObject(970, 326.79223600, -1798.89697300, 4.20813500, 0.00000000, 0.00000000, 0.00000000);//object(157)
	CreateDynamicObject(970, 330.89617900, -1798.90051300, 4.19229300, 0.00000000, 0.00000000, 0.00000000);//object(158)
	CreateDynamicObject(970, 335.08688400, -1798.84899900, 4.23347900, 0.00000000, 0.00000000, 0.00000000);//object(159)
	CreateDynamicObject(970, 310.46014400, -1800.93505900, 4.05231000, 0.00000000, 0.00000000, 0.00000000);//object(160)
	CreateDynamicObject(970, 314.60681200, -1800.98144500, 4.11904900, 0.00000000, 0.00000000, 0.00000000);//object(161)
	CreateDynamicObject(970, 318.75631700, -1801.01940900, 4.18623600, 0.00000000, 0.00000000, 0.00000000);//object(162)
	CreateDynamicObject(970, 322.90301500, -1801.02075200, 4.19799100, 0.00000000, 0.00000000, 0.00000000);//object(163)
	CreateDynamicObject(970, 327.02911400, -1800.99548300, 4.20051400, 0.00000000, 0.00000000, 0.00000000);//object(164)
	CreateDynamicObject(970, 331.15847800, -1800.98315400, 4.20327900, 0.00000000, 0.00000000, 0.00000000);//object(165)
	CreateDynamicObject(970, 334.83090200, -1800.98022500, 4.20983300, 0.00000000, 0.00000000, 0.00000000);//object(166)
	CreateDynamicObject(1360, 337.30590800, -1800.00732400, 4.23781500, 0.00000000, 0.00000000, 0.00000000);//object(168)
	//PeajeLS/SFSF/LS
	CreateDynamicObject(9623, 51.5068359375, -1531.0087890625, 6.4135332107544, 0, 0, 83.3642578125, -1, -1, -1, 250.0);
	CreateDynamicObject(1215, 59.939453125, -1533.0869140625, 5.0403566360474, 0, 0, 0, -1, -1, -1, 250.0);
	CreateDynamicObject(1215, 58.90234375, -1541.90234375, 5.0403566360474, 0, 0, 0, -1, -1, -1, 250.0);
	CreateDynamicObject(970, 52.516300201416, -1520.9829101563, 4.6471252441406, 0, 0, 264.71557617188, -1, -1, -1, 250.0);
	CreateDynamicObject(970, 50.2587890625, -1542.2724609375, 4.7063941955566, 0, 0, 264.71557617188, -1, -1, -1, 250.0);
	CreateDynamicObject(1215, 42.8251953125, -1529.8798828125, 5.0403566360474, 0, 0, 0, -1, -1, -1, 250.0);
	CreateDynamicObject(1215, 40.955078125, -1539.6416015625, 5.0403566360474, 0, 0, 0, -1, -1, -1, 250.0);
	CreateDynamicObject(979, 42.1240234375, -1541.41015625, 5.0536217689514, 0, 0, 19.8193359375, -1, -1, -1, 250.0);
	CreateDynamicObject(979, 56.93359375, -1542.9130859375, 4.9221844673157, 0, 0, 318.32885742188, -1, -1, -1, 250.0);
	CreateDynamicObject(979, 59.6083984375, -1521.7138671875, 4.75932264328, 0, 0, 195.22155761719, -1, -1, -1, 250.0);
	CreateDynamicObject(979, 45.3837890625, -1519.9404296875, 5.0327048301697, 0, 0, 151.39712524414, -1, -1, -1, 250.0);
	CreateDynamicObject(994, 61.417091369629, -1531.5886230469, 4.1845903396606, 0, 0, 350.07385253906, -1, -1, -1, 250.0);
	CreateDynamicObject(994, 61.147079467773, -1533.9071044922, 4.201210975647, 0, 0, 352.07385253906, -1, -1, -1, 250.0);
	CreateDynamicObject(994, 40.518329620361, -1529.1175537109, 4.4017238616943, 0, 0, 354.1591796875, -1, -1, -1, 250.0);
	CreateDynamicObject(994, 34.444438934326, -1528.0380859375, 4.4078407287598, 0, 0, 350.068359375, -1, -1, -1, 250.0);
	CreateDynamicObject(994, 34.273979187012, -1530.2557373047, 4.4084062576294, 0, 0, 348.09130859375, -1, -1, -1, 250.0);
	CreateDynamicObject(994, 40.376953125, -1531.5107421875, 4.3951306343079, 0, 0, 354.02893066406, -1, -1, -1, 250.0);
	CreateDynamicObject(1215, 37.951248168945, -1529.9604492188, 4.9819650650024, 0, 0, 0, -1, -1, -1, 250.0);
	CreateDynamicObject(1893, 52.9609375, -1535.8642578125, 8.8910512924194, 0, 0, 0, -1, -1, -1, 250.0);
	CreateDynamicObject(1893, 50.1787109375, -1525.916015625, 8.6410512924194, 0, 0, 346.10229492188, -1, -1, -1, 250.0);
	CreateDynamicObject(1215, 43.433494567871, -1520.4907226563, 5.0403566360474, 0, 0, 0, -1, -1, -1, 250.0);
	CreateDynamicObject(1215, 61.280380249023, -1522.5816650391, 5.0403566360474, 0, 0, 0, -1, -1, -1, 250.0);
	CreateDynamicObject(1215, 60.066070556641, -1531.9526367188, 5.0403566360474, 0, 0, 0, -1, -1, -1, 250.0);
	CreateDynamicObject(1215, 64.367721557617, -1533.0864257813, 4.7245464324951, 0, 0, 0, -1, -1, -1, 250.0);
	CreateDynamicObject(966, 56.59765625, -1533.1015625, 4.2298083305359, 0, 0, 83.3642578125, -1, -1, -1, 250.0);
	CreateDynamicObject(966, 45.92410278, -1528.88403320, 4.34277439, 0.00000000, 0.00000000, 260.74523926, -1, -1, -1, 250.0);
	CreateDynamicObject(1237, 34.657150268555, -1529.1403808594, 4.4334697723389, 0, 357.99499511719, 0, -1, -1, -1, 250.0);
	CreateDynamicObject(1237, 67.103126525879, -1533.6245117188, 4.1326465606689, 0, 357.98950195313, 0, -1, -1, -1, 250.0);
	CreateDynamicObject(1215, 42.614303588867, -1531.2629394531, 5.0403566360474, 0, 0, 0, -1, -1, -1, 250.0);
	//PeajePrincipal
	CreateDynamicObject(7522, 1734.53063965, 510.67129517, 32.14699554, 355.99548340, 0.00000000, 339.99938965);//object(vgnhsegate1)(4)
	CreateDynamicObject(3851, 1717.88562012, 516.65197754, 32.15283203, 356.75000000, 0.00000000, 339.50000000);//object(carshowwin_sfsx)(2)
	CreateDynamicObject(3851, 1717.80957031, 516.46520996, 28.47251129, 356.74804688, 0.00000000, 339.49951172);//object(carshowwin_sfsx)(3)
	CreateDynamicObject(3851, 1751.12756348, 504.76992798, 32.15789413, 356.74804688, 0.00000000, 339.49951172);//object(carshowwin_sfsx)(4)
	CreateDynamicObject(3851, 1751.01477051, 504.58544922, 28.40093231, 356.74804688, 0.00000000, 339.49951172);//object(carshowwin_sfsx)(5)
	CreateDynamicObject(3920, 1741.84741211, 514.58184814, 31.99756432, 0.00000000, 0.00000000, 342.00000000);//object(lib_veg3)(1)
	CreateDynamicObject(3920, 1730.35070801, 518.97283936, 31.80419159, 0.00000000, 0.00000000, 341.99890137);//object(lib_veg3)(2)
	CreateDynamicObject(3920, 1739.13635254, 502.53961182, 32.80576324, 0.00000000, 0.00000000, 159.99890137);//object(lib_veg3)(3)
	CreateDynamicObject(3920, 1726.79956055, 506.74310303, 32.71912384, 0.00000000, 0.00000000, 159.99389648);//object(lib_veg3)(4)
	CreateDynamicObject(638, 1720.85021973, 511.23519897, 28.31233597, 357.49755859, 359.74975586, 251.73400879);//object(kb_planter_bush)(3)
	CreateDynamicObject(638, 1719.88940430, 520.37664795, 27.82375336, 356.24755859, 0.00000000, 338.24487305);//object(kb_planter_bush)(5)
	CreateDynamicObject(638, 1748.67065430, 500.63357544, 28.28552246, 2.73840332, 0.00000000, 160.49377441);//object(kb_planter_bush)(10)
	CreateDynamicObject(1237, 1744.39074707, 499.05343628, 28.04047394, 0.00000000, 0.00000000, 0.00000000);//object(strtbarrier01)(2)
	CreateDynamicObject(1237, 1748.68969727, 510.93167114, 27.41461182, 0.00000000, 0.00000000, 0.00000000);//object(strtbarrier01)(3)
	CreateDynamicObject(1237, 1724.42675781, 521.88134766, 27.23392868, 0.00000000, 0.00000000, 0.00000000);//object(strtbarrier01)(4)
	CreateDynamicObject(3749, 1719.64501953, 515.95593262, 32.53154755, 359.75024414, 357.24993896, 249.98797607);//object(clubgate01_lax)(1)
	CreateDynamicObject(3749, 1749.28527832, 505.35165405, 32.72765732, 359.74731445, 357.24792480, 249.98291016);//object(clubgate01_lax)(2)
	CreateDynamicObject(8168, 1720.70947266, 515.77081299, 29.44019127, 359.50097656, 3.50012207, 86.78051758);//object(vgs_guardhouse01)(1)
	CreateDynamicObject(8168, 1748.43798828, 505.49218750, 29.53178024, 359.25018311, 356.99877930, 266.70556641);//object(vgs_guardhouse01)(3)
	CreateDynamicObject(638, 1718.40039062, 512.05651855, 28.41301727, 357.49511719, 359.74731445, 251.72973633);//object(kb_planter_bush)(12)
	CreateDynamicObject(1237, 1719.72851562, 508.91601562, 27.99460793, 0.00000000, 0.00000000, 0.00000000);//object(strtbarrier01)(5)
	CreateDynamicObject(638, 1747.98962402, 509.82730103, 27.80553436, 357.49511719, 359.74731445, 249.72973633);//object(kb_planter_bush)(13)
	CreateDynamicObject(638, 1750.18115234, 509.03182983, 27.77998924, 359.74511719, 359.74755859, 249.73455811);//object(kb_planter_bush)(14)
	CreateDynamicObject(1231, 1742.59069824, 497.36105347, 30.82483101, 0.00000000, 0.00000000, 342.00000000);//object(streetlamp2)(1)
	CreateDynamicObject(1231, 1719.64270020, 505.87384033, 30.85145569, 0.00000000, 0.00000000, 341.99890137);//object(streetlamp2)(2)
	CreateDynamicObject(1231, 1726.26489258, 523.94793701, 29.82937241, 0.00000000, 0.00000000, 341.99890137);//object(streetlamp2)(3)
	CreateDynamicObject(1231, 1749.24548340, 515.52655029, 29.86758041, 0.00000000, 0.00000000, 341.99890137);//object(streetlamp2)(4)
	CreateDynamicObject(1319, 1734.52221680, 515.25524902, 27.93953896, 0.00000000, 0.00000000, 74.00000000);//object(ws_ref_bollard)(5)
	CreateDynamicObject(1319, 1734.26013184, 514.58416748, 27.98063087, 0.00000000, 0.00000000, 73.99841309);//object(ws_ref_bollard)(7)
	CreateDynamicObject(1319, 1734.74743652, 515.87677002, 27.90203285, 0.00000000, 0.00000000, 73.99841309);//object(ws_ref_bollard)(8)
	CreateDynamicObject(1319, 1737.62023926, 514.83935547, 27.90540504, 0.00000000, 0.00000000, 73.99841309);//object(ws_ref_bollard)(9)
	CreateDynamicObject(1319, 1737.38293457, 514.20434570, 27.94361496, 0.00000000, 0.00000000, 73.99841309);//object(ws_ref_bollard)(10)
	CreateDynamicObject(1319, 1737.16137695, 513.49359131, 27.98629761, 0.00000000, 0.00000000, 73.99841309);//object(ws_ref_bollard)(11)
	CreateDynamicObject(1269, 1725.61096191, 519.44012451, 28.17633820, 0.00000000, 0.00000000, 278.00000000);//object(parkingmeter)(1)
	CreateDynamicObject(1269, 1743.27661133, 501.52035522, 28.77410126, 0.00000000, 0.00000000, 277.99804688);//object(parkingmeter)(2)
	CreateDynamicObject(7662, 1757.11669922, 520.45324707, 27.29666138, 356.50000000, 0.00000000, 340.75000000);//object(miragehedge14)(1)
	CreateDynamicObject(7662, 1722.98400879, 532.91369629, 27.51205444, 356.24536133, 0.00000000, 341.24645996);//object(miragehedge14)(2)
	CreateDynamicObject(1319, 1731.58703613, 507.48901367, 28.41566086, 0.00000000, 0.00000000, 73.99841309);//object(ws_ref_bollard)(12)
	CreateDynamicObject(1319, 1731.34985352, 506.75735474, 28.44856453, 0.00000000, 0.00000000, 73.99841309);//object(ws_ref_bollard)(13)
	CreateDynamicObject(1319, 1731.11682129, 505.89208984, 28.48619080, 0.00000000, 0.00000000, 73.99841309);//object(ws_ref_bollard)(14)
	CreateDynamicObject(1319, 1734.74328613, 506.26354980, 28.41332245, 0.00000000, 0.00000000, 73.99841309);//object(ws_ref_bollard)(15)
	CreateDynamicObject(1319, 1734.48413086, 505.59411621, 28.44406509, 0.00000000, 0.00000000, 73.99841309);//object(ws_ref_bollard)(16)
	CreateDynamicObject(1319, 1734.12329102, 504.84600830, 28.47859383, 0.00000000, 0.00000000, 73.99841309);//object(ws_ref_bollard)(17)
	CreateDynamicObject(7662, 1734.56909180, 456.59658813, 30.26617432, 357.99536133, 0.00000000, 340.74652100);//object(miragehedge14)(3)
	CreateDynamicObject(7662, 1699.64965820, 468.77502441, 30.30495453, 357.99658203, 357.74865723, 339.91772461);//object(miragehedge14)(5)
	CreateDynamicObject(966, 1746.27075195, 513.30554199, 27.28900146, 0.00000000, 0.00000000, 339.50000000);//object(bar_gatebar01)(1)
	CreateDynamicObject(966, 1722.63073730, 507.59747314, 28.02780533, 0.00000000, 0.00000000, 161.49951172);//object(bar_gatebar01)(2)
	CreateDynamicObject(1237, 1721.83825684, 507.92312622, 28.00804901, 0.00000000, 0.00000000, 0.00000000);//object(strtbarrier01)(6)
	CreateDynamicObject(1237, 1747.07910156, 512.95410156, 27.27249527, 0.00000000, 0.00000000, 0.00000000);//object(strtbarrier01)(7)
	CreateDynamicObject(1237, 1729.95117188, 505.17480469, 27.99683952, 0.00000000, 0.00000000, 0.00000000);//object(strtbarrier01)(8)
	CreateDynamicObject(1237, 1739.17480469, 515.84863281, 27.30348587, 0.00000000, 0.00000000, 0.00000000);//object(strtbarrier01)(9)
	CreateDynamicObject(1346, 1742.52221680, 434.89068604, 19.12241745, 0.00000000, 0.00000000, 0.00000000);//object(cj_phone_kiosk2)(2)
	CreateDynamicObject(1237, 1713.72546387, 507.94091797, 28.15727997, 0.00000000, 0.00000000, 0.00000000);//object(strtbarrier01)(5)
	CreateDynamicObject(1237, 1720.20654297, 525.78100586, 27.11544418, 0.00000000, 0.00000000, 0.00000000);//object(strtbarrier01)(5)
	CreateDynamicObject(1237, 1755.01977539, 513.09460449, 27.15516853, 0.00000000, 0.00000000, 0.00000000);//object(strtbarrier01)(5)
	CreateDynamicObject(1237, 1748.57165527, 495.36611938, 28.12929916, 0.00000000, 0.00000000, 0.00000000);//object(strtbarrier01)(5)
	CreateDynamicObject(1554, 1740.34033203, 527.16510010, 26.63312531, 0.00000000, 0.00000000, 0.00000000);//object(cj_water_barrier)(1)
	CreateDynamicObject(1554, 1738.29052734, 520.85583496, 27.01563454, 0.00000000, 0.00000000, 0.00000000);//object(cj_water_barrier)(2)
	CreateDynamicObject(1554, 1736.77880859, 516.35937500, 27.28455353, 0.00000000, 0.00000000, 0.00000000);//object(cj_water_barrier)(3)
	CreateDynamicObject(792, 1738.75891113, 522.33557129, 27.09619713, 0.00000000, 0.00000000, 339.25000000);//object(aw_streettree1)(1)
	CreateDynamicObject(792, 1741.56005859, 530.53411865, 26.63008308, 0.00000000, 0.00000000, 340.00000000);//object(aw_streettree1)(2)
	//2doPeaje
	CreateDynamicObject(4641, 611.15521240, 341.90322876, 19.62626648, 0.00000000, 0.00000000, 124.50006104);//object(paypark_lan04)(1)
	CreateDynamicObject(1251, 615.46246338, 347.41967773, 18.03437233, 0.00000000, 0.00000000, 214.74998474);//object(smashbar)(1)
	CreateDynamicObject(1251, 605.83349609, 340.35693359, 18.03437233, 0.00000000, 0.00000000, 214.74975586);//object(smashbar)(2)
	CreateDynamicObject(4641, 612.39166260, 342.70474243, 19.62626648, 0.00000000, 0.00000000, 304.24707031);//object(paypark_lan04)(2)
	CreateDynamicObject(869, 621.77282715, 344.38226318, 18.52552223, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(1)
	CreateDynamicObject(869, 622.69409180, 341.95797729, 18.73995972, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(2)
	CreateDynamicObject(869, 623.68316650, 339.75006104, 18.94154739, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(3)
	CreateDynamicObject(869, 624.98651123, 337.66387939, 19.14747238, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(4)
	CreateDynamicObject(869, 609.62091064, 328.49456787, 19.29899979, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(5)
	CreateDynamicObject(869, 607.14270020, 332.95535278, 18.99769402, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(6)
	CreateDynamicObject(869, 608.97827148, 329.55920410, 19.48236275, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(7)
	CreateDynamicObject(869, 610.46881104, 326.13723755, 19.36505699, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(8)
	CreateDynamicObject(869, 611.31933594, 324.10876465, 19.42392540, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(9)
	CreateDynamicObject(869, 625.55676270, 334.73553467, 19.30349159, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(10)
	CreateDynamicObject(869, 626.01800537, 332.05664062, 19.35348892, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(11)
	CreateDynamicObject(869, 626.51904297, 329.87506104, 19.38253403, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(12)
	CreateDynamicObject(869, 626.74707031, 327.89004517, 19.40633965, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(13)
	CreateDynamicObject(869, 608.11407471, 331.05606079, 19.15394020, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(14)
	CreateDynamicObject(869, 605.94433594, 334.46926880, 18.86527443, 0.00000000, 0.00000000, 0.00000000);//object(veg_pflowerswee)(15)
	CreateDynamicObject(3851, 609.42370605, 350.38610840, 27.89567375, 0.00000000, 316.00000000, 304.99713135);//object(carshowwin_sfsx)(2)
	CreateDynamicObject(3851, 604.74536133, 347.08255005, 27.93655396, 0.00000000, 315.99975586, 304.99694824);//object(carshowwin_sfsx)(3)
	CreateDynamicObject(3851, 610.77764893, 348.46978760, 25.12393188, 0.00000000, 325.75000000, 304.99713135);//object(carshowwin_sfsx)(4)
	CreateDynamicObject(3851, 606.11767578, 345.16638184, 25.07393265, 0.00000000, 325.75000000, 304.99713135);//object(carshowwin_sfsx)(5)
	CreateDynamicObject(1215, 606.36077881, 337.21411133, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(1)
	CreateDynamicObject(1215, 618.55389404, 345.33618164, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(2)
	CreateDynamicObject(1215, 593.98565674, 355.31488037, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(3)
	CreateDynamicObject(1215, 605.35803223, 363.75540161, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(4)
	CreateDynamicObject(1215, 596.11920166, 377.24047852, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(5)
	CreateDynamicObject(1215, 584.86181641, 368.17123413, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(6)
	CreateDynamicObject(1215, 570.00311279, 389.20019531, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(7)
	CreateDynamicObject(1215, 581.75836182, 397.75845337, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(8)
	CreateDynamicObject(1215, 570.50592041, 414.07681274, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(9)
	CreateDynamicObject(1215, 558.50927734, 405.55288696, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(10)
	CreateDynamicObject(1215, 540.20947266, 431.86740112, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(11)
	CreateDynamicObject(1215, 552.10131836, 440.24792480, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(12)
	CreateDynamicObject(1215, 526.33770752, 451.23950195, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(13)
	CreateDynamicObject(1215, 538.30633545, 459.85519409, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(14)
	CreateDynamicObject(1215, 505.78588867, 480.82556152, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(15)
	CreateDynamicObject(1215, 517.46527100, 489.11245728, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(16)
	CreateDynamicObject(1215, 486.89691162, 507.62744141, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(17)
	CreateDynamicObject(1215, 499.00323486, 516.03869629, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(18)
	CreateDynamicObject(1215, 469.32437134, 533.15283203, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(19)
	CreateDynamicObject(1215, 481.38186646, 541.86529541, 19.29869843, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(20)
	CreateDynamicObject(1215, 448.59533691, 563.21594238, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(21)
	CreateDynamicObject(1215, 460.27703857, 571.29559326, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(22)
	CreateDynamicObject(1215, 432.42288208, 585.91540527, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(23)
	CreateDynamicObject(1215, 444.05410767, 594.53662109, 18.69713593, 0.00000000, 0.00000000, 0.00000000);//object(bollardlight)(24)
	CreateDynamicObject(966, 619.60754395, 344.84515381, 17.98676491, 0.00000000, 0.00000000, 38.00000000);//object(bar_gatebar01)(1)
	CreateDynamicObject(966, 607.09924316, 335.70361328, 17.97176361, 0.00000000, 0.00000000, 213.99621582);//object(bar_gatebar01)(2)
	CreateDynamicObject(1554, 613.51287842, 340.18591309, 17.97713280, 0.00000000, 0.00000000, 28.00000000);//object(cj_water_barrier)(1)
	CreateDynamicObject(1554, 606.44799805, 335.91693115, 18.34716034, 0.00000000, 0.00000000, 27.99865723);//object(cj_water_barrier)(2)
	CreateDynamicObject(1554, 619.71734619, 345.64797974, 17.90903854, 0.00000000, 0.00000000, 27.99865723);//object(cj_water_barrier)(3)
	//Concesionario Ayunta
	CreateDynamicObject(8650, 1267.58069, -1793.47717, 13.45060,   0.00000, 0.00000, 89.60830);
	CreateDynamicObject(8650, 1282.42053, -1808.67456, 13.45060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8650, 1282.43604, -1822.39746, 13.45060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8650, 1195.84363, -1821.96204, 13.45060,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1360, 1240.94153, -1837.76514, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1238.18237, -1837.72095, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1235.47278, -1837.74280, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1232.90222, -1837.77991, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1230.32971, -1837.77405, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1227.63586, -1837.76392, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1224.98804, -1837.80139, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1243.58154, -1837.75037, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1246.24146, -1837.76611, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1248.88232, -1837.78613, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1251.40308, -1837.77576, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1254.16309, -1837.78223, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1256.90369, -1837.79663, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1259.13013, -1838.44226, 13.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1360, 1259.10498, -1841.21448, 13.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1360, 1257.01135, -1841.78369, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1254.24951, -1841.74536, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1251.50647, -1841.73303, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1248.86475, -1841.74683, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1246.18359, -1841.75537, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1243.56201, -1841.76038, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1240.79907, -1841.75146, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1238.17297, -1841.77197, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1235.50940, -1841.74036, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1232.88879, -1841.73035, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1230.24719, -1841.74048, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1227.56653, -1841.72949, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1224.86841, -1841.62817, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1224.27600, -1839.73242, 13.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1360, 1196.31299, -1837.93640, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1199.18396, -1837.91125, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1202.07312, -1837.93982, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1196.18030, -1841.93494, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1198.97974, -1841.82922, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1201.94080, -1841.75720, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1203.16882, -1839.88745, 13.14990,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1195.87231, -1821.63013, 14.56220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1195.87317, -1831.98242, 14.56220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1282.38257, -1832.40491, 14.56220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1282.37549, -1822.02161, 14.56220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1282.36963, -1811.65845, 14.56220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1282.36731, -1801.29004, 14.56220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1282.35596, -1798.70898, 14.56220,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(8674, 1277.17834, -1793.52539, 14.56220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1266.81702, -1793.52246, 14.56220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(8674, 1256.45569, -1793.52930, 14.56220,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1360, 1281.27490, -1837.88086, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1281.28284, -1841.86194, 13.14990,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1360, 1280.56116, -1839.92859, 13.14990,   0.00000, 0.00000, 0.00000);
	//---------------------------[ BURGERSHOT Bomberos ]-----------------------------------------
	new tmpobjid;
	tmpobjid = CreateDynamicObjectEx(19377,1424.013,-1108.746,21.067,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3922, "bistro", "ahoodfence2", 0);
	tmpobjid = CreateDynamicObjectEx(19377,1438.728,-1058.369,22.746,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "poshground_sfw", 0);
	tmpobjid = CreateDynamicObjectEx(19377,1456.265,-1048.738,22.746,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "poshground_sfw", 0);
	tmpobjid = CreateDynamicObjectEx(19377,1456.265,-1058.373,22.746,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "poshground_sfw", 0);
	tmpobjid = CreateDynamicObjectEx(19377,1438.727,-1067.999,22.746,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "poshground_sfw", 0);
	tmpobjid = CreateDynamicObjectEx(5418,1457.212,-1086.439,29.411,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 2, 9515, "bigboxtemp1", "ws_airportwin1", 0);
	SetDynamicObjectMaterial(tmpobjid, 3, 9515, "bigboxtemp1", "shingles1", 0);
	SetDynamicObjectMaterial(tmpobjid, 4, 3980, "cityhall_lan", "LAcityhwal1", 0);
	SetDynamicObjectMaterial(tmpobjid, 8, 3980, "cityhall_lan", "LAcityhwal1", 0);
	SetDynamicObjectMaterial(tmpobjid, 9, 3980, "cityhall_lan", "LAcityhwal1", 0);
	SetDynamicObjectMaterial(tmpobjid, 10, 3980, "cityhall_lan", "LAcityhwal1", 0);
	SetDynamicObjectMaterial(tmpobjid, 11, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	SetDynamicObjectMaterial(tmpobjid, 12, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	SetDynamicObjectMaterial(tmpobjid, 13, 10101, "2notherbuildsfe", "sl_vicwall02", 0);
	tmpobjid = CreateDynamicObjectEx(19377,1456.266,-1068.001,22.746,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "poshground_sfw", 0);
	tmpobjid = CreateDynamicObjectEx(19363,1449.253,-1071.175,22.751,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19363,1449.260,-1064.770,22.751,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19378,1444.064,-1067.999,17.597,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3314, "ce_burbhouse", "black_128", 0);
	tmpobjid = CreateDynamicObjectEx(19378,1461.591,-1077.437,17.597,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3314, "ce_burbhouse", "black_128", 0);
	tmpobjid = CreateDynamicObjectEx(19363,1445.764,-1064.776,22.751,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19363,1449.256,-1067.975,22.751,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19363,1445.762,-1067.984,22.751,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19363,1445.756,-1071.192,22.751,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19363,1449.253,-1077.600,22.751,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19363,1445.758,-1074.396,22.751,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19363,1449.255,-1080.805,22.751,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19363,1449.259,-1074.384,22.751,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1438.765,-1077.626,22.759,0.000,990.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1471.511,-1048.725,20.312,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "ws_ irongate", 0);
	tmpobjid = CreateDynamicObjectEx(19378,1450.934,-1067.990,17.597,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3314, "ce_burbhouse", "black_128", 0);
	tmpobjid = CreateDynamicObjectEx(19378,1455.649,-1072.719,17.597,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3314, "ce_burbhouse", "black_128", 0);
	tmpobjid = CreateDynamicObjectEx(19378,1456.697,-1072.718,17.597,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3314, "ce_burbhouse", "black_128", 0);
	tmpobjid = CreateDynamicObjectEx(19378,1439.340,-1072.726,17.597,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3314, "ce_burbhouse", "black_128", 0);
	tmpobjid = CreateDynamicObjectEx(19378,1438.265,-1072.724,17.597,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3314, "ce_burbhouse", "black_128", 0);
	tmpobjid = CreateDynamicObjectEx(19378,1433.422,-1077.455,17.597,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3314, "ce_burbhouse", "black_128", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1423.473,-1044.415,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18766,1428.374,-1044.420,21.301,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(19363,1445.759,-1077.607,22.751,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19363,1445.770,-1080.818,22.751,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1471.516,-1096.666,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18766,1471.513,-1091.185,21.299,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1471.517,-1085.696,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18766,1471.516,-1080.198,21.299,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1471.521,-1074.702,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18766,1471.522,-1069.202,21.299,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1471.531,-1063.720,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18766,1471.532,-1058.228,21.299,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1471.534,-1052.744,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1471.542,-1044.402,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18766,1471.537,-1048.913,21.301,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1461.998,-1044.395,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18766,1466.822,-1044.404,21.301,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1442.668,-1044.413,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18766,1447.358,-1044.411,21.301,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1456.254,-1077.593,22.759,0.000,990.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 16136, "des_telescopestuff", "stoneclad1", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1471.504,-1091.375,20.311,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "lanlabra1_M", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1471.507,-1081.737,20.311,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "ws_ irongate", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1471.506,-1072.112,20.311,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "ws_ irongate", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1471.509,-1062.484,20.311,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "ws_ irongate", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1461.588,-1078.600,19.070,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "lanlabra1_M", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1471.514,-1052.848,20.311,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "ws_ irongate", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1466.762,-1044.379,20.311,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "ws_ irongate", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1447.226,-1044.390,20.311,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "ws_ irongate", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1452.195,-1044.411,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1457.066,-1044.415,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1432.992,-1044.418,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(18762,1437.745,-1044.401,23.333,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 7088, "casinoshops1", "fakestone1_LA", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1428.358,-1044.413,20.311,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 3820, "boxhses_sfsx", "ws_ irongate", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1433.407,-1049.737,19.072,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "lanlabra1_M", 0);
	tmpobjid = CreateDynamicObjectEx(19377,1438.729,-1048.738,22.746,0.000,90.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 9515, "bigboxtemp1", "poshground_sfw", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1433.411,-1059.366,19.070,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "lanlabra1_M", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1433.408,-1069.001,19.070,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "lanlabra1_M", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1433.406,-1078.631,19.070,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "lanlabra1_M", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1461.590,-1049.701,19.070,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "lanlabra1_M", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1461.590,-1059.334,19.070,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "lanlabra1_M", 0);
	tmpobjid = CreateDynamicObjectEx(19379,1461.588,-1068.965,19.070,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 6487, "councl_law2", "lanlabra1_M", 0);
	tmpobjid = CreateDynamicObjectEx(1408,1444.776,-1063.121,23.405,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0);
	tmpobjid = CreateDynamicObjectEx(1408,1442.237,-1060.411,23.405,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0);
	tmpobjid = CreateDynamicObjectEx(1408,1452.638,-1052.842,23.405,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0);
	tmpobjid = CreateDynamicObjectEx(1408,1452.634,-1058.057,23.405,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0);
	tmpobjid = CreateDynamicObjectEx(1408,1452.629,-1060.465,23.405,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0);
	tmpobjid = CreateDynamicObjectEx(1408,1449.994,-1063.126,23.405,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0);
	tmpobjid = CreateDynamicObjectEx(1408,1452.636,-1047.643,23.405,0.000,0.000,90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0);
	tmpobjid = CreateDynamicObjectEx(1408,1442.230,-1047.595,23.405,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0);
	tmpobjid = CreateDynamicObjectEx(1408,1442.225,-1052.805,23.405,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0);
	tmpobjid = CreateDynamicObjectEx(1408,1442.229,-1058.011,23.405,0.000,0.000,-90.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 0, 14786, "ab_sfgymbeams", "knot_wood128", 0);
	tmpobjid = CreateDynamicObjectEx(1280,1433.901,-1060.944,23.222,0.000,0.000,180.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0);
	tmpobjid = CreateDynamicObjectEx(1280,1461.117,-1060.840,23.222,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 1, 2755, "ab_dojowall", "mp_apt1_roomfloor", 0);
	tmpobjid = CreateDynamicObjectEx(1432,1438.417,-1076.569,22.844,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 2, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	tmpobjid = CreateDynamicObjectEx(1432,1459.600,-1074.590,22.844,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 2, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	tmpobjid = CreateDynamicObjectEx(1432,1456.382,-1077.228,22.844,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 2, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	tmpobjid = CreateDynamicObjectEx(1432,1453.086,-1074.556,22.844,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 2, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	tmpobjid = CreateDynamicObjectEx(1432,1441.996,-1074.358,22.844,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 2, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	tmpobjid = CreateDynamicObjectEx(1432,1435.226,-1074.401,22.844,0.000,0.000,0.000,300.000,300.000);
	SetDynamicObjectMaterial(tmpobjid, 2, 9583, "bigshap_sfw", "bridge_walls2_sfw", 0);
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	tmpobjid = CreateDynamicObjectEx(19381,1466.760,-1096.891,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1427.809,-1103.981,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1466.759,-1058.361,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1466.756,-1067.994,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1466.755,-1077.627,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1466.758,-1087.262,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1466.762,-1048.732,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1428.229,-1058.373,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1428.229,-1068.006,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1428.225,-1077.642,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1428.229,-1087.275,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19377,1438.720,-1096.889,22.746,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19377,1456.274,-1096.894,22.746,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19377,1438.724,-1077.634,22.746,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19377,1438.723,-1087.260,22.746,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19377,1456.264,-1077.634,22.746,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19377,1456.274,-1087.265,22.746,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1428.230,-1048.740,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1447.435,-1048.737,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1447.439,-1058.370,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(19381,1428.229,-1096.907,22.749,0.000,90.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1569,1447.089,-1079.356,22.839,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3515,1447.376,-1059.189,21.959,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3515,1447.398,-1049.372,21.959,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(869,1447.274,-1054.090,23.228,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3520,1443.621,-1047.968,22.855,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3520,1443.378,-1059.554,22.855,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3520,1451.823,-1053.855,22.855,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3520,1443.470,-1053.821,22.855,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3520,1447.214,-1046.031,22.855,0.000,0.000,90.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3520,1451.913,-1048.011,22.855,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3520,1451.801,-1059.762,22.855,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3520,1447.166,-1061.932,22.855,0.000,0.000,90.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3660,1466.457,-1079.970,24.214,0.000,0.000,90.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3660,1427.703,-1085.137,24.214,0.000,0.000,90.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3660,1466.315,-1055.904,24.214,0.000,0.000,90.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(3660,1427.735,-1055.775,24.214,0.000,0.000,90.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1232,1423.465,-1044.420,23.514,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1232,1471.521,-1052.738,23.514,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1232,1442.661,-1044.411,23.514,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1232,1442.661,-1044.411,23.514,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1232,1433.012,-1044.448,23.514,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1232,1452.187,-1044.405,23.514,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1232,1462.006,-1044.420,23.514,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1232,1471.540,-1044.382,23.514,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1232,1471.560,-1096.692,23.514,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1232,1471.545,-1085.697,23.514,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1232,1471.526,-1074.702,23.514,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1232,1471.522,-1063.750,23.514,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1359,1442.942,-1063.660,23.429,0.000,0.000,0.000,300.000,300.000);
	tmpobjid = CreateDynamicObjectEx(1359,1451.838,-1063.654,23.429,0.000,0.000,0.000,300.000,300.000);

	//Canchas Basket Grove Street
	CreateDynamicObject(3570, 2308.08350, -1538.31604, 25.65960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3570, 2308.08398, -1530.18103, 25.65960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(3570, 2308.08057, -1533.62427, 28.33960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1711, 2310.02295, -1537.66272, 24.33860,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1711, 2312.96875, -1537.41467, 24.33860,   0.00000, 0.00000, -90.00000);
	CreateDynamicObject(1711, 2311.42627, -1535.96912, 24.33860,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1711, 2311.69238, -1539.28369, 24.33860,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(1222, 2309.77295, -1535.32263, 24.78350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1222, 2310.10645, -1534.39160, 24.78350,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1344, 2310.05737, -1531.20825, 25.06020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1344, 2310.03564, -1529.04712, 25.06020,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1369, 2310.20093, -1532.95422, 24.80070,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1327, 2321.31079, -1541.74316, 24.34250,   0.00000, 90.00000, 90.00000);
	CreateDynamicObject(1365, 2307.60205, -1515.56970, 25.47960,   0.00000, 0.00000, 90.00000);
	CreateDynamicObject(1415, 2323.62134, -1542.51343, 24.37850,   0.00000, 0.00000, 180.00000);
	CreateDynamicObject(3524, 2321.25781, -1541.88623, 22.08100,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(853, 2313.60010, -1541.01941, 24.70000,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(849, 2315.92798, -1540.82251, 24.61890,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 2315.03760, -1533.09326, 24.96070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 2315.02637, -1531.70569, 24.96070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 2316.38623, -1532.44568, 24.96070,   0.00000, 0.00000, 0.00000);
	CreateDynamicObject(1224, 2315.57056, -1532.40125, 26.14070,   0.00000, 0.00000, 45.00000);
    ////FIN MAPEOS////
	for (new i = 0; i < 24; i ++) {
	    SetDynamicObjectMaterial(PrisonData[prisonCells][i], 0, 19302, "pd_jail_door02", "pd_jail_door02", 0xFF000000);
	    GetDynamicObjectPos(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1], PrisonCells[i][2]);
	}
	// Spawn bikes
    CreateVehicle(510, -2433.4031, 319.3516, 34.7669, 240.0000, 5, 5, -1); // bike 1
	CreateVehicle(510, -2433.0540, 320.1264, 34.7723, 240.0000, 39, 39, -1); // bike 2
	CreateVehicle(510, -2432.6870, 320.9364, 34.7610, 240.0000, 16, 16, -1); // bike 3
	CreateVehicle(510, -2432.2620, 321.6999, 34.7566, 240.0000, 6, 6, -1); // bike 4
	CreateVehicle(510, -2431.7371, 322.6430, 34.7798, 240.0000, 28, 28, -1); // bike 5
	CreateVehicle(510, -2431.1504, 323.7235, 34.7716, 240.0000, 2, 2, -1); // bike 6
	CreateVehicle(510, -2416.8005, 348.5500, 34.7781, 240.0000, 46, 46, -1); // bike 7
	CreateVehicle(510, -2416.1936, 349.4323, 34.7724, 240.0000, 43, 43, -1); // bike 8
	CreateVehicle(510, -2415.5227, 350.2519, 34.7586, 240.0000, 39, 39, -1); // bike 9
	CreateVehicle(510, -2414.9409, 351.0704, 34.7711, 240.0000, 6, 6, -1); // bike 10
	CreateVehicle(510, -2414.1025, 351.9817, 34.7546, 240.0000, 28, 28, -1); // bike 11
	CreateVehicle(510, -2413.4233, 352.8137, 34.7543, 240.0000, 16, 16, -1); // bike 12

	//Elementos estaticos
	//Banco subsidios pickup
	CreateDynamicPickup(1274, 23, -852.4701,1633.2644,1004.7500);
	CreateDynamicPickup(1274, 23, -852.2942,1624.8451,1004.7500);
	//Banco subsidios texto
	CreateDynamic3DTextLabel("Puedes recibir el{72B1FF}/subsidio {FFFFFF}por parte del gobierno.", 0xFFFFFFE8, -852.2942,1624.8451,1004.7500, 5.0);
	CreateDynamic3DTextLabel("Puedes recibir el{72B1FF}/subsidio {FFFFFF}por parte del gobierno.", 0xFFFFFFE8, -852.4701,1633.2644,1004.7500, 5.0);

    for (new i = 0; i < 24; i ++)
	{
	    PrisonData[prisonCellOpened][i] = true;
		SetDynamicObjectPos(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1] + 1.6, PrisonCells[i][2]);
	}
	DisableInteriorEnterExits();
	EnableStuntBonusForAll(0);

	SetNameTagDrawDistance(10.0);
	ShowPlayerMarkers(0);

	UpdateTime();

	SetTimer("PlayerCheck", 1000, true);
	SetTimer("FuelUpdate", 50000, true);
	SetTimer("RefuelCheck", 500, true);
	SetTimer("LotteryUpdate", 2700000, true);
	SetTimer("MinuteCheck", 60000, true);
	SetTimer("WeatherRotator", 2400000, true);
	SetTimer("RandomFire", 2400000, true);
	SetTimer("MensajeAutomatico", 600000, true);
	return 1;
}

forward WeatherRotator();
public WeatherRotator()
{
	new index = random(sizeof(g_aWeatherRotations));

	SetWeather(g_aWeatherRotations[index]);
}

forward LotteryUpdate();
public LotteryUpdate()
{
	new
		number = random(60) + 1,
		jackpot = random(2000) + 1000;

	foreach (new i : Player)
	{
	    if(PlayerData[i][pLotteryB] == 1)
	    {
			if (PlayerData[i][pLottery] == number)
			{
				GiveMoney(i, jackpot);
				SendServerMessage(i, "Has ganado la loteria, el bote es de %s!", FormatNumber(jackpot));
			}
			else
			{
		    	SendClientMessage(i, COLOR_WHITE, "[LOTERIA]: No has ganado el sorteo de la lotería esta vez.");
			}
			PlayerData[i][pLottery] = 0;
			PlayerData[i][pLotteryB] = 0;
		}
	}
	return 1;
}

public OnPlayerRequestClass(playerid, classid)
{
    if (IsPlayerNPC(playerid))
	    return 1;

	if (!PlayerData[playerid][pAccount] && !PlayerData[playerid][pKicked])
	{
	    new
	        time[3];

        gettime(time[0], time[1], time[2]);
		SetPlayerTime(playerid, time[0], time[1]);

	    PlayerData[playerid][pAccount] = 1;
	    TogglePlayerSpectating(playerid, 1);

		SetPlayerColor(playerid, DEFAULT_COLOR);
		SetTimerEx("AccountCheck", 400, false, "d", playerid); // 400 ms
	}
	return 1;
}

public OnPlayerSpawn(playerid)
{
    // Skill levels
	SetPlayerSkillLevel(playerid, WEAPONSKILL_PISTOL, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_MICRO_UZI, 0);
	SetPlayerSkillLevel(playerid, WEAPONSKILL_SPAS12_SHOTGUN, 0);

	if (PlayerData[playerid][pHUD])
	{
	 	TextDrawShowForPlayer(playerid, gServerTextdraws[0]);
		TextDrawShowForPlayer(playerid, gServerTextdraws[1]);
	}
    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);
    Streamer_ToggleIdleUpdate(playerid, true);

	PlayerData[playerid][pKilled] = 0;

    if (PlayerData[playerid][pBleeding])
	{
 		PlayerData[playerid][pBleedTime] = 1;
   	}
	if (PlayerData[playerid][pJailTime] > 0)
	{
	    if (PlayerData[playerid][pPrisoned])
	    {
	        SetPlayerInPrison(playerid);
	    }
	    else
	    {
		    SetPlayerPos(playerid, 197.6346, 175.3765, 1003.0234);
		    SetPlayerInterior(playerid, 3);

		    SetPlayerVirtualWorld(playerid, (playerid + 100));
		    SetPlayerFacingAngle(playerid, 0.0);

		    SetCameraBehindPlayer(playerid);
		}
		ResetWeapons(playerid);

		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][70]);
	    SendServerMessage(playerid, "Tienes %d segundos de carcel restantes.", PlayerData[playerid][pJailTime]);
	}
	else if (PlayerData[playerid][pHospital] != -1)
	{
	    PlayerData[playerid][pHospitalTime] = 0;

	    PlayerData[playerid][pHunger] = 50;
	    PlayerData[playerid][pThirst] = 50;

		SetPlayerInterior(playerid, 3);
		SetPlayerVirtualWorld(playerid, playerid + 100);

		SetPlayerPos(playerid, -211.0370, -1738.6848, 676.7153);
		SetPlayerFacingAngle(playerid, 82.0000);

		SetPlayerCameraPos(playerid, -214.236602, -1738.812133, 676.648132);
		SetPlayerCameraLookAt(playerid, -203.072738, -1738.656127, 675.768737);

        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);
        ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~w~Recuperandose... 15", 1000, 3);
		TogglePlayerControllable(playerid, 0);
	}
	else if (!PlayerData[playerid][pCreated])
	{
    	TogglePlayerControllable(playerid, 0);
		SetPlayerPos(playerid, 216.8005, -99.8691, 1005.2578);
    	SetPlayerFacingAngle(playerid, 90.0000);

  		SetPlayerInterior(playerid, 15);
		SelectTextDraw(playerid, -1);

		for (new i = 23; i < 34; i ++) {
		    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
	}
	else
	{
	    SetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

	    SetPlayerInterior(playerid, PlayerData[playerid][pInterior]);
	    SetPlayerVirtualWorld(playerid, PlayerData[playerid][pWorld]);

		SetCameraBehindPlayer(playerid);
		SetAccessories(playerid);

        if (PlayerData[playerid][pWorld] == PRISON_WORLD)
		{
		    SetPlayerPosEx(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		}
		else
		{
		    if(PlayerData[playerid][pSpawnPoint] == 3 && PlayerData[playerid][pInjured] == 0)
			{
				SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
			}
		}
		if (PlayerData[playerid][pInjured])
		{
		    ShowHungerTextdraw(playerid, 0);
		    SetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);

			TextDrawShowForPlayer(playerid, gServerTextdraws[2]);
			SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Estas herido y necesitas asistencia medica (/llamar 911).");

			ApplyAnimation(playerid, "CRACK", "null", 4.0, 0, 0, 0, 1, 0, 1);
			ApplyAnimation(playerid, "CRACK", "crckdeth4", 4.0, 0, 0, 0, 1, 0, 1);
		}
		else
		{
			SetWeapons(playerid);
			ShowHungerTextdraw(playerid, 1);

			SetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
			SetPlayerArmour(playerid, PlayerData[playerid][pArmorStatus]);
		}
	}
	return 1;
}

public OnPlayerCommandReceived(playerid, cmdtext[])
{
	if (!SQL_IsLogged(playerid) || (PlayerData[playerid][pTutorial] > 0 || PlayerData[playerid][pTutorialStage] > 0 || PlayerData[playerid][pKilled] > 0 || PlayerData[playerid][pHospital] != -1))
	    return 0;

	if (PlayerData[playerid][pMuted] && strfind(cmdtext, "/unmute", true) != 0)
 	{
	    SendErrorMessage(playerid, "Has sido silenciado.");
	    return 0;
	}
	if (PlayerData[playerid][pCommandCount] < 6)
	{
	    PlayerData[playerid][pCommandCount]++;

	    if (PlayerData[playerid][pCommandCount] == 6) {
	        PlayerData[playerid][pCommandCount] = 0;

	        PlayerData[playerid][pMuted] = 1;
	        PlayerData[playerid][pMuteTime] = 5;

	        SendServerMessage(playerid, "Has sido silenciado por spam (5 segundos).");
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ha sido silenciado automaticamente por spam.", ReturnName(playerid, 0));
	        return 0;
		}
	}
	return 1;
}

public OnPlayerText(playerid, text[])
{
	if ((!PlayerData[playerid][pLogged] && !PlayerData[playerid][pCharacter]) || PlayerData[playerid][pTutorial] > 0 || PlayerData[playerid][pTutorialStage] > 0 || PlayerData[playerid][pHospital] != -1)
	    return 0;

	if (PlayerData[playerid][pMuted])
	{
	    SendErrorMessage(playerid, "Has sido silenciado.");
	    return 0;
	}
	if (PlayerData[playerid][pSpamCount] < 5)
	{
	    PlayerData[playerid][pSpamCount]++;

	    if (PlayerData[playerid][pSpamCount] == 5) {
	        PlayerData[playerid][pSpamCount] = 0;

	        PlayerData[playerid][pMuted] = 1;
	        PlayerData[playerid][pMuteTime] = 5;

	        SendServerMessage(playerid, "Has sido silenciado por spam (5 segundos).");
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ha sido silenciado automaticamente por spam.", ReturnName(playerid, 0));
	        return 0;
		}
	}
	if (PlayerData[playerid][pNewsGuest] != INVALID_PLAYER_ID && GetFactionType(PlayerData[playerid][pNewsGuest]) == FACTION_NEWS && IsPlayerInAnyVehicle(playerid) && IsNewsVehicle(GetPlayerVehicleID(playerid)))
	{
	    foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
	  		SendClientMessageEx(i, COLOR_LIGHTGREEN, "[LSTV] Invitado %s: %s", ReturnName(playerid, 0), text);
		}
	   	return 0;
   	}
	else
	{
		new
			targetid = PlayerData[playerid][pCallLine];

		//SetPlayerChatBubble(playerid, text, COLOR_WHITE, 10.0, 6000);

        if (IsPlayerInAnyVehicle(playerid) && IsWindowedVehicle(GetPlayerVehicleID(playerid)) && !CoreVehicles[GetPlayerVehicleID(playerid)][vehWindowsDown])
			SendVehicleMessage(GetPlayerVehicleID(playerid), 0xBBFFEEFF, "[Vehiculo] %s dice: %s", ReturnName(playerid, 0), text);

		else
		{
		    if (!IsPlayerOnPhone(playerid))
				SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s dice: %s", ReturnName(playerid, 0), text);

			else SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "(Telefono) %s dice: %s", ReturnName(playerid, 0), text);

			if (!IsPlayerInAnyVehicle(playerid) && !PlayerData[playerid][pInjured] && !PlayerData[playerid][pLoopAnim]) {

				SetTimerEx("StopChatting", strlen(text) * 100, false, "d", playerid);
			}
		}
		switch (PlayerData[playerid][pEmergency])
		{
			case 1:
			{
				if (!strcmp(text, "policia", true))
				{
				    PlayerData[playerid][pEmergency] = 2;
				    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[OPERADORA]:{FFFFFF} Estas hablando con la policia, por favor, describa el delito.");
				}
				else if (!strcmp(text, "medicos", true))
				{
				    PlayerData[playerid][pEmergency] = 3;
				    SendClientMessage(playerid, COLOR_HOSPITAL, "[operadora]:{FFFFFF} Estas hablando con el hospital, hablenos de su emergencia.");
				}
				else SendClientMessage(playerid, COLOR_LIGHTBLUE, "[operadora]:{FFFFFF} Disculpe, no entendi lo que dijo. Necesitas \"policia\" o \"medicos\"?");
			}
			case 2:
			{
   				SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "Llamada 911: %s (%s)", ReturnName(playerid, 0), GetPlayerLocation(playerid));
        		SendFactionMessageEx(FACTION_POLICE, COLOR_RADIO, "Descripcion: %s", text);

			    SendClientMessage(playerid, COLOR_LIGHTBLUE, "[operadora]:{FFFFFF} Hemos alertado a todas las unidades en el area.");
			    cmd_colgar(playerid, "\1");

			    SetFactionMarker(playerid, FACTION_POLICE, 0x00D700FF);
			}
			case 3:
			{
			    SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "Llamada 911: %s (%s)", ReturnName(playerid, 0), GetPlayerLocation(playerid));
       			SendFactionMessageEx(FACTION_MEDIC, COLOR_HOSPITAL, "Descripcion: %s", text);

			    SendClientMessage(playerid, COLOR_HOSPITAL, "[operadora]:{FFFFFF} Hemos alertado a todas las unidades en el area.");
			    cmd_colgar(playerid, "\1");

			    SetFactionMarker(playerid, FACTION_MEDIC, 0x00D700FF);
			}
		}
		switch (PlayerData[playerid][pPlaceAd])
		{
		    case 1:
		    {
			    if (!strcmp(text, "si", true))
		        {
		            if (GetMoney(playerid) < 500)
				    {
    	                SendClientMessage(playerid, COLOR_CYAN, "[operadoraA]:{FFFFFF} No tienes dinero suficiente para hacer publicidad.");
					    cmd_colgar(playerid, "\1");
					}
					else
					{
						PlayerData[playerid][pPlaceAd] = 2;
						SendClientMessage(playerid, COLOR_CYAN, "[operadora]:{FFFFFF} Por favor, especifique su anuncio y lo anunciaremos..");
					}
				}
			}
			case 2:
			{
			    if (GetMoney(playerid) < 500)
			    {
                    SendClientMessage(playerid, COLOR_CYAN, "[operadora]:{FFFFFF} No tienes dinero suficiente para hacer publicidad.");
				    cmd_colgar(playerid, "\1");
				}
				else
				{
				    GiveMoney(playerid, -500);
				    SetTimerEx("Advertise", 3000, false, "d", playerid);

                    PlayerData[playerid][pAdTime] = 120;
				    strpack(PlayerData[playerid][pAdvertise], text, 128 char);

        	        SendClientMessage(playerid, COLOR_CYAN, "[operadora]:{FFFFFF} Su anuncio será publicado en breve.");
				    cmd_colgar(playerid, "\1");
				}
			}
		}
		if (targetid != INVALID_PLAYER_ID && !PlayerData[playerid][pIncomingCall])
		{
			SendClientMessageEx(targetid, COLOR_YELLOW, "(Telefono) %s dice: %s", ReturnName(playerid, 0), text);
		}
	}
	return 0;
}

public OnPlayerEditDynamicObject(playerid, objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	if (response == EDIT_RESPONSE_FINAL)
	{
	    if (PlayerData[playerid][pEditGraffiti] != -1 && GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiExists])
	    {
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][0] = x;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][1] = y;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][2] = z;
			GraffitiData[PlayerData[playerid][pEditGraffiti]][graffitiPos][3] = rz;

			Graffiti_Refresh(PlayerData[playerid][pEditGraffiti]);
			Graffiti_Save(PlayerData[playerid][pEditGraffiti]);
		}
	    else if (PlayerData[playerid][pEditRack] != -1 && RackData[PlayerData[playerid][pEditRack]][rackExists])
	    {
			RackData[PlayerData[playerid][pEditRack]][rackPos][0] = x;
			RackData[PlayerData[playerid][pEditRack]][rackPos][1] = y;
			RackData[PlayerData[playerid][pEditRack]][rackPos][2] = z;
			RackData[PlayerData[playerid][pEditRack]][rackPos][3] = rz;

			Rack_Refresh(PlayerData[playerid][pEditRack]);
			Rack_Save(PlayerData[playerid][pEditRack]);
		}
	    else if (PlayerData[playerid][pEditPump] != -1 && PumpData[PlayerData[playerid][pEditPump]][pumpExists])
	    {
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][0] = x;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][1] = y;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][2] = z;
			PumpData[PlayerData[playerid][pEditPump]][pumpPos][3] = rz;

			Pump_Refresh(PlayerData[playerid][pEditPump]);
			Pump_Save(PlayerData[playerid][pEditPump]);

			SendServerMessage(playerid, "Has cambiado la posicion del dispenser ID: %d.", PlayerData[playerid][pEditPump]);
	    }
	    else if (PlayerData[playerid][pEditFurniture] != -1 && FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureExists])
	    {
	        new id = House_Inside(playerid);

	        if (id != -1 && House_IsOwner(playerid, id))
			{
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][0] = x;
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][1] = y;
			    FurnitureData[PlayerData[playerid][pEditFurniture]][furniturePos][2] = z;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][0] = rx;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][1] = ry;
                FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureRot][2] = rz;

				Furniture_Refresh(PlayerData[playerid][pEditFurniture]);
				Furniture_Save(PlayerData[playerid][pEditFurniture]);

				SendServerMessage(playerid, "Has cambiado la posicion del objeto \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
			}
	    }
	    else if (PlayerData[playerid][pEditGate] != -1 && GateData[PlayerData[playerid][pEditGate]][gateExists])
	    {
	        switch (PlayerData[playerid][pEditType])
	        {
	            case 1:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gatePos][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gatePos][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SendServerMessage(playerid, "Has cambiado la posicion del porton ID: %d.", id);
				}
				case 2:
	            {
	                new id = PlayerData[playerid][pEditGate];

	                GateData[PlayerData[playerid][pEditGate]][gateMove][0] = x;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][1] = y;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][2] = z;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][3] = rx;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][4] = ry;
	                GateData[PlayerData[playerid][pEditGate]][gateMove][5] = rz;

	                DestroyDynamicObject(GateData[id][gateObject]);
					GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

					Gate_Save(id);
                    SendServerMessage(playerid, "Has cambiado la posicion abierta del porton ID: %d.", id);
				}
			}
		}
	}
	if (response == EDIT_RESPONSE_FINAL || response == EDIT_RESPONSE_CANCEL)
	{
	    if (PlayerData[playerid][pEditFurniture] != -1)
			Furniture_Refresh(PlayerData[playerid][pEditFurniture]);

	    if (PlayerData[playerid][pEditPump] != -1)
			Pump_Refresh(PlayerData[playerid][pEditPump]);

        if (PlayerData[playerid][pEditRack] != -1)
			Rack_Refresh(PlayerData[playerid][pEditRack]);

        if (PlayerData[playerid][pEditGraffiti] != -1)
			Graffiti_Refresh(PlayerData[playerid][pEditGraffiti]);

	    PlayerData[playerid][pEditType] = 0;
	    PlayerData[playerid][pEditGate] = -1;
		PlayerData[playerid][pEditPump] = -1;
		PlayerData[playerid][pGasStation] = -1;
		PlayerData[playerid][pEditFurniture] = -1;
		PlayerData[playerid][pEditGraffiti] = -1;
	}
	return 1;
}

public OnPlayerEditAttachedObject(playerid, response, index, modelid, boneid, Float:fOffsetX, Float:fOffsetY, Float:fOffsetZ, Float:fRotX, Float:fRotY, Float:fRotZ, Float:fScaleX, Float:fScaleY, Float:fScaleZ)
{
	if (response)
	{
		if (PlayerData[playerid][pEditType] != 0)
 		{
 		    AccessoryData[playerid][PlayerData[playerid][pEditType]-1][0] = fOffsetX;
       		AccessoryData[playerid][PlayerData[playerid][pEditType]-1][1] = fOffsetY;
         	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][2] = fOffsetZ;

          	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][3] = fRotX;
           	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][4] = fRotY;
           	AccessoryData[playerid][PlayerData[playerid][pEditType]-1][5] = fRotZ;

            AccessoryData[playerid][PlayerData[playerid][pEditType]-1][6] = (fScaleX > 3.0) ? (3.0) : (fScaleX);
            AccessoryData[playerid][PlayerData[playerid][pEditType]-1][7] = (fScaleY > 3.0) ? (3.0) : (fScaleY);
			AccessoryData[playerid][PlayerData[playerid][pEditType]-1][8] = (fScaleZ > 3.0) ? (3.0) : (fScaleZ);

			switch (PlayerData[playerid][pEditType])
			{
	  			case 1:
	    		{
		            PlayerData[playerid][pEditType] = 0;
		            PlayerData[playerid][pGlasses] = modelid;

					if (!PlayerData[playerid][pCreated])
					{
		                for (new i = 23; i < 34; i ++) {
				    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
		            SendServerMessage(playerid, "Has editado tus gafas.");
				}
				case 2:
	    		{
	                PlayerData[playerid][pEditType] = 0;
		            PlayerData[playerid][pHat] = modelid;

	                if (!PlayerData[playerid][pCreated])
					{
		                for (new i = 23; i < 34; i ++) {
				    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
		            SendServerMessage(playerid, "Has editado tu sombrero.");
				}
				case 3:
	    		{
	                PlayerData[playerid][pEditType] = 0;
		            PlayerData[playerid][pBandana] = modelid;

                 	if (!PlayerData[playerid][pCreated])
					{
		                for (new i = 23; i < 34; i ++) {
				    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
						}
						SelectTextDraw(playerid, -1);
						TogglePlayerControllable(playerid, 0);
					}
		            SendServerMessage(playerid, "Has editado tu bandana.");
				}
			}
	    }
	}
	else
	{
	    if (!PlayerData[playerid][pCreated])
		{
  			for (new i = 23; i < 34; i ++) {
			  	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);

			TogglePlayerControllable(playerid, 0);
			RemovePlayerAttachedObject(playerid, PlayerData[playerid][pEditType] - 1);
		}
	}
	return 1;
}

public OnModelSelectionResponse(playerid, extraid, index, modelid, response)
{
	if ((extraid >= MODEL_SELECTION_GLASSES && extraid <= MODEL_SELECTION_BANDANAS) && !PlayerData[playerid][pCreated] && !response)
	{
	    for (new i = 23; i < 34; i ++) {
    		PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		SetTimerEx("SelectTD", 100, false, "d", playerid);
		return 1;
	}
	if ((extraid == MODEL_SELECTION_INVENTORY && response) && InventoryData[playerid][index][invExists])
	{
	    new
	        name[48],
			id = -1,
			backpack = GetPlayerBackpack(playerid);

		strunpack(name, InventoryData[playerid][index][invItem]);
	    PlayerData[playerid][pInventoryItem] = index;

		switch (PlayerData[playerid][pStorageSelect])
		{
		    case 1:
		    {
		    	if ((id = House_Inside(playerid)) != -1 && House_IsOwner(playerid, id))
				{
					if (InventoryData[playerid][index][invQuantity] == 1)
					{
					    if (!strcmp(name, "Backpack") && GetHouseBackpack(id) != -1)
					        return SendErrorMessage(playerid, "Solo puedes dejar una mochila en tu casa.");

		        		House_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
		        		Inventory_Remove(playerid, name);

		        		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha guardado un/a \"%s\" en el almacenamiento de su casa.", ReturnName(playerid, 0), name);
				 		House_ShowItems(playerid, id);

				 		if (!strcmp(name, "Backpack") && backpack != -1)
						{
					        BackpackData[backpack][backpackPlayer] = 0;
					        BackpackData[backpack][backpackHouse] = HouseData[id][houseID];

							Backpack_Save(backpack);
							SetAccessories(playerid);
					    }
		        	}
		        	else Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "House Deposit", "Item: %s (Cantidad: %d)\n\nPor favor escribe la cantidad que quieres guardar de este item:", "Guardar", "Atras", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			case 2:
		    {
		    	if ((id = Car_Nearest(playerid)) != -1 && !CarData[id][carLocked])
				{
					if (InventoryData[playerid][index][invQuantity] == 1)
					{
					    if (!strcmp(name, "Backpack") && GetVehicleBackpack(id) != -1)
					        return SendErrorMessage(playerid, "Solo puedes guardar una mochila en tu maletero.");

		        		Car_AddItem(id, name, InventoryData[playerid][index][invModel], 1);
		        		Inventory_Remove(playerid, name);

		        		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha guardado un/a \"%s\" en el maletero.", ReturnName(playerid, 0), name);
				 		Car_ShowTrunk(playerid, id);

				 		if (!strcmp(name, "Backpack") && backpack != -1)
						{
					        BackpackData[backpack][backpackPlayer] = 0;
					        BackpackData[backpack][backpackVehicle] = CarData[id][carID];

							Backpack_Save(backpack);
							SetAccessories(playerid);
					    }
		        	}
		        	else Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Maletero", "Item: %s (Cantidad: %d)\n\nPor favor escribe la cantidad que quieres guardar de este item:", "Store", "Back", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			case 3:
		    {
		        if (!strcmp(name, "Backpack"))
		            return SendErrorMessage(playerid, "Este objeto no puede ser guardado.");

		    	if (InventoryData[playerid][index][invQuantity] == 1)
				{
					Backpack_Add(GetPlayerBackpack(playerid), name, InventoryData[playerid][index][invModel], 1);
   					Inventory_Remove(playerid, name);

					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha guardado un/a \"%s\" en su mochila.", ReturnName(playerid, 0), name);
					Backpack_Open(playerid);
				}
   				else
	   			{
				   	Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Backpack Deposit", "Item: %s (Cantidad: %d)\n\nPlease enter the quantity that you wish to store for this item:", "Store", "Back", name, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
				}
				PlayerData[playerid][pStorageSelect] = 0;
			}
			default:
			{
			    if (PlayerData[playerid][pTutorialStage] == 3 && !strcmp(name, "Demo Soda", true))
			    {
			        SendClientMessage(playerid, COLOR_SERVER, "Has click en la primer opcion para usar el objeto.");
			    }
		    	format(name, sizeof(name), "%s (%d)", name, InventoryData[playerid][index][invQuantity]);

		    	if (Garbage_Nearest(playerid) != -1) {
					Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Usar Objeto\nEntregar Objeto\nTirar Objeto", "Seleccionar", "Cancelar");
				}
				else {
				    Dialog_Show(playerid, Inventory, DIALOG_STYLE_LIST, name, "Usar Objeto\nEntregar Objeto\nTirar Objeto", "Seleccionar", "Cancelar");
				}
			}
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_GLASSES))
	{
	    if (modelid == 19300)
	    {
            for (new i = 23; i < 34; i ++) {
		    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pGlasses] = 0;

			RemovePlayerAttachedObject(playerid, 0);
			SendServerMessage(playerid, "Has eliminado tu gafas.");
	    }
	    else
	    {
	        PlayerData[playerid][pEditType] = 1;
	        TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 0, modelid, 2, 0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000);
			EditAttachedObject(playerid, 0);
		}
	}
    if ((response) && (extraid == MODEL_SELECTION_HATS))
	{
	    if (modelid == 19300)
	    {
			for (new i = 23; i < 34; i ++) {
		    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pHat] = 0;

			RemovePlayerAttachedObject(playerid, 1);
			SendServerMessage(playerid, "Has eliminado tu sombrero.");
	    }
	    else
	    {
		    PlayerData[playerid][pEditType] = 2;
		    TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 1, modelid, 2, 0.1565, 0.0273, -0.0002, -7.9245, -1.3224, 15.0999);
			EditAttachedObject(playerid, 1);
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_BANDANAS))
	{
	    if (modelid == 19300)
	    {
            for (new i = 23; i < 34; i ++) {
		    	PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			SelectTextDraw(playerid, -1);
			PlayerData[playerid][pBandana] = 0;

			RemovePlayerAttachedObject(playerid, 2);
			SendServerMessage(playerid, "Has eliminado tu bandana.");
	    }
	    else
	    {
		    PlayerData[playerid][pEditType] = 3;
            TogglePlayerControllable(playerid, 1);

			SetPlayerAttachedObject(playerid, 2, modelid, 2, 0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000);
			EditAttachedObject(playerid, 2);
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_SKIN))
	{
	    PlayerData[playerid][pSkin] = modelid;

		SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], 1684.4392, 1771.6658, 10.8203, 270.0000, 0, 0, 0, 0, 0, 0);
		TogglePlayerSpectating(playerid, 0);
	}
	if ((response) && (extraid == MODEL_SELECTION_CLOTHES))
	{
	    new
			bizid = -1,
			price;

	    if ((bizid = Business_Inside(playerid)) == -1 || BusinessData[bizid][bizType] != 3)
	        return 0;

		if (BusinessData[bizid][bizProducts] < 1)
		    return SendErrorMessage(playerid, "Este negocio no tiene stock.");

	    price = BusinessData[bizid][bizPrices][PlayerData[playerid][pClothesType] - 1];

	    if (GetMoney(playerid) < price)
	        return SendErrorMessage(playerid, "No tienes suficiente dinero.");

		GiveMoney(playerid, -price);

		BusinessData[bizid][bizProducts]--;
		BusinessData[bizid][bizVault] += Tax_Percent(price);

		Business_Save(bizid);
		Tax_AddPercent(price);

	    switch (PlayerData[playerid][pClothesType])
	    {
	        case 1:
	        {
	            PlayerData[playerid][pSkin] = modelid;
	            SetPlayerSkin(playerid, modelid);

	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pago %s por algo de ropa.", ReturnName(playerid, 0), FormatNumber(price));
			}
			case 2:
			{
			    PlayerData[playerid][pEditType] = 1;
                PlayerData[playerid][pGlasses] = modelid;

			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pago %s por unos lentes.", ReturnName(playerid, 0), FormatNumber(price));
				RemovePlayerAttachedObject(playerid, 0);

                SetPlayerAttachedObject(playerid, 0, modelid, 2, 0.094214, 0.044044, -0.007274, 89.675476, 83.514060, 0.000000);
				EditAttachedObject(playerid, 0);
			}
			case 3:
			{
			    PlayerData[playerid][pHat] = modelid;
			    PlayerData[playerid][pEditType] = 2;

			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pago %s por un sombrero/gorro.", ReturnName(playerid, 0), FormatNumber(price));
                RemovePlayerAttachedObject(playerid, 1);

				SetPlayerAttachedObject(playerid, 1, modelid, 2, 0.1565, 0.0273, -0.0002, -7.9245, -1.3224, 15.0999);
				EditAttachedObject(playerid, 1);
			}
			case 4:
			{
			    PlayerData[playerid][pBandana] = modelid;
			    PlayerData[playerid][pEditType] = 3;

			    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pago %s por una bandana.", ReturnName(playerid, 0), FormatNumber(price));
			    RemovePlayerAttachedObject(playerid, 2);

			    SetPlayerAttachedObject(playerid, 2, modelid, 2, 0.099553, 0.044356, -0.000285, 89.675476, 84.277572, 0.000000);
				EditAttachedObject(playerid, 2);
			}
	    }
	}
	if ((response) && (extraid == MODEL_SELECTION_DEALER))
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
 	    {
	        if (!DealershipCars[id][index][vehModel])
	        {
	            Dialog_Show(playerid, AddVehicle, DIALOG_STYLE_LIST, "Agregar Vehiculo", "Agregar por Nombre\nAgregar por Imagen", "Seleccionar", "Cancelar");
			}
			else
			{
			    PlayerData[playerid][pDealerCar] = index;
			    Dialog_Show(playerid, CarOptions, DIALOG_STYLE_LIST, "Concesionario", "Precio (%s)\nRemover Vehiculo", "Seleccionar", "Cancelar", FormatNumber(DealershipCars[id][index][vehPrice]));
			}
	    }
	}
	if ((response) && (extraid == MODEL_SELECTION_DEALER_ADD))
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
	        for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
			{
				if (DealershipCars[id][i][vehModel] == modelid)
	            	return SendErrorMessage(playerid, "Este vehiculo ya se vende en este concesionario.");
			}
			PlayerData[playerid][pDealerCar] = modelid;
			Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Colocar Precio", "Coloca el precio para el '%s':", "Colocar", "Cancelar", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_BUY_CAR))
	{
	    new id = Business_Inside(playerid);

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (!DealershipCars[id][index][vehModel])
		        return SendErrorMessage(playerid, "No hay ningun vehiculo en ese slot.");

		    if (GetMoney(playerid) < DealershipCars[id][index][vehPrice])
	    	    return SendErrorMessage(playerid, "No puedes pagar este vehiculo (%s).", FormatNumber(DealershipCars[id][index][vehPrice]));

			PlayerData[playerid][pDealerCar] = index;
			Dialog_Show(playerid, ConfirmCarBuy, DIALOG_STYLE_MSGBOX, "Confirmar Compra", "Estas seguro que quieres comprar este '%s'?\n\nNota: Este vehiculo cuesta %s en este concesionario.", "Si", "No", ReturnVehicleModelName(modelid), FormatNumber(DealershipCars[id][index][vehPrice]));
		}
	}
	if ((response) && (extraid == MODEL_SELECTION_FURNITURE))
	{
        new
			id = Business_Inside(playerid),
			type = PlayerData[playerid][pFurnitureType],
			price;

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 7)
	    {
	        price = BusinessData[id][bizPrices][type];

	        if (GetMoney(playerid) < price)
	            return SendErrorMessage(playerid, "No tienes suficiente dinero para realizar esta compra.");

			if (BusinessData[id][bizProducts] < 1)
		    	return SendErrorMessage(playerid, "Este negocio no tiene stock.");

			new item = Inventory_Add(playerid, GetFurnitureNameByModel(modelid), modelid);

            if (item == -1)
   	        	return SendErrorMessage(playerid, "No tienes espacio en tu inventario.");

			GiveMoney(playerid, -price);
			SendServerMessage(playerid, "Has comprado un/a \"%s\" por %s.", GetFurnitureNameByModel(modelid), FormatNumber(price));

			BusinessData[id][bizProducts]--;
			BusinessData[id][bizVault] += Tax_Percent(price);

			Business_Save(id);
			Tax_AddPercent(price);
	    }
	}
	if ((response) && (extraid == MODEL_SELECTION_COLOR))
	{
	    new vehicleid = GetNearestVehicle(playerid);

        if (vehicleid == INVALID_VEHICLE_ID)
		    return SendErrorMessage(playerid, "No estas cerca de ningun vehiculo.");

		if (!Inventory_HasItem(playerid, "Bote de Spray"))
		    return SendErrorMessage(playerid, "No tienes ningun bote de spray.");

	    ApplyAnimation(playerid, "GRAFFITI", "null", 4.0, 0, 0, 0, 0, 0, 0);
		ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);
        ApplyAnimation(playerid, "GRAFFITI", "spraycan_fire", 4.0, 1, 0, 0, 0, 0, 1);

		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Pintando vehiculo...", 3000, 3);
		SetTimerEx("ResprayCar", 3000, false, "ddd", playerid, vehicleid, modelid);
	}
	if ((response) && (extraid == MODEL_SELECTION_SKINS))
	{
	    Dialog_Show(playerid, FactionSkin, DIALOG_STYLE_LIST, "Editar Skin", "Agregar por ID\nAgregar por Imagen\nVaciar Slot", "Seleccionar", "Cancelar");
	    PlayerData[playerid][pSelectedSlot] = index;
	}
	if ((response) && (extraid == MODEL_SELECTION_ADD_SKIN))
	{
	    FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = modelid;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		SendServerMessage(playerid, "Has cambiado el skin del slot %d a %d.", PlayerData[playerid][pSelectedSlot], modelid);
	}
	if ((response) && (extraid == MODEL_SELECTION_FACTION_SKIN))
	{
	    new factionid = PlayerData[playerid][pFaction];

		if (factionid == -1 || !IsNearFactionLocker(playerid))
	    	return 0;

		if (modelid == 19300)
		    return SendErrorMessage(playerid, "No hay ningun skin en ese slot.");

  		SetPlayerSkin(playerid, modelid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha cambiado su uniforme.", ReturnName(playerid, 0));
	}
	if ((response) && (extraid == MODEL_SELECTION_WHEELS))
	{
        new vehicleid = GetPlayerVehicleID(playerid);

		if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    	return 0;

	    AddComponent(vehicleid, modelid);
	    SendServerMessage(playerid, "Has cambiado las ruedas del vehiculo por las \"%s\".", GetWheelName(modelid));
	}
	return 1;
}

forward ResprayCar(playerid, vehicleid, color);
public ResprayCar(playerid, vehicleid, color)
{
	if (!PlayerData[playerid][pLogged] || GetNearestVehicle(playerid) != vehicleid)
	    return 0;

	Inventory_Remove(playerid, "Bote de Spray");
	ClearAnimations(playerid);

	SetVehicleColor(vehicleid, color, color);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s uso un bote de spray para pintar el %s.", ReturnName(playerid, 0), ReturnVehicleName(vehicleid));
	return 1;
}

public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
	if (clickedid == Text:INVALID_TEXT_DRAW)
	{
		if (!Dialog_Opened(playerid) && PlayerData[playerid][pDisplayStats] > 0)
	    {
	        if (PlayerData[playerid][pDisplayStats] == 2) {
	        	for (new i = 50; i < 58; i ++) PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    	}
		    else for (new i = 40; i < 50; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
			}
			CancelSelectTextDraw(playerid);
			PlayerData[playerid][pDisplayStats] = false;
		}
	}
	return 0;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if (!Dialog_Opened(playerid))
	{
		if (!PlayerData[playerid][pCharacter])
		{
			if (playertextid == PlayerData[playerid][pTextdraws][2])
				SelectCharacter(playerid, 1);

			else if (playertextid == PlayerData[playerid][pTextdraws][3])
				SelectCharacter(playerid, 2);

			else if (playertextid == PlayerData[playerid][pTextdraws][4])
				SelectCharacter(playerid, 3);
		}
		else
		{
		    if (playertextid == PlayerData[playerid][pTextdraws][78])
				SQL_LoadCharacter(playerid, PlayerData[playerid][pCharacter]);

			else if (playertextid == PlayerData[playerid][pTextdraws][79]) {
			    Dialog_Show(playerid, DeleteChar, DIALOG_STYLE_MSGBOX, "Eliminar Personaje", "Advertencia: Estas seguro que quieres eliminar el personaje \"%s\"?\n\nNo recuperaras ninguna de sus pertenencias.", "Confirmar", "Cancelar", PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][80]) {
			    ShowCharacterMenu(playerid);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][19]) {
			    CancelSelectTextDraw(playerid);
			    Dialog_Show(playerid, Gender, DIALOG_STYLE_LIST, "Genero", "Hombre\nMujer", "Seleccionar", "Cancelar");
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][20]) {
			    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Nacimiento", "Coloca la fecha de nacimiento (DD/MM/YYYY):", "Aceptar", "Cancelar");
			}
            else if (playertextid == PlayerData[playerid][pTextdraws][21]) {
			    Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Origen", "Escribe el lugar de nacimiento de tu personaje:", "Aceptar", "Cancelar");
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][22])
			{
			    if (!strlen(PlayerData[playerid][pBirthdate]))
			        return SendClientMessage(playerid, COLOR_LIGHTRED, "Server: Tienes que colocar una fecha de nacimiento.");

				else if (!strlen(PlayerData[playerid][pOrigin]))
				    return SendClientMessage(playerid, COLOR_LIGHTRED, "Server: Tienes que colocar un lugar de nacimiento.");

				else
				{
				    for (new i = 11; i < 23; i ++) {
						PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
					}
                    switch (PlayerData[playerid][pGender])
                    {
                        case 1:
                        	ShowModelSelectionMenu(playerid, "Seleccionar Skin", MODEL_SELECTION_SKIN, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);

						case 2:
                       		ShowModelSelectionMenu(playerid, "Seleccionar Skin", MODEL_SELECTION_SKIN, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
                    }
				}
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][26])
			{
			    static
					arrGlasses[] = {19300, 19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035};

				for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
				ShowModelSelectionMenu(playerid, "Lentes", MODEL_SELECTION_GLASSES, arrGlasses, sizeof(arrGlasses), 0.0, 0.0, 90.0);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][28])
			{
			    static
					arrHats[] = {19300, 18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951};

				for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
				ShowModelSelectionMenu(playerid, "Gorros", MODEL_SELECTION_HATS, arrHats, sizeof(arrHats), -20.0, -90.0, 0.0);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][30])
			{
			    static
					arrBandanas[] = {19300, 18911, 18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920};

				for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
				ShowModelSelectionMenu(playerid, "Bandanas", MODEL_SELECTION_BANDANAS, arrBandanas, sizeof(arrBandanas), 0.0, 0.0, 90.0);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][33])
			{
			    for (new i = 23; i < 34; i ++) {
				    PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
				}
			    for (new i = 0; i < 100; i ++) {
			        SendClientMessage(playerid, -1, "");
			    }
			    CancelSelectTextDraw(playerid);
			    TogglePlayerControllable(playerid, 1);

				PlayerData[playerid][pTutorialStage] = 1;
			    PlayerData[playerid][pTutorialObject] = CreatePlayerObject(playerid, 1543, -226.4219, 1408.4594, 26.7734, 0.0, 0.0, 0.0);

			    SetPlayerCheckpoint(playerid, -226.4219, 1408.4594, 27.7734, 0.5);
			    SendClientMessage(playerid, COLOR_SERVER, "Ve hacia el objeto y agachate (pulsando 'C').");

				SetPlayerPos(playerid, -226.2436, 1400.4767, 27.7656);
				SetPlayerFacingAngle(playerid, 0.0000);

				SetPlayerInterior(playerid, 18);
				SetPlayerVirtualWorld(playerid, (playerid + 2000));

				SetCameraBehindPlayer(playerid);
				ShowHungerTextdraw(playerid, 1);

				PlayerData[playerid][pThirst] = 80;
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][47])
			{
				new
					string[128];

				CancelSelectTextDraw(playerid);

				format(string, sizeof(string), "%s\n%s\n%s", (!PlayerCharacters[playerid][0][0]) ? ("Slot Vacío") : (PlayerCharacters[playerid][0]), (!PlayerCharacters[playerid][1][0]) ? ("Slot Vacío") : (PlayerCharacters[playerid][1]), (!PlayerCharacters[playerid][2][0]) ? ("Slot Vacío") : (PlayerCharacters[playerid][2]));
				Dialog_Show(playerid, CharList, DIALOG_STYLE_LIST, "Personajes", string, "Seleccionar", "Cancelar");
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][48])
			{
				for (new i = 40; i < 50; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;

				SetTimerEx("OpenInventory", 100, false, "d", playerid);
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][49])
			{
				for (new i = 40; i < 50; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;
			}
            else if (playertextid == PlayerData[playerid][pTextdraws][55])
			{
			    for (new i = 50; i < 58; i ++)
			        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

				CancelSelectTextDraw(playerid);
				PlayerData[playerid][pDisplayStats] = false;
			}
            else if (playertextid == PlayerData[playerid][pTextdraws][56])
			{
			    for (new i = 40; i < 58; i ++)
			    {
			        if (i >= 50)
				        PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);

					else if (i < 50)
					    PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
			    }
			    PlayerData[playerid][pDisplayStats] = true;
			}
			else if (playertextid == PlayerData[playerid][pTextdraws][57])
			{
			    if (PlayerData[playerid][pCharacterMenu] == PlayerData[playerid][pCharacter])
			        return SendErrorMessage(playerid, "Estas jugando con este personaje, no puedes borrarlo.");

                Dialog_Show(playerid, DeleteCharacter, DIALOG_STYLE_MSGBOX, "Eliminar Personaje", "Advertencia: Estas seguro que quieres eliminar el personaje \"%s\"?\n\nNo recuperaras ninguna de sus pertenencias.", "Confirmar", "Cancelar", PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
			}
		}
	}
	return 1;
}

forward ForkliftUpdate(playerid, vehid);
public ForkliftUpdate(playerid, vehid)
{
	if (PlayerData[playerid][pJob] != JOB_UNLOADER || GetVehicleModel(vehid) != 530 || !IsPlayerInWarehouse(playerid) || !PlayerData[playerid][pLoading]) {
	    return 0;
	}
	GetVehicleHealth(vehid, CoreVehicles[vehid][vehLoadHealth]);
    PlayerData[playerid][pLoading] = 0;

	CoreVehicles[vehid][vehLoadType] = 7;
	CoreVehicles[vehid][vehCrate] = CreateObject(3798, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

	AttachObjectToVehicle(CoreVehicles[vehid][vehCrate], vehid, 0.0, 1.2, -0.05, 0.0, 0.0, 0.0);
	SetPlayerCheckpoint(playerid, 1306.3438, -45.3100, 1001.0313, 1.5);

	TogglePlayerControllable(playerid, 1);
	SendServerMessage(playerid, "Lleva la caja al marcador.");
	return 1;
}

forward EfectoMarihuana(playerid);
public EfectoMarihuana(playerid)
{
	switch(random(6))
	{
		case 0: SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pierde la nocion del tiempo", ReturnName(playerid, 0));
		case 1: SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pierde la nocion del espacio", ReturnName(playerid, 0));
		case 2: SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s rie sin razon alguna", ReturnName(playerid, 0));
		case 3: SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s se queda mirando un punto fijo sin reaccionar", ReturnName(playerid, 0));
		case 4: SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s siente que todo le da vueltas", ReturnName(playerid, 0));
		case 5: SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s se queda mirando un punto fijo y siente que se despega del piso", ReturnName(playerid, 0));
	}
	PlayerData[playerid][pHunger] -= 5;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	if(!success) SendErrorMessage(playerid, "Comando desconocido. Usa /ayuda para ver los comandos disponibles.");
	return 1;
}
/*forward MarihuanaEstado(playerid);
public MarihuanaEstado(playerid)
{
	Update3DTextLabelText(estado[playerid], COLOR_GREY, "Estado: {FFFFFF}Ojos rojos medio cerrados");
	Attach3DTextLabelToPlayer(estado[playerid], playerid, 0.0, 0.0, 0.5);
}*/
forward MensajeAutomatico(playerid);
public MensajeAutomatico(playerid)
{
	switch(random(7))
	{
		case 0: SendClientMessageToAll(0xFFFFFFAA,"{40D3FF}[Servidor Info]{FFFFFF} Muchas gracias por pertenecer a {40D3FF}GreenLatin RP {FFFFFF}");
		case 1: SendClientMessageToAll(0xFFFFFFAA,"{40D3FF}[Servidor Info]{FFFFFF} ¿Alguien comete algún antirol? Usa {40D3FF} /reportar id razón");
		case 2: SendClientMessageToAll(0xFFFFFFAA,"{40D3FF}[Servidor Info]{FFFFFF} Recuerda leer el {40D3FF}/reglamento {FFFFFF}y revisar las {40D3FF}/faq");
		case 3: SendClientMessageToAll(0xFFFFFFAA,"{40D3FF}[Servidor Info]{FFFFFF} ¿Tenes alguna duda? Usa {40D3FF}/ayudame {FFFFFF}para pedir ayuda");
		case 4: SendClientMessageToAll(0xFFFFFFAA,"{40D3FF}[Servidor Info]{FFFFFF} ¿Encontraste un bug? ¿Tenes alguna sugerencia? dinos por nuestro discord o por el foro");
		case 5: SendClientMessageToAll(0xFFFFFFAA,"{40D3FF}[Servidor Info]{FFFFFF} Nuestra web oficial es {40D3FF}greenlatin.fun{FFFFFF} y nuestro foro {40D3FF}foro.greenlatin.fun");
		case 6: SendClientMessageToAll(0xFFFFFFAA,"{40D3FF}[Servidor Info]{FFFFFF} ¿Algo no te gusta? ¿Viste algo que deberiamos cambiar? Cuentanos por el foro");
		case 7: SendClientMessageToAll(0xFFFFFFAA,"{40D3FF}[Servidor Info]{FFFFFF} ¿Crees que el interior de tu casa esta mal? Lo podemos cambiar! Habla con un admin");
		case 8: SendClientMessageToAll(0xFFFFFFAA,"{40D3FF}[Servidor Info]{FFFFFF} ¿Viste algun precio muy alto o muy bajo? Si crees que deberiamos cambiarlo, hablanos!");
	}
	return 1;
}

stock ShowContacts(playerid)
{
	new
	    string[32 * MAX_CONTACTS],
		count = 0;

	string = "Agregar Contacto\n";

	for (new i = 0; i != MAX_CONTACTS; i ++) if (ContactData[playerid][i][contactExists]) {
	    format(string, sizeof(string), "%s%s - #%d\n", string, ContactData[playerid][i][contactName], ContactData[playerid][i][contactNumber]);

		ListedContacts[playerid][count++] = i;
	}
	Dialog_Show(playerid, Contacts, DIALOG_STYLE_LIST, "Contactos", string, "Seleccionar", "Atras");
	return 1;
}

stock GetPlayerID(name[], underscore = 1)
{
	foreach (new i : Player) if (!strcmp(ReturnName(i, underscore), name, true)) {
	    return i;
	}
	return INVALID_PLAYER_ID;
}

Dialog:ShowOnly(playerid, response, listitem, inputtext[]) {
	playerid = INVALID_PLAYER_ID;
	response = 0;
	listitem = 0;
	inputtext[0] = '\0';
}
Dialog:Billboards(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new string[500], szString[100];
	    if(BillBoardData[listitem][bbExists] >= 1)
		{
		    if(!BillBoardData[listitem][bbOwner])
		    {
				BillboardCheckout[playerid] = listitem;
		        format(szString, sizeof(szString), "{FFFFFF}Alquiler de Publicidad - {FF8000}%i{FFFFFF} - {FF8000}$%d", listitem, BillBoardData[listitem][bbPrice]);
		        format(string, sizeof(string), "{FFFFFF}Nombre de Publicidad: {FF8000}%s{FFFFFF} ({FF8000}%i{FFFFFF})\nPrecio de Publicidad: {FF8000}$%d{FFFFFF}\n\n\n((Los alquileres son pagados en los paydays!))", BillBoardData[listitem][bbName], listitem, BillBoardData[listitem][bbPrice]);
		    	Dialog_Show(playerid, BillboardRent, DIALOG_STYLE_MSGBOX, szString, string, "Rent", "Cancel");
		    	return 1;
		    }
		    if(BillBoardData[listitem][bbOwner] == GetPlayerSQLID(playerid))
		    {
		    	Dialog_Show(playerid, MyBillboardMenu, DIALOG_STYLE_LIST, "Publicidad", "Editar Mensaje\nDejar Publicidad", "Aceptar", "Cancelar");
		    	return 1;
		    }
		    else
		    {
		        SendErrorMessage(playerid, "Sorry, this billboard is already being rented!");
			}
		}
	}
	return 1;
}

Dialog:MyBillboardMenu(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    if(listitem == 0)
	    {
	        Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Mensaje", "Coloca el nuevo mensaje de la publicidad!\n\n(Letras Max: 230)", "Aceptar", "Cancelar");
	    }
	    if(listitem == 1)
	    {
	        Dialog_Show(playerid, MyBillboardUnrent, DIALOG_STYLE_MSGBOX, "Dejar Publicidad", "Estas seguro que quieres dejar el cartel de publicidad?\n\nRecibiras la mitad de la paga", "Confirmar", "Cancelar");
	    }
	}
	return 1;
}

Dialog:MyBillboardMessage(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Mensaje", "Coloca el nuevo mensaje de la publicidad!\n\n(Letras Max: 230)", "Aceptar", "Cancelar");

		if (strlen(inputtext) > 230)
	        return Dialog_Show(playerid, MyBillboardMessage, DIALOG_STYLE_INPUT, "Mensaje", "Muchas letras (Max 230)\n\nColoca el nuevo mensaje!\n\n(Letras Max: 230)", "Aceptar", "Cancelar");

		format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, inputtext);

		Billboard_Save(PlayerData[playerid][pOwnsBillboard]);
		Billboard_Refresh(PlayerData[playerid][pOwnsBillboard]);
	}
	return 1;
}

Dialog:MyBillboardUnrent(playerid, response, listitem, inputtext[]) {
	if (response)
	{
		new bbid = PlayerData[playerid][pOwnsBillboard];

		GiveMoney(playerid, BillBoardData[bbid][bbPrice]/2);
		BillBoardData[bbid][bbOwner] = 0;
		format(BillBoardData[PlayerData[playerid][pOwnsBillboard]][bbMessage], 230, "Sin Dueño");
		Billboard_Save(bbid);
		Billboard_Refresh(bbid);
		PlayerData[playerid][pOwnsBillboard] = -1;
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Has dejado el cartel de publicidad");
	}
	return 1;
}

Dialog:BillboardRent(playerid, response, listitem, inputtext[]) {
	if (response)
	{
	    new bbid = BillboardCheckout[playerid];
	    if(PlayerData[playerid][pBankMoney] < BillBoardData[bbid][bbPrice])
	    {
	        SendErrorMessage(playerid, "No tienes suficiente dinero en el banco para pagar el alquiler del cartel de publicidad");
	        return 1;
	    }
	    else
	    {
			PlayerData[playerid][pBankMoney] -= BillBoardData[playerid][bbPrice];
			PlayerData[playerid][pOwnsBillboard] = bbid;
			BillBoardData[bbid][bbOwner] = GetPlayerSQLID(playerid);
			Tax_AddMoney(BillBoardData[bbid][bbPrice]);
			Billboard_Save(bbid);
			Billboard_Refresh(bbid);
			SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "Has comprado un cartel de publicidad, usa /mipublicidad para editarlo");
		}
	}
	return 1;
}

Dialog:GraffitiColor(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Graffiti_Nearest(playerid);

		if (id == -1)
		    return 0;

	    if (IsSprayingInProgress(id))
	        return SendErrorMessage(playerid, "Ya hay otro jugador pintando en este lugar.");

	    switch (listitem)
	    {
	        case 0:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFFFFF;

	        case 1:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFF0000;

	        case 2:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFFF00;

	        case 3:
	            PlayerData[playerid][pGraffitiColor] = 0xFF33CC33;

	        case 4:
	            PlayerData[playerid][pGraffitiColor] = 0xFF33CCFF;

	        case 5:
	            PlayerData[playerid][pGraffitiColor] = 0xFFFFA500;

	        case 6:
	            PlayerData[playerid][pGraffitiColor] = 0xFF1394BF;
	    }
	    Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Texto Graffiti", "Coloca el texto de tu graffiti.\n\nNota: El texto no puede superar las 64 letras.", "Aceptar", "Cancelar");
	}
	return 1;
}

Dialog:GraffitiText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Graffiti_Nearest(playerid);

		if (id == -1)
		    return 0;

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Texto Graffiti", "Coloca el texto de tu graffiti.\n\nNota: El texto no puede superar las 64 letras.", "Aceptar", "Cancelar");

		if (strlen(inputtext) > 64)
		    return Dialog_Show(playerid, GraffitiText, DIALOG_STYLE_INPUT, "Texto Graffiti", "Error: Has superado los 64 caracteres.\n\nColoca el texto para el graffiti otra vez.\n\nNota: El texto no puede superar las 64 letras.", "Aceptar", "Cancelar");

        if (IsSprayingInProgress(id))
	        return SendErrorMessage(playerid, "Ya hay otro jugador pintando en este lugar.");

        PlayerData[playerid][pGraffiti] = id;
        PlayerData[playerid][pGraffitiTime] = 15;

		strpack(PlayerData[playerid][pGraffitiText], inputtext, 64 char);
		ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0, 1);

		ShowPlayerFooter(playerid, "Ahora estas pintando tu ~g~graffiti.");
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~b~Pintando...~w~ espera!", 15000, 3);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma un bote de spray y pinta la pared.", ReturnName(playerid, 0));
	}
	return 1;
}

Dialog:Radio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, CulturalRadio, DIALOG_STYLE_LIST, "Cultural", "Clasica\nInstrumental", "Seleccionar", "Cancelar");

			case 1:
			    Dialog_Show(playerid, OldiesRadio, DIALOG_STYLE_LIST, "Vieja", "Los 70\nLos 80\nLos 90", "Seleccionar", "Cancelar");

			case 2:
			    Dialog_Show(playerid, OtherRadio, DIALOG_STYLE_LIST, "Otros", "Dance\nGlee\nMash Ups", "Seleccionar", "Cancelar");

			case 3:
			    Dialog_Show(playerid, PopRadio, DIALOG_STYLE_LIST, "Pop", "Coreano\nPop\nHits", "Seleccionar", "Cancelar");

			case 4:
			    Dialog_Show(playerid, RNBRadio, DIALOG_STYLE_LIST, "Rhythm & Blues", "R&B\nSoul", "Seleccionar", "Cancelar");

			case 5:
				Dialog_Show(playerid, RockRadio, DIALOG_STYLE_LIST, "Rock", "Alternativo\nClasico\nIndie\nMetal\nPunk\nRock & Roll", "Seleccionar", "Cancelar");

	        case 6:
	            Dialog_Show(playerid, TalkRadio, DIALOG_STYLE_LIST, "Charla", "Comedia\nScanners", "Seleccionar", "Cancelar");

	 		case 7:
				Dialog_Show(playerid, UrbanRadio, DIALOG_STYLE_LIST, "Urbano", "Country\nHip-Hop", "Seleccionar", "Cancelar");

			case 8:
			    Dialog_Show(playerid, ElectricRadio, DIALOG_STYLE_LIST, "Electronica", "ElectricFM.com\n1Dance.fm\nDanceTime.fm", "Seleccionar", "Cancelar");

			case 9:
			{
			    new vehicleid = GetPlayerVehicleID(playerid);

			    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
			        return 0;

				StopVehicleRadio(vehicleid);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s apago la radio del auto.", ReturnName(playerid, 0));
			}
	    }
	}
	return 1;
}

Dialog:UrbanRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
			    Dialog_Show(playerid, Country, DIALOG_STYLE_LIST, "Country", "GotRadio - Today's Country\n181.fm - Highway 181\nHPR1: Traditional Classic Country\nCountry - Sky.fm", "Escuchar", "Cancelar");

            case 1:
			    Dialog_Show(playerid, HipHop, DIALOG_STYLE_LIST, "Hip-Hop", "100Hits - HipHop\nHot 108 Jamz\n181.fm - The Box\nGotRadio - Urban Jams", "Escuchar", "Cancelar");
		}
	}
	return 1;
}

Dialog:Country(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://206.217.213.235:8100/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://relay.181.fm:8018/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://108.61.73.119:8024/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://scfire-ntc-aa01.stream-aol.com/stream/1019");
		}
	}
	return 1;
}

Dialog:HipHop(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://64.56.64.67:10354/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://stream-95.shoutcast.com/hot108_mp3_128kbps");

            case 2:
			    SetVehicleRadio(vehicleid, "http://108.61.73.119:8024/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8068/");
		}
	}
	return 1;
}

Dialog:ElectricRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://72.13.83.151/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://173.192.207.51:8062/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://212.83.60.202:8000/");
		}
	}
	return 1;
}

Dialog:TalkRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
			    Dialog_Show(playerid, Comedy, DIALOG_STYLE_LIST, "Comedia", "Comedy104\nAddictedToRadio.com - Comedy\n181.fm - Comedy Club", "Escuchar", "Cancelar");

            case 1:
			    Dialog_Show(playerid, Scanners, DIALOG_STYLE_LIST, "Scanners", "New Orleans Police Department\nSan Diego Police Dispatch\nLong Beach Police Dispatch\nCalifornia Highway Patrol - Los Angeles & Orange County\nLAPD - Citywide Dispatch and Hot Shots/Code 3", "Escuchar", "Cancelar");
		}
	}
	return 1;
}

Dialog:Comedy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://69.195.140.50:8060/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://208.77.21.13:17910/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8026/");
		}
	}
	return 1;
}

Dialog:Scanners(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/3877/0-5443008964.m3u");

			case 1:
			    SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/6740/0-5443008116.m3u");

            case 2:
			    SetVehicleRadio(vehicleid, "http://www.radioreference.com/scripts/playlists/1/6740/0-5443008116.m3u");

            case 3:
			    SetVehicleRadio(vehicleid, "http://radioreference.com/scripts/playlists/1/10239/0-5443007068.m3u");

            case 4:
			    SetVehicleRadio(vehicleid, "http://radioreference.com/scripts/playlists/1/10239/0-5443007068.m3u");
		}
	}
	return 1;
}

Dialog:RockRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
			case 0:
			    Dialog_Show(playerid, Alternative, DIALOG_STYLE_LIST, "Alternativo", "GotRadio - Alternative", "Escuchar", "Cancelar");

            case 1:
			    Dialog_Show(playerid, Classic, DIALOG_STYLE_LIST, "Clasico", "181.FM - Rock 181 #1\n.977 The Classic Rock\n181.fm - The Eagle\n181.fm Rock 40\n181.fm Rock 181 #2", "Escuchar", "Cancelar");

            case 2:
			    Dialog_Show(playerid, IndieRock, DIALOG_STYLE_LIST, "Indie", "GotRadio - Indie Underground\nIndie Rock - LifeJive.com", "Escuchar", "Cancelar");

            case 3:
			    Dialog_Show(playerid, Metal, DIALOG_STYLE_LIST, "Metal", "GotRadio - Metal Madness\nDepressive Metal Rock radio\nDeath.F(ucking)M(etal)\nDepressive metal rock (Death)\nRepressive metal rock radio (Black)", "Escuchar", "Cancelar");

            case 4:
			    Dialog_Show(playerid, Punk, DIALOG_STYLE_LIST, "Punk", "Pop Punk - Sky.fm", "Escuchar", "Cancelar");

            case 5:
			    Dialog_Show(playerid, RockRoll, DIALOG_STYLE_LIST, "Rock & Roll", "Absolute Radio", "Escuchar", "Cancelar");
		}
	}
	return 1;
}

Dialog:Alternative(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://206.217.213.235:8200/");
		}
	}
	return 1;
}

Dialog:Classic(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8008/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://7649.live.streamtheworld.com/977_CLASSROCK_SC");

            case 2:
			    SetVehicleRadio(vehicleid, "http://relay.181.fm:8030/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://uplink.181.fm:8028/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://relay.181.fm:8064/");
		}
	}
	return 1;
}

Dialog:IndieRock(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.163:8330/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://208.53.138.125:8136/");
		}
	}
	return 1;
}

Dialog:Metal(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.163:8340/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://184.154.10.83:8390/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://209.9.229.211/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://184.154.185.170:8080/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://65.60.19.43:8270/");
		}
	}
	return 1;
}

Dialog:Punk(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://80.94.69.106:6884/");
		}
	}
	return 1;
}

Dialog:RockRoll(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://mp3-ar-192.as34763.net/");
		}
	}
	return 1;
}

Dialog:RNBRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
			case 0:
			    Dialog_Show(playerid, RNB, DIALOG_STYLE_LIST, "R&B", "181.fm - True R&B\nDEFJay.de - 100% R&B\nGotRadio - R&B Classics\nSlow Jamz\nAddictedToRadio.com - V101 RnB AAC", "Escuchar", "Cancelar");

            case 1:
			    Dialog_Show(playerid, SoulRadio, DIALOG_STYLE_LIST, "Soul", "181.fm - Soul\nSoulful Bits", "Escuchar", "Cancelar");
		}
	}
	return 1;
}

Dialog:RNB(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://108.61.73.119:8022/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://87.230.56.38/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://206.217.213.236:8390/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://173.193.32.153:8020/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://208.77.21.15:10730/");
		}
	}
	return 1;
}

Dialog:SoulRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://relay.181.fm:8058/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://88.191.137.70/");
		}
	}
	return 1;
}

Dialog:PopRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, KoreanRadio, DIALOG_STYLE_LIST, "Korean", "KPOP TOP 100\nGeneraction\nBig B Radio", "Escuchar", "Cancelar");

			case 1:
			    Dialog_Show(playerid, Pop, DIALOG_STYLE_LIST, "Pop", "My Tunes FM\nHot Hits IR\nGay FM", "Escuchar", "Cancelar");

            case 2:
			    Dialog_Show(playerid, TopHits, DIALOG_STYLE_LIST, "Top Hits", "ChartHits.fm - Your Hitz More Music\n181.fm The Office\n100Hitz - Top 40\n1.fm Absolute Top 40\nTop Hits Music - Sky.fm", "Escuchar", "Cancelar");
		}
	}
	return 1;
}

Dialog:KoreanRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://39.119.181.57:8000/128");

			case 1:
			    SetVehicleRadio(vehicleid, "http://176.31.241.195:8700/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://199.241.187.194:8060/");
		}
	}
	return 1;
}

Dialog:Pop(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://77.102.253.75:8000/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://50.117.26.26:1265/moon.wavestreamer.com:1265/live");

            case 2:
			    SetVehicleRadio(vehicleid, "http://80.237.211.85/");
		}
	}
	return 1;
}

Dialog:TopHits(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://79.141.174.206:22000/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://108.61.73.117:8002/");

            case 2:
			    SetVehicleRadio(vehicleid, "http://206.217.213.235:8300/");

            case 3:
			    SetVehicleRadio(vehicleid, "http://205.164.62.15:7016/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://stream-67.shoutcast.com/tophits_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:OtherRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, DanceRadio, DIALOG_STYLE_LIST, "Dance", "Dancetime.fm\nPlus Fm - Pure Dance Radio", "Escuchar", "Cancelar");

			case 1:
			    Dialog_Show(playerid, Glee, DIALOG_STYLE_LIST, "Glee", "AceRadio.net - Glee Radio", "Escuchar", "Cancelar");

            case 2:
			    Dialog_Show(playerid, MashUps, DIALOG_STYLE_LIST, "Mash Ups", "Mastermix - Base Manic Radio\nMashups\nGotRadio - Mashups\nMashup-Radio24.de\nI love mashup radio", "Escuchar", "Cancelar");
		}
	}
	return 1;
}

Dialog:DanceRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://87.230.53.17:8000/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://87.230.82.41/");
		}
	}
	return 1;
}

Dialog:Glee(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://174.36.42.110:8360/");
		}
	}
	return 1;
}

Dialog:MashUps(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://184.107.17.34:8046/");

            case 1:
				SetVehicleRadio(vehicleid, "http://67.212.166.210:8413/");

            case 2:
				SetVehicleRadio(vehicleid, "http://206.217.213.236:8530/");

            case 3:
				SetVehicleRadio(vehicleid, "http://188.138.124.98:39710/");

            case 4:
				SetVehicleRadio(vehicleid, "http://87.118.64.205:8040/");
		}
	}
	return 1;
}

Dialog:OldiesRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, 70sRadio, DIALOG_STYLE_LIST, "70's", "181.fm - 70's\nAll Hit 70's\nSky.fm", "Escuchar", "Cancelar");

			case 1:
			    Dialog_Show(playerid, 80sRadio, DIALOG_STYLE_LIST, "80's", "Golden Radio Italia 80's\n181.fm - Lite 80's\n181.fm - Awesome 80's\n80's, 80's, 80's! - Sky.fm", "Escuchar", "Cancelar");

            case 2:
			    Dialog_Show(playerid, 90sRadio, DIALOG_STYLE_LIST, "90's", "GotRadio - 90's Alternative\nAddictedToRadio.com\n181.fm - Lite 90's\n181.fm - 90's Alternative\n181.fm - Star 90's", "Escuchar", "Cancelar");
		}
	}
	return 1;
}

Dialog:70sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8066/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://stream-45.shoutcast.com/all_hit_70s_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:80sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://109.123.116.202:8040/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://74.86.186.4:12114/");

			case 2:
				SetVehicleRadio(vehicleid, "http://108.61.73.118:8000/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://stream-54.shoutcast.com/the80s_skyfm_mp3_96kbps");
		}
	}
	return 1;
}

Dialog:90sRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.244.215.162:8190/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://208.77.21.13:14330/");

			case 2:
				SetVehicleRadio(vehicleid, "http://74.86.186.4:12118/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8052/");

            case 4:
			    SetVehicleRadio(vehicleid, "http://108.61.73.118:8012/");
		}
	}
	return 1;
}

Dialog:CulturalRadio(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, Classical, DIALOG_STYLE_LIST, "Clasico", "Mostly Classical - Sky.fm\nCalmradio.com - Mozart\n1.fm - Otto's classical\nClassical Piano - Sky.fm", "Escuchar", "Cancelar");

			case 1:
			    Dialog_Show(playerid, Instruments, DIALOG_STYLE_LIST, "Instrumental", "Calmradio.com - Solo Piano & Guitar\nGotRadio - Guitar Genius\nGotRadio - Piano Perfect\nPianorama", "Escuchar", "Cancelar");
		}
	}
	return 1;
}

Dialog:Classical(playerid, response, listitem, inputtext[])
{
    if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://stream-135.shoutcast.com/classical_skyfm_mp3_96kbps");

			case 1:
			    SetVehicleRadio(vehicleid, "http://159.253.143.15:12128/");

			case 2:
			    SetVehicleRadio(vehicleid, "http://205.164.41.18:7070/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://72.26.204.28:6874/");
		}
	}
	return 1;
}

Dialog:Instruments(playerid, response, listitem, inputtext[])
{
    if (response)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER || !IsEngineVehicle(vehicleid))
  			return 0;

		switch (listitem)
		{
		    case 0:
				SetVehicleRadio(vehicleid, "http://173.192.225.172:8200/");

			case 1:
			    SetVehicleRadio(vehicleid, "http://173.244.215.162:8020/");

			case 2:
			    SetVehicleRadio(vehicleid, "http://173.244.215.162:8050/");

			case 3:
			    SetVehicleRadio(vehicleid, "http://188.127.226.185/");
		}
	}
	return 1;
}

Dialog:NewTasks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!strcmp(inputtext, "Visitar Banco (pendiente)"))
	    {
	        new id = GetClosestEntrance(playerid, 2);

	        if (id == -1)
	            return SendErrorMessage(playerid, "No hay bancos en este servidor.");

			SetPlayerCheckpoint(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2], 1.0);
			SendServerMessage(playerid, "Punto marcado en el banco mas cercano (marcado en el radar).");
		}
		else if (!strcmp(inputtext, "Visitar Minorista (pendiente)"))
	    {
	        new id = GetClosestBusiness(playerid, 1);

	        if (id == -1)
	            return SendErrorMessage(playerid, "No hay minoristas en este servidor.");

			SetPlayerCheckpoint(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2], 1.0);
			SendServerMessage(playerid, "Punto marcado en el minorista mas cercano (marcado en el radar).");
		}
		else if (!strcmp(inputtext, "Visitar Escuela de Manejo (pendiente)"))
	    {
	        new id = GetClosestEntrance(playerid, 1);

	        if (id == -1)
	            return SendErrorMessage(playerid, "No hay escuelas de manejo en este servidor.");

			SetPlayerCheckpoint(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2], 1.0);
			SendServerMessage(playerid, "Punto marcado en la escuela de manejo mas cercana (marcado en el radar).");
		}
	}
	return 1;
}

Dialog:PickupItems(playerid, response, listitem, inputtext[])
{
	static
	    string[64];

	if (response)
	{
	    new id = NearestItems[playerid][listitem];

		if (id != -1 && DroppedItems[id][droppedModel])
		{
		    if (DroppedItems[id][droppedWeapon] != 0)
			{
  				if (PlayerData[playerid][pPlayingHours] < 2)
					return SendErrorMessage(playerid, "Debes tener al menos dos horas conectado.");

				GiveWeaponToPlayer(playerid, DroppedItems[id][droppedWeapon], DroppedItems[id][droppedAmmo]);

				Item_Delete(id);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tomo un/a %s.", ReturnName(playerid, 0), ReturnWeaponName(DroppedItems[id][droppedWeapon]));
			}
			else if (PickupItem(playerid, id))
			{
				format(string, sizeof(string), "~g~%s~w~ agregada al inventario!", DroppedItems[id][droppedItem]);
 				ShowPlayerFooter(playerid, string);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tomo un/a \"%s\".", ReturnName(playerid, 0), DroppedItems[id][droppedItem]);
			}
			else
				SendErrorMessage(playerid, "No tienes espacio en tu inventario.");
		}
		else SendErrorMessage(playerid, "Este objeto ya fue agarrado.");
	}
	return 1;
}

Dialog:StartDelivery(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Job_NearestPoint(playerid);

	    if (id == -1)
	        return 0;

		PlayerData[playerid][pLoadType] = listitem + 1;
		PlayerData[playerid][pLoadCrate] = 1;
		PlayerData[playerid][pLoading] = 1;

		SendServerMessage(playerid, "Has elegido \"%s\". Carga las cajas en el camion para empezar.", inputtext);
		SetPlayerCheckpoint(playerid, JobData[id][jobPoint][0], JobData[id][jobPoint][1], JobData[id][jobPoint][2], 1.0);

        SetPlayerAttachedObject(playerid, 4, 3014, 1, 0.038192, 0.371544, 0.055191, 0.000000, 90.000000, 357.668670, 1.000000, 1.000000, 1.000000);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

		ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
		ShowPlayerFooter(playerid, "Pulsa ~y~'N'~w~ para cargar la caja.");
	}
	return 1;
}

Dialog:GatePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Gate_Nearest(playerid);

	    if (id == -1)
	        return 0;

        if (isnull(inputtext))
        	return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Escribe la Contraseña", "Escribe la contraseña de esta puerta:", "Aceptar", "Cancelar");

		if (strcmp(inputtext, GateData[id][gatePass]) != 0)
  			return Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Escribe la Contraseña", "Error: Contraseña incorrecta.\n\nEscribe la contraseña de esta puerta:", "Aceptar", "Cancelar");

		Gate_Operate(id);
	}
	return 1;
}

Dialog:EditRanks(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!FactionData[PlayerData[playerid][pFactionEdit]][factionExists])
			return 0;

		PlayerData[playerid][pSelectedSlot] = listitem;
		Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Editar Rangos", "Rango: %s (%d)\n\nEscribe el nombre de este rango:", "Aceptar", "Atras", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);
	}
	return 1;
}

Dialog:SetRankName(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Editar Rangos", "Rango: %s (%d)\n\nEscribe el nombre de este rango:", "Aceptar", "Atras", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, SetRankName, DIALOG_STYLE_INPUT, "Editar Rangos", "Error: No puedes superar las 32 letras.\n\nRank: %s (%d)\n\nEditar Rangos", "Rango: %s (%d)\n\nEscribe el nombre de este rango:", "Aceptar", "Atras", FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot] + 1);

		format(FactionRanks[PlayerData[playerid][pFactionEdit]][PlayerData[playerid][pSelectedSlot]], 32, inputtext);
		Faction_SaveRanks(PlayerData[playerid][pFactionEdit]);

		Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
		SendServerMessage(playerid, "Has cambiado el nombre del rango %d a \"%s\".", PlayerData[playerid][pSelectedSlot] + 1, inputtext);
	}
	else Faction_ShowRanks(playerid, PlayerData[playerid][pFactionEdit]);
	return 1;
}

Dialog:AcceptTaxi(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new targetid = strval(inputtext);

	    if (!IsPlayerConnected(targetid))
	        return SendErrorMessage(playerid, "Ese jugador esta desconectado.");

		if (!PlayerData[targetid][pTaxiCalled])
		    return SendErrorMessage(playerid, "Esa llamada fue aceptada por otro taxista.");

		static
			Float:x,
			Float:y,
			Float:z;

		GetPlayerLocationEx(targetid, x, y, z);

		PlayerData[targetid][pTaxiCalled] = 0;
		Waypoint_Set(playerid, GetPlayerLocation(targetid), x, y, z);

        SendServerMessage(playerid, "Has aceptado la llamada de %s.", ReturnName(targetid, 0));
        SendServerMessage(targetid, "%s ha aceptado tu llamada de taxi. Llegara en unos momentos.", ReturnName(playerid, 0));
	}
	return 1;
}

Dialog:AcceptShipment(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new bizid = strval(inputtext);

		if (!BusinessData[bizid][bizExists])
		    return 0;

	    if (!BusinessData[bizid][bizShipment])
	        return SendErrorMessage(playerid, "Este negocio ya no esta solicitando un envio.");

		if (IsShipmentAccepted(bizid))
		    return SendErrorMessage(playerid, "Este envio ya fue aceptado.");

		foreach (new i : Player) if (Business_IsOwner(i, bizid)) {
		    SendServerMessage(i, "%s ha aceptado tu pedido de envio.", ReturnName(playerid, 0));
		}
		PlayerData[playerid][pShipment] = bizid;
		SendServerMessage(playerid, "Has aceptado el envio. Escribe /repartir para iniciar el envio.");
	}
	return 1;
}

Dialog:REGLAMENTO1(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		switch(listitem)
		{
			case 0:
			{
				new string1[1000];
				new reg[] = "{BF0000}*Primeros pasos con '/me' y '/do'\n{FFFFFF}-Sencilla explicación, el '{C2A2DA}/me{FFFFFF}' se usa para dar a conocer una acción que esta haciendo nuestro personaje\n";
				new reg2[] = " EJ: {C2A2DA}'/me toma su pistola del bolsillo' {FFFFFF}o {C2A2DA}'/me coge el dinero de la mano del sujeto'\n{FFFFFF}El '{B6DB22}/do{FFFFFF}' es para dar a conocer lo que hacemos en el momento en que el personaje hace la acción del {C2A2DA}'/me'\n";
				new reg3[] = "{FFFFFF} Ya sea el tiempo que nos toma hacer tal acción que se escribió con {C2A2DA}'/me'{FFFFFF}, informar sobre algo que acompaña al {C2A2DA}'/me'{FFFFFF} o rolear ser una persona no jugador\n";
				new reg4[] = " EJ: {C2A2DA}/me toma el bolígrafo de la mesa y firma el papel\n{B6DB22}/do 1/2\n/do 2/2\n/do Papel firmado\n{C2A2DA}/me guarda el bolígrafo en su mochila abriéndola y cerrándola cuando este ya esta dentro";
				format(string1, sizeof(string1), "%s%s%s%s", reg, reg2, reg3, reg4);
				Dialog_Show(playerid, DIALOG_REGLAMENTO1, DIALOG_STYLE_MSGBOX, "Aprende a Rolear con esta Info", string1, "Cerrar", "Siguiente");
			}
			case 1:
			{
				new string1[1000];
				new reg[] = "{BF0000}*Acciones\n{FFFFFF}-Como civiles que somos, no somos ni buenos ni malos, a veces la pasamos mal y otras veces bien. \n{9EC73D}¿Que podemos hacer?{FFFFFF}, pues podemos:\n Buscar trabajo\n";
				new reg2[] = " Unirnos a una facción\n Pedir limosna\n Conocer gente nueva\n Comentar acerca de las distintas facciones (obviamente en IC no diran que son 'Facciones')\n Comprar un arma para defendernos\n";
				new reg3[] = "    No necesariamente necesita estar 'inscrita' (tener licencia de arma) para ser usada, pero puedes ser encarcelado.";
				format(string1, sizeof(string1), "%s%s%s%s%s", reg, reg2, reg3);
				Dialog_Show(playerid, DIALOG_REGLAMENTO2, DIALOG_STYLE_MSGBOX, "Civiles", string1, "Cerrar", "");
			}
			case 2:
			{
				new string1[1150];
				new reg[] = "{BF0000}*En Rol\n{FFFFFF}-Cuando un Administrador no esta en servicio tendrá los '/w' desactivados así quiera activarlos o no\nTampoco podrá ver '/ayudame' ni '/re'\n";
				new reg2[] = "Aunque se permita el descanso, el admin no podrá darse beneficios estando IC ya que los cmd de admin solo funcionan estando Duty.\n\n{BF0000}*Trabajando\n";
				new reg3[] = "{FFFFFF}-Cuando un admin este trabajando saldrá un texto diciendo 'Administrador (nombre) esta de servicio'\nSi no logras ver esto puedes poner '/admins' para saber quien esta de servicio y quien no.\n\n{BF0000}*Descanso\n";
				new reg4[] = "{FFFFFF}-Cuando un Admin se toma un descanso va a rolear (sin AFK) o es que se pondrá en negro (AFK), incluso puede desconectarse.\n\n{BF0000}*Colores\n{FFFFFF}-El color Blanco es para admins specteando\n";
				new reg5[] = "-El color {00D500}Verde{FFFFFF} es para admins normales que estén de servicio\n-El color {AFAFAF}Negro{FFFFFF} es para administradores descansando (AFK).";
				format(string1, sizeof(string1), "%s%s%s%s%s", reg, reg2, reg3, reg4, reg5);
				Dialog_Show(playerid, DIALOG_REGLAMENTO3, DIALOG_STYLE_MSGBOX, "Administracion", string1, "Cerrar", "");
			}
			case 3:
			{
				new string1[1000];
				new reg[] = "{BF0000}*Provocaciones\n{FFFFFF}-Usuarios que provoquen a otros se los considera usuario conflictivo los cuales puedes reportar\n";
				new reg2[] = "Pero tendrá que ser con foto debido a que los admins no podemos ver todo lo que dice cada uno.\n\n{BF0000}*Insultos\n{FFFFFF}-Esto todos ya deberían saber lo que significa, usuario que insulte a otro de cualquier manera no deben ser reportados por '/re'\n";
				new reg3[] = "Porque seguramente cuando el admin vaya a ver el user se haga el bueno, siempre es mejor sacar foto y reportar\n\n{BF0000}*Spam\n{FFFFFF}-Se considera Spam todo lo que sea: Nombre o IP de otro sv\n\n";
				new reg4[] = "{BF0000}*Amenazas\n{FFFFFF}-Si un usario amenaza a otro este debe de sacar foto y reportar\nPero si un usuario amenaza a un admin, pues el admin tiene derecho a banearlo o kickearlo según como considere la amenaza.";
				format(string1, sizeof(string1), "%s%s%s%s", reg, reg2, reg3, reg4);
				Dialog_Show(playerid, DIALOG_REGLAMENTO4, DIALOG_STYLE_MSGBOX, "Usuarios Conflictivos", string1, "Cerrar", "");
			}
			case 4:
			{
				new string1[1100];
				new reg[] = "{BF0000}*Supuestos\n{FFFFFF}-En cada situación de rol en que te encuentres veras que a veces no te favorece, por ejemplo:\n Te disparan en el brazo con un arma pesada y tienes chaleco, aunque seas de {9ACD32}SAEM{FFFFFF} tendrás que rolear heridas en el momento, debido a que el chaleco solo cubre el torso\n";
				new reg2[] = "Deja el orgullo 'ganador' de lado y acepta la realidad, a los que 'pierden' en roles se les recompensa con más puntos de rol los cuales se podran canjear más adelante\n\n{BF0000}*Anti-Rol\n";
				new reg3[] = "{FFFFFF}-Se considera 'Anti-Rol' a aquel persona que decida no seguir un rol ya sea por estar perdiendo o por otra cosa un ejemplo:\n ";
				new reg4[] = " Vas y derrepente !oh no! te pincharon un neumático los de {8D8DFF}LSPD{FFFFFF}\nTendrás que detenerte si o si y dejar que {8D8DFF}LSPD{FFFFFF} haga su rol para luego ir a la corte y que se te juzgue por tus actos\n";
				new reg5[] = "Solo haciendo lo correcto el rol se sentirá fresco y siempre dará algo que hacer y sentir a todos. basta de 'orgullo ganador'.";
				format(string1, sizeof(string1), "%s%s%s%s%s", reg, reg2, reg3, reg4, reg5);
				Dialog_Show(playerid, DIALOG_REGLAMENTO5, DIALOG_STYLE_MSGBOX, "Reglas en Roles", string1, "Siguiente", "Cerrar");
			}
			case 5:
			{
				new string1[1500];
				new reg[] = "{BF0000}*Facciones ilegales\n{FFFFFF}-Solo estos tipos de facciones tienen derecho a hacer roles en los que se involucren victimas\nSi hay incoherencias o no se rolea bien tome una SS (foto) y reporte a la faccion en foro (Se sanciona al Lider)\n\n";
				new reg2[] = "{BF0000}Facciones Legales\n{FFFFFF}-Se sancionara al Lider si miembros de estas facciones no rolean bien o tienen incoherencias por ejemplo:\n Tazear a cualquiera que ves por la calle y arrestarlo sin motivo\nEl tiempo de JAIL aumentara el doble para el infractor, ya que estas facciones son el ejemplo para todos\n\n";
				new reg3[] = "{BF0000}*Lideres de Facción\n{FFFFFF}-Como Lider tu deber es enseñar a tus miembros todo lo que puede y no puede hacer tu faccion\nPara que en el futuro no tengas que estar despidiendo o siendo sancionado por culpa de algun miembro\nSi nunca contratas y te quedas como lider solitario ya sea en:\n Faccion Legal\n Faccion Ilegal\n Faccion No Oficial\nSe te quitara el liderazgo de aquella faccion y se le dara a otra persona\n\n";
				new reg4[] = "{BF0000}*Miembros de Faccion\n{FFFFFF}-Como miembro de faccion tu deber es informarte de como se maneja la faccion haciendo preguntas al lider\nSi notas que el lider no sabe muy bien que hacer con la faccion o simplemente no crea nunca roles puedes reportarlo libremente.\nTambien como miembro puedes crear roles, pero siempre preguntando al Lider o sabiendo que te dejara.\n";
				format(string1, sizeof(string1), "%s%s%s%s", reg, reg2, reg3, reg4);
				Dialog_Show(playerid, DIALOG_REGLAMENTO6, DIALOG_STYLE_MSGBOX, "Reglas en Facciones", string1, "Siguiente", "Cerrar");
			}
			case 6:
			{
				new string1[1100];
				new reg[] = "{BF0000}*Consideración Zonas Publicas{FFFFFF}\n-Se considera Zona publica aquella en la que debería haber bastantes personas\nLas zonas publicas serian:\n Ayuntamiento\n Comisaria\n Hospital\n Vía de ammunation\n Vías de todos los 24-7 (tiendas)\n Calles anchas (4 carriles)\n Entre otras obvias.\n\n";
				new reg2[] = "{BF0000}*Zonas no publicas{FFFFFF}\n-Se considera zona no publica aquella que sea un lugar cerrado o en donde hubiera 2 o 4 personas.\nLas zonas no publicas serian:\n Los barrios bajos\n El canal de LS\n Todo barrio considerado 'pobre'\n Toda la zona de bosques\n\n";
				new reg3[] = "{BF0000}*Dia{FFFFFF}\n-De día las zonas publicas quedan tal cual, llenas de gente y por tanto no deberías estar secuestrando mientras todos te ven o amenazando\n\n";
				new reg4[] = "{BF0000}*Noche{FFFFFF}\n-De noche algunas zonas publicas cambian, por ejemplo:\n Vía de ammunation\n Calles de doble carril\nEn esas zonas, una persona puede robarte, pero siendo discreto.\nNada de apuntarle a la victima en la cara en plena calle.";
				format(string1, sizeof(string1), "%s%s%s%s", reg, reg2, reg3, reg4);
				Dialog_Show(playerid, DIALOG_REGLAMENTO8, DIALOG_STYLE_MSGBOX, "Reglas en Zonas", string1, "Cerrar", "");
			}
		}
	}
}
Dialog:DIALOG_REGLAMENTO1(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new string1[450];
		new reg[] = "{BF0000}*Más Comandos de Rol\n{FFFFFF}-Los comandos {C2A2DA}/ame {FFFFFF}y {B6DB22}/ado{FFFFFF} sirven para describir una accion simple. El texto aparece sobre tu cabeza\n";
		new reg2[] = "También tenemos comandos como {33CCFF}/e {FFFFFF}para hacer rol de entorno, {00BF60}/inte{B90000}ntar{FFFFFF} y /estado\n Este ultimo comando te permite poner un texto permanente arriba de tu pj. Sirve para describirlo.\n\n";
		format(string1, sizeof(string1), "%s%s", reg, reg2);
		Dialog_Show(playerid, DIALOG_REGLAMENTO10, DIALOG_STYLE_MSGBOX, "Comandos de rol extra", string1, "Cerrar", "");
	}
}

Dialog:DIALOG_REGLAMENTO5(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new string1[1400];
		new reg[] = "{BF0000}*Roles simples\n{FFFFFF}-Se Considera rol simple aquel {C2A2DA}/me {FFFFFF}o {B6DB22}/do{FFFFFF} que no especifica de donde se ha sacado o en donde se ha hecho tal cosa, por ejemplo:\n";
		new reg2[] = " Estas en el mercado negro, compras un arma y escribes '{C2A2DA}/me toma el arma{FFFFFF}', pero... ¿de donde la sacaste?\nEl rol simple es aceptado, sin embargo, hacer este tipo de rol te dejara sin puntos de rol ni beneficios adicionales.\n\n";
		new reg3[] = "{BF0000}*Roles Avanzados\n{FFFFFF}-Es el Rol más fresco que (ojala) pueden hacer todos, este rol especifica de donde se cogió o se hizo tal acción, un ejemplo:\n";
		new reg4[] = " Estas en el mercado negro, compras un arma y escribes\n{C2A2DA}   /me toma el arma de la caja y paga por ella al sujeto\n   {B6DB22}/do Arma pagada\n   {C2A2DA}/me se guarda el arma en su mochila abriéndola y cerradola una vez esta ha entrado\n\n";
		new reg5[] = "{BF0000}*Roles con requisitos\n{FFFFFF}-Como roles normales también están en los que necesitas tales requisitos, como:\n   -;-Tener 4 miembros (para Invadir una HQ)\n   -;-Estar 2 en una patrulla (para hacer rol de Patrullaje)\n   -;-Tener a 2 (Más el conductor) en un coche para secuestrar a alguien\n   -;-Ser miembro de una facción ilegal (para roles de secuestro, robo de banco, entre otros que involucren victimas)";
		format(string1, sizeof(string1), "%s%s%s%s%s", reg, reg2, reg3, reg4, reg5);
		Dialog_Show(playerid, DIALOG_REGLAMENTO9, DIALOG_STYLE_MSGBOX, "Reglas en Roles", string1, "Cerrar", "");
	}
}
Dialog:DIALOG_REGLAMENTO6(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		new string1[650];
		new reg[] = "{BF0000}*Acciones de Facción\n{FFFFFF}-Ya seas Legal o ilegal tus acciones tienen consecuencias desde:\n Arrestar a un simple vagabundo\n Hasta:\n Robar un banco o tirarte de suicida a la ciudad\nLa reputación de tu facción siempre dará algo para hablar (IC) así que cuida tu facción\n";
		new reg2[] = "{BF0000}Nota{FFFFFF}: No solo por ser {8D8DFF}LSPD{FFFFFF}, {9ACD32}SAEM{FFFFFF}, {8D8DFF}FBI{FFFFFF} o {FF8282}LSMD {FFFFFF}están exentos de reputación\nLa gente siempre habla de como es el servicio\nEs posible que con un rol adecuado de forma IC se cambie a los lideres de estas facciones";
		format(string1, sizeof(string1), "%s%s", reg, reg2);
		Dialog_Show(playerid, DIALOG_REGLAMENTO11, DIALOG_STYLE_MSGBOX, "Reglas en Facciones", string1, "Cerrar", "");
	}
}

Dialog:RackWeapons(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = Rack_Nearest(playerid);

	    if (id == -1)
	        return 0;

	    if (!RackData[id][rackWeapons][listitem])
	    {
			if (!GetWeapon(playerid))
			    return SendErrorMessage(playerid, "Tienes que sostener un arma para poder guardarla.");

			RackData[id][rackWeapons][listitem] = GetWeapon(playerid);
			RackData[id][rackAmmo][listitem] = GetPlayerAmmo(playerid);

			ResetWeapon(playerid, GetWeapon(playerid));

			Rack_RefreshGuns(id);
			Rack_Save(id);

			ApplyAnimation(playerid, "WEAPONS", "SHP_Ar_Lift", 4.1, 0, 0, 0, 0, 0, 1);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha guardado un/a %s en el armario.", ReturnName(playerid, 0), ReturnWeaponName(RackData[id][rackWeapons][listitem]));
	    }
	    else
	    {
	        GiveWeaponToPlayer(playerid, RackData[id][rackWeapons][listitem], RackData[id][rackAmmo][listitem]);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha tomado un/a %s del armario.", ReturnName(playerid, 0), ReturnWeaponName(RackData[id][rackWeapons][listitem]));

            RackData[id][rackWeapons][listitem] = 0;
			RackData[id][rackAmmo][listitem] = 0;

			Rack_RefreshGuns(id);
			Rack_Save(id);

			ApplyAnimation(playerid, "WEAPONS", "SHP_Tray_Out", 4.1, 0, 0, 0, 0, 0, 1);
	    }
	}
	return 1;
}

Dialog:TakeItems(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || PlayerData[playerid][pTakeItems] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    if (!strcmp(inputtext, "Confiscar Armas")) {
	        ResetWeapons(PlayerData[playerid][pTakeItems]);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha confiscado las arams de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Confiscar Semillas")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Semillas de Maria", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Semillas de Coca", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Semillas de Opio", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha confiscado las semillas de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Confiscar Drogas")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Marihuana", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Cocaina", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Heroina", -1);
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Anabolicos", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha confiscado las drogas de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Confiscar Walkie")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Walkie-Talkie", -1);

		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha confiscado el Walkie-Talkie de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Confiscar Licencia de Armas")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Licencia de Armas", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha confiscado la licencia de armas de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Confiscar Licencia de Conducir")) {
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Permiso de Conducir", -1);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha confiscado la licencia de conducir de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
		else if (!strcmp(inputtext, "Confiscar Mochila")) {
		    Backpack_Delete(GetPlayerBackpack(PlayerData[playerid][pTakeItems]));
		    Inventory_Remove(PlayerData[playerid][pTakeItems], "Backpack", -1);

			SetAccessories(PlayerData[playerid][pTakeItems]);
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha confiscado la mochila de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pTakeItems], 0));
		}
	}
	return 1;
}

Dialog:ServerPanel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 6)
		return 0;

	if (response)
	{
	    switch (listitem)
	    {
			case 0:
			{
				if (g_ServerLocked)
				{
				    g_ServerLocked = false;

				    SendRconCommand("password 0");
				    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ha quitado la contraseña del servidor.", ReturnName(playerid, 0));
				}
				else Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Colocar Contraseña", "Escribe la contraseña para el servidor:", "Aceptar", "Atras");
			}
			case 1:
			    Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Cambiar Nombre", "Escribe el nuevo nombre del servidor:", "Aceptar", "Atras");
			case 2:
			    Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Hacer una Solicitud", "Coloca la solicitud MySQL para ejecutar:", "Ejecutar", "Atras");
	    }
	}
	return 1;
}

Dialog:LockServer(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 6)
		return 0;

	if (response)
	{
	    if (isnull(inputtext) || !strcmp(inputtext, "0"))
	        return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Colocar Contraseña", "Escribe la contraseña para el servidor:", "Aceptar", "Atras");

		if (strlen(inputtext) > 32)
		    return Dialog_Show(playerid, LockServer, DIALOG_STYLE_INPUT, "Colocar Contraseña", "Error: La contraseña no puede superar las 32 letras.\n\nEscribe la contraseña para el servidor:", "Aceptar", "Atras");

		static
		    str[48];

	    format(str, sizeof(str), "password %s", inputtext);
		g_ServerLocked = true;

		SendRconCommand(str);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ha colocado contraseña al servidor (contraseña: %s).", ReturnName(playerid, 0), inputtext);
	}
	else cmd_panel(playerid, "\1");
	return 1;
}

Dialog:SetHostname(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 6)
		return 0;

	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SetHostname, DIALOG_STYLE_INPUT, "Cambiar Nombre", "Escribe el nuevo nombre del servidor:", "Aceptar", "Atras");

		static
		    str[128];

	    format(str, sizeof(str), "hostname %s", inputtext);

		SendRconCommand(str);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ha cambiado el nombre del servidor a \"%s\".", ReturnName(playerid, 0), inputtext);
	}
	else cmd_panel(playerid, "\1");
	return 1;
}

Dialog:ExecuteQuery(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pAdmin] < 6)
		return 0;

	if (response)
	{
        if (isnull(inputtext))
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Hacer una Solicitud", "Coloca la solicitud MySQL para ejecutar:", "Ejecutar", "Atras");

        if (strfind(inputtext, "DELETE", true) != -1 || strfind(inputtext, "DROP", true) != -1)
            return Dialog_Show(playerid, ExecuteQuery, DIALOG_STYLE_INPUT, "Hacer una Solicitud", "Error: No puedes ejecutar solicitudes tipo \"DROP\" o \"DELETE\".\n\nColoca la solicitud MySQL para ejecutar:", "Ejecutar", "Atras");

		PlayerData[playerid][pExecute] = 1;
		mysql_tquery(g_iHandle, inputtext, "OnQueryExecute", "ds", playerid, inputtext);
	}
	else cmd_panel(playerid, "\1");
	return 1;
}

Dialog:AddNOS(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
			{
			    AddComponent(vehicleid, 1009);
			    SendServerMessage(playerid, "Has agregado 2x NOS al vehiculo.");
			}
			case 1:
			{
			    AddComponent(vehicleid, 1008);
			    SendServerMessage(playerid, "Has agregado 5x NOS al vehiculo.");
			}
            case 2:
			{
			    AddComponent(vehicleid, 1010);
			    SendServerMessage(playerid, "Has agregado 10x NOS al vehiculo.");
			}
		}
	}
	return 1;
}

Dialog:EntrancePass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = (Entrance_Inside(playerid) == -1) ? (Entrance_Nearest(playerid)) : (Entrance_Inside(playerid));

		if (id == -1)
		    return SendErrorMessage(playerid, "No estas cerca de ninguna entrada.");

		if (strcmp(EntranceData[id][entrancePass], inputtext) != 0)
            return SendErrorMessage(playerid, "Contraseña Incorrecta.");

	    if (!EntranceData[id][entranceLocked])
		{
			EntranceData[id][entranceLocked] = true;
			Entrance_Save(id);

			ShowPlayerFooter(playerid, "Has ~r~bloqueado~w~ la entrada!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			EntranceData[id][entranceLocked] = false;
			Entrance_Save(id);

			ShowPlayerFooter(playerid, "Has ~g~abierto~w~ la entrada!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	return 1;
}

Dialog:ReleaseCar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			carid = ListedVehicles[playerid][listitem],
			id = GetImpoundByID(CarData[carid][carImpounded]);

	    if (carid != -1 && id != -1 && CarData[carid][carExists] && CarData[carid][carImpounded] != -1)
	    {
	        if (GetMoney(playerid) < CarData[carid][carImpoundPrice])
	            return SendErrorMessage(playerid, "No tienes el dinero suficiente para pagar la liberacion de este vehiculo.");

            GiveMoney(playerid, -CarData[carid][carImpoundPrice]);

            CarData[carid][carPos][0] = ImpoundData[id][impoundRelease][0];
            CarData[carid][carPos][1] = ImpoundData[id][impoundRelease][1];
            CarData[carid][carPos][2] = ImpoundData[id][impoundRelease][2];
            CarData[carid][carPos][3] = ImpoundData[id][impoundRelease][3];

			SetVehiclePos(CarData[carid][carVehicle], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
			SetVehicleZAngle(CarData[carid][carVehicle], CarData[carid][carPos][3]);

			SendServerMessage(playerid, "Has liberado tu %s por %s.", ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(CarData[carid][carImpoundPrice]));

            CarData[carid][carImpounded] = -1;
            CarData[carid][carImpoundPrice] = 0;

            Car_Save(carid);
	    }
	}
	return 1;
}

Dialog:GiveItem(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    static
	        userid = -1,
			itemid = -1,
			string[32];

		if (sscanf(inputtext, "u", userid))
		    return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Dar Item", "Coloca el nombre o el ID del jugador:", "Aceptar", "Cancelar");

		if (userid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Dar Item", "Error: El ID o nombre es invalido.\n\nColoca el nombre o el ID del jugador:", "Aceptar", "Cancelar");

	    if (!IsPlayerNearPlayer(playerid, userid, 6.0))
			return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Dar Item", "Error: No estas cerca de ese jugador.\n\nColoca el nombre o el ID del jugador:", "Aceptar", "Cancelar");

	    if (userid == playerid)
			return Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Dar Item", "Error: No puedes darte items a ti mismo.\n\nColoca el nombre o el ID del jugador:", "Aceptar", "Cancelar");

		itemid = PlayerData[playerid][pInventoryItem];

		if (itemid == -1)
		    return 0;

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		if (InventoryData[playerid][itemid][invQuantity] == 1)
		{
			if (!strcmp(string, "Backpack") && Inventory_HasItem(userid, "Backpack"))
			    return SendErrorMessage(playerid, "Ese jugador ya esta cargando una mochila.");

		    new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel]);

		    if (id == -1)
				return SendErrorMessage(playerid, "Ese jugador no tiene espacio en su inventario.");

			if (!strcmp(string, "Backpack") && (id = GetPlayerBackpack(playerid)) != -1)
			{
			    BackpackData[id][backpackPlayer] = PlayerData[userid][pID];
				Backpack_Save(id);

				SetAccessories(userid);
			    Inventory_Remove(playerid, "Backpack");
			}
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca un/a \"%s\" y se la da a %s.", ReturnName(playerid, 0), string, ReturnName(userid, 0));
		    SendServerMessage(userid, "%s te ha dado un/a \"%s\" (agregado al inventario).", ReturnName(playerid, 0), string);

			Inventory_Remove(playerid, string);
		    Log_Write("logs/give_log.txt", "[%s] %s (%s) le ha dado un %s a %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], string, ReturnName(userid, 0), PlayerData[userid][pIP]);
  		}
		else
		{
		    Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Dar Item", "Item: %s (Cantidad: %d)\n\nColoca la cantidad que le quieres dar de este item a %s:", "Dar", "Cancelar", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));
		    PlayerData[playerid][pGiveItem] = userid;
		}
	}
	return 1;
}

Dialog:GiveQuantity(playerid, response, listitem, inputtext[])
{
	if (response && PlayerData[playerid][pGiveItem] != INVALID_PLAYER_ID)
	{
	    new
	        userid = PlayerData[playerid][pGiveItem],
	        itemid = PlayerData[playerid][pInventoryItem],
			string[32];

		strunpack(string, InventoryData[playerid][itemid][invItem]);

		if (isnull(inputtext))
			return Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Dar Item", "Item: %s (Cantidad: %d)\n\nColoca la cantidad que le quieres dar de este item a %s:", "Dar", "Cancelar", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		    return  Dialog_Show(playerid, GiveQuantity, DIALOG_STYLE_INPUT, "Dar Item", "Error: No tienes esa cantidad.\n\nItem: %s (Cantidad: %d)\n\nColoca la cantidad que le quieres dar de este item a %s:", "Dar", "Cancelar", string, InventoryData[playerid][itemid][invQuantity], ReturnName(userid, 0));

        new id = Inventory_Add(userid, string, InventoryData[playerid][itemid][invModel], strval(inputtext));

	    if (id == -1)
			return SendErrorMessage(playerid, "Ese jugador no tiene espacio en su inventario.");

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca un/a \"%s\" y se la da a %s.", ReturnName(playerid, 0), string, ReturnName(userid, 0));
	    SendServerMessage(userid, "%s te ha dado un/a \"%s\" (agregado al inventario).", ReturnName(playerid, 0), string);

		Inventory_Remove(playerid, string, strval(inputtext));
	    Log_Write("logs/give_log.txt", "[%s] %s (%s) le ha dado un %s a %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], strval(inputtext), string, ReturnName(userid, 0), PlayerData[userid][pIP]);
	}
	return 1;
}

Dialog:BackpackLoot(playerid, response, listitem, inputtext[])
{
	static id = -1;

	if (response)
	{
	    if (!strcmp(inputtext, "Take Backpack"))
	    {
	        if (Inventory_HasItem(playerid, "Backpack"))
	            return SendErrorMessage(playerid, "Solo puedes tener una mochila.");

	        id = PlayerData[playerid][pBackpackLoot];

	        BackpackData[id][backpackPlayer] = PlayerData[playerid][pID];
	        BackpackData[id][backpackPos][0] = 0.0;
	        BackpackData[id][backpackPos][1] = 0.0;
	        BackpackData[id][backpackPos][2] = 0.0;

	        DestroyDynamic3DTextLabel(BackpackData[id][backpackText3D]);
	        DestroyDynamicObject(BackpackData[id][backpackObject]);

			Backpack_Save(id);
			Inventory_Add(playerid, "Backpack", 3026);

			SetAccessories(playerid);
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha levantado una mochila.", ReturnName(playerid, 0));
		}
		else if ((id = BackpackListed[playerid][listitem]) != -1)
		{
			new
			    string[32];

			strcat(string, BackpackItems[id][bItemName]);

			Inventory_Add(playerid, string, BackpackItems[id][bItemModel], BackpackItems[id][bItemQuantity]);
			Backpack_Remove(BackpackItems[id][bItemBackpack], string, BackpackItems[id][bItemQuantity]);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma un/a \"%s\" de dentro de la mochila.", ReturnName(playerid, 0), string);
		}
	}
	return 1;
}

Dialog:BackpackDeposit(playerid, response, listitem, inputtext[])
{
	static
	    string[32];

	strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

	if (response)
	{
		new amount = strval(inputtext);

		if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
		    return Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Mochila", "Item: %s (Cantidad: %d)\n\nColoca la cantidad de este item que quieres guardar:", "Guardar", "Atras", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

		Backpack_Add(GetPlayerBackpack(playerid), string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
		Inventory_Remove(playerid, string, amount);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardó un/a \"%s\" en su mochila.", ReturnName(playerid, 0), string);
		Backpack_Open(playerid);
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:BackpackTake(playerid, response, listitem, inputtext[])
{
	static
	    string[32],
		id = -1;

	if (response)
	{
		new amount = strval(inputtext);

		id = PlayerData[playerid][pStorageItem];

		strunpack(string, BackpackItems[id][bItemName]);

		if (amount < 1 || amount > BackpackItems[id][bItemQuantity])
		    return Dialog_Show(playerid, BackpackTake, DIALOG_STYLE_INPUT, "Mochila", "Item: %s (Cantidad: %d)\n\nColoca la cantidad de este item que quieres tomar:", "Tomar", "Atras", string, BackpackItems[id][bItemQuantity]);

		Inventory_Add(playerid, string, BackpackItems[id][bItemModel], amount);
        Backpack_Remove(GetPlayerBackpack(playerid), string, amount);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tomó un/a \"%s\" de su mochila.", ReturnName(playerid, 0), string);
		Backpack_Open(playerid);
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:BackpackOptions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pStorageItem], string[32];

	    switch (listitem)
	    {
	        case 0:
	        {
	            strcat(string, BackpackItems[id][bItemName]);

	            if (BackpackItems[id][bItemQuantity] == 1)
	            {
	                Inventory_Add(playerid, string, BackpackItems[id][bItemModel]);
					Backpack_Remove(GetPlayerBackpack(playerid), string);

					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tomó un/a \"%s\" de su mochila.", ReturnName(playerid, 0), string);
					Backpack_Open(playerid);
	            }
	            else
	            {
	                Dialog_Show(playerid, BackpackTake, DIALOG_STYLE_INPUT, "Mochila", "Item: %s (Cantidad: %d)\n\nColoca la cantidad de este item que quieres tomar:", "Tomar", "Atras", string, BackpackItems[id][bItemQuantity]);
	            }
			}
	        case 1:
	        {
	            new itemid = Inventory_GetItemID(playerid, BackpackItems[id][bItemName]);

	            if (itemid == -1)
					return SendErrorMessage(playerid, "No tienes mas de este item para guardar!");

                strunpack(string, InventoryData[playerid][itemid][invItem]);

				if (IsFurnitureItem(string))
				    return SendErrorMessage(playerid, "No puedes guardar muebles en tu mochila.");

				if (InventoryData[playerid][itemid][invQuantity] == 1)
	            {
	                Backpack_Add(GetPlayerBackpack(playerid), string, InventoryData[playerid][itemid][invModel]);
					Inventory_Remove(playerid, string);

					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardó un/a \"%s\" en su mochila.", ReturnName(playerid, 0), string);
					Backpack_Open(playerid);
	            }
	            else
	            {
	                PlayerData[playerid][pInventoryItem] = itemid;
	                Dialog_Show(playerid, BackpackDeposit, DIALOG_STYLE_INPUT, "Mochila", "Item: %s (Cantidad: %d)\n\nColoca la cantidad de este item que quieres tomar:", "Tomar", "Atras", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);
	            }
			}
   		}
	}
	else Backpack_Open(playerid);
	return 1;
}

Dialog:Backpack(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = -1, string[48];

	    if (!listitem)
		{
	        if (Backpack_GetItems(GetPlayerBackpack(playerid)) >= MAX_BACKPACK_CAPACITY)
	            return SendErrorMessage(playerid, "La mochila ha alcanzado su limite de %d items.", MAX_BACKPACK_CAPACITY);

	        OpenInventory(playerid);

	        PlayerData[playerid][pStorageSelect] = 3;
	    }
	    else if ((id = BackpackListed[playerid][listitem-1]) != -1) {
	        PlayerData[playerid][pStorageItem] = id;

			format(string, sizeof(string), "%s (Cantidad: %d)", BackpackItems[id][bItemName], BackpackItems[id][bItemQuantity]);
	        Dialog_Show(playerid, BackpackOptions, DIALOG_STYLE_LIST, string, "Tomar Item\nGuardar Item\nTirar Item", "Seleccionar", "Atras");
		}
	}
	return 1;
}

Dialog:Tutorial(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pTutorialStage] == 3)
	{
		PlayerData[playerid][pTutorialStage] = 4;
		SendClientMessage(playerid, COLOR_SERVER, "Presiona 'Y', selecciona la botella de gaseosa y tirala.");
	}
	else if (PlayerData[playerid][pTutorialStage] == 4)
	{
		PlayerData[playerid][pTutorialStage] = 5;

		SendClientMessage(playerid, COLOR_SERVER, "Ve hacia la salida y pulsa 'F'.");
		SetPlayerCheckpoint(playerid, -228.8403, 1401.1831, 27.7656, 1.0);
	}
	return 1;
}

Dialog:TutorialConfirm(playerid, response, listitem, inputtext[])
{
    PlayerData[playerid][pTutorialStage] = 0;

	if (!response)
	{
	    PlayerData[playerid][pCreated] = 1;
	    PlayerData[playerid][pTask] = 1;

  		PlayerData[playerid][pTutorial] = 0;
		PlayerData[playerid][pTutorialTime] = 0;
		GiveMoney(playerid, 1250);

		SendServerMessage(playerid, "Escribe /tareas para ver tu progreso en las tareas del server.");
	}
	else
	{
	    StartTutorial(playerid);
	}
	return 1;
}

Dialog:MyTickets(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!TicketData[playerid][listitem][ticketExists])
	        return SendErrorMessage(playerid, "No hay un ticket en este slot.");

		if (GetMoney(playerid) < TicketData[playerid][listitem][ticketFee])
		    return SendErrorMessage(playerid, "No tienes dinero suficiente para comprar este ticket.");

		GiveMoney(playerid, -TicketData[playerid][listitem][ticketFee]);
        Tax_AddMoney(TicketData[playerid][listitem][ticketFee]);

		SendServerMessage(playerid, "has pagado un ticket de %s por \"%s\".", FormatNumber(TicketData[playerid][listitem][ticketFee]), TicketData[playerid][listitem][ticketReason]);
		Ticket_Remove(playerid, listitem);
	}
	return 1;
}

Dialog:MainGPS(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Encontrar Casa", "Coloca la direccion de la casa:", "Aceptar", "Cancelar");

			case 1:
			    Dialog_Show(playerid, FindBusiness, DIALOG_STYLE_LIST, "Encontrar Negocio", "Minorista\nNegocio de Armas\nNegocio de Ropa\nComida Rapida\nConcesionario\nEstacion de Servicio\nNegocio de Muebles", "Aceptar", "Cancelar");

			case 2:
			    Dialog_Show(playerid, FindEntrance, DIALOG_STYLE_LIST, "Econtrar Entradas", "Escuela de Manejo cercana\nBanco mas cercano\nAlmacen mas cercano\nMunicipalidad mas cercana", "Seleccionar", "Cancelar");

			case 3:
			    Dialog_Show(playerid, FindJob, DIALOG_STYLE_LIST, "Encontrar Trabajo", "Camionero\nTaxista\nDescargador de Carga\nMinero\nVendedor de Comida\nBasurero\nClasificador de Paquetes", "Seleccionar", "Cancelar");

			case 4:
			{
				static
				    string[MAX_GPS_LOCATIONS * 32];

				string = "Agregar Localizacion\n";

				for (new i = 0; i != MAX_GPS_LOCATIONS; i ++) if (LocationData[playerid][i][locationExists]) {
				    format(string, sizeof(string), "%s%s\n", string, LocationData[playerid][i][locationName]);
				}
				Dialog_Show(playerid, CustomLocations, DIALOG_STYLE_LIST, "Localizaciones Personalizadas", string, "Seleccionar", "Atras");
			}
		}
	}
	return 1;
}

Dialog:FindHouse(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 32)
		    return Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Encontrar Casa", "Coloca la direccion de la casa:", "Aceptar", "Cancelar");

		for (new i = 0; i != MAX_HOUSES; i ++)
		{
			if (HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], inputtext, true))
	    	{
         		Waypoint_Set(playerid, HouseData[i][houseAddress], HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]);
	        	return SendServerMessage(playerid, "Punto marcado en \"%s\" (marcado en el radar).", HouseData[i][houseAddress]);
			}
		}
        Dialog_Show(playerid, FindHouse, DIALOG_STYLE_INPUT, "Encontrar Casa", "Error: No se encontro la casa \"%s\".\n\nColoca la direccion de la casa:", "Aceptar", "Cancelar", inputtext);
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindBusiness(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new bizid = GetClosestBusiness(playerid, listitem + 1);

		if (bizid != -1)
		{
		    Waypoint_Set(playerid, BusinessData[bizid][bizName], BusinessData[bizid][bizPos][0], BusinessData[bizid][bizPos][1], BusinessData[bizid][bizPos][2]);
	        SendServerMessage(playerid, "Punto marcado en el %s mas cercano (marcado en el radar).", inputtext);
		}
		else
		{
			SendErrorMessage(playerid, "El GPS no puede localizar ninguna entrada.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindEntrance(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = GetClosestEntrance(playerid, listitem + 1);

		if (id != -1)
		{
		    Waypoint_Set(playerid, EntranceData[id][entranceName], EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
	        SendServerMessage(playerid, "Punto marcado en el %s (marcado en el radar).", inputtext);
		}
		else
		{
			SendErrorMessage(playerid, "El GPS no pudo localizar ninguna entrada.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:FindJob(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		new id = GetClosestJob(playerid, listitem + 1);

		if (id != -1)
		{
		    static
				str[32];

		    format(str, 32, "Trabajo de %s", inputtext);

		    Waypoint_Set(playerid, str, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
	        SendServerMessage(playerid, "Punto marcado en el %s (marcado en el radar).", str);
		}
		else
		{
			SendErrorMessage(playerid, "El GPS no pudo localizar ningun trabajo.");
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:CustomLocations(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!listitem) {
			Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Agregar Localizacion", "Coloca el nombre deseado de la localizacion:", "Aceptar", "Cancelar");
	    }
	    else
		{
		    new id = Location_GetID(playerid, inputtext);

		    if (id != -1) {
		        PlayerData[playerid][pSelectedSlot] = id;

		        Dialog_Show(playerid, LocationInfo, DIALOG_STYLE_LIST, inputtext, "Marcar\nBorrar Localizacion", "Seleccionar", "Atras");
			}
		}
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:AddLocation(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Agregar Localizacion", "Coloca el nombre deseado de la localizacion:", "Aceptar", "Cancelar");

		if (strlen(inputtext) > 32)
		    return Dialog_Show(playerid, AddLocation, DIALOG_STYLE_INPUT, "Agregar Localizacion", "Error: El nombre no puede superar las 32 letras.\n\nColoca el nombre deseado de la localizacion:", "Aceptar", "Cancelar");

		static
		    Float:fX,
		    Float:fY,
		    Float:fZ,
			id = -1;

		if ((id = House_Inside(playerid)) != -1) {
		    fX = HouseData[id][housePos][0];
		    fY = HouseData[id][housePos][1];
		    fZ = HouseData[id][housePos][2];
		}
		else if ((id = Business_Inside(playerid)) != -1) {
		    fX = BusinessData[id][bizPos][0];
		    fY = BusinessData[id][bizPos][1];
		    fZ = BusinessData[id][bizPos][2];
		}
        else if ((id = Entrance_Inside(playerid)) != -1) {
		    fX = EntranceData[id][entrancePos][0];
		    fY = EntranceData[id][entrancePos][1];
		    fZ = EntranceData[id][entrancePos][2];
		}
		else GetPlayerPos(playerid, fX, fY, fZ);

		Location_Add(playerid, inputtext, fX, fY, fZ);
		SendServerMessage(playerid, "Has agregado a \"%s\" a tu GPS.", inputtext);
	}
	else cmd_gps(playerid, "\1");
	return 1;
}

Dialog:LocationInfo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pSelectedSlot];

	    switch (listitem)
	    {
	        case 0:
	        {
	            Waypoint_Set(playerid, LocationData[playerid][id][locationName], LocationData[playerid][id][locationPos][0], LocationData[playerid][id][locationPos][1], LocationData[playerid][id][locationPos][2]);
				SendServerMessage(playerid, "Punto marcado en \"%s\" (marcado en el radar).", LocationData[playerid][id][locationName]);
			}
			case 1:
			{
			    SendServerMessage(playerid, "Has eliminado \"%s\" de tu GPS.", LocationData[playerid][id][locationName]);

				Location_Delete(playerid, LocationData[playerid][id][locationName]);
				dialog_MainGPS(playerid, 1, 4, "\1");
			}
	    }
	}
	else dialog_MainGPS(playerid, 1, 4, "\1");
	return 1;
}

Dialog:Warrants(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	    return 0;

	if (response)
	{
	    static
	        name[64],
			targetid = INVALID_PLAYER_ID;

		strmid(name, inputtext, 0, strfind(inputtext, "(") - 1);

		if ((targetid = GetPlayerID(name, 0)) == INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "Este jugador ya no esta conectado.");

		if (PlayerData[targetid][pWarrants] < 1)
		    return SendErrorMessage(playerid, "Este jugador no tiene ninguna orden.");

		PlayerData[playerid][pMDCPlayer] = targetid;

		format(name, sizeof(name), "MDC: %s", name);
		Dialog_Show(playerid, WarrantList, DIALOG_STYLE_LIST, name, "Rastrear Jugador\nLimpiar Ordenes", "Seleccionar", "Atras");
	}
	else cmd_omd(playerid, "\1");
	return 1;
}

Dialog:WarrantList(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            SendServerMessage(playerid, "El satelite estra rastreando a %s...", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
	            PlayerData[playerid][pTrackTime] = 3;
			}
			case 1:
			{
			    PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants] = 0;

			    SendServerMessage(playerid, "Has limpiado las ordenes de %s.", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
			    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s ha limpiado las ordenes activas de %s.", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0));

			    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
			}
	    }
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    dialog_MainMDC(playerid, 1, 0, "\1");
	}
	return 1;
}

Dialog:ChargeName(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	    return 0;

	if (response)
	{
	    new targetid;

	    if (sscanf(inputtext, "u", targetid))
	        return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Aplicar Cargos", "Error: Coloca un usuario valido.\n\nColoca el nombre o el ID del jugador:", "Aceptar", "Atras");

		if (targetid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Aplicar Cargos", "Error: Usuario Invalido.\n\nColoca el nombre o el ID del jugador:", "Aceptar", "Atras");

        if (PlayerData[targetid][pWarrants] > 14)
		    return Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Aplicar Cargos", "Error: Este usuario ya tiene 15 ordenes.\n\nColoca el nombre o el ID del jugador:", "Aceptar", "Atras");

		PlayerData[playerid][pMDCPlayer] = targetid;
		Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Aplicar Cargos", "Describe el delito cometido por %s:", "Aceptar", "Atras", ReturnName(PlayerData[playerid][pMDCPlayer], 0));
	}
	else cmd_omd(playerid, "\1");
	return 1;
}

Dialog:PlaceCharge(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)) || PlayerData[playerid][pMDCPlayer] == INVALID_PLAYER_ID)
	    return 0;

	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, PlaceCharge, DIALOG_STYLE_INPUT, "Aplicar Cargos", "Describe el delito cometido por %s:", "Aceptar", "Atras", ReturnName(PlayerData[playerid][pMDCPlayer], 0));

	    PlayerData[PlayerData[playerid][pMDCPlayer]][pWarrants]++;

	    AddWarrant(PlayerData[playerid][pMDCPlayer], playerid, inputtext);
	    SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s le ha colocado un cargo a %s por \"%s\".", ReturnName(playerid, 0), ReturnName(PlayerData[playerid][pMDCPlayer], 0), inputtext);

	    cmd_omd(playerid, "\1");
	}
	else
	{
	    PlayerData[playerid][pMDCPlayer] = INVALID_PLAYER_ID;
	    cmd_omd(playerid, "\1");
	}
	return 1;
}

Dialog:MainMDC(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            static
	                string[512];

				string[0] = 0;

				foreach (new i : Player) if (PlayerData[i][pWarrants] > 0) {
				    format(string, sizeof(string), "%s%s (%d ordenes)\n", string, ReturnName(i, 0), PlayerData[i][pWarrants]);
				}
				if (!strlen(string))
				    return SendErrorMessage(playerid, "No hay ordenes activas.");

				Dialog_Show(playerid, Warrants, DIALOG_STYLE_LIST, "Ordenes Activas", string, "Seleccionar", "Atras");
    		}
    		case 1:
    		{
    		    Dialog_Show(playerid, ChargeName, DIALOG_STYLE_INPUT, "Asignar Cargos", "Coloca el nombre o el ID del jugador:", "Aceptar", "Atras");
			}
			case 2:
    		{
    		    Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "Ver Cargos", "Coloca el nombre o el ID del jugador:", "Aceptar", "Atras");
			}
	    }
	}
	return 1;
}

Dialog:ViewCharges(playerid, response, listitem, inputtext[])
{
	if (GetFactionType(playerid) != FACTION_POLICE || !IsACruiser(GetPlayerVehicleID(playerid)))
	    return 0;

	if (response)
	{
		if (isnull(inputtext) || strlen(inputtext) > 24)
		    return Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "Ver Cargos", "Coloca el nombre o el ID del jugador:", "Aceptar", "Atras");

		if (IsNumeric(inputtext) && IsPlayerConnected(strval(inputtext))) {
	        ViewCharges(playerid, ReturnName(strval(inputtext)));
		}
	    else if (!IsNumeric(inputtext)) {
	        ViewCharges(playerid, inputtext);
		}
		else {
		    Dialog_Show(playerid, ViewCharges, DIALOG_STYLE_INPUT, "View Charges", "Error: Usuario Invalido.\n\nColoca el nombre o el ID del jugador:", "Submit", "Atras");
		}
	}
	else cmd_omd(playerid, "\1");
	return 1;
}

Dialog:Locker(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

	if (response)
	{
	    static
	        skins[8],
	        string[512];

		string[0] = 0;

	    if (FactionData[factionid][factionType] != FACTION_GANG)
	    {
	        switch (listitem)
	        {
	            case 0:
	            {
	                if (!PlayerData[playerid][pOnDuty])
	                {
	                    PlayerData[playerid][pOnDuty] = true;
	                    SetPlayerArmour(playerid, 100.0);

	                    SetFactionColor(playerid);
	                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha entrado y ahora está de servicio.", ReturnName(playerid, 0));
	                }
	                else
	                {
	                    PlayerData[playerid][pOnDuty] = false;
	                    SetPlayerArmour(playerid, 0.0);

	                    SetPlayerColor(playerid, DEFAULT_COLOR);
	                    SetPlayerSkin(playerid, PlayerData[playerid][pSkin]);

	                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha transcurrido y ahora está fuera de servicio.", ReturnName(playerid, 0));
	                }
				}
				case 1:
				{
				    SetPlayerArmour(playerid, 100.0);
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s va al locker y saca un chaleco blindado.", ReturnName(playerid, 0));
				}
				case 2:
				{
					for (new i = 0; i < sizeof(skins); i ++)
					    skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

					ShowModelSelectionMenu(playerid, "Elegir Skin", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
				}
				case 3:
				{
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i])
							format(string, sizeof(string), "%sArma %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else format(string, sizeof(string), "%sSlot Vacío\n", string);
				    }
				    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Armas del Locker", string, "Seleccionar", "Cancelar");
				}
				case 4:
				{
				    if (Inventory_Count(playerid, "Cargador") >= 5)
						return SendErrorMessage(playerid, "No puedes agarrar mas cargadores.");
					if (Inventory_Count(playerid, "Cargador") == 4)
					{
						Inventory_Add(playerid, "Cargador", 19995, 1);
					}
					else if (Inventory_Count(playerid, "Cargador") == 3)
					{
						Inventory_Add(playerid, "Cargador", 19995, 2);
					}
					else if (Inventory_Count(playerid, "Cargador") == 2)
					{
						Inventory_Add(playerid, "Cargador", 19995, 3);
					}
					else if (Inventory_Count(playerid, "Cargador") == 1)
					{
						Inventory_Add(playerid, "Cargador", 19995, 4);
					}
					else if (Inventory_Count(playerid, "Cargador") == 0)
					{
						Inventory_Add(playerid, "Cargador", 19995, 5);
					}
					Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Caja Fuerte de Faccion", "Ponerse en servicio\nChaleco Blindado\nSkins\nArmas\nCargadores\nCajas de Municion", "Seleccionar", "Cancelar");
				}
				case 5:
				{
					if (Inventory_Count(playerid, "Caja de Municion") >= 3)
						return SendErrorMessage(playerid, "No puedes agarrar mas cajas de municion.");
					if (Inventory_Count(playerid, "Caja de Municion") == 2)
					{
						Inventory_Add(playerid, "Caja de Municion", 19832, 1);
					}
					else if (Inventory_Count(playerid, "Caja de Municion") == 1)
					{
						Inventory_Add(playerid, "Caja de Municion", 19832, 2);
					}
					else if (Inventory_Count(playerid, "Caja de Municion") == 0)
					{
						Inventory_Add(playerid, "Caja de Municion", 19832, 3);
					}
					Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Caja Fuerte de Faccion", "Ponerse en servicio\nChaleco Blindado\nSkins\nArmas\nCargadores\nCajas de Municion", "Seleccionar", "Cancelar");
				}
			}
	    }
	    else
	    {
	        switch (listitem)
	        {
				case 0:
				{
					for (new i = 0; i < sizeof(skins); i ++)
					    skins[i] = (FactionData[factionid][factionSkins][i]) ? (FactionData[factionid][factionSkins][i]) : (19300);

					ShowModelSelectionMenu(playerid, "Elegir Skin", MODEL_SELECTION_FACTION_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
				}
				case 1:
				{
				    for (new i = 0; i < 10; i ++)
					{
				        if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) != FACTION_GANG)
							format(string, sizeof(string), "%sArma %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]));

						else if (FactionData[factionid][factionWeapons][i] && GetFactionType(playerid) == FACTION_GANG)
							format(string, sizeof(string), "%sArmas %d: %s (%d municion)\n", string, i + 1, ReturnWeaponName(FactionData[factionid][factionWeapons][i]), FactionData[factionid][factionAmmo][i]);

						else format(string, sizeof(string), "%sSlot Vacío\n", string);
				    }
				    Dialog_Show(playerid, LockerWeapons, DIALOG_STYLE_LIST, "Armas del Locker", string, "Seleccionar", "Cancelar");
				}
			}
	    }
	}
	return 1;
}

Dialog:LockerWeapons(playerid, response, listitem, inputtext[])
{
	new factionid = PlayerData[playerid][pFaction];

	if (factionid == -1 || !IsNearFactionLocker(playerid))
		return 0;

	if (response)
	{
	    new
	        weaponid = FactionData[factionid][factionWeapons][listitem];
	    if (weaponid)
		{
			switch (weaponid)
		    {
			    case 22:
			    {
					if (Inventory_Count(playerid, "Colt 45") >= 1)
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
					if (PlayerHasWeapon(playerid, 22))
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
				    Inventory_Add(playerid, "Colt 45", 346, 1);
				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mete la mano en el locker y saca una Colt 45.", ReturnName(playerid, 0));
				}
				case 24:
				{
					if (Inventory_Count(playerid, "Desert Eagle") >= 1)
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
					if (PlayerHasWeapon(playerid, 24))
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
					Inventory_Add(playerid, "Desert Eagle", 348, 1);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mete la mano en el locker y saca una Desert Eagle.", ReturnName(playerid, 0));
				}
				case 25:
				{
					if (Inventory_Count(playerid, "Escopeta") >= 1)
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
					if (PlayerHasWeapon(playerid, 25))
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
			        Inventory_Add(playerid, "Escopeta", 349, 1);
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mete la mano en el locker y saca una Escopeta.", ReturnName(playerid, 0));
				}
				case 28:
			    {
					if (Inventory_Count(playerid, "Micro SMG") >= 1)
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
					if (PlayerHasWeapon(playerid, 28))
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
			        Inventory_Add(playerid, "Micro SMG", 352, 1);
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mete la mano en el locker y saca una Micro SMG.", ReturnName(playerid, 0));
				}
				case 29:
				{
					if (Inventory_Count(playerid, "MP5") >= 1)
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
					if (PlayerHasWeapon(playerid, 29))
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
			        Inventory_Add(playerid, "MP5", 352, 1);
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mete la mano en el locker y saca una MP5.", ReturnName(playerid, 0));
				}
				case 32:
			    {
			    	if (Inventory_Count(playerid, "Tec-9") >= 1)
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
					if (PlayerHasWeapon(playerid, 32))
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
			        Inventory_Add(playerid, "Tec-9", 372, 1);
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mete la mano en el locker y saca una Tec-9.", ReturnName(playerid, 0));
				}
				case 30:
			    {
			    	if (Inventory_Count(playerid, "AK-47") >= 1)
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
					if (PlayerHasWeapon(playerid, 30))
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
			        Inventory_Add(playerid, "AK-47", 355, 1);
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mete la mano en el locker y saca una AK-47.", ReturnName(playerid, 0));
				}
				case 31:
			    {
			    	if (Inventory_Count(playerid, "M4") >= 1)
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
					if (PlayerHasWeapon(playerid, 31))
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
			        Inventory_Add(playerid, "M4", 356, 1);
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mete la mano en el locker y saca una M4.", ReturnName(playerid, 0));
				}
				case 33:
			    {
			    	if (Inventory_Count(playerid, "Rifle") >= 1)
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
					if (PlayerHasWeapon(playerid, 33))
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
			        Inventory_Add(playerid, "Rifle", 357, 1);
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mete la mano en el locker y saca un Rifle.", ReturnName(playerid, 0));
				}
		        case 34:
			    {
			    	if (Inventory_Count(playerid, "Sniper") >= 1)
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
					if (PlayerHasWeapon(playerid, 34))
						return SendErrorMessage(playerid, "No puedes quitar del locker un arma que ya tienes.");
			        Inventory_Add(playerid, "Sniper", 358, 1);
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mete la mano en el locker y saca un Sniper.", ReturnName(playerid, 0));
				}
			}

			if (GetFactionType(playerid) == FACTION_GANG)
		    {
		        FactionData[factionid][factionWeapons][listitem] = 0;
		        FactionData[factionid][factionAmmo][listitem] = 0;

		        Faction_Save(factionid);
			}
		}
		else
		{
		    if (GetFactionType(playerid) == FACTION_GANG)
		    {
		        if ((weaponid = GetWeapon(playerid)) == 0)
		            return SendErrorMessage(playerid, "No estas sosteniendo ningun arma.");

		        FactionData[factionid][factionWeapons][listitem] = weaponid;
		        FactionData[factionid][factionAmmo][listitem] = GetPlayerAmmo(playerid);

		        Faction_Save(factionid);

                ResetWeapon(playerid, weaponid);
		        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca una %s y la guarda en el locker.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
			}
			else
			{
			    SendErrorMessage(playerid, "El slot seleccionado esta vacio.");
			}
	    }
	}
	else {
	    cmd_fcaja(playerid, "\1");
	}
	return 1;
}

Dialog:FactionLocker(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
			    static
			        Float:x,
			        Float:y,
			        Float:z;

				GetPlayerPos(playerid, x, y, z);

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][0] = x;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][1] = y;
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerPos][2] = z;

				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerInt] = GetPlayerInterior(playerid);
				FactionData[PlayerData[playerid][pFactionEdit]][factionLockerWorld] = GetPlayerVirtualWorld(playerid);

				Faction_Refresh(PlayerData[playerid][pFactionEdit]);
				Faction_Save(PlayerData[playerid][pFactionEdit]);
				SendServerMessage(playerid, "Has ajustado la posicion del locker de la faccion ID: %d.", PlayerData[playerid][pFactionEdit]);
			}
			case 1:
			{
				static
				    string[512];

				string[0] = 0;

			    for (new i = 0; i < 10; i ++)
				{
			        if (FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i])
						format(string, sizeof(string), "%sArma %d: %s\n", string, i + 1, ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][i]));

					else format(string, sizeof(string), "%sSlot Vacío\n", string);
			    }
			    Dialog_Show(playerid, FactionWeapons, DIALOG_STYLE_LIST, "Armas del Locker", string, "Seleccionar", "Cancelar");
			}
		}
	}
	return 1;
}

Dialog:FactionWeapons(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    PlayerData[playerid][pSelectedSlot] = listitem;
	    Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Editar Arma", "Cambiar Arma (%d)\nLimpiar Slot", "Seleccionar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]);
	}
	return 1;
}

Dialog:FactionWeapon(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        	Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Cambiar Arma", "Arma Actual: %s (%d)\n\nColoca el nuevo ID de arma para el slot %d:", "Aceptar", "Cancelar", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);
			case 1:
			{
			    FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = 0;
				FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = 0;

				Faction_Save(PlayerData[playerid][pFactionEdit]);

				dialog_FactionLocker(playerid, 1, 1, "\1");
				SendServerMessage(playerid, "Has eliminado el arma en el slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
			}
	    }
	}
	else {
	    dialog_FactionLocker(playerid, 1, 1, "\1");
	}
	return 1;
}

Dialog:FactionWeaponID(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new weaponid = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Cambiar Arma", "Arma Actual: %s (%d)\n\nColoca el nuevo ID de arma para el slot %d:", "Aceptar", "Cancelar", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if (weaponid != 22 || 24 || 25 || 28 || 29 || 30 || 31 || 32 || 33 || 34)
		    return Dialog_Show(playerid, FactionWeaponID, DIALOG_STYLE_INPUT, "Cambiar Arma", "Error: IDs compatibles: 22 24 25 28 29 30 31 32 33 34.\n\nArma Actual: %s (%d)\n\nColoca el nuevo ID de arma para el slot %d:", "Aceptar", "Cancelar", ReturnWeaponName(FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]]), FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]] = weaponid;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Editar Arma", "Cambiar Arma (%d)\nColocar Municion (%d)\nLimpiar Slot", "Seleccionar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);

	    if (weaponid) {
		    SendServerMessage(playerid, "Has cambiado el arma en el slot %d a %s.", PlayerData[playerid][pSelectedSlot] + 1, ReturnWeaponName(weaponid));
		}
		else {
		    SendServerMessage(playerid, "Has eliminado el arma del slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:FactionWeaponAmmo(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new ammo = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Colocar Municion", "Municion Actual: %d\n\nColoca la municion para el slot %d:", "Aceptar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

		if (ammo < 1 || ammo > 15000)
		    return Dialog_Show(playerid, FactionWeaponAmmo, DIALOG_STYLE_INPUT, "Colocar Municion", "Error: La municion no puede ser menor a 1 o mayor a 15.000.\n\nMunicion Actual: %d\n\nColoca la municion para el slot %d:", "Aceptar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]], PlayerData[playerid][pSelectedSlot]);

        FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]] = ammo;
        Faction_Save(PlayerData[playerid][pFactionEdit]);

		Dialog_Show(playerid, FactionWeapon, DIALOG_STYLE_LIST, "Editar Arma", "Cambiar Arma (%d)\nColocar Municion (%d)\nLimpiar Slot", "Seleccionar", "Cancelar", FactionData[PlayerData[playerid][pFactionEdit]][factionWeapons][PlayerData[playerid][pSelectedSlot]], FactionData[PlayerData[playerid][pFactionEdit]][factionAmmo][PlayerData[playerid][pSelectedSlot]]);
		SendServerMessage(playerid, "Has cambiado la municion del slot %d a %d.", PlayerData[playerid][pSelectedSlot] + 1, ammo);
	}
	return 1;
}

Dialog:FactionSkin(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    static
	        skins[299];

		switch (listitem)
		{
		    case 0:
		        Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Agregar por ID", "Coloca el ID del skin (0-311):", "Agregar", "Cancelar");

			case 1:
			{
			    for (new i = 0; i < sizeof(skins); i ++)
			        skins[i] = i + 1;

				ShowModelSelectionMenu(playerid, "Agregar Skin", MODEL_SELECTION_ADD_SKIN, skins, sizeof(skins), -16.0, 0.0, -55.0);
			}
			case 2:
			{
			    FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = 0;

			    Faction_Save(PlayerData[playerid][pFactionEdit]);
			    SendServerMessage(playerid, "Has eliminado el skin en el slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
			}
		}
	}
	return 1;
}

Dialog:FactionModel(playerid, response, listitem, inputtext[])
{
	if (PlayerData[playerid][pFactionEdit] == -1)
	    return 0;

	if (response)
	{
	    new skin = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Agregar por ID", "Coloca el ID del skin (0-311):", "Agregar", "Cancelar");

		if (skin < 0 || skin > 311)
		    return Dialog_Show(playerid, FactionModel, DIALOG_STYLE_INPUT, "Agregar por ID", "Error: El ID del skin tiene que estar entre 0 y 311.\n\nColoca el ID del skin (0-311):", "Agregar", "Cancelar");

        FactionData[PlayerData[playerid][pFactionEdit]][factionSkins][PlayerData[playerid][pSelectedSlot]] = skin;
		Faction_Save(PlayerData[playerid][pFactionEdit]);

		if (skin) {
		    SendServerMessage(playerid, "Has cambiado el ID del skin en el slot %d a %d.", PlayerData[playerid][pSelectedSlot] + 1, skin);
		}
		else {
		    SendServerMessage(playerid, "Has eliminado el skin en el slot %d.", PlayerData[playerid][pSelectedSlot] + 1);
		}
	}
	return 1;
}

Dialog:JobList(playerid, response, listitem, inputtext[])
{
	/*
	    case 1: str = "Courier";
		case 2: str = "Mechanic";
		case 3: str = "Taxi Driver";
		case 4: str = "Cargo Unloader";
		case 5: str = "Miner";
		case 6: str = "Food Vendor";
		case 7: str = "Garbage Man";
		case 8: str = "Weapon Smuggler";
	*/
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Camionero", "{FFFFFF}El trabajo de {FF6347}Camionero{FFFFFF} se usa para aumentar el stock en los negocios.\nUsa {FF6347}/repartir{FFFFFF} para cargar el camion y {FF6347}/descargar{FFFFFF} para descargar la carga.", "Cerrar", "Atras");

            case 1:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Taxista", "{FFFFFF}El trabajo de {FF6347}Taxista{FFFFFF} se usa para que un jugador transporte a otro.\nUsa {FF6347}/taxi{FFFFFF} dentro de un taxi para empezar el servicio.", "Cerrar", "Atras");

            case 2:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Dercargador de Carga", "{FFFFFF}El trabajo de {FF6347}Decargador de Carga{FFFFFF} se usa con una maquina elevadora\npara mover y colocar cajas en su lugar.\nUsa {FF6347}/cargarcarga{FFFFFF} para cargar una caja y llevarla al {FF6347}marcador{FFFFFF}.", "Cerrar", "Atras");

            case 3:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Minero", "{FFFFFF}El trabajo de {FF6347}Minero{FFFFFF} se usa para minar piedras del piso.\nUsa {FF6347}/minar{FFFFFF} para minar y {FF6347}LMB{FFFFFF} para empezar la mineria.", "Cerrar", "Atras");

        	case 4:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Vendedor de Comida", "{FFFFFF}El trabajo de {FF6347}Vendedor de Comida{FFFFFF} se usa para vender comida a otros jugadores.\nUsa {FF6347}/vendercomida{FFFFFF} dentro de un camion de comida para venderla.", "Cerrar", "Atras");

            case 5:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Basurero", "{FFFFFF}El trabajo de {FF6347}Garbage Man{FFFFFF} job allows players to deliver trash in return for money.\nUse {FF6347}/takebag{FFFFFF} whilst near a garbage bin to load a bag of garbage.", "Cerrar", "Atras");

            case 6:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Clasificador de Paquetes", "{FFFFFF}El trabajo de {FF6347}Clasificador de Paquetes{FFFFFF} se usa para clasificar paquetes a cambio de dinero.\nUsa {FF6347}/clasificar{FFFFFF} en el lugar indicado para empezar.", "Cerrar", "Atras");

            case 7:
	            Dialog_Show(playerid, JobHelp, DIALOG_STYLE_MSGBOX, "Contrabandista de Armas", "{FFFFFF}El trabajo de {FF6347}Contrabandista{FFFFFF} se usa para conseguir armas a partir de cajas.\nUsa {FF6347}/crearpartes{FFFFFF} mientras tienes una caja de armas en mano para crearlas.", "Cerrar", "Atras");

	    }
	}
	return 1;
}

Dialog:JobHelp(playerid, response, listitem, inputtext[])
{
	if (!response) cmd_trabajos(playerid, "\1");
	return 1;
}

Dialog:Crates(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (PlayerData[playerid][pCarryCrate] != -1)
	        return SendErrorMessage(playerid, "Ya estas llevando una caja.");

	    new id = strfind(inputtext, "#");

	    if (id != -1) {
	        id = strval(inputtext[id + 1]);

	        CrateData[id][crateVehicle] = INVALID_VEHICLE_ID;
	        PlayerData[playerid][pCarryCrate] = id;

            SetPlayerAttachedObject(playerid, 4, 964, 1, -0.157020, 0.413313, 0.000000, 0.000000, 88.000000, 180.000000, 0.500000, 0.500000, 0.500000);
            SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toma una caja de un vehiculo.", ReturnName(playerid, 0));
			SendServerMessage(playerid, "Has tomado una caja de %s del vehiculo.", Crate_GetType(CrateData[id][crateType]));
		}
	}
	return 1;
}

Dialog:AddVehicleModel(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
	        if (isnull(inputtext))
	            return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Agregar Vehiculo", "Coloca el nombre o el ID del vehiculo:", "Agregar", "Cancelar");

			new model = GetVehicleModelByName(inputtext);

			if (!model)
			    return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Agregar Vehiculo", "Error: ID o nombre invalido.\n\nColoca el nombre o el ID del vehiculo:", "Agregar", "Cancelar");

        	for (new i = 0; i != MAX_DEALERSHIP_CARS; i ++)
			{
				if (DealershipCars[id][i][vehModel] == model)
	            	return Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Agregar Vehiculo", "Error: Este vehiculo ya se vende en este negocio.\n\nColoca el nombre o el ID del vehiculo:", "Agregar", "Cancelar");
			}
			PlayerData[playerid][pDealerCar] = model;
			Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Colocar Precio", "Coloca el precio para el '%s':", "Aceptar", "Cancelar", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
	    }
	}
	return 1;
}

Dialog:AddVehicle(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
			if (!listitem)
			{
				Dialog_Show(playerid, AddVehicleModel, DIALOG_STYLE_INPUT, "Agregar Vehiculo", "Coloca el nombre o el ID del vehiculo:", "Agregar", "Cancelar");
			}
		    else
			{
				static
					cars[212];

				for (new i = 0; i < sizeof(cars); i ++)
  					cars[i] = i + 400;

				ShowModelSelectionMenu(playerid, "Agregar Vehiculo", MODEL_SELECTION_DEALER_ADD, cars, sizeof(cars), -16.0, 0.0, -55.0);
			}
		}
	}
	return 1;
}

Dialog:EnterNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    static
	        name[32],
			string[128];

		strunpack(name, PlayerData[playerid][pEditingItem]);

	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Contactos", "Contacto: %s\n\nColoca el numero de telefono de este contacto:", "Aceptar", "Atras", name);

		for (new i = 0; i != MAX_CONTACTS; i ++)
		{
			if (!ContactData[playerid][i][contactExists])
			{
            	ContactData[playerid][i][contactExists] = true;
            	ContactData[playerid][i][contactNumber] = strval(inputtext);

				format(ContactData[playerid][i][contactName], 32, name);

				format(string, sizeof(string), "INSERT INTO `contacts` (`ID`, `contactName`, `contactNumber`) VALUES('%d', '%s', '%d')", PlayerData[playerid][pID], SQL_ReturnEscaped(name), ContactData[playerid][i][contactNumber]);
				mysql_tquery(g_iHandle, string, "OnContactAdd", "dd", playerid, i);

				SendServerMessage(playerid, "Has agregado a \"%s\" a tus contactos.", name);
                return 1;
			}
	    }
	    SendErrorMessage(playerid, "No hay espacio para mas contactos.");
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:NewContact(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
			return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Nuevo Contacto", "Error: No pusiste un nombre de contacto.\n\nEscribe el nombre del contacto:", "Aceptar", "Atras");

	    if (strlen(inputtext) > 32)
	        return Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Nuevo Contacto", "Error: El nombre de contacto no puede superar las 32 letras.\n\nEscribe el nombre del contacto:", "Aceptar", "Atras");

		strpack(PlayerData[playerid][pEditingItem], inputtext, 32);

	    Dialog_Show(playerid, EnterNumber, DIALOG_STYLE_INPUT, "Numero de Contacto", "Contacto: %s\n\nEscribe el numero del contacto:", "Aceptar", "Atras", inputtext);
	}
	else {
		ShowContacts(playerid);
	}
	return 1;
}

Dialog:ContactInfo(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			id = PlayerData[playerid][pContact],
			string[72];

		switch (listitem)
		{
		    case 0:
		    {
		        format(string, 16, "%d", ContactData[playerid][id][contactNumber]);
				cmd_llamar(playerid, string);
		    }
		    case 1:
		    {
		        format(string, sizeof(string), "DELETE FROM `contacts` WHERE `ID` = '%d' AND `contactID` = '%d'", PlayerData[playerid][pID], ContactData[playerid][id][contactID]);
		        mysql_tquery(g_iHandle, string);

		        SendServerMessage(playerid, "Has eliminado a \"%s\" de tus contactos.", ContactData[playerid][id][contactName]);

		        ContactData[playerid][id][contactExists] = false;
		        ContactData[playerid][id][contactNumber] = 0;
		        ContactData[playerid][id][contactID] = 0;

		        ShowContacts(playerid);
		    }
		}
	}
	else {
	    ShowContacts(playerid);
	}
	return 1;
}

Dialog:Contacts(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (!listitem) {
	        Dialog_Show(playerid, NewContact, DIALOG_STYLE_INPUT, "Nuevo Contacto", "Escribe el numero del contacto:", "Aceptar", "Atras");
	    }
	    else {
		    PlayerData[playerid][pContact] = ListedContacts[playerid][listitem - 1];

	        Dialog_Show(playerid, ContactInfo, DIALOG_STYLE_LIST, ContactData[playerid][PlayerData[playerid][pContact]][contactName], "Llamar Contacto\nBorrar Contacto", "Seleccionar", "Atras");
	    }
	}
	else {
		cmd_celular(playerid, "\1");
	}
	for (new i = 0; i != MAX_CONTACTS; i ++) {
	    ListedContacts[playerid][i] = -1;
	}
	return 1;
}

Dialog:DialNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
	        string[16];

	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Marcar Numero", "Escribe el numero que quieres marcar:", "Llamar", "Atras");

        format(string, 16, "%d", strval(inputtext));
		cmd_llamar(playerid, string);
	}
	else {
		cmd_celular(playerid, "\1");
	}
	return 1;
}

Dialog:SendText(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new number = strval(inputtext);

	    if (isnull(inputtext) || !IsNumeric(inputtext))
	        return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Enviar SMS", "Escribe el numero al que le quieres mandar el SMS:", "Marcar", "Atras");

        if (GetNumberOwner(number) == INVALID_PLAYER_ID)
            return Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Enviar SMS", "Error: Ese numero no esta en linea.\n\nEscribe el numero al que le quieres mandar el SMS:", "Marcar", "Atras");

		PlayerData[playerid][pContact] = GetNumberOwner(number);
		Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "SMS", "Escribe el mensaje que le quieres enviar a %s:", "Enviar", "Atras", ReturnName(PlayerData[playerid][pContact], 0));
	}
	else {
		cmd_celular(playerid, "\1");
	}
	return 1;
}

Dialog:TextMessage(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		if (isnull(inputtext))
			return Dialog_Show(playerid, TextMessage, DIALOG_STYLE_INPUT, "Text Message", "Error: Escribe un mensaje para enviar.\n\nEscribe el mensaje que le quieres enviar a %s:", "Enviar", "Atras", ReturnName(PlayerData[playerid][pContact], 0));

		new targetid = PlayerData[playerid][pContact];

		if (!IsPlayerConnected(targetid) || !PlayerData[targetid][pPhone])
		    return SendErrorMessage(playerid, "El numero ya no esta mas online.");

		GiveMoney(playerid, -1);
		ShowPlayerFooter(playerid, "Has ~r~pagado~w~ $1 para enviar el mensaje.");

		SendClientMessageEx(targetid, COLOR_YELLOW, "[SMS]: %s - %s (%d)", inputtext, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
		SendClientMessageEx(playerid, COLOR_YELLOW, "[SMS]: %s - %s (%d)", inputtext, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);

        PlayerPlaySoundEx(targetid, 21001);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su telefono y envia un SMS.", ReturnName(playerid, 0));
	}
	else {
        Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Enviar SMS", "Escribe el numero al que le quieres mandar el SMS:", "Marcar", "Atras");
	}
	return 1;
}

Dialog:MyPhone(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
		    case 0:
		    {
		        if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Tu telefono tiene que estar prendido.");

				Dialog_Show(playerid, DialNumber, DIALOG_STYLE_INPUT, "Marcar Numero", "Escribe el numero que quieres marcar:", "Marcr", "Atras");
			}
			case 1:
			{
			    if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Tu telefono tiene que estar prendido.");

			    ShowContacts(playerid);
			}
		    case 2:
		    {
		        if (PlayerData[playerid][pPhoneOff])
		            return SendErrorMessage(playerid, "Tu telefono tiene que estar prendido.");

		        Dialog_Show(playerid, SendText, DIALOG_STYLE_INPUT, "Enviar SMS", "Escribe el numero al que le quieres mandar el SMS:", "Marcar", "Atras");
			}
			case 3:
			{
			    if (!PlayerData[playerid][pPhoneOff])
			    {
           			if (PlayerData[playerid][pCallLine] != INVALID_PLAYER_ID) {
			        	CancelCall(playerid);
					}
					PlayerData[playerid][pPhoneOff] = 1;
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s prendió su telefono.", ReturnName(playerid, 0));
				}
				else
				{
				    PlayerData[playerid][pPhoneOff] = 0;
			        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s apagó su telefono.", ReturnName(playerid, 0));
				}
			}
		}
	}
	return 1;
}

Dialog:ListedFurniture(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = House_Inside(playerid);

	    if (id != -1 && House_IsOwner(playerid, id))
	    {
	        PlayerData[playerid][pEditFurniture] = ListedFurniture[playerid][listitem];

			Dialog_Show(playerid, FurnitureList, DIALOG_STYLE_LIST, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], "Editar Posicion\nGuardar Muebles en Inventario\nBorrar Muebles", "Seleccionar", "Cancelar");
	    }
	}
	for (new i = 0; i != MAX_FURNITURE; i ++) {
	    ListedFurniture[playerid][i] = -1;
	}
	return 1;
}

Dialog:FurnitureList(playerid, response, listitem, inputtext[])
{
	if (response)
	{
        new id = House_Inside(playerid);

	    if (id != -1 && House_IsOwner(playerid, id))
	    {
	   		switch (listitem)
		    {
		        case 0:
				{
					EditDynamicObject(playerid, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureObject]);
					SendServerMessage(playerid, "Estas editando la posicion del mueble \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
				}
				case 1:
				{
				    new item = Inventory_Add(playerid, FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName], FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureModel]);

				    if (item == -1)
        				return SendErrorMessage(playerid, "No tienes mas espacio en tu inventario.");

				    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardo el mueble \"%s\".", ReturnName(playerid, 0), FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);
				    SendServerMessage(playerid, "Has agarrado tu \"%s\". El objeto esta en tu inventario.", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);

				    Furniture_Delete(PlayerData[playerid][pEditFurniture]);
					CancelEdit(playerid);

				    PlayerData[playerid][pEditFurniture] = -1;
				}
				case 2:
				{
				    Furniture_Delete(PlayerData[playerid][pEditFurniture]);
				    SendServerMessage(playerid, "Has borrado el mueble \"%s\".", FurnitureData[PlayerData[playerid][pEditFurniture]][furnitureName]);

				    CancelEdit(playerid);
				    PlayerData[playerid][pEditFurniture] = -1;
				}
			}
		}
		else {
			PlayerData[playerid][pEditFurniture] = -1;
		}
	}
	else {
	    PlayerData[playerid][pEditFurniture] = -1;
	}
	return 1;
}

Dialog:Trunk(playerid, response, listitem, inputtext[])
{
    new carid = Car_Nearest(playerid);

	if (CarData[carid][carImpounded] != -1)
    	return SendErrorMessage(playerid, "Este vehiculo esta embargado, no puedes usarlo.");

	if (carid != -1 && !CarData[carid][carLocked])
 	{
		if (response)
		{
			if (!CarData[carid][carWeapons][listitem])
			{
			    if (!GetWeapon(playerid))
			        return SendErrorMessage(playerid, "No estas sosteniendo ningun arma.");

       			if (GetWeapon(playerid) == 23 && PlayerData[playerid][pTazer])
	    			return SendErrorMessage(playerid, "No puedes guardar un Tazer en tu maletero.");

                if (GetWeapon(playerid) == 25 && PlayerData[playerid][pBeanBag])
	    			return SendErrorMessage(playerid, "No puedes guardar una escopeta de balas de goma en tu maletero.");

				if (!Car_IsOwner(playerid, carid) && GetFactionType(playerid) == FACTION_POLICE)
        			return SendErrorMessage(playerid, "No puedes guardar armas (faccion).");

	   			CarData[carid][carWeapons][listitem] = GetWeapon(playerid);
	            CarData[carid][carAmmo][listitem] = GetPlayerAmmo(playerid);

	            ResetWeapon(playerid, CarData[carid][carWeapons][listitem]);
	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s guardo una %s en su maletero.", ReturnName(playerid, 0), ReturnWeaponName(CarData[carid][carWeapons][listitem]));

	            Car_Save(carid);
				Car_WeaponStorage(playerid, carid);
			}
			else
			{
			    GiveWeaponToPlayer(playerid, CarData[carid][carWeapons][listitem], CarData[carid][carAmmo][listitem]);
	            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca una %s de su maletero.", ReturnName(playerid, 0), ReturnWeaponName(CarData[carid][carWeapons][listitem]));

	            CarData[carid][carWeapons][listitem] = 0;
	            CarData[carid][carAmmo][listitem] = 0;

	            Car_Save(carid);
	            Car_WeaponStorage(playerid, carid);
			}
	    }
		else {
		    Car_ShowTrunk(playerid, carid);
		}
	}
	return 1;
}

Dialog:ConfirmCarBuy(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			bizid = Business_Inside(playerid),
			carid = PlayerData[playerid][pDealerCar],
			price = DealershipCars[bizid][carid][vehPrice];

		if (bizid != -1 && BusinessData[bizid][bizExists] && BusinessData[bizid][bizType] == 5)
		{
			if (GetMoney(playerid) < price)
			    return SendErrorMessage(playerid, "No tienes suficiente dinero para la compra.");

			if (Car_GetCount(playerid) >= MAX_OWNABLE_CARS)
			    return SendErrorMessage(playerid, "No puedes tener mas de %d vehiculos.", MAX_OWNABLE_CARS);

			new id = Car_Create(PlayerData[playerid][pID], DealershipCars[bizid][carid][vehModel], BusinessData[bizid][bizSpawn][0], BusinessData[bizid][bizSpawn][1], BusinessData[bizid][bizSpawn][2], BusinessData[bizid][bizSpawn][3], 1, 1);

			if (id != -1)
			{
			    Tax_AddPercent(price);

			    BusinessData[bizid][bizVault] += Tax_Percent(price);
			    Business_Save(bizid);

				SendServerMessage(playerid, "Has comprado un %s por %s!", ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
				GiveMoney(playerid, -price);

				ShowPlayerFooter(playerid, "~w~Vehiculo ~p~comprado!");
				Log_Write("logs/car_log.txt", "[%s] %s compro un %s por %s.", ReturnDate(), ReturnName(playerid, 0), ReturnVehicleModelName(DealershipCars[bizid][carid][vehModel]), FormatNumber(price));
			}
		}
	}
	return 1;
}

Dialog:DealerCarPrice(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (isnull(inputtext) || strval(inputtext) < 1)
		        return Dialog_Show(playerid, DealerCarPrice, DIALOG_STYLE_INPUT, "Colocar Precio", "Escribe el precio para el '%s':", "Aceptar", "Cancelar", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));

		    Business_AddVehicle(id, PlayerData[playerid][pDealerCar], strval(inputtext));
	        Business_EditCars(playerid, id);

		    SendServerMessage(playerid, "Has agregado un '%s' al concesionario.", ReturnVehicleModelName(PlayerData[playerid][pDealerCar]));
		    return 1;
		}
	}
	return 1;
}

Dialog:CarPrice(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (isnull(inputtext) || strval(inputtext) < 1)
		        return Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Colocar Precio", "El precio actual del '%s' es %s.\n\nEscribe el precio para el vehiculo:", "Aceptar", "Cancelar", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));

			new
			    string[128];

			DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice] = strval(inputtext);

			format(string, sizeof(string), "UPDATE `dealervehicles` SET `vehPrice` = '%d' WHERE `ID` = '%d' AND `vehID` = '%d'", strval(inputtext), BusinessData[id][bizID], DealershipCars[id][PlayerData[playerid][pDealerCar]][vehID]);
			mysql_tquery(g_iHandle, string);

			SendServerMessage(playerid, "Ahora el precio del '%s' será %s.", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
			Business_EditCars(playerid, id);
		}
		return 1;
	}
	return 1;
}

Dialog:CarOptions(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new id = PlayerData[playerid][pDealership];

	    if (id != -1 && BusinessData[id][bizExists] && BusinessData[id][bizType] == 5)
	    {
		    if (listitem == 0)
		    {
		        Dialog_Show(playerid, CarPrice, DIALOG_STYLE_INPUT, "Colocar Precio", "El precio actual del '%s' es %s.\n\nEscribe el precio para el vehiculo:", "Aceptar", "Cancelar", ReturnVehicleModelName(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel]), FormatNumber(DealershipCars[id][PlayerData[playerid][pDealerCar]][vehPrice]));
		    }
		    else if (listitem == 1)
		    {
			    new model = DealershipCars[id][PlayerData[playerid][pDealerCar]][vehModel];
			    Business_RemoveVehicle(id, model);

				SendServerMessage(playerid, "Has eliminado el '%s' de este concesionario.", ReturnVehicleModelName(model));
				Business_EditCars(playerid, id);
			}
		}
	}
	return 1;
}

Dialog:BankAccount(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Retirar Fondos", "El saldo de su cuenta bancaria: %s\n\nIngrese la cantidad de dinero que desea retirar:", "Retirar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
	        case 1:
	        {
				Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Depositar Fondos", "El saldo de su cuenta bancaria: %s\n\nPor favor elije la cantidad de dinero que deseas depositar:", "Depositar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
			case 2:
			{
			    Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Haz una transferencia", "El saldo de su cuenta bancaria: %s\n\nPor favor ingrese el nombre o ID del jugador a continuación:", "Continuar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]));
			}
	    }
	}
	else
	{
	    Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Cuenta de banco", "Balance de banco: %s\nBalances guardados: %s", "Seleccionar", "Cancelar", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	return 1;
}

Dialog:Transfer(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    static
	        userid;

		if (sscanf(inputtext, "u", userid))
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Hacer una transferencia", "El balance de su cuenta bancaria : %s\n\nEscriba la id o nombre del jugador:", "Continuar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (userid == INVALID_PLAYER_ID)
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Hacer una transferencia", "Error:Invalida id o nombre del jugador.\n\nEl balance de su cuenta bancaria: %s\n\nPor favor ingrese el nombre o ID del jugador a continuación:", "Continuar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (userid == playerid)
		    return Dialog_Show(playerid, Transfer, DIALOG_STYLE_INPUT, "Hacer una transferencia", "Error: No puede transferir fondos a usted mismo.\n\nEl saldo de su Cuenta bancaria: %s\n\nPor favor ingrese el nombre o ID del jugador a continuación:", "Continuar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pTransfer] = userid;
		Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Hacer una transferencia", "El saldo de su Cuenta bancaria: %s\n\nIngrese la cantidad de dinero para transferir a %s:", "Continuar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));
	}
    else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Cuenta bancaria", "Retirar Fondos\nFondos de depósito\nHacer una transferencia", "Select", "Atras");
	}
	return 1;
}

Dialog:TransferCash(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Hacer una transferencia", "El saldo de su Cuenta bancaria: %s\n\nIngrese la cantidad de dinero para transferir a %s:", "Continuar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

		if (amount < 1 || amount > PlayerData[playerid][pBankMoney])
			return Dialog_Show(playerid, TransferCash, DIALOG_STYLE_INPUT, "Hacer una transferencia", "Error: Fondos insuficientes!\n\nEl saldo de su Cuenta bancaria: %s\n\nIngrese la cantidad de dinero para transferir a %s:", "Continuar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]), ReturnName(PlayerData[playerid][pTransfer], 0));

		if (!strcmp(PlayerData[playerid][pIP], PlayerData[PlayerData[playerid][pTransfer]][pIP])) {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s (%s) a transferido %s a %s (%s).", ReturnName(playerid, 0), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0), PlayerData[playerid][pIP]);
		}
		PlayerData[playerid][pBankMoney] -= amount;
		PlayerData[PlayerData[playerid][pTransfer]][pBankMoney] += amount;

	    SendServerMessage(playerid, "Usted ha transferido %s A %s's Cuenta bancaria.", FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer], 0));
	    SendServerMessage(PlayerData[playerid][pTransfer], "%s Ha transferido %s en tu Cuenta bancaria.", ReturnName(playerid, 0), FormatNumber(amount));

        Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Cuenta bancaria", "Retirar Fondos\nFondos de depósito\nHacer una transferencia", "Select", "Atras");
        Log_Write("logs/transfer_log.txt", "[%s] %s (%s) ha transferido %s a %s (%s).", ReturnDate(), ReturnName(playerid), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(PlayerData[playerid][pTransfer]), PlayerData[PlayerData[playerid][pTransfer]][pIP]);
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Cuenta bancaria", "Retirar Fondos\nFondos de depósito\nHacer una transferencia", "Select", "Atras");
	}
	return 1;
}

Dialog:Savings(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Retirar Fondos", "El saldo de tu Cuenta de ahorros: %s\n\nIngrese la cantidad de dinero que desea retirar:", "Retirar", "Volver", FormatNumber(PlayerData[playerid][pSavings]));
			}
	        case 1:
	        {
				Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Fondos de depósito", "El saldo de tu Cuenta de ahorros: %s\n\nIngrese la cantidad de dinero que desea depositar:", "Depositar", "Volver", FormatNumber(PlayerData[playerid][pSavings]));
			}
	    }
	}
	else
	{
	    Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Cuenta bancaria", "Saldo Bancario: %s\nSaldo de saldo: %s", "Seleccionar", "Cancelar", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	}
	return 1;
}

Dialog:Withdraw(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Retirar Fondos", "El saldo de su Cuenta bancaria: %s\n\nIngrese la cantidad que desea retirar:", "Retirar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (amount < 1 || amount > PlayerData[playerid][pBankMoney])
			return Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Retirar Fondos", "Error: Insufficiente fondos!\n\nEl saldo de su Cuenta bancaria: %s\n\nIngrese la cantidad de dinero que desea retirar:", "Retirar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pBankMoney] -= amount;
	    GiveMoney(playerid, amount);

	    SendServerMessage(playerid, "You have withdrawn %s from your Cuenta bancaria.", FormatNumber(amount));
        Dialog_Show(playerid, Withdraw, DIALOG_STYLE_INPUT, "Retirar Fondos", "El saldo de su Cuenta bancaria: %s\n\nIngrese la cantidad de dinero que desea retirar:", "Retirar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]));
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Cuenta bancaria", "Retirar Fondos\nFondos de depósito\nHacer una transferencia", "Select", "Atras");
	}
	return 1;
}

Dialog:Deposit(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Fondos de depósito", "El saldo de su Cuenta bancaria: %s\n\nIngrese la cantidad de dinero que desea depositar:", "Depositar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]));

		if (amount < 1 || amount > GetMoney(playerid))
			return Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Fondos de depósito", "Error: No tienes tanto.\n\nEl saldo de su Cuenta bancaria: %s\n\nIngrese la cantidad de dinero que desea depositar:", "Depositar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]));

		PlayerData[playerid][pBankMoney] += amount;
	    GiveMoney(playerid, -amount);

	    SendServerMessage(playerid, "Usted tiene depositado %s en su cuenta bancaria.", FormatNumber(amount));
        Dialog_Show(playerid, Deposit, DIALOG_STYLE_INPUT, "Fondos de depósito", "El saldo de su Cuenta bancaria: %s\n\nIngrese la cantidad de dinero que desea depositar:", "Depositar", "Volver", FormatNumber(PlayerData[playerid][pBankMoney]));
	}
	else {
	    Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Cuenta bancaria", "Retirar Fondos\nFondos de depósito\nHacer una transferencia", "Seleccionar", "Atras");
	}
	return 1;
}

Dialog:SavingsWithdraw(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Retirar Fondos", "Su cuenta de ahorros: %s\n\nIngrese la cantidad de dinero que desee retirar:", "Retirar", "Volver", FormatNumber(PlayerData[playerid][pSavings]));

		if (amount < 1 || amount > PlayerData[playerid][pSavings])
			return Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Retirar Fondos", "Error: Insuficientes fondos!\n\nEl balance de su cuenta de ahorros: %s\n\nIngrese la cantidad de dinero que desee retirar:", "Retirar", "Volver", FormatNumber(PlayerData[playerid][pSavings]));

		PlayerData[playerid][pSavings] -= amount;
	    GiveMoney(playerid, amount);

	    SendServerMessage(playerid, "Usted a retirado %s Desde su cuenta.", FormatNumber(amount));
        Dialog_Show(playerid, SavingsWithdraw, DIALOG_STYLE_INPUT, "Retirar Fondos", "Su Cuenta de ahorros balance: %s\n\nIngrese la cantidad de dinero que desee retirar:", "Retirar", "Volver", FormatNumber(PlayerData[playerid][pSavings]));
	}
	else {
	    Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Cuenta de ahorros", "Retirar Fondos\nFondos de depósito", "Seleccionar", "Atras");
	}
	return 1;
}

Dialog:SavingsDeposit(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    new amount = strval(inputtext);

	    if (isnull(inputtext))
	        return Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Fondos de depósito", "Su Cuenta de ahorros balance: %s\n\nIngrese la cantidad de dinero que desee depositar:", "Depositar", "Volver", FormatNumber(PlayerData[playerid][pSavings]));

		if (amount < 1 || amount > GetMoney(playerid))
			return Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Fondos de depósito", "Error: No tienes tanto.\n\nSu Cuenta de ahorros balance: %s\n\nIngrese la cantidad de dinero que desee depositar:", "Depositar", "Volver", FormatNumber(PlayerData[playerid][pSavings]));

		PlayerData[playerid][pSavings] += amount;
	    GiveMoney(playerid, -amount);

	    SendServerMessage(playerid, "You have deposited %s into your Cuenta de ahorros.", FormatNumber(amount));
        Dialog_Show(playerid, SavingsDeposit, DIALOG_STYLE_INPUT, "Fondos de depósito", "Su Cuenta de ahorros balance: %s\n\nIngrese la cantidad de dinero que desee depositar:", "Depositar", "Volver", FormatNumber(PlayerData[playerid][pSavings]));
	}
	else {
	    Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Cuenta de ahorros", "Retirar Fondos\nFondos de depósito", "Seleccionar", "Atras");
	}
	return 1;
}
Dialog:Bank(playerid, response, listitem, inputtext[])
{
	if (!IsPlayerInBank(playerid) && ATM_Nearest(playerid) == -1)
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
				Dialog_Show(playerid, BankAccount, DIALOG_STYLE_LIST, "Cuenta bancaria", "Retirar Fondos\nFondos de depósito\nHacer una transferencia", "Seleccionar", "Atras");
			}
			case 1:
			{
				Dialog_Show(playerid, Savings, DIALOG_STYLE_LIST, "Cuenta de ahorros", "Retirar Fondos\nFondos de depósito", "Seleccionar", "Atras");
			}
		}
	}
	return 1;
}

Dialog:FAQ1(playerid, response, listitem, inputtext[])
{
	if (!response)
		cmd_faq(playerid, "\1");

	return 1;
}

Dialog:FAQ(playerid, response, listitem, inputtext[])
{
	if (response)
	{
		switch (listitem)
		{
		    case 0:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Puede ingresar y salir de un edificio presionando {FFFF00}'F'{FFFFFF}.", "OK", "Atras");
			}
            case 1:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Puede acceder a su inventario presionando {FFFF00}'Y'{FFFFFF}.\nTambien puedes escribir {FFFF00}/inventario{FFFFFF} para acceder en el.", "OK", "Atras");
			}
			case 2:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Puede agarrar los objetos del suelo presionando {FFFF00}'N'{FFFFFF}.\nDebes estar agachado y cerca del objeto.", "OK", "Atras");
			}
			case 3:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Los íconos en el lado derecho de su pantalla son los siguientes:\n\n{FFFF00}Pizza Icono:{FFFFFF} Este icono representa tu hambre. El numero que hay ahi representa el porcentaje de tu hambre.\n{FFFF00}Botella Icono:{FFFFFF} Este icono representa la sed. El numero que hay ahi representa el porcentaje de tu sed.\n\nSi tienes un chaleco blindado, también se mostrará junto con los iconos.", "OK", "Atras");
			}
			case 4:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Puedes volver a llenar tu hambre cocinando y comiendo, o de un {FFFF00}Negocio de comida{FFFFFF} rapida.\nPara cocinar, escribe {FFFF00}/cocinar{FFFFFF}. Puedes comprar comida congelada en cualquier {FFFF00}Tienda a por el menor{FFFFFF}.\n\nSi tienes sed puedes comprar bebidas {FFFF00}En tiendas al por menor{FFFFFF}.\nAdemás, también puede comprar bebidas en un negocio de comida rápida.", "OK", "Atras");
			}
			case 5:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Puede buscar ciertas áreas alrededor del mapa usando un {FFFF00}GPS System{FFFFFF}.\nUsted puede comprar un GPS en una {FFFF00}Tienda 24/7{FFFFFF} alrededor del mapa.", "OK", "Atras");
			}
			case 6:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Usted puede usar {FFFF00}/eliminarcheckpoint{FFFFFF} para detener tu trabajo actual.\nSi está cargando cajas en un camión, use {FFFF00}/dejardecargar{FFFFFF} para detenerlo.", "OK", "Atras");
			}
			case 7:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Debes seleccionar un arma de tu inventario y presionar {FFFF00}Usar Item.\n{FFFFFF}Una vez que estás sosteniendo un arma, debes usar una revista para cargarla.\n\nPuedes comprar Cargadores en cualquier {FFFF00}Armeria.\n{FFFFFF}Usted puede apretar {FFFF00}'N'{FFFFFF} para guardar el arma que tienes.", "OK", "Atras");
			}
			case 8:
		    {
		        Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}Cualquier mueble que hayas comprado aparecerá dentro de tu inventario.\nApreta {FFFF00}'Y'{FFFFFF}, seleccione el artículo de muebles y presione {FFFF00}Usar Item{FFFFFF} para desplegarlo.\n\nSi desea editar muebles existentes, escriba {FFFF00}/muebles{FFFFFF} dentro de tu casa.\nSimplemente seleccione el elemento de elección para editar la posición o destruir el elemento.", "OK", "Atras");
			}
			case 9:
			{
			    Dialog_Show(playerid, FAQ1, DIALOG_STYLE_MSGBOX, inputtext, "{FFFFFF}La {FFFF00}'F'{FFFFFF} Te permitirá interactuar con muchas cosas en el servidor.\nEstas cosas incluyen vendedores, cajas de armas y drogas, puertas y entradas.\n\nPara ingresar a una casa o negocio, simplemente presione {FFFF00}'F'{FFFFFF} llave cerca de la puerta.\nPuede abrir su inventario con {FFFF00}'Y'{FFFFFF} y agarrar los items {FFFF00}'N'{FFFFFF}.", "OK", "Atras");
			}
		}
	}
	return 1;
}

Dialog:TeleportInterior(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    SetPlayerInterior(playerid, g_arrInteriorData[listitem][e_InteriorID]);
	    SetPlayerPos(playerid, g_arrInteriorData[listitem][e_InteriorX], g_arrInteriorData[listitem][e_InteriorY], g_arrInteriorData[listitem][e_InteriorZ]);
	}
	return 1;
}

Dialog:LeaveTest(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    CancelDrivingTest(playerid);

	    SendErrorMessage(playerid, "Ha fallado la prueba de manejo desde que dejó la prueba.");
	}
	else
	{
	    PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);
	}
	return 1;
}

Dialog:Inventory(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			itemid = PlayerData[playerid][pInventoryItem],
			string[64];

	    strunpack(string, InventoryData[playerid][itemid][invItem]);

	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!strcmp(string, "Demo Soda") && PlayerData[playerid][pTutorialStage] == 3)
			    {
        			PlayerData[playerid][pThirst] = 100;
        			Dialog_Show(playerid, Tutorial, DIALOG_STYLE_MSGBOX, "Mensaje de tutorial", "Has aprendido cómo recoger artículos y usarlos respetuosamente.\nAcabas de recoger una botella de refresco y la usaste para volver a llenar tu sed.\n\nLos iconos de hambre y sed se muestran en el lado derecho de la pantalla.\nSi tu hambre o sed alcanza el cero por ciento, tu jugador comenzará a perder energía.", "Continuar", "");
			    }
			    else
			    {
		            CallLocalFunction("OnPlayerUseItem", "dds", playerid, itemid, string);
				}
	        }
	        case 1:
	        {
	            if (!strcmp(string, "Demo Soda"))
	                return 0;

				PlayerData[playerid][pInventoryItem] = itemid;
				Dialog_Show(playerid, GiveItem, DIALOG_STYLE_INPUT, "Dar articulo", "Porfavor introduce el id o nombre del player:", "Aceptar", "Cancelar");
	        }
	        case 2:
	        {
	            new id = -1;

	            if (!strcmp(string, "Demo Soda") && PlayerData[playerid][pTutorialStage] != 4)
	                return 0;

				if (PlayerData[playerid][pTutorialStage] == 4)
				{
					Inventory_Remove(playerid, "Demo Soda");
					Dialog_Show(playerid, Tutorial, DIALOG_STYLE_MSGBOX, "Mensaje de tutorial", "Usted ha dejado caer la botella de refresco. Puede recoger artículos caídos usando 'N'.\nTambién puede dar o intercambiar artículos de su inventario a otros jugadores.\n\nTambién puede almacenar elementos en el almacenamiento de su casa o en el baúl de un vehículo.\nEl inventario de tu personaje solo puede contener hasta%d artículos únicos a la vez.", "Siguiente", "", MAX_INVENTORY);
					return 1;
				}
	            if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
	                return SendErrorMessage(playerid, "Tu no puedes dropear objetos ahora mismo.");

				else if (!strcmp(string, "Backpack"))
					return cmd_tirarmochila(playerid, "\1");

				else if ((id = Garbage_Nearest(playerid)) != -1)
				{
				    if (GarbageData[id][garbageCapacity] >= 20)
				        return SendErrorMessage(playerid, "Este cubo de basura está lleno de basura.");

                    GarbageData[id][garbageCapacity]++;
                    Garbage_Save(id);

					Inventory_Remove(playerid, string);
                    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s arroja un \"%s\" en el cubo de basura.", ReturnName(playerid, 0), string);

                    format(string, sizeof(string), "[Basura %d]\n{FFFFFF}Capacidad de basura: %d/20", id, GarbageData[id][garbageCapacity]);
                    UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DARKBLUE, string);
				}
				else if (InventoryData[playerid][itemid][invQuantity] == 1)
					DropPlayerItem(playerid, itemid);

				else
					Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Item: %s - Cantidad: %d\n\nPor favor, especifique la cantidad de este elemento que desea soltar:", "Soltar", "Cancelar", string, InventoryData[playerid][itemid][invQuantity]);
	        }
	    }
	}
	return 1;
}

Dialog:DropItem(playerid, response, listitem, inputtext[])
{
	new
	    itemid = PlayerData[playerid][pInventoryItem],
	    string[32];

	strunpack(string, InventoryData[playerid][itemid][invItem]);

	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Item: %s - Cantidad: %d\n\nPor favor, especifique la cantidad de este elemento que desea soltar:", "Soltar", "Cancelar", string, InventoryData[playerid][itemid][invQuantity]);

		if (strval(inputtext) < 1 || strval(inputtext) > InventoryData[playerid][itemid][invQuantity])
		    return Dialog_Show(playerid, DropItem, DIALOG_STYLE_INPUT, "Drop Item", "Error: Insuficiente cantidad.\n\nItem: %s - Cantidad: %d\n\nPor favor, especifique la cantidad de este elemento que desea soltar:", "Soltar", "Cancelar", string, InventoryData[playerid][itemid][invQuantity]);

		DropPlayerItem(playerid, itemid, strval(inputtext));
	}
	return 1;
}

Dialog:BusinessBuy(playerid, response, listitem, inputtext[])
{
	static
	    bizid = -1,
		price,
		string[64];

    if (((bizid = Business_Inside(playerid)) != -1 && response) || ((bizid = Business_NearestVenta(playerid)) != -1 && response) )
    {
        price = BusinessData[bizid][bizPrices][listitem];

        if (GetMoney(playerid) < price)
            return SendErrorMessage(playerid, "No tiene fondos suficientes para la compra.");

		if (BusinessData[bizid][bizProducts] < 1)
		    return SendErrorMessage(playerid, "Este negocio está fuera de stock.");

		if (BusinessData[bizid][bizType] == 1 || BusinessData[bizid][bizType] == 6)
		{
		    switch (listitem)
		    {
		        case 0:
		        {
		            if (Inventory_HasItem(playerid, "Celular"))
		                return SendErrorMessage(playerid, "Usted tiene un telefono ahora mismo.");

					new id = Inventory_Add(playerid, "Celular", 330);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					PlayerData[playerid][pPhone] = random(90000) + 10000;

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio su telefono.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);

					format(string, sizeof(string), "Tu numero nuevo es ~p~%d.", PlayerData[playerid][pPhone]);
					ShowPlayerFooter(playerid, string);

					SendServerMessage(playerid, "Tu nuevo numero es %d.", PlayerData[playerid][pPhone]);
				}
				case 1:
		        {
		            if (Inventory_HasItem(playerid, "Aparato GPS"))
		                return SendErrorMessage(playerid, "Ya tienes un sistema de GPS.");

					new id = Inventory_Add(playerid, "Aparato GPS", 18875);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio un sistema de gps.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 2:
		        {
		            if (Inventory_Count(playerid, "Bote de Spray") >= 3)
		                return SendErrorMessage(playerid, "Tienes 3 botes de spray,no puedes comprar mas.");

					new id = Inventory_Add(playerid, "Bote de Spray", 365);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio un bote de spray.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 3:
			    {
			        if (Inventory_HasItem(playerid, "Backpack"))
		                return SendErrorMessage(playerid, "Tu ya tienes este item.");

					new id = Inventory_Add(playerid, "Backpack", 3026);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					if (Backpack_Create(playerid) == -1)
					    return SendErrorMessage(playerid, "El servidor ha alcanzado el límite interno para Backpacks.");

					SetAccessories(playerid);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio Backpack.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 4:
		        {
		            if (Inventory_Count(playerid, "Botella de Agua") >= 10)
		                return SendErrorMessage(playerid, "Tu tienes 10 botellas de agua,no puedes comprar mas.");

					new id = Inventory_Add(playerid, "Botella de Agua", 2958);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio una botella de agua.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 5:
		        {
              		if (Inventory_Count(playerid, "Gaseosa") >= 5)
		                return SendErrorMessage(playerid, "Tu tienes 5 botellas de gaseosa,no puedes comprar mas.");

					new id = Inventory_Add(playerid, "Gaseosa", 1543);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio una botella de gaseosa.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 6:
				{
				    if (PlayerData[playerid][pLottery])
				        return SendErrorMessage(playerid, "Ya tienes un boleto de loteria.");

					Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Numero de loteria", "Por favor ingrese su número de lotería deseado a continuación (de 1-60):", "Aceptar", "Cancelar");
				}
				case 7:
		        {
		            if (Inventory_HasItem(playerid, "Walkie-Talkie"))
		                return SendErrorMessage(playerid, "Tu ya tienes este item.");

					new id = Inventory_Add(playerid, "Walkie-Talkie", 18868);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado%s y recibio una radio portable.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 8:
		        {
		            if (Inventory_Count(playerid, "Lata de Combustible") >= 3)
		                return SendErrorMessage(playerid, "Tu ya tienes 3 latas,no puedes comprar mas.");

					new id = Inventory_Add(playerid, "Lata de Combustible", 1650);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio una lata de combustible.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 9:
		        {
		            if (Inventory_HasItem(playerid, "Palanca"))
		                return SendErrorMessage(playerid, "Ya tienes una palanca.");

					new id = Inventory_Add(playerid, "Palanca", 18634);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio una palanca.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 10:
		        {
		            if (Inventory_HasItem(playerid, "Boombox"))
		                return SendErrorMessage(playerid, "Ya tienes un boombox.");

					new id = Inventory_Add(playerid, "Boombox", 2226);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio un boombox.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 11:
		        {
		            if (Inventory_HasItem(playerid, "Mascara"))
		                return SendErrorMessage(playerid, "Ya tienes una mascara.");

					if (PlayerData[playerid][pPlayingHours] < 5)
					    return SendErrorMessage(playerid, "Debes tener al menos 5 horas de juego.");

					new id = Inventory_Add(playerid, "Mascara", 19036);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio una mascara.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 12:
		        {
		            if (Inventory_Count(playerid, "Primeros Auxilios") >= 3)
		                return SendErrorMessage(playerid, "Tu tienes 3 kits de auxilio,no puedes comprar mas.");

					new id = Inventory_Add(playerid, "Primeros Auxilios", 1580);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio un kit de primero auxilios.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 13:
		        {
		            if (Inventory_Count(playerid, "Kit de Reparacion") >= 3)
		                return SendErrorMessage(playerid, "Tu tienes 3 kits de reparacion,no puedes comprar mas.");

					new id = Inventory_Add(playerid, "Kit de Reparacion", 920);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio un kit de reparacion.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 14:
		        {
		            if (Inventory_Count(playerid, "Garrafa de NOS") >= 5)
		                return SendErrorMessage(playerid, "Tienes 5 contenedores, ya no puedes comprar.");

					new id = Inventory_Add(playerid, "Garrafa de NOS", 1010);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio un contenedor.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 15:
		        {
		            if (PlayerHasWeapon(playerid, 5))
		                return SendErrorMessage(playerid, "Ya tienes este item.");

					GiveWeaponToPlayer(playerid, 5, 1);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio un bate de beisbol.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 16:
		        {
		            if (Inventory_Count(playerid, "Pizza Congelada") >= 3)
		                return SendErrorMessage(playerid, "Tu tienes 3 pizzas congeladas,no puedes comprar mas.");

					new id = Inventory_Add(playerid, "Pizza Congelada", 2814);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio una pizza congelada.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 17:
		        {
		            if (Inventory_Count(playerid, "Hamburguesa Congelada") >= 5)
		                return SendErrorMessage(playerid, "Tu tienes 5 hamburguesas congeladas, no puedes comprar mas.");

					new id = Inventory_Add(playerid, "Hamburguesa Congelada", 19811);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio una hamburguesa congelada.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			}
		}
		else if (BusinessData[bizid][bizType] == 2)
		{
		    switch (listitem)
	    	{
		        case 0:
		        {
		            if (!Inventory_HasItem(playerid, "Licencia de Armas"))
		                return SendErrorMessage(playerid, "Esta tienda solo vende a personas con una licencia de arma.");

		            if (Inventory_Count(playerid, "Cargador") >= 10)
		                return SendErrorMessage(playerid, "Tu tienes 10 cargadores,no puedes comprar mas.");

					new id = Inventory_Add(playerid, "Cargador", 19995);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio cargadores.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
                case 1:
		        {
		            if (!Inventory_HasItem(playerid, "Licencia de arma"))
		                return SendErrorMessage(playerid, "Esta tienda solo vende a la gente que tiene lincencia de arma.");

		            if (Inventory_Count(playerid, "Caja de Municion") >= 5)
		                return SendErrorMessage(playerid, "Ya tienes 5 cajas de munucion, no puedes comprar mas.");

					new id = Inventory_Add(playerid, "Caja de Municion", 19832);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio cartuchos.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 2:
		        {
		            if (!Inventory_HasItem(playerid, "Licencia de armas"))
		                return SendErrorMessage(playerid, "Esta tienda solo vende a gente con licencia de armas.");

		            if (Inventory_Count(playerid, "Chaleco Blindado") >= 3)
		                return SendErrorMessage(playerid, "Tu tienes 3 chalecos blindados,no puedes comprar mas.");

					new id = Inventory_Add(playerid, "Chaleco Blindado", 19142);

					if (id == -1)
        				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");
        				
					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio chaleco blindado.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 3:
				{
				    if (!Inventory_HasItem(playerid, "Licencia de armas"))
				        return SendErrorMessage(playerid, "Debes tener licencia de armas para comprar aqui.");

				    if (PlayerData[playerid][pPlayingHours] < 5)
				        return SendErrorMessage(playerid, "Debes jugar 5 horas.");

                    if (Inventory_Count(playerid, "Desert Eagle") > 5)
					    return SendErrorMessage(playerid, "No puedes llevar más de esta arma.");

					Inventory_Add(playerid, "Desert Eagle", 348);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio una Desert Eagle.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 4:
				{
				    if (!Inventory_HasItem(playerid, "Licencia de armas"))
				        return SendErrorMessage(playerid, "Debes tener licencia de armas para comprar aqui.");

				    if (PlayerData[playerid][pPlayingHours] < 5)
				        return SendErrorMessage(playerid, "Debes tener 5 horas jugando.");

                    if (Inventory_Count(playerid, "Escopeta") > 5)
					    return SendErrorMessage(playerid, "No puedes llevar mas de esta arma.");

					Inventory_Add(playerid, "Escopeta", 349);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio Remington 870.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
				case 5:
				{
				    if (!Inventory_HasItem(playerid, "Licencia de armas"))
				        return SendErrorMessage(playerid, "Debes tener licencia de armas para comprar aqui.");

				    if (PlayerData[playerid][pPlayingHours] < 5)
				        return SendErrorMessage(playerid, "Debes tener 5 horas jugando.");

					if (Inventory_Count(playerid, "Rifle") > 5)
					    return SendErrorMessage(playerid, "No puedes llevar mas de esta arma.");

					Inventory_Add(playerid, "Rifle", 357);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio una M14 Rifle.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
		    }
		}
		else if (BusinessData[bizid][bizType] == 3)
		{
		    switch (listitem)
		    {
		        case 0:
				{
				    PlayerData[playerid][pClothesType] = 1;

					switch (PlayerData[playerid][pGender])
                    {
                        case 1:
                        	ShowModelSelectionMenu(playerid, "Ropa", MODEL_SELECTION_CLOTHES, g_aMaleSkins, sizeof(g_aMaleSkins), -16.0, 0.0, -55.0);

						case 2:
                       		ShowModelSelectionMenu(playerid, "Ropa", MODEL_SELECTION_CLOTHES, g_aFemaleSkins, sizeof(g_aFemaleSkins), -16.0, 0.0, -55.0);
                    }
				}
		        case 1:
				{
				    PlayerData[playerid][pClothesType] = 2;
					ShowModelSelectionMenu(playerid, "Lentes", MODEL_SELECTION_CLOTHES, {19006, 19007, 19008, 19009, 19010, 19011, 19012, 19013, 19014, 19015, 19016, 19017, 19018, 19019, 19020, 19021, 19022, 19023, 19024, 19025, 19026, 19027, 19028, 19029, 19030, 19031, 19032, 19033, 19034, 19035}, 30, 0.0, 0.0, 90.0);
				}
			    case 2:
				{
				    PlayerData[playerid][pClothesType] = 3;
					ShowModelSelectionMenu(playerid, "Sombreros", MODEL_SELECTION_CLOTHES, {18926, 18927, 18928, 18929, 18930, 18931, 18932, 18933, 18934, 18935, 18944, 18945, 18946, 18947, 18948, 18949, 18950, 18951}, 18, -20.0, -90.0, 0.0);
				}
				case 3:
				{
				    PlayerData[playerid][pClothesType] = 4;
					ShowModelSelectionMenu(playerid, "Bandanas", MODEL_SELECTION_CLOTHES, {18911, 18912, 18913, 18914, 18915, 18916, 18917, 18918, 18919, 18920}, 10, 80.0, -173.0, 0.0);
				}
		    }
		}
		
		else if (BusinessData[bizid][bizType] == 4 || BusinessData[bizid][bizType] == 8)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (PlayerData[playerid][pThirst] > 90)
			            return SendErrorMessage(playerid, "No tienes sed en este instante.");

					PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 10 > 100) ? (100) : (PlayerData[playerid][pThirst] + 10);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio agua.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 1:
			    {
			        if (PlayerData[playerid][pThirst] > 90)
			            return SendErrorMessage(playerid, "No tienes sed en este instante.");

					PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 20 > 100) ? (100) : (PlayerData[playerid][pThirst] + 20);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio gaseosa.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 2:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "No tienes hambre en este momento.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio papas fritas.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 3:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "No tienes hambre en este momento.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio una hamburguesa con queso.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 4:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "No tienes hambre en este momento.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 30 > 100) ? (100) : (PlayerData[playerid][pHunger] + 30);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio una hambuerguesa de pollo.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 5:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			            return SendErrorMessage(playerid, "No tienes hambre en este momento.");

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 25 > 100) ? (100) : (PlayerData[playerid][pHunger] + 25);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio Nuggets de pollo.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 6:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			        {
			            return SendErrorMessage(playerid, "No tienes hambre en este momento.");
			        }

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio ensalada.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			}
		}
		
		else if (BusinessData[bizid][bizType] == 7)
		{
		    new
				items[50] = {-1, ...},
				count;

		    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (g_aFurnitureData[i][e_FurnitureType] == listitem + 1) {
				items[count++] = g_aFurnitureData[i][e_FurnitureModel];
		    }
		    PlayerData[playerid][pFurnitureType] = listitem;

		    if (listitem == 3) {
                ShowModelSelectionMenu(playerid, "Mueble", MODEL_SELECTION_FURNITURE, items, count, -17.0, 0.0, 225.0);
            }
            else if (listitem == 0) {
                ShowModelSelectionMenu(playerid, "Mueble", MODEL_SELECTION_FURNITURE, items, count);
            }
            else {
                ShowModelSelectionMenu(playerid, "Mueble", MODEL_SELECTION_FURNITURE, items, count, -35, 0.0, 225);
            }
		}
		else if (BusinessData[bizid][bizType] == 9 || BusinessData[bizid][bizType] == 10)
		{
			switch (listitem)
			{
			    case 0:
			    {
					PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 10 > 100) ? (100) : (PlayerData[playerid][pThirst] + 10);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio Cerveza.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 1:
			    {
			        PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 10 > 100) ? (100) : (PlayerData[playerid][pThirst] + 10);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio Fernet con coca.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 2:
			    {
			        PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 10 > 100) ? (100) : (PlayerData[playerid][pThirst] + 10);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio Gin Tonic.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 3:
			    {
			        PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 10 > 100) ? (100) : (PlayerData[playerid][pThirst] + 10);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio Vodka con hielo.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 4:
			    {
			        PlayerData[playerid][pThirst] = (PlayerData[playerid][pThirst] + 10 > 100) ? (100) : (PlayerData[playerid][pThirst] + 10);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio Fantino.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			    case 5:
			    {
			        if (PlayerData[playerid][pHunger] > 90)
			        {
			            return SendErrorMessage(playerid, "No tienes hambre en este momento.");
			        }

					PlayerData[playerid][pHunger] = (PlayerData[playerid][pHunger] + 20 > 100) ? (100) : (PlayerData[playerid][pHunger] + 20);

					GiveMoney(playerid, -price);
					SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio hamburguesa.", ReturnName(playerid, 0), FormatNumber(price));

					BusinessData[bizid][bizProducts]--;
					BusinessData[bizid][bizVault] += Tax_Percent(price);

					Business_Save(bizid);
					Tax_AddPercent(price);
			    }
			}
		}
	}
    return 1;
}

Dialog:LotteryNumber(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new bizid = Business_Inside(playerid);

	    if (bizid != -1)
	    {
	        if (isnull(inputtext) || (strval(inputtext) < 1 || strval(inputtext) > 60)) {
	            return Dialog_Show(playerid, LotteryNumber, DIALOG_STYLE_INPUT, "Numero de loteria", "Por favor ingrese su número de lotería deseado a continuación (1-60):", "Aceptar", "Cancelar");
			}
	        PlayerData[playerid][pLottery] = strval(inputtext);
	        PlayerData[playerid][pLotteryB] = 1;

		    GiveMoney(playerid, -BusinessData[bizid][bizPrices][6]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha pagado %s y recibio un ticket de loteria.", ReturnName(playerid, 0), FormatNumber(BusinessData[bizid][bizPrices][6]));

			BusinessData[bizid][bizProducts]--;
			BusinessData[bizid][bizVault] += Tax_Percent(BusinessData[bizid][bizPrices][6]);

			Business_Save(bizid);
			Tax_AddPercent(BusinessData[bizid][bizPrices][6]);
		}
	}
	return 1;
}

Dialog:EditProduct(playerid, response, listitem, inputtext[])
{
	static
	    bizid = -1;

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
		if (response)
		{
		    static
		        item[24];

		    strmid(item, inputtext, 0, strfind(inputtext, "-") - 1);
		    strpack(PlayerData[playerid][pEditingItem], item, 32 char);

            PlayerData[playerid][pProductModify] = listitem;
      		Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Negocio: precio establecido", "Ingrese el precio del nuevo producto para \"%s\":", "Modificar", "Volver", item);
		}
	}
	return 1;
}

Dialog:PriceSet(playerid, response, listitem, inputtext[])
{
    static
	    bizid = -1,
		item[32];

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
		if (response)
		{
		    strunpack(item, PlayerData[playerid][pEditingItem]);

			if (isnull(inputtext))
			    return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Negocio: precio establecido", "Ingrese el precio del nuevo producto para \"%s\":", "Modificar", "Volver", item);

			if (strval(inputtext) < 1 || strval(inputtext) > 2000)
			    return Dialog_Show(playerid, PriceSet, DIALOG_STYLE_INPUT, "Negocio: precio establecido", "Ingrese el precio del nuevo producto para \"%s\" ($1 hasta $2,000):", "Modificar", "Volver", item);

			BusinessData[bizid][bizPrices][PlayerData[playerid][pProductModify]] = strval(inputtext);
			Business_Save(bizid);

			SendServerMessage(playerid, "Usted ajusto el precio \"%s\" a: %s!", item, FormatNumber(strval(inputtext)));
			Business_ProductMenu(playerid, bizid);
		}
		else
		{
		    Business_ProductMenu(playerid, bizid);
		}
	}
	return 1;
}

Dialog:CarDeposit(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
	    string[32];

    if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
			    return Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Deposito de autos", "Item: %s (Cantidad: %d)\n\nPor favor ingrese la cantidad que desea almacenar para este artículo:", "Almacenar", "Volver", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

			Car_AddItem(carid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha almacenado \"%s\" adentro del maletero.", ReturnName(playerid, 0), string);
			Car_ShowTrunk(playerid, carid);
		}
		else Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:CarTake(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
	    string[32];

    if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    strunpack(string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemName]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemQuantity])
			    return Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Coche Toma", "Item: %s (Cantidad: %d)\n\nPor favor ingrese la cantidad que desea tomar para este artículo:", "Agarrar", "Volver", string, CarStorage[carid][PlayerData[playerid][pInventoryItem]][cItemQuantity]);

			new id = Inventory_Add(playerid, string, CarStorage[carid][PlayerData[playerid][pStorageItem]][cItemModel], amount);

			if (id == -1)
				return SendErrorMessage(playerid, "Tu no tienes mas espacio!.");

			Car_RemoveItem(carid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha agarrado \"%s\" el maletero.", ReturnName(playerid, 0), string);
			Car_ShowTrunk(playerid, carid);
		}
		else Car_ShowTrunk(playerid, carid);
	}
	return 1;
}

Dialog:CarStorage(playerid, response, listitem, inputtext[])
{
	static
	    carid = -1,
		string[64];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
		if (response)
		{
		    if (listitem == MAX_CAR_STORAGE) {
    			Car_WeaponStorage(playerid, carid);
		    }
		    else if (CarStorage[carid][listitem][cItemExists])
			{
   				PlayerData[playerid][pStorageItem] = listitem;
   				PlayerData[playerid][pInventoryItem] = listitem;

				strunpack(string, CarStorage[carid][listitem][cItemName]);

				format(string, sizeof(string), "%s (Cantidad: %d)", string, CarStorage[carid][listitem][cItemQuantity]);
				Dialog_Show(playerid, TrunkOptions, DIALOG_STYLE_LIST, string, "Agarrar item\nAlmacenar Item", "Seleccionar", "Atras");
			}
			else {
   				OpenInventory(playerid);

				PlayerData[playerid][pStorageSelect] = 2;
			}
		}
	}
	return 1;
}

Dialog:TrunkOptions(playerid, response, listitem, inputtext[])
{
    static
	    carid = -1,
		itemid = -1,
		Backpack = -1,
		string[32];

	if ((carid = Car_Nearest(playerid)) != -1 && !CarData[carid][carLocked])
	{
	    itemid = PlayerData[playerid][pStorageItem];

	    strunpack(string, CarStorage[carid][itemid][cItemName]);

		if (response)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (CarStorage[carid][itemid][cItemQuantity] == 1)
			        {
			            if (!strcmp(string, "Backpack") && Inventory_HasItem(playerid, "Backpack"))
			                return SendErrorMessage(playerid, "Ya tienes un Backpack en tu inventario.");

			            new id = Inventory_Add(playerid, string, CarStorage[carid][itemid][cItemModel], 1);

						if (id == -1)
        					return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

                        if (!strcmp(string, "Backpack") && (Backpack = GetVehicleBackpack(carid)) != -1)
						{
						    BackpackData[Backpack][backpackVehicle] = 0;
						    BackpackData[Backpack][backpackPlayer] = PlayerData[playerid][pID];

						    Backpack_Save(Backpack);
						    SetAccessories(playerid);
						}
			            Car_RemoveItem(carid, string);

			            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha tomado una \"%s\" del maletero.", ReturnName(playerid, 0), string);
						Car_ShowTrunk(playerid, carid);
			        }
			        else
			        {
			            Dialog_Show(playerid, CarTake, DIALOG_STYLE_INPUT, "Auto Take", "Item: %s (Cantidad: %d)\n\nPor favor ingrese la cantidad que desea tomar para este artículo:", "Tomar", "Volver", string, CarStorage[carid][itemid][cItemQuantity]);
			        }
			    }
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if (!strcmp(string, "Backpack")) {
					    Car_ShowTrunk(playerid, carid);

						return SendErrorMessage(playerid, "Solo puedes guardar un Backpack en tu maletero.");
					}
					else if (id == -1) {
						Car_ShowTrunk(playerid, carid);

						return SendErrorMessage(playerid, "Ya no tienes más de este artículo para almacenar!");
					}
					else if (InventoryData[playerid][id][invQuantity] == 1)
					{
					    Car_AddItem(carid, string, InventoryData[playerid][id][invModel], 1);
						Inventory_Remove(playerid, string);

						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha almacenado un \"%s\" adentro de su maletero.", ReturnName(playerid, 0), string);
						Car_ShowTrunk(playerid, carid);
					}
					else if (InventoryData[playerid][id][invQuantity] > 1) {
					    PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, CarDeposit, DIALOG_STYLE_INPUT, "Auto Deposit", "Item: %s (Cantidad: %d)\n\nPor favor ingrese la cantidad que desea almacenar para este artículo:", "Guardar", "Volver", string, InventoryData[playerid][id][invQuantity]);
					}
				}
			}
		}
		else
		{
		    Car_ShowTrunk(playerid, carid);
		}
	}
	return 1;
}

Dialog:HouseWeapons(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1;

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		if (response)
		{
		    if (HouseData[houseid][houseWeapons][listitem] != 0)
		    {
				GiveWeaponToPlayer(playerid, HouseData[houseid][houseWeapons][listitem], HouseData[houseid][houseAmmo][listitem]);

				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha tomado una \"%s\" de su almacenamiento de armas.", ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]));
                Log_Write("logs/storage_log.txt", "[%s] %s ha tomado una \"%s\" de la casa ID: %d (owner: %s).", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(HouseData[houseid][houseWeapons][listitem]), HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No"));

				HouseData[houseid][houseWeapons][listitem] = 0;
				HouseData[houseid][houseAmmo][listitem] = 0;

				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
			else
			{
			    new
					weaponid = GetWeapon(playerid),
					ammo = GetPlayerAmmo(playerid);

			    if (!weaponid)
			        return SendErrorMessage(playerid, "No tienes ningún arma!");

       			if (weaponid == 23 && PlayerData[playerid][pTazer])
	    			return SendErrorMessage(playerid, "No puede almacenar un Tazer en su caja fuerte.");

                if (weaponid == 25 && PlayerData[playerid][pBeanBag])
	    			return SendErrorMessage(playerid, "No puedes guardar una escopeta de pelotita en tu caja fuerte.");

                ResetWeapon(playerid, weaponid);
				SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha almacenado un\"%s\" en su almacenamiento de armas.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));

				HouseData[houseid][houseWeapons][listitem] = weaponid;
				HouseData[houseid][houseAmmo][listitem] = ammo;

				House_Save(houseid);
				House_WeaponStorage(playerid, houseid);
			}
		}
		else
		{
		    House_OpenStorage(playerid, houseid);
		}
	}
	return 1;
}

Dialog:HouseDeposit(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1,
	    string[32];

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
	    strunpack(string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invItem]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity])
			    return Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Casa Deposito", "Item: %s (Cantidad: %d)\n\nPor favor ingrese la cantidad que desea almacenar para este artículo:", "Guardar", "Volver", string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invQuantity]);

			House_AddItem(houseid, string, InventoryData[playerid][PlayerData[playerid][pInventoryItem]][invModel], amount);
			Inventory_Remove(playerid, string, amount);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha almacenado un \"%s\" en el almacenamiento de su casa.", ReturnName(playerid, 0), string);
			House_ShowItems(playerid, houseid);
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseTake(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1,
	    string[32];

    if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
	    strunpack(string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemName]);

		if (response)
		{
			new amount = strval(inputtext);

			if (amount < 1 || amount > HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemQuantity])
			    return Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "Casa Take", "Item: %s (Cantidad: %d)\n\nPor favor ingrese la cantidad que desea tomar para este artículo:", "Agarrar", "Volver", string, HouseStorage[houseid][PlayerData[playerid][pInventoryItem]][hItemQuantity]);

			new id = Inventory_Add(playerid, string, HouseStorage[houseid][PlayerData[playerid][pStorageItem]][hItemModel], amount);

			if (id == -1)
				return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

			House_RemoveItem(houseid, string, amount);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha tomado un \"%s\" de su almacenamiento de la casa.", ReturnName(playerid, 0), string);

			House_ShowItems(playerid, houseid);
			Log_Write("logs/storage_log.txt", "[%s] %s ha tomado %d \"%s\" de la casa ID: %d (owner: %s).", ReturnDate(), ReturnName(playerid, 0), amount, string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No"));
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseWithdrawCash(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
		    new amount = strval(inputtext);

		    if (isnull(inputtext))
		        return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Retirarse de la caja fuerte", "Equilibrio seguro: %s\n\nIngrese la cantidad de dinero que desea retirar de la caja fuerte:", "Retirar", "Volver", FormatNumber(HouseData[houseid][houseMoney]));

			if (amount < 1 || amount > HouseData[houseid][houseMoney])
			    return Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Retirarse de la caja fuerte", "Error: Fondos insuficientes.\n\nEquilibrio seguro: %s\n\nIngrese la cantidad de dinero que desea retirar de la caja fuerte:", "Retirar", "Volver", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] -= amount;
			GiveMoney(playerid, amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha retirado %s desde su casa segura.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Dinero seguro", "Retirar de seguro\nDepositar en seguro", "Seleccionar", "Atras");
	}
	return 1;
}

Dialog:HouseDepositCash(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
		    new amount = strval(inputtext);

		    if (isnull(inputtext))
		        return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposite en la caja", "Equilibrio seguro: %s\n\nIngrese la cantidad de dinero que desea depositar en la caja fuerte:", "Retirar", "Volver", FormatNumber(HouseData[houseid][houseMoney]));

			if (amount < 1 || amount > GetMoney(playerid))
			    return Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Deposite en la caja", "Error: Fondos insuficcientes.\n\nEquilibrio seguro: %s\n\nIngrese la cantidad de dinero que desea depositar en la caja fuerte:", "Retirar", "Volver", FormatNumber(HouseData[houseid][houseMoney]));

			HouseData[houseid][houseMoney] += amount;
			GiveMoney(playerid, -amount);

			House_Save(houseid);
			House_OpenStorage(playerid, houseid);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha depositado %s en su casa segura.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Dinero seguro", "Retirar de seguro\nDepositar en seguro", "Seleccionar", "Atras");
	}
	return 1;
}

Dialog:HouseMoney(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
		if (response)
		{
			switch (listitem)
			{
			    case 0: {
					Dialog_Show(playerid, HouseWithdrawCash, DIALOG_STYLE_INPUT, "Retirar de seguro", "Equilibrio seguro: %s\n\nIngrese la cantidad de dinero que desea retirar de la caja fuerte:", "Retirar", "Volver", FormatNumber(HouseData[houseid][houseMoney]));
				}
				case 1: {
				    Dialog_Show(playerid, HouseDepositCash, DIALOG_STYLE_INPUT, "Depositar en seguro", "Equilibrio seguro: %s\n\nIngrese la cantidad de dinero que desea retirar de la caja fuerte:", "Retirar", "Volver", FormatNumber(HouseData[houseid][houseMoney]));
				}
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseItems(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1,
		string[64];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		if (response)
		{
    		if (HouseStorage[houseid][listitem][hItemExists])
			{
   				PlayerData[playerid][pStorageItem] = listitem;
   				PlayerData[playerid][pInventoryItem] = listitem;

				strunpack(string, HouseStorage[houseid][listitem][hItemName]);

				format(string, sizeof(string), "%s (Cantidad: %d)", string, HouseStorage[houseid][listitem][hItemQuantity]);
				Dialog_Show(playerid, StorageOptions, DIALOG_STYLE_LIST, string, "Agarrar Item\nGuardar Item", "Seleccionar", "Atras");
			}
			else {
   				OpenInventory(playerid);

				PlayerData[playerid][pStorageSelect] = 1;
			}
		}
		else House_OpenStorage(playerid, houseid);
	}
	return 1;
}

Dialog:HouseStorage(playerid, response, listitem, inputtext[])
{
	static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
		if (response)
		{
		    if (listitem == 0) {
		        House_ShowItems(playerid, houseid);
		    }
      		else if (listitem == 1) {
				House_WeaponStorage(playerid, houseid);
		    }
		    else if (listitem == 2) {
		        Dialog_Show(playerid, HouseMoney, DIALOG_STYLE_LIST, "Dinero Seguro", "Retirar de segurp\nDepositar en seguro", "Seleccionar", "Atras");
			}
		}
	}
	return 1;
}

Dialog:StorageOptions(playerid, response, listitem, inputtext[])
{
    static
	    houseid = -1,
		itemid = -1,
		Backpack = -1,
		string[32];

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE))
	{
	    itemid = PlayerData[playerid][pStorageItem];

	    strunpack(string, HouseStorage[houseid][itemid][hItemName]);

		if (response)
		{
			switch (listitem)
			{
			    case 0:
			    {
			        if (HouseStorage[houseid][itemid][hItemQuantity] == 1)
			        {
			            if (!strcmp(string, "Backpack") && Inventory_HasItem(playerid, "Backpack"))
           					return SendErrorMessage(playerid, "Ya tienes un Backpack en tu inventario.");

			            new id = Inventory_Add(playerid, string, HouseStorage[houseid][itemid][hItemModel], 1);

						if (id == -1)
        					return SendErrorMessage(playerid, "No tiene ningún espacio de inventario restante.");

                        if (!strcmp(string, "Backpack") && (Backpack = GetHouseBackpack(houseid)) != -1)
						{
						    BackpackData[Backpack][backpackHouse] = 0;
						    BackpackData[Backpack][backpackPlayer] = PlayerData[playerid][pID];

						    Backpack_Save(Backpack);
						    SetAccessories(playerid);
						}
			            House_RemoveItem(houseid, string);
			            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha tomado una \"%s\" de su almacenamiento de la casa.", ReturnName(playerid, 0), string);

						House_ShowItems(playerid, houseid);
						Log_Write("logs/storage_log.txt", "[%s] %s ha tomado una \"%s\" de la casa ID: %d (owner: %s).", ReturnDate(), ReturnName(playerid, 0), string, HouseData[houseid][houseID], (House_IsOwner(playerid, houseid)) ? ("Yes") : ("No"));
			        }
			        else
			        {
			            Dialog_Show(playerid, HouseTake, DIALOG_STYLE_INPUT, "Casa Take", "Item: %s (Cantidad: %d)\n\nPor favor ingrese la cantidad que desea tomar para este artículo:", "Agarrar", "Volver", string, HouseStorage[houseid][itemid][hItemQuantity]);
			        }
			    }
				case 1:
				{
					new id = Inventory_GetItemID(playerid, string);

					if (!strcmp(string, "Backpack")) {
					    House_ShowItems(playerid, houseid);

						return SendErrorMessage(playerid, "Solo puedes guardar un Backpack en tu casa.");
					}
					else if (id == -1) {
						House_ShowItems(playerid, houseid);

						return SendErrorMessage(playerid, "Ya no tienes más de este artículo para almacenar!");
					}
					else if (InventoryData[playerid][id][invQuantity] == 1)
					{
					    House_AddItem(houseid, string, InventoryData[playerid][id][invModel]);
						Inventory_Remove(playerid, string);

						SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha almacenado un \"%s\" en el almacenamiento de su casa.", ReturnName(playerid, 0), string);
						House_ShowItems(playerid, houseid);
					}
					else if (InventoryData[playerid][id][invQuantity] > 1) {
					    PlayerData[playerid][pInventoryItem] = id;

                        Dialog_Show(playerid, HouseDeposit, DIALOG_STYLE_INPUT, "Casa Deposit", "Item: %s (Cantidad: %d)\n\nPor favor ingrese la cantidad que desea almacenar para este artículo:", "Guardar", "Volver", string, InventoryData[playerid][id][invQuantity]);
					}
				}
			}
		}
		else
		{
		    House_ShowItems(playerid, houseid);
		}
	}
	return 1;
}

Dialog:EditGlasses(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 0))
	            {
	                PlayerData[playerid][pToggleGlasses] = 0;
	                SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);
					ShowPlayerFooter(playerid, "Usted tiene ~g~adjunto~w~ sus lentes.");
				}
				else
				{
				    PlayerData[playerid][pToggleGlasses] = 1;
	                RemovePlayerAttachedObject(playerid, 0);
					ShowPlayerFooter(playerid, "Usted tiene ~r~separado~w~ sus lentes.");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleGlasses] = 0;
       			SetPlayerAttachedObject(playerid, 0, PlayerData[playerid][pGlasses], 2, AccessoryData[playerid][0][0], AccessoryData[playerid][0][1], AccessoryData[playerid][0][2], AccessoryData[playerid][0][3], AccessoryData[playerid][0][4], AccessoryData[playerid][0][5], AccessoryData[playerid][0][6], AccessoryData[playerid][0][7], AccessoryData[playerid][0][8]);

			    EditAttachedObject(playerid, 0);
			    PlayerData[playerid][pEditType] = 1;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 0);
			    PlayerData[playerid][pGlasses] = 0;
			    SendServerMessage(playerid, "Usted elimino sus lentes.");
			}
		}
	}
	return 1;
}

Dialog:EditHat(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 1))
            	{
	                PlayerData[playerid][pToggleHat] = 0;
	                SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);
					ShowPlayerFooter(playerid, "Usted tiene ~g~adjunto~w~ su sombrero.");
				}
				else
				{
				    PlayerData[playerid][pToggleHat] = 1;
	                RemovePlayerAttachedObject(playerid, 1);
					ShowPlayerFooter(playerid, "Usted tiene ~r~separado~w~ your hat.");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleHat] = 0;
	            SetPlayerAttachedObject(playerid, 1, PlayerData[playerid][pHat], 2, AccessoryData[playerid][1][0], AccessoryData[playerid][1][1], AccessoryData[playerid][1][2], AccessoryData[playerid][1][3], AccessoryData[playerid][1][4], AccessoryData[playerid][1][5], AccessoryData[playerid][1][6], AccessoryData[playerid][1][7], AccessoryData[playerid][1][8]);

			    EditAttachedObject(playerid, 1);
			    PlayerData[playerid][pEditType] = 2;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 1);
			    PlayerData[playerid][pHat] = 0;
			    SendServerMessage(playerid, "Usted elimino su sombrero.");
			}
		}
	}
	return 1;
}

Dialog:EditBandana(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!IsPlayerAttachedObjectSlotUsed(playerid, 2))
	            {
	                PlayerData[playerid][pToggleBandana] = 0;
	                SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);
					ShowPlayerFooter(playerid, "Usted tiene ~g~adjunto~w~ su bandana.");
				}
				else
				{
				    PlayerData[playerid][pToggleBandana] = 1;
	                RemovePlayerAttachedObject(playerid, 2);
					ShowPlayerFooter(playerid, "Usted tiene ~r~separado~w~ su bandana.");
				}
			}
			case 1:
			{
			    PlayerData[playerid][pToggleBandana] = 0;
       			SetPlayerAttachedObject(playerid, 2, PlayerData[playerid][pBandana], 2, AccessoryData[playerid][2][0], AccessoryData[playerid][2][1], AccessoryData[playerid][2][2], AccessoryData[playerid][2][3], AccessoryData[playerid][2][4], AccessoryData[playerid][2][5], AccessoryData[playerid][2][6], AccessoryData[playerid][2][7], AccessoryData[playerid][2][8]);

			    EditAttachedObject(playerid, 2);
			    PlayerData[playerid][pEditType] = 3;
			}
			case 2:
			{
			    RemovePlayerAttachedObject(playerid, 2);
			    PlayerData[playerid][pBandana] = 0;
			    SendServerMessage(playerid, "Usted elimino su bandana.");
			}
		}
	}
	return 1;
}

Dialog:Accessory(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	        {
	            if (!PlayerData[playerid][pGlasses])
	                return SendErrorMessage(playerid, "No tienes un par de gafas.");

	            Dialog_Show(playerid, EditGlasses, DIALOG_STYLE_LIST, "Lentes", "Alternar gafas\nEditar gafas\nEliminar Gafas", "Seleccionar", "Cancelar");
			}
			case 1:
			{
			    if (!PlayerData[playerid][pHat])
	                return SendErrorMessage(playerid, "No tienes un sombrero.");

			    Dialog_Show(playerid, EditHat, DIALOG_STYLE_LIST, "Sombrero", "Alternar Sombrero\nEditar Sombrero\nEliminar Sombrero", "Seleccionar", "Cancelar");
			}
			case 2:
			{
			    if (!PlayerData[playerid][pBandana])
	                return SendErrorMessage(playerid, "No tienes una bandana.");

			    Dialog_Show(playerid, EditBandana, DIALOG_STYLE_LIST, "Bandana", "Alternar Bandana\nEditar Bandana\nEliminar Bandana", "Seleccionar", "Cancelar");
			}
		}
	}
	return 1;
}

Dialog:CharList(playerid, response, listitem, inputtext[])
{
    SetTimerEx("SelectTD", 200, false, "d", playerid);

	if (response)
	{
		if (!PlayerCharacters[playerid][listitem][0])
		    return SendErrorMessage(playerid, "El espacio del personaje seleccionado está vacío.");

		new
		    string[160];

		format(string, sizeof(string), "SELECT `Admin`, `Skin`, `CreateDate`, `LastLogin` FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][listitem]);
		mysql_tquery(g_iHandle, string, "OnCharacterLookup", "dds", playerid, listitem + 1, PlayerCharacters[playerid][listitem]);
	}
	return 1;
}

Dialog:RegisterScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
		return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, RegisterScreen, DIALOG_STYLE_PASSWORD, "Registracion de la cuenta", "Bienvenido a GreenLatinRP, %s.\n\nNoticia: Su cuenta no esta registrada en nuestro sistema.Por favor registrese escogiendo una contraseña", "Registrar", "Cancelar", ReturnName(playerid));

	else
	{
		SQL_CreateAccount(PlayerData[playerid][pUsername], inputtext);

		ShowCharacterMenu(playerid);
		SendServerMessage(playerid, "Su cuenta se ha creado.");
	}
	return 1;
}

Dialog:LoginScreen(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return Kick(playerid);

	else if (isnull(inputtext))
	    return Dialog_Show(playerid, LoginScreen, DIALOG_STYLE_PASSWORD, "Logueo de la cuenta", "Bienvenido a GreenLatinRP!\n\nSe lo ha visto la ultima vez el: %s.\n\nPor favor escribe tu contraseña para loguearte:", "Login", "Cancelar", PlayerData[playerid][pLoginDate]);

	else
	{
	    SQL_AttemptLogin(playerid, inputtext);
	}
	return 1;
}

Dialog:DeleteChar(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new query[128];

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "Usted ha borrado \"%s\" desde su cuenta.", PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1]);
        PlayerCharacters[playerid][PlayerData[playerid][pCharacter] - 1][0] = 0;

        ShowCharacterMenu(playerid);
	}
	return 1;
}

Dialog:DeleteCharacter(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new query[128];

	    format(query, sizeof(query), "DELETE FROM `characters` WHERE `Username` = '%s' AND `Character` = '%s'", PlayerData[playerid][pUsername], PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "Usted ha borrado \"%s\" desde su cuenta.", PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1]);
        PlayerCharacters[playerid][PlayerData[playerid][pCharacterMenu] - 1][0] = 0;

        for (new i = 50; i < 58; i ++) {
        	PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
		}
		PlayerData[playerid][pDisplayStats] = false;
		CancelSelectTextDraw(playerid);
	}
	return 1;
}

Dialog:CreateChar(playerid, response, listitem, inputtext[])
{
	if (!response)
	    return PlayerData[playerid][pCharacter] = 0;

	else if (isnull(inputtext) || strlen(inputtext) > 20)
        return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Crear personaje", "Por favor ingrese el nombre de su nuevo personaje a continuación:\n\nAdvertencia: su nombre debe estar en el formato Nombre_Apellido y no debe exceder los 20 caracteres.", "Crear", "Cancelar");

	else if (!IsValidRoleplayName(inputtext))
	    return Dialog_Show(playerid, CreateChar, DIALOG_STYLE_INPUT, "Crear personaje", "Error: Ingresó un nombre de juego de rol no válido.\n\nPor favor ingrese el nombre de su nuevo personaje a continuación:\n\nAdvertencia: su nombre debe estar en el formato Nombre_Apellido y no debe exceder los 20 caracteres.", "Crear", "Cancelar");

	else
	{
	    static
	        query[128];

		format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Character` = '%s'", inputtext);
		mysql_tquery(g_iHandle, query, "OnCharacterCheck", "ds", playerid, inputtext);
	}
	return 1;
}

Dialog:Gender(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    PlayerData[playerid][pGender] = listitem + 1;

	    switch (listitem) {
	        case 0: {
				PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][16], "~r~Genero:~w~ Hombre");
				PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 98);

				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][13]);
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][13]);
			}
	        case 1: {
				PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][16], "~r~Genero:~w~ Mujer");
				PlayerTextDrawSetPreviewModel(playerid, PlayerData[playerid][pTextdraws][13], 233);

				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][13]);
				PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][13]);
			}
		}
		PlayerData[playerid][pSkin] = (listitem) ? (233) : (98);
		SetTimerEx("SelectTD", 200, false, "d", playerid);
	}
	else SetTimerEx("SelectTD", 200, false, "d", playerid);
	return 1;
}

Dialog:DateBirth(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new
			iDay,
			iMonth,
			iYear,
			str[64];

	    static const
	        arrMonthDays[] = {31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

	    if (sscanf(inputtext, "p</>ddd", iDay, iMonth, iYear)) {
	        Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Fecha de nacimiento", "Error: El formato especificado es invalido!\n\nPor favor ponga su fecha de nacimiento como esta a continuacion (DD/MM/YYYY):", "Aceptar", "Cancelar");
		}
		else if (iYear < 1900 || iYear > 2014) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Fecha de nacimiento", "Error: El año que colocaste es invalido!\n\nPor favor ingrese su fecha de nacimiento a continuación(DD/MM/YYYY):", "Aceptar", "Cancelar");
		}
		else if (iMonth < 1 || iMonth > 12) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Fecha de nacimiento", "Error: El mes que colocaste es invalido!\n\nPor favor ingrese su fecha de nacimiento a continuación (DD/MM/YYYY):", "Aceptar", "Cancelar");
		}
		else if (iDay < 1 || iDay > arrMonthDays[iMonth - 1]) {
		    Dialog_Show(playerid, DateBirth, DIALOG_STYLE_INPUT, "Fecha de nacimiento", "Error: El dia que colocaste es invalido!\n\nPor favor ingrese su fecha de nacimiento a continuación (DD/MM/YYYY):", "Aceptar", "Cancelar");
		}
		else {
		    format(PlayerData[playerid][pBirthdate], 24, inputtext);

		    format(str, sizeof(str), "~r~Fecha de nacimiento:~w~ %s", inputtext);
		    PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][15], str);
		}
	}
	return 1;
}

Dialog:Origin(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    new str[64];

	    if (isnull(inputtext) || strlen(inputtext) > 32) {
	        Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Origen", "Por favor ingrese el origen geográfico de su personaje a continuación:", "Aceptar", "Cancelar");
		}
		else for (new i = 0, len = strlen(inputtext); i != len; i ++) {
		    if ((inputtext[i] >= 'A' && inputtext[i] <= 'Z') || (inputtext[i] >= 'a' && inputtext[i] <= 'z') || (inputtext[i] >= '0' && inputtext[i] <= '9') || (inputtext[i] == ' ') || (inputtext[i] == ',') || (inputtext[i] == '.'))
				continue;

			else return Dialog_Show(playerid, Origin, DIALOG_STYLE_INPUT, "Origen", "Error: Solo letras y números son aceptados en el origen.\n\nPor favor ingrese el origen geográfico de su personaje a continuación:", "Aceptar", "Cancelar");
		}
		format(PlayerData[playerid][pOrigin], 32, inputtext);

  		format(str, sizeof(str), "~r~Origen:~w~ %s", inputtext);
  		PlayerTextDrawSetString(playerid, PlayerData[playerid][pTextdraws][17], str);
	}
	return 1;
}

Dialog:NewPass(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return Dialog_Show(playerid, NewPass, DIALOG_STYLE_PASSWORD, "Coloque su nueva contraseña", "Por favor ingrese su nueva contraseña a continuación.\n\nNota: utilice una contraseña fuerte y segura para seguridad adicional.", "Cambiar", "Cancelar");

		static
		    buffer[129],
		    query[256];

		WP_Hash(buffer, sizeof(buffer), inputtext);
		inputtext[0] = '\0';

		format(query, sizeof(query), "UPDATE `accounts` SET `Password` = '%s' WHERE `Username` = '%s'", buffer, PlayerData[playerid][pUsername]);
		mysql_tquery(g_iHandle, query);

		SendServerMessage(playerid, "Usted a cambiado su contraseña.");
	}
	return 1;
}

Dialog:ChangePassword(playerid, response, listitem, inputtext[])
{
	if (response)
	{
	    if (isnull(inputtext))
	        return cmd_cambiarpass(playerid, "\1");

		static
		    buffer[129],
			query[256];

		WP_Hash(buffer, sizeof(buffer), inputtext);
		inputtext[0] = '\0';

		format(query, sizeof(query), "SELECT `Password` FROM `accounts` WHERE `Username` = '%s' AND `Password` = '%s'", PlayerData[playerid][pUsername], buffer);
		mysql_tquery(g_iHandle, query, "OnQueryFinished", "dd", playerid, THREAD_VERIFY_PASS);
	}
	return 1;
}

Dialog:TuneVehicle(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
	if (!IsPlayerInAnyVehicle(playerid) || !IsDoorVehicle(vehicleid))
	    return 0;

	if (response)
	{
	    switch (listitem)
	    {
	        case 0:
	            ShowModelSelectionMenu(playerid, "Cambiar Ruedas", MODEL_SELECTION_WHEELS, {1025, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1097, 1098}, 17, 0.0, 0.0, 90.0);

			case 1:
			    Dialog_Show(playerid, AddNOS, DIALOG_STYLE_LIST, "Agregar Nitro", "2x NOS\n5x NOS\n10x NOS", "Seleccionar", "Cancelar");

			case 2:
			{
			    AddComponent(vehicleid, 1087);
			    SendServerMessage(playerid, "Has agregado suspencion hidraulica al auto.");
			}
			case 3:
			{
				if(vehmd == 562 || vehmd == 565 || vehmd == 559 || vehmd == 561 || vehmd == 560 || vehmd == 558)
				{
					Dialog_Show(playerid, MPaintjob, DIALOG_STYLE_LIST,"Tuneos","Paintjob\nAlien\nX-Flow\n{FF0000}Atras","Seleccionar","Cancelar");
				}
				else if(vehmd == 576 || vehmd == 575 || vehmd == 535)
				{
					MLowrider(playerid);
    			}
				else if(vehmd == 567 || vehmd == 536)
				{
                    Dialog_Show(playerid, MTuneLow2,DIALOG_STYLE_LIST,"Tuneos","Paintjob\nChrome\nSlamin\nTecho Duro\nTecho Blando\n{FF0000}Atras","Seleccionar","Cancelar");
				}
				else if(vehmd == 534)
				{
           	        Dialog_Show(playerid, MTuneLow3,DIALOG_STYLE_LIST,"Tuneos","Paintjob\nChrome\nSlamin\nGuardabarro Llama\nArches Sideskirt Roof\n{FF0000}Atras","Seleccionar","Cancelar");
				}
				else if(vehmd == 496 || vehmd == 505 || vehmd == 516 || vehmd == 517 || vehmd == 518 || vehmd == 527 || vehmd == 529 || vehmd == 540 || vehmd == 546 || vehmd == 547 || vehmd == 549 || vehmd == 550 || vehmd == 551 || vehmd == 580 || vehmd == 585 || vehmd == 587 || vehmd == 589 || vehmd == 600 || vehmd == 603 || vehmd == 401 || vehmd == 410 || vehmd == 415 || vehmd == 418 || vehmd == 420 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 489 || vehmd == 491 || vehmd == 492)
				{
					MRegularCarDialog(playerid);
				}
				else
				{
					SendErrorMessage(playerid, "Este auto no puede ser modificado.");
				}
			}
	    }
	}
	return 1;
}
Dialog:MTuneLow2(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
	switch(listitem)
	{
		case 0: Dialog_Show(playerid, MPaintjob2,DIALOG_STYLE_LIST,"Choose a paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3\nQuitar Paintjob\nVolver","Seleccionar","Cancelar");
		case 1: MMod2(playerid);
		case 2: MMod3(playerid);
		case 3:
		{
			if(vehmd == 567)//Savanna
			{
				AddComponent(vehicleid, 1130);
			}
			if(vehmd == 536)//Blade
            {
                AddComponent(vehicleid, 1128);
			}
		}
		case 4:
		{
			if(vehmd == 567)//Savanna
			{
			   	AddComponent(vehicleid, 1131);
			}
			if(vehmd == 536)//Blade
            {
                AddComponent(vehicleid, 1103);
			}
		}
		case 5: Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");
	}
}
Dialog:MTuneLow3(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	switch(listitem)
	{
	    case 0: Dialog_Show(playerid, MPaintjob2,DIALOG_STYLE_LIST,"Elige un Paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3\nQuitar Paintjob\nVolver","Seleccionar","Cancelar");
	    case 1: MMod2(playerid);
		case 2: MMod3(playerid);
		case 3: AddComponent(vehicleid, 1122),AddComponent(vehicleid, 1101),ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nGuardabarro Llama\nArches Sideskirt Roof\n{FF0000}Atras","Seleccionar","Cancelar");
		case 4: AddComponent(vehicleid, 1106),AddComponent(vehicleid, 1124),ShowPlayerDialog(playerid,1003,DIALOG_STYLE_LIST,"Choose one","Paintjob\nChrome\nSlamin\nGuardabarro Llama\nArches Sideskirt Roof\n{FF0000}Atras","Seleccionar","Cancelar");
		case 5: Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");
	}
}
Dialog:MPaintjob(playerid, response, listitem, inputtext[])
{
    switch(listitem)
    {
		case 0: Dialog_Show(playerid, MPaintjob2,DIALOG_STYLE_LIST,"Elige un Paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3\nQuitar Paintjob\nVolver","Seleccionar","Cancelar");
		case 1: MMod(playerid);
		case 2: MMod1(playerid);
		case 3: Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");
	}
}
Dialog:MPaintjobLow(playerid, response, listitem, inputtext[])
{
	switch(listitem)
	{
		case 0: Dialog_Show(playerid, MPaintjob2,DIALOG_STYLE_LIST,"Elige un Paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3\nQuitar Paintjob\nVolver","Seleccionar","Cancelar");
		case 1: MMod2(playerid);
		case 2: MMod3(playerid);
		case 3: Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");
	}
}
/*Dialog:MPaintjobLow2(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if(listitem == 4) return Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");
	new Parray[] = {0,1,2,3};
	ChangeVehiclePaintjob(vehicleid, Parray[listitem]);
	return Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");
}*/

Dialog:MRegularcars(playerid, response, listitem, inputtext[])//regular cars
{
	new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
	new vehicleid = GetPlayerVehicleID(playerid);
    switch(listitem)
    {
		case 0:
		{
		Dialog_Show(playerid,MRegularcars2,DIALOG_STYLE_LIST,"Aleron","Pro\nWin\nDrag\nAlpha\nChamp\nRace\nWorx\nFury\n{FF0000}Atras","Seleccionar","Cancelar");
		}
		case 1:
		{
		    if(vehmd == 585 || vehmd == 603 || vehmd == 439 || vehmd == 458 || vehmd == 418 || vehmd == 527 || vehmd == 580)
		    {
				AddComponent(vehicleid, 1006);
				return MRegularCarDialog(playerid);
			}
			else if(vehmd == 439 || vehmd == 458 || vehmd == 491 || vehmd == 517 ||vehmd == 547)
		    {Dialog_Show(playerid,MRegularcars4,DIALOG_STYLE_LIST,"Ventilaciones","Ovaladas\nCuadradas\n{FF0000}Atras","Seleccionar","Cancelar");}
            else if(vehmd == 415)
            {
				AddComponent(vehicleid, 1007);
				AddComponent(vehicleid, 1071);
				return MRegularCarDialog(playerid);
			}
            else Dialog_Show(playerid,MRegularcars3,DIALOG_STYLE_LIST,"Capo","Champ\nFury\nRace\nWorx\n{FF0000}Atras","Seleccionar","Cancelar");
		}
		case 2:
		{
		    if(vehmd == 549 || vehmd == 585 || vehmd == 603)
			{Dialog_Show(playerid,MRegularcars4,DIALOG_STYLE_LIST,"Ventilaciones","Ovaladas\nCuadradas\n{FF0000}Atras","Seleccionar","Cancelar");}
			else if(vehmd == 410 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 516 || vehmd == 491 || vehmd == 517 || vehmd == 418 || vehmd == 527 || vehmd == 580)
			{
                AddComponent(vehicleid, 1007);
				AddComponent(vehicleid, 1071);
				return MRegularCarDialog(playerid);
			}
			else if(vehmd == 415 || vehmd == 547 || vehmd == 420 || vehmd == 587)
			{Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");}
			else
			{
				AddComponent(vehicleid, 1006);
				return MRegularCarDialog(playerid);
			}
			
		}
		case 3:
		{
		    if(vehmd == 549 || vehmd == 585 || vehmd == 603 || vehmd == 551 || vehmd == 492 || vehmd == 529)
		    {
				AddComponent(vehicleid, 1007);
				AddComponent(vehicleid, 1071);
				return MRegularCarDialog(playerid);
			}
			else if(vehmd == 410 || vehmd == 436 || vehmd == 439 || vehmd == 458 || vehmd == 489 || vehmd == 505)
			{Dialog_Show(playerid,MRegularcars5,DIALOG_STYLE_LIST,"Luces","Niebla Redondas\nNiebla Cuadradas\n{FF0000}Atras","Seleccionar","Cancelar");}
			else if(vehmd == 418 || vehmd == 527 || vehmd == 580 || vehmd == 491 || vehmd == 517 || vehmd == 516)
			{Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");}
			else{Dialog_Show(playerid,MRegularcars4,DIALOG_STYLE_LIST,"Vents","Oval\nSquare\n{FF0000}Atras","Seleccionar","Cancelar");}
		}
		case 4:
		{
		    if(vehmd == 549 || vehmd == 550 || vehmd == 585 || vehmd == 603)
		    {Dialog_Show(playerid,MRegularcars5,DIALOG_STYLE_LIST,"Luces","Niebla Redondas\nNiebla Cuadradas\n{FF0000}Atras","Seleccionar","Cancelar");}
		    else if(vehmd == 489 || vehmd == 505 || vehmd == 551 || vehmd == 492 || vehmd == 529 || vehmd == 439 || vehmd == 458 || vehmd == 410 || vehmd == 436)
		    {Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");}
		    else
		    {
				AddComponent(vehicleid, 1007);
				AddComponent(vehicleid, 1071);
				return MRegularCarDialog(playerid);
			}
		}
		case 5:
		{
			if(vehmd == 585 || vehmd == 603 || vehmd == 550 || vehmd == 549)
			{Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");}
			else{Dialog_Show(playerid,MRegularcars5,DIALOG_STYLE_LIST,"Luces","Niebla Redondas\nNiebla Cuadradas\n{FF0000}Atras","Seleccionar","Cancelar");}
		}
		case 6: Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");
	}
	return 1;
}

Dialog:MRegularcars2(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(listitem == 8) return MRegularCarDialog(playerid);
	new Xarray[] = {1000,1001,1002,1003,1014,1015,1016,1023};
	AddComponent(vehicleid, Xarray[listitem]);
	return MRegularCarDialog(playerid);
}
Dialog:MRegularcars3(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(listitem == 4) return MRegularCarDialog(playerid);
	new Xarray[] = {1004,1005,1011,1012};
	AddComponent(vehicleid, Xarray[listitem]);
	return MRegularCarDialog(playerid);
}
Dialog:MRegularcars4(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
    switch(listitem)
    {
		case 0:
		{
			AddComponent(vehicleid, 1142);
			AddComponent(vehicleid, 1143);
			return MRegularCarDialog(playerid);
		}
		case 1:
		{
			AddComponent(vehicleid, 1144);
			AddComponent(vehicleid, 1145);
			return MRegularCarDialog(playerid);
		}
		case 2: MRegularCarDialog(playerid);
	}
	return 1;
}
Dialog:MRegularcars5(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	if(listitem == 2) return MRegularCarDialog(playerid);
	new Xarray[] = {1013,1024};
	AddComponent(vehicleid, Xarray[listitem]);
	return MRegularCarDialog(playerid);
}

Dialog:MAlien(playerid, response, listitem, inputtext[])
{
	new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
	new vehicleid = GetPlayerVehicleID(playerid);
    if(listitem == 7) return Dialog_Show(playerid,MPaintjob1,DIALOG_STYLE_LIST,"Tuneos","Paintjob\nAlien\nX-Flow\n{FF0000}Atras","Seleccionar","Cancelar");
	if(vehmd == 558)//Uranus
	{
		new Varray[] = {1090,1094,1092,1088,1164,1166,1168};
 		AddComponent(vehicleid,Varray[listitem]);

		return MMod(playerid);
	}
	if(vehmd == 559)//Jester
	{
        new Varray[] = {1069,1071,1065,1067,1162,1160,1159};
	 	AddComponent(vehicleid,Varray[listitem]);
		return MMod(playerid);
	}
	if(vehmd == 560)//Sultan
	{
        new Varray[] = {1026,1027,1028,1032,1138,1169,1141};
 		AddComponent(vehicleid,Varray[listitem]);
 		return MMod(playerid);
	}
	if(vehmd == 561)//Stratum
	{
        new Varray[] = {1056,1062,1064,1055,1058,1155,1154};
 		AddComponent(vehicleid,Varray[listitem]);
 		return MMod(playerid);
	}
	if(vehmd == 562)//Elegy
	{
        new Varray[] = {1036,1040,1034,1038,1147,1171,1149};
 		AddComponent(vehicleid,Varray[listitem]);
 		return MMod(playerid);
	}
	if(vehmd == 565)//Flash
	{
        new Varray[] = {1047,1051,1046,1054,1049,1153,1150};
 		AddComponent(vehicleid,Varray[listitem]);
 		return MMod(playerid);
	}
	return 1;
}
Dialog:MPaintjob1(playerid, response, listitem, inputtext[])
{
    switch(listitem)
    {
		case 0: Dialog_Show(playerid,MPaintjob2,DIALOG_STYLE_LIST,"Elige un Paintjob:","Paintjob 1\nPaintjob 2\nPaintjob 3\nQuitar Paintjob\nVolver","Seleccionar","Cancelar");
		case 1: MMod(playerid);
		case 2: MMod1(playerid);
		case 3: Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");
	}
}
Dialog:MPaintjob2(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
    if(listitem == 4) return Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");
	new Parray[] = {0,1,2,3};
	SetVehiclePaintjob(vehicleid, Parray[listitem]);
	//Guardar en sql el color paintjob
	return Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");
}
Dialog:MXflow(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
    if(listitem == 7) return Dialog_Show(playerid,MPaintjob1,DIALOG_STYLE_LIST,"Tuneos","Paintjob\nAlien\nX-Flow\n{FF0000}Atras","Seleccionar","Cancelar");
    if(vehmd == 558)//Uranus
    {
        new Varray[] = {1093,1095,1089,1091,1163,1165,1167};
 		AddComponent(vehicleid,Varray[listitem]);
 		CarData[vehicleid][carMods][0] = Varray[listitem];
 		return MMod1(playerid);
	}
    if(vehmd == 559)//Jester
    {
        new Varray[] = {1070,1072,1066,1068,1158,1173,1161};
 		AddComponent(vehicleid,Varray[listitem]);
 		return MMod1(playerid);
	}
    if(vehmd == 560)//Sultan
    {
        new Varray[] = {1031,1030,1029,1033,1139,1170,1140};
		AddComponent(vehicleid,Varray[listitem]);
 		return MMod1(playerid);
	}
    if(vehmd == 561)//Stratum
    {
        new Varray[] = {1057,1063,1059,1061,1060,1157,1156};
 		AddComponent(vehicleid,Varray[listitem]);
 		return MMod1(playerid);
	}
    if(vehmd == 562)//Elegy
    {
        new Varray[] = {1039,1041,1037,1035,1146,1172,1148};
 		AddComponent(vehicleid,Varray[listitem]);
 		return MMod1(playerid);
	}
    if(vehmd == 565)//Flash
    {
        new Varray[] = {1048,1052,1045,1053,1050,1152,1151};
 		AddComponent(vehicleid,Varray[listitem]);
 		return MMod1(playerid);
	}
	return 1;
}
Dialog:MChrome(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(vehmd == 576)
    {
		if(listitem == 5) return MLowrider(playerid);
		new Varray[] = {1134,1137,1136,1191,1192};
		AddComponent(vehicleid,Varray[listitem]);
		return MMod2(playerid);
	}
	if(vehmd == 575)
	{
		if(listitem == 5) return MLowrider(playerid);
  		new Varray[] = {1042,1099,1044,1174,1176};
		AddComponent(vehicleid,Varray[listitem]);
 		return MMod2(playerid);
	}
	if(vehmd == 535)
	{
 		if(listitem == 6) return MLowrider(playerid);
 		new Varray[] = {1115,1109,1113,1117,1118,1120};
		AddComponent(vehicleid,Varray[listitem]);
		return MMod2(playerid);
	}
	if(vehmd == 567)
	{
	    if(listitem == 5) return MLowrider(playerid);
		new Varray[] = {1129,1133,1102,1187,1189};
		AddComponent(vehicleid,Varray[listitem]);
		return MMod2(playerid);
	}
	if(vehmd == 536)
	{
	    if(listitem == 5) return MLowrider(playerid);
		new Varray[] = {1104,1108,1107,1184,1182};
		AddComponent(vehicleid,Varray[listitem]);
		return MMod2(playerid);
	}
	if(vehmd == 534)
	{
	    if(listitem == 6) return MLowrider(playerid);
		new Varray[] = {1100,1123,1125,1126,1179,1180};
		AddComponent(vehicleid,Varray[listitem]);
		return MMod2(playerid);
	}
	return 1;
}
Dialog:MSlamin(playerid, response, listitem, inputtext[])
{
	new vehicleid = GetPlayerVehicleID(playerid);
	new vehmd = GetVehicleModel(GetPlayerVehicleID(playerid));
	if(vehmd == 576)
	{
	    if(listitem == 3) return MLowrider(playerid);
		new Varray[] = {1135,1190,1193};
		AddComponent(vehicleid,Varray[listitem]);
		return MMod3(playerid);
	}
	if(vehmd == 575)
	{
	    if(listitem == 3) return MLowrider(playerid);
 		new Varray[] = {1177,1175,1043};
		AddComponent(vehicleid,Varray[listitem]);
		return MMod3(playerid);
	}
	if(vehmd == 535)
	{
	    if(listitem == 5) return MLowrider(playerid);
 		new Varray[] = {1110,1116,1114,1119,1121};
		AddComponent(vehicleid,Varray[listitem]);
		return MMod3(playerid);
	}
	if(vehmd == 567)
	{
	    if(listitem == 3) return MLowrider(playerid);
		new Varray[] = {1188,1186,1132};
		AddComponent(vehicleid,Varray[listitem]);
		return MMod3(playerid);
	}
	if(vehmd == 536)
	{
	    if(listitem == 3) return MLowrider(playerid);
		new Varray[] = {1181,1183,1105};
		AddComponent(vehicleid,Varray[listitem]);
		return MMod3(playerid);
	}
	if(vehmd == 534)
	{
	    if(listitem == 3) return MLowrider(playerid);
		new Varray[] = {1185,1178,1127};
		AddComponent(vehicleid,Varray[listitem]);
		return MMod3(playerid);
	}
	return 1;
}
Dialog:ADPLACEP(playerid, response, listitem, inputtext[])
{
	if(response)
	{
		if(strlen(inputtext) >= 128)
		{
			return SendClientMessageEx(playerid, COLOR_GREY, "Ingresaste un anuncio con más de 128 Letras.");
		}
		new
			szMessage[255];
		foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
			format(szMessage, sizeof(szMessage), "[Anuncio-CNN]: %s.", inputtext);
			SendClientMessageEx(i, COLOR_LIGHTGREEN, szMessage);
		}
		
		return PlayerPlaySound(playerid, 1052, 0.0, 0.0, 0.0);
	}
	return 1;
}
//FIN DIALOGS
//COMANDOS
CMD:tunear(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_MECHANIC)
	    return SendErrorMessage(playerid, "No eres mecanico.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "No estas en un vehiculo.");

	if (!IsDoorVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "No puedes modificar este vehiculo.");

	Dialog_Show(playerid, TuneVehicle, DIALOG_STYLE_LIST, "Modificar Vehiculo", "Ruedas\nNitro\nHidraulica\nModificaciones", "Seleccionar", "Cancelar");
	return 1;
}

CMD:acolorauto(playerid, params[])
{
	static
	    color1,
	    color2;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "No estas en un vehiculo.");

	if (sscanf(params, "dd", color1, color2))
	    return SendSyntaxMessage(playerid, "/acolorauto [color 1] [color 2]");

	if (color1 < 0 || color1 > 255)
	    return SendErrorMessage(playerid, "El color tiene que ser entre 0 y 255.");

    if (color2 < 0 || color2 > 255)
	    return SendErrorMessage(playerid, "El color tiene que ser entre 0 y 255.");

	SetVehicleColor(GetPlayerVehicleID(playerid), color1, color2);
	SendServerMessage(playerid, "Cambiaste los colores de este vehiculo a %d, %d.", color1, color2);
	return 1;
}

CMD:apintarauto(playerid, params[])
{
	static
	    paintjobid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "No estas en un vehiculo.");

	if (sscanf(params, "d", paintjobid))
	    return SendSyntaxMessage(playerid, "/apintarauto [pintura ID] (-1 to disable)");

	if (paintjobid < -1 || paintjobid > 5)
	    return SendErrorMessage(playerid, "El valor de la pintura tiene que ser entre -1 y 5.");

	if (paintjobid == -1)
		paintjobid = 6;

	SetVehiclePaintjob(GetPlayerVehicleID(playerid), paintjobid);
	SendServerMessage(playerid, "Cambiaste la pintura del auto a %d.", paintjobid);
	return 1;
}

CMD:gotoco(playerid, params[])
{
 	if(PlayerData[playerid][pAdmin] >= 2)
	{
		new Float: pos[3], int;
		if(sscanf(params, "fffd", pos[0], pos[1], pos[2], int)) return SendClientMessageEx(playerid, COLOR_WHITE, "Utiliza: /gotoco (coordenada x) (coordenada y) (coordenada z) (interior)");
		SendClientMessageEx(playerid, COLOR_YELLOW, "{1DF5F7}:{FFFFFF} Fuiste teletransportado a las coordenadas establecidas.");
		SetPlayerPos(playerid, pos[0], pos[1], pos[2]);
		SetPlayerInterior(playerid, int);
	}
	return 1;
}

CMD:interiores(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= 4)
	{
		new interior;
		if(sscanf(params, "i", interior)) return SendClientMessage(playerid, COLOR_LIGHTRED, "Uso: /interiores (Interior 1-17)");
		if(interior == 1)
		{
			SetPlayerPos(playerid, 267.2149,305.0842,999.1484);
			SetPlayerInterior(playerid, 2);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°1: Interior Pequeñisimo");
			return 1;
		}
		if(interior == 2)
		{
			SetPlayerPos(playerid, 2217.6389,-1076.2689,1050.4844);
			SetPlayerInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°2:Habitacion de Lujo");
			return 1;
		}
		if(interior == 3)
		{
			SetPlayerPos(playerid, 223.4572,1273.4215,1082.1378);
			SetPlayerInterior(playerid, 1);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°3: Depto Chico");
			return 1;
		}
		if(interior == 4)
		{
			SetPlayerPos(playerid, 326.4511,1456.3068,1084.4399);
			SetPlayerInterior(playerid, 15);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°4: Interior Humilde");
			return 1;
		}
		if(interior == 5)
		{
			SetPlayerPos(playerid, 275.8213,1237.7379,1084.2596);
			SetPlayerInterior(playerid, 9);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°5: Interior Chico (Casa)");
			return 1;
		}
		if(interior == 6)
		{
			SetPlayerPos(playerid, 2496.0259,-1692.6764,1014.7422);
			SetPlayerInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°6: Casa CJ");
			return 1;
		}
		if(interior == 7)
		{
			SetPlayerPos(playerid, 2308.4363,-1197.9568,1049.0200);
			SetPlayerInterior(playerid, 6);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°7: Piso Celeste");
			return 1;
		}
		if(interior == 8)
		{
			SetPlayerPos(playerid, 2365.2881,-1135.0151,1050.8750);
			SetPlayerInterior(playerid, 8);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°8: Vinewood Chica");
			return 1;
		}
		if(interior == 9)
		{
			SetPlayerPos(playerid, 2196.1470,-1204.2615,1049.0234);
			SetPlayerInterior(playerid, 6);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°9: Vinewood Media");
			return 1;
		}
		if(interior == 10)
		{
			SetPlayerPos(playerid, 267.6302,1186.7063,1080.2532);
			SetPlayerInterior(playerid, 3);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°10: Piso Alfombra Roja");
			return 1;
		}
		if(interior == 11)
		{
			SetPlayerPos(playerid, 24.1936,1320.8734,1084.3800);
			SetPlayerInterior(playerid, 10);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°11: Casa Blanca Media");
			return 1;
		}
		if(interior == 12)
		{
			SetPlayerPos(playerid, 2317.8918,-1026.2501,1050.2178);
			SetPlayerInterior(playerid, 9);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°12: Casa Lujosa");
			return 1;
		}
		if(interior == 13)
		{
			SetPlayerPos(playerid, 235.5256,1127.8431,1080.9982);
			SetPlayerInterior(playerid, 5);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°13: Vinewood Buena");
			return 1;
		}
		if(interior == 14)
		{
			SetPlayerPos(playerid, 2324.5210,-1148.6663,1050.7101);
			SetPlayerInterior(playerid, 12);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°14: Forma M. Vinewood");
			return 1;
		}
		if(interior == 15)
		{
			SetPlayerPos(playerid, 268.7249,1063.8826,1084.2070);
			SetPlayerInterior(playerid, 6);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°15: Azul Lujoso");
			return 1;
		}
		if(interior == 16)
		{
			SetPlayerPos(playerid, 140.2887,1396.8704,1083.8550);
			SetPlayerInterior(playerid, 5);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°16: Escalera Medio");
			return 1;
		}
		if(interior ==17 )
		{
			SetPlayerPos(playerid, 225.9798,981.6639,1084.0139);
			SetPlayerInterior(playerid, 7);
			SendClientMessage(playerid, COLOR_YELLOW, "Interior N°17: Casa Grande Lujosa");
			return 1;
		}
		return 1;
	}
	else return SendErrorMessage(playerid, "No estas autorizado.");
}

CMD:x(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:npos;
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "f", npos)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE: /x [Cordinate]");
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x+npos, y, z);
		return 1;
	}
	else return SendErrorMessage(playerid, "You're not authorized.");
}
COMMAND:y(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:npos;
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "f", npos)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE: /y [Cordinate]");
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y+npos, z);
		return 1;
	}
	else return SendErrorMessage(playerid, "You're not authorized.");
}
COMMAND:z(playerid, params[])
{
	new Float:x, Float:y, Float:z, Float:npos;
	if(PlayerData[playerid][pAdmin] >= 2)
	{
		if(sscanf(params, "f", npos)) return SendClientMessage(playerid, COLOR_LIGHTRED, "USAGE: /z [Cordinate]");
		GetPlayerPos(playerid, x, y, z);
		SetPlayerPos(playerid, x, y, z+npos);
		return 1;
	}
	else return SendErrorMessage(playerid, "You're not authorized.");
}
//
CMD:matriculapd(playerid, params[])
{
    new vehicleid;
    vehicleid = GetPlayerVehicleID(playerid);
	new string[32];
	if(!IsPlayerInAnyVehicle(playerid)) return SendErrorMessage(playerid, "No estas en un vehiculo.");
	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser parte de la policia.");
	if (!IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Tienes que estar dentro de un coche de patruya.");
	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 1)
	{
 		Delete3DTextLabel(vehicle3Dtext[vehicleid]);
	    vehiclecallsign[vehicleid] = 0;
	    SendClientMessage(playerid, COLOR_RED, "Matricula removida.");
	    return 1;
	}
	if(sscanf(params, "s[32]",string)) return SendErrorMessage(playerid, "Debes colocar una matricula.");
	if(vehiclecallsign[GetPlayerVehicleID(playerid)] == 0)
	{
		vehicle3Dtext[vehicleid] = Create3DTextLabel(string, COLOR_WHITE, 0.0, 0.0, 0.0, 10.0, 0, 1);
		Attach3DTextLabelToVehicle(vehicle3Dtext[vehicleid], vehicleid, 0.0, -2.8, 0.0);
		vehiclecallsign[vehicleid] = 1;
	}
	return 1;
}


CMD:aremovecall(playerid, params[])
{
	new vehicleid;
	if (PlayerData[playerid][pAdmin] < 1)
		return SendErrorMessage(playerid, "Tienes que ser administrador.");
	if(sscanf(params, "i", vehicleid)) return SendErrorMessage(playerid, "Must enter a vehicle ID.");
    if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");
	Delete3DTextLabel(vehicle3Dtext[vehicleid]);
	return 1;
}


//
CMD:ultracmdoculto9991235(playerid, params[]) Estoyreloco
//
CMD:b(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/b [OOC]");
	if (strlen(params) > 64)
	{
	    if(PlayerData[playerid][pAdminDuty] == 1)
	    {
	        SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{33EE33}%s{FFFFFF} [%d]: (( %.64s", ReturnName(playerid, 0), playerid, params);
	    	SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
	        return 1;
		}
	    SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s [%d]: (( %.64s", ReturnName(playerid, 0), playerid, params);
	    SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "...%s ))", params[64]);
	}
	else
	{
	    if(PlayerData[playerid][pAdminDuty] == 1)
	    {
	        SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "{33EE33}%s{FFFFFF} [%d]: (( %s ))", ReturnName(playerid, 0), playerid, params);
			return 1;
		}
	    SendNearbyMessage(playerid, 20.0, COLOR_WHITE, "%s [%d]: (( %s ))", ReturnName(playerid, 0), playerid, params);
	}
	//format(string, sizeof(string), "(( %s ))", params);
	//SetPlayerChatBubble(playerid, string, COLOR_WHITE, 10.0, 6000);
	return 1;
}

CMD:me(playerid, params[])
{

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/me [accion]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "* %s %s", ReturnName(playerid, 0), params);
	}
	//format(string, sizeof(string), "* %s %s", ReturnName(playerid, 0), params);
 	//SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 6000);
	return 1;
}

CMD:do(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/do [descripcion]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 30.0, COLOR_DO, "* %.64s", params);
	    SendNearbyMessage(playerid, 30.0, COLOR_DO, "...%s (( %s ))", params[64], ReturnName(playerid, 0));
	}
	else {
	    SendNearbyMessage(playerid, 30.0, COLOR_DO, "* %s (( %s ))", params, ReturnName(playerid, 0));
	}
	//format(string, sizeof(string), "* %s (( %s ))", params, ReturnName(playerid, 0));
 	//SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 6000);
	return 1;
}

CMD:ame(playerid, params[])
{
	static
	    string[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ame [accion]");

	format(string, sizeof(string), "* %s %s", ReturnName(playerid, 0), params);
 	SetPlayerChatBubble(playerid, string, COLOR_PURPLE, 30.0, 10000);

 	SendClientMessageEx(playerid, COLOR_PURPLE, "* %s %s", ReturnName(playerid, 0), params);
	return 1;
}

CMD:ado(playerid, params[])
{
    static
	    string[128];

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ado [descripcion]");

	format(string, sizeof(string), "* %s (( %s ))", params, ReturnName(playerid, 0));
 	SetPlayerChatBubble(playerid, string, COLOR_DO, 30.0, 10000);

 	SendClientMessageEx(playerid, COLOR_DO, "* %s (( %s ))", params, ReturnName(playerid, 0));
	return 1;
}

CMD:e(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/e [entorno]");
	SendNearbyMessage(playerid, 30.0, COLOR_LIGHTBLUE2, "* (ID: %d)[Entorno] %s", playerid, params);
	return 1;
}

CMD:intentar(playerid, params[])
{
	new
			String[160];
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/intentar [accion]");
	switch(random(2))
	{
		case 0:
		{
	    	format(String, sizeof(String), " * %s intenta %s, pero falla *",ReturnName(playerid, 0), params);
	   		SendNearbyMessage(playerid, 20.0, 0xB90000FF, String);
		}
		case 1:
	    {
	    	format(String, sizeof(String), " * %s intenta %s, y lo logra *",ReturnName(playerid, 0), params);
	        SendNearbyMessage(playerid, 20.0, 0x00BF60FF, String);
		}
	}
	return 1;
}

CMD:g(playerid, params[])
{

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(g)ritar [grito]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 35.0, COLOR_WHITE, "%s grita: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 35.0, COLOR_WHITE, "...%s!", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 35.0, COLOR_WHITE, "%s grita: %s!", ReturnName(playerid, 0), params);
	}
 	//format(string, sizeof(string), "shouts: %s", params);
	//SetPlayerChatBubble(playerid, string, COLOR_WHITE, 30.0, 6000);
	return 1;
}

CMD:s(playerid, params[])
{


	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(s)usurro [susurro]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "%s susurra: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "%s susurra: %s", ReturnName(playerid, 0), params);
	}
 	//format(string, sizeof(string), "[low] says: %s", params);
	//SetPlayerChatBubble(playerid, string, COLOR_WHITE, 5.0, 6000);
	return 1;
}

CMD:suicidio(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pJailTime] > 0 || PlayerData[playerid][pDrivingTest])
	    return SendErrorMessage(playerid, "No te puedes suicidar en este momento.");

	SetPlayerHealth(playerid, 0.0);
	return 1;
}

CMD:o(playerid, params[])
{
	if (g_StatusOOC && PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "Un administrador desactivo el chat OOC global.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/o [OOC Global]");

	if (PlayerData[playerid][pDisableOOC])
	    return SendErrorMessage(playerid, "Debes habilitar el chat OOC primero.");

    if (strlen(params) > 64)
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) {
		    SendClientMessageEx(i, 0xAAC4E5FF, "(( [OOC] %s: %.64s", ReturnName(playerid, 0), params);
		    SendClientMessageEx(i, 0xAAC4E5FF, "...%s ))", params[64]);
		}
	}
	else
	{
        foreach (new i : Player) if (!PlayerData[i][pDisableOOC] && PlayerData[i][pCreated]) {
		    SendClientMessageEx(i, 0xAAC4E5FF, "(( [OOC] %s: %s ))", ReturnName(playerid, 0), params);
		}
	}
	return 1;
}

CMD:radio(playerid, params[])
	return cmd_r(playerid, params);

CMD:ooc(playerid, params[])
	return cmd_o(playerid, params);

CMD:f(playerid, params[])
	return cmd_fac(playerid, params);

CMD:megaphone(playerid, params[])
	return cmd_m(playerid, params);

CMD:gritar(playerid, params[])
	return cmd_g(playerid, params);

CMD:susurrar(playerid, params[])
	return cmd_s(playerid, params);

CMD:admin(playerid, params[])
	return cmd_a(playerid, params);

CMD:w(playerid, params[])
	return cmd_mp(playerid, params);

CMD:ven(playerid, params[])
	return cmd_ventanas(playerid, params);

CMD:re(playerid, params[])
	return cmd_reportar(playerid, params);

CMD:darvida(playerid, params[])
	return cmd_sethp(playerid, params);

CMD:darlicencia(playerid, params[])
	return cmd_licencias(playerid, params);

CMD:quitarestado(playerid, params[])
	return cmd_sinestado(playerid, params);

CMD:no(playerid, params[])
	return cmd_stopanim(playerid, params);

CMD:ayuda(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CLIENT, "CUENTA:{FFFFFF} /cambiarpass, /ultimologin, /usuario, /propiedades.");
	SendClientMessage(playerid, COLOR_CLIENT, "GENERAL:{FFFFFF} /cuenta, /(re)portar, /ayudame, /acc, /me, /do, /(g)ritar, /b, /inventario, /cluces, /e, /ame, /ado, /estado.");
	SendClientMessage(playerid, COLOR_CLIENT, "GENERAL:{FFFFFF} /aceptar, /faq, /reglamento, /vender, /pintar, /beber, /banco, /cocinar, /chaleco, /municion, /usarkit, /celular.");
	SendClientMessage(playerid, COLOR_CLIENT, "GENERAL:{FFFFFF} /id, /llamar, /colgar, /texto, /tirar, /facciones, /cajas, /llenar, /pagar, /gps, /abrir, /usardroga.");
	SendClientMessage(playerid, COLOR_CLIENT, "GENERAL:{FFFFFF} /acciones, /mochila, /boombox, /radiocanal, /ayudatrabajo, /ayudantes, /eliminarcheckpoint, /stopanim.");
	SendClientMessage(playerid, COLOR_CLIENT, "GENERAL:{FFFFFF} /saludo, /darlicencia, /revisar, /toghud, /dararma, /setradio, /forzarpuerta, /desbug, /licencias.");
	SendClientMessage(playerid, COLOR_CLIENT, "PROPIEDADES:{FFFFFF} /comprar, /abandonar, /cerradura, /ayudacasa, /productos, /cajafuerte, /neginfo, /ayudanegocio.");

	if (PlayerData[playerid][pFactionMod])
	    SendClientMessage(playerid, COLOR_CLIENT, "MODFACCION:{FFFFFF} /crearfaccion, /editarfaccion, /borrarfaccion.");

	if (PlayerData[playerid][pFaction] != -1)
	{
 		SendClientMessage(playerid, COLOR_CLIENT, "FACCION:{FFFFFF} /fmiembros, /(f)ac, /fsalir, /fcaja, /fcontratar, /fexpulsar, /fdarrango, /graffiti.");

 		if (GetFactionType(playerid) == FACTION_POLICE) {
 		    SendClientMessage(playerid, COLOR_CLIENT, "FACCION:{FFFFFF} /tazer, /esposar, /desesposar, /arrastrar, /detener, /omd, /arrestar, /radio, /d, /confiscarplanta.");
 		    SendClientMessage(playerid, COLOR_CLIENT, "FACCION:{FFFFFF} /multar, /spike, /bloqueocarretera, /huelladactilar, /embargar, /cono.");//, /revokeweapon
 		    SendClientMessage(playerid, COLOR_CLIENT, "FACCION:{FFFFFF} /confiscar, /tirarpuerta, /sirena, /balasgoma /matriculapd");
		}
		else if (GetFactionType(playerid) == FACTION_NEWS) {
		    SendClientMessage(playerid, COLOR_CLIENT, "FACCION:{FFFFFF} /radio, /transmitir, /tm, /agregarinvitado, /quitarinvitado.");
		}
  		else if (GetFactionType(playerid) == FACTION_MEDIC) {
 		    SendClientMessage(playerid, COLOR_CLIENT, "FACCION:{FFFFFF} /radio, /d, /cargarherido, /dejarherido.");
		}
		else if (GetFactionType(playerid) == FACTION_GOV) {
 		    SendClientMessage(playerid, COLOR_CLIENT, "FACCION:{FFFFFF} /radio, /d, /bretirar, /bdepositar.");
		}
		else if (GetFactionType(playerid) == FACTION_MECHANIC){
			SendClientMessage(playerid, COLOR_CLIENT, "FACCION:{FFFFFF} /reparar /tunear");
		}
	}
	SendClientMessage(playerid, COLOR_CLIENT, "VEHICULO:{FFFFFF} /estacionar, /cerradura, /abandonar, /rellenar, /quitarmods, /maletero, /llaves, /motor, /luces, /capo, /enganchar.");

    if (PlayerData[playerid][pTester] > 0)
	{
	    SendClientMessage(playerid, COLOR_CLIENT, "AYUDANTE:{FFFFFF} /t, /hduty, /ayudar, /rh, /kick");
	}
	if (PlayerData[playerid][pAdmin] > 0)
	{
	    SendClientMessage(playerid, COLOR_CLIENT, "ADMIN:{FFFFFF} /(a)dmin, /ah.");
	}
	return 1;
}

CMD:cambiarpass(playerid, params[])
{
	Dialog_Show(playerid, ChangePassword, DIALOG_STYLE_PASSWORD, "Cambiar Contraseña", "Escribe tu contraseña actual:", "Aceptar", "Cancelar");
	return 1;
}

CMD:ultimologin(playerid, params[])
{
	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/ultimologin [usuario]");

	static
	    query[128];

	format(query, sizeof(query), "SELECT `LoginDate` FROM `accounts` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnLoginDate", "ds", playerid, params);

 	return 1;
}

CMD:luces(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsEngineVehicle(vehicleid))
		return SendErrorMessage(playerid, "No estas en un vehiculo.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "No puedes hacer esto si no eres el conductor.");

	switch (GetLightStatus(vehicleid))
	{
	    case false:
	    {
	        SetLightStatus(vehicleid, true);
	        ShowPlayerFooter(playerid, "Has ~g~prendido~w~ las luces!");
		}
		case true:
		{
		    SetLightStatus(vehicleid, false);
		    ShowPlayerFooter(playerid, "Has ~r~apagado~w~ las luces!");
		}
	}
	return 1;
}

CMD:capo(playerid, params[])
{
	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsDoorVehicle(i))
	        return SendErrorMessage(playerid, "Este vehiculo no tiene capó.");

	    if (!GetHoodStatus(i))
		{
	        SetHoodStatus(i, true);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha abierto el capó del vehiculo.", ReturnName(playerid, 0));
	        ShowPlayerFooter(playerid, "Has ~g~abierto~w~ el capo!");
		}
		else
		{
			SetHoodStatus(i, false);

	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha cerrado el capó del vehiculo.", ReturnName(playerid, 0));
	        ShowPlayerFooter(playerid, "Has ~g~cerrado~w~ el capo!");
		}
	    return 1;
	}
	SendErrorMessage(playerid, "No estas cerca de ningun vehiculo.");
	return 1;
}
CMD:motor(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsEngineVehicle(vehicleid))
		return SendErrorMessage(playerid, "No estas en un vehiculo.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "No puedes hacer esto si no eres el conductor.");

	if (CoreVehicles[vehicleid][vehFuel] < 1)
	    return SendErrorMessage(playerid, "El tanque esta vacío.");

	if (ReturnVehicleHealth(vehicleid) <= 300)
	    return SendErrorMessage(playerid, "El vehiculo esta destruido, no puede ser prendido.");

	switch (GetEngineStatus(vehicleid))
	{
	    case false:
	    {
	        SetEngineStatus(vehicleid, true);
	        ShowPlayerFooter(playerid, "Has ~g~prendido~w~ el motor!");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s inserta la llave en el encendido y arranca el motor.", ReturnName(playerid, 0));
		}
		case true:
		{
		    SetEngineStatus(vehicleid, false);
		    ShowPlayerFooter(playerid, "Has ~r~apagado~w~ el motor!");
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s inserta la llave en el encendido y detiene el motor.", ReturnName(playerid, 0));
		}
	}
	return 1;
}
CMD:ventanas(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsWindowedVehicle(vehicleid))
		return SendErrorMessage(playerid, "No estas en un vehiculo con ventanas.");

	switch (CoreVehicles[vehicleid][vehWindowsDown])
	{
	    case false:
	    {
	        CoreVehicles[vehicleid][vehWindowsDown] = true;
	        ShowPlayerFooter(playerid, "Has ~g~bajado~w~ las ventanas!");
	        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pulsa un boton y baja todas las ventanas.", ReturnName(playerid, 0));
	        SetVehicleParamsCarWindows(vehicleid, 0, 0, 0, 0);
		}
		case true:
		{
		    CoreVehicles[vehicleid][vehWindowsDown] = false;
		    ShowPlayerFooter(playerid, "Has ~r~subido~w~ las ventanas!");
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s pulsa un boton y sube todas las ventanas.", ReturnName(playerid, 0));
		    SetVehicleParamsCarWindows(vehicleid, 1, 1, 1, 1);
		}
	}
	return 1;
}

CMD:daradmin(playerid, params[])
{
	static
		userid,
	    level;

	if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ud", userid, level))
		return SendSyntaxMessage(playerid, "/daradmin [playerid/nombre] [nivel]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador es invalido.");

	if (level < 0 || level > 6)
	    return SendErrorMessage(playerid, "Nivel de admin invalido, tiene que ser entre 1 y 6.");

	if (level > PlayerData[userid][pAdmin])
	{
	    SendAdminAction(playerid, "Has promovido a %s a un nivel de admin superior. (%d).", ReturnName(userid, 0), level);
	    SendAdminAction(userid, "%s te ha promovido a un nivel de admin superior (%d).", ReturnName(playerid, 0), level);
	}
	else
	{
	    SendAdminAction(playerid, "Has degradado a %s a un nivel de admin inferior (%d).", ReturnName(userid, 0), level);
	    SendAdminAction(userid, "%s te ha degradado a un nivel de admin inferior (%d).", ReturnName(playerid, 0), level);
	}
	PlayerData[userid][pAdmin] = level;
 	Log_Write("logs/admin_log.txt", "[%s] %s cambio el nivel de admin de %s a %d.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), level);

	return 1;
}

CMD:a(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "No eres administrador");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/a [admin text]");

	if (strlen(params) > 64)
	{
		if(PlayerData[playerid][pAdmin] == 1)
		{
			SendAdminAlert(COLOR_MODERADOR, "** Moderador %s:{ffffff} %.64s", ReturnName(playerid, 0), params);
	    	SendAdminAlert(COLOR_MODERADOR, "...{ffffff}%s **", params[64]);
		}
		if(PlayerData[playerid][pAdmin] == 2)
		{
			SendAdminAlert(COLOR_MODERADOR, "** Admin Junior %s:{ffffff} %.64s", ReturnName(playerid, 0), params);
	    	SendAdminAlert(COLOR_MODERADOR, "...{ffffff}%s **", params[64]);
		}
		if(PlayerData[playerid][pAdmin] == 3)
		{
			SendAdminAlert(COLOR_ADMINISTRADOR, "** Administrador %s:{ffffff} %.64s", ReturnName(playerid, 0), params);
	    	SendAdminAlert(COLOR_ADMINISTRADOR, "...{ffffff}%s **", params[64]);
		}
		if(PlayerData[playerid][pAdmin] == 4)
		{
			SendAdminAlert(COLOR_ADMINISTRADOR, "** Admin Superior %s:{ffffff} %.64s", ReturnName(playerid, 0), params);
	    	SendAdminAlert(COLOR_ADMINISTRADOR, "...{ffffff}%s **", params[64]);
		}
		if(PlayerData[playerid][pAdmin] == 5)
		{
			SendAdminAlert(COLOR_FUNDADOR, "** Encargado de Staff %s:{ffffff} %.64s", ReturnName(playerid, 0), params);
	    	SendAdminAlert(COLOR_FUNDADOR, "...{ffffff}%s **", params[64]);
		}
		if(PlayerData[playerid][pAdmin] == 6)
		{
			SendAdminAlert(COLOR_FUNDADOR, "** Fundador %s:{ffffff} %.64s", ReturnName(playerid, 0), params);
	    	SendAdminAlert(COLOR_FUNDADOR, "...{ffffff}%s **", params[64]);
		}
	}
	else
	{
		if(PlayerData[playerid][pAdmin] == 1)
		{
			SendAdminAlert(COLOR_MODERADOR, "** Moderador %s:{ffffff} %s", ReturnName(playerid, 0), params);
		}
		if(PlayerData[playerid][pAdmin] == 2)
		{
			SendAdminAlert(COLOR_MODERADOR, "** Admin Junior %s:{ffffff} %s", ReturnName(playerid, 0), params);
		}
		if(PlayerData[playerid][pAdmin] == 3)
		{
			SendAdminAlert(COLOR_ADMINISTRADOR, "** Administrador %s:{ffffff} %s", ReturnName(playerid, 0), params);
		}
		if(PlayerData[playerid][pAdmin] == 4)
		{
			SendAdminAlert(COLOR_ADMINISTRADOR, "** Admin Superior %s:{ffffff} %s", ReturnName(playerid, 0), params);
		}
		if(PlayerData[playerid][pAdmin] == 5)
		{
			SendAdminAlert(COLOR_FUNDADOR, "** Encargado de Staff %s:{ffffff} %s", ReturnName(playerid, 0), params);
		}
		if(PlayerData[playerid][pAdmin] == 6)
		{
			SendAdminAlert(COLOR_FUNDADOR, "** Fundador %s:{ffffff} %s", ReturnName(playerid, 0), params);
		}
	}
	return 1;
}

CMD:j(playerid, params[])
{
	if (!PlayerData[playerid][pTester] && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "No eres ayudante.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/j [chat de ayudantes]");

	if (strlen(params) > 64)
	{
	    if (PlayerData[playerid][pAdmin])
	    {
	    	SendTesterMessage(COLOR_LIGHTRED, "** Admin %s: %.64s", ReturnName(playerid, 0), params);
	    	SendTesterMessage(COLOR_LIGHTRED, "...%s **", params[64]);
    	}
		else
		{
			SendTesterMessage(COLOR_LIGHTRED, "** Ayudante %s: %.64s", ReturnName(playerid, 0), params);
			SendTesterMessage(COLOR_LIGHTRED, "...%s **", params[64]);
		}
	}
	else
	{
	    if (PlayerData[playerid][pAdmin])
	        SendTesterMessage(COLOR_LIGHTRED, "** Admin %s: %s", ReturnName(playerid, 0), params);

	    else SendTesterMessage(COLOR_LIGHTRED, "** Ayudante %s: %s", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:aduty(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (!PlayerData[playerid][pAdminDuty])
	{
		SetPlayerColor(playerid, 0x33CC3300);

		PlayerData[playerid][pAdminDuty] = 1;
		SendClientMessageToAllEx(COLOR_GREEN, "** %s esta en servicio como administrador (/(re)portar para pedir ayuda).", ReturnName(playerid, 0));
	}
	else
	{
	    SetPlayerColor(playerid, DEFAULT_COLOR);

		PlayerData[playerid][pAdminDuty] = 0;
		SendServerMessage(playerid, "Ya no estas en servicio como admin.");
	}
	return 1;
}

CMD:ah(playerid, params[])
{
	if (!PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "No eres administrador");

	if (PlayerData[playerid][pAdmin] >= 1) {
	    SendClientMessage(playerid, COLOR_YELLOW, "[MOD]:{FFFFFF} /a, /reportes, /spec, /ajail, /liberar, /kick, /silenciar, /desilenciar, /congelar, /descongelar.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[MOD]:{FFFFFF} /aduty, /ban, /skin /ir /aremovecall");
	}
	if (PlayerData[playerid][pAdmin] >= 2) {
	    SendClientMessage(playerid, COLOR_YELLOW, "[JUNIOR]:{FFFFFF} /respawn, /warn, /vercuenta, /ultimodisparo, /traer, /setinterior, /setvw.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[JUNIOR]:{FFFFFF} /llevar, /limpiarchat, /spawn, /llenarnecesidades, /revivir, /aslap, /aceptarnombre.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[JUNIOR]:{FFFFFF} /rechazarnombre, /aa /enmascarados, /listaarmas, /rauto, /rtodos, /rcercano, /sanar.");
		SendClientMessage(playerid, COLOR_YELLOW, "[JUNIOR]:{FFFFFF} /traerauto, /irauto, /x /y /z, /gotoco");
 	}
	if (PlayerData[playerid][pAdmin] >= 3) {
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADMIN]:{FFFFFF} /unban, /listanegra, /getip, /togooc, /sethp, /setarmor, /quitararmas, /fixveh, /veradvertencias.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADMIN]:{FFFFFF} /entrarauto, /darvuelta, /veh, /destruirauto, /cercano, /curartodos, /vernumero, /sangrado.");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ADMIN]:{FFFFFF} /amodificar, /acolorauto, /apintarauto, /aincendio, /borrarincendio, /aborrarboombox.");
	}
	if (PlayerData[playerid][pAdmin] >= 4) {
        SendClientMessage(playerid, COLOR_YELLOW, "[SUPERIOR]:{FFFFFF} /adararma, /hacerayudante, /baninfo, /acambiarnombre, /hacermiembro, /adarrango, /setitem.");
        SendClientMessage(playerid, COLOR_YELLOW, "[SUPERIOR]:{FFFFFF} /avendercasa, /avendernegocio, /jetpack, /setclima, /setgas, /setautovida, /apareceritem.");
        SendClientMessage(playerid, COLOR_YELLOW, "[SUPERIOR]:{FFFFFF} /cantidaditem, /borraritem, /setstat, /hacerlider, /asignarespacios, /darauto.");
	}
	if (PlayerData[playerid][pAdmin] >= 5) {
        SendClientMessage(playerid, COLOR_YELLOW, "[STAFF]:{FFFFFF} /ayudadinamico, /limpiarinventario, /quitaradvertencias, /guardarcuentas.");
	}
	if (PlayerData[playerid][pAdmin] >= 6) {
	    SendClientMessage(playerid, COLOR_YELLOW, "[FUNDADOR]:{FFFFFF} /daradmin, /borrarcuenta, /borrarpersonaje, /hacerfacmod, /panel, /reiniciarsv, /dardinero.");
	}
	return 1;
}

CMD:ayudadinamico(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	    return 1;

	SendClientMessage(playerid, COLOR_CLIENT, "DINAMICO:{FFFFFF} /crearcasa, /crearnegocio, /crearentrada, /crearbombagas, /crearcaja, /crearfaccion, /crearporton.");
    SendClientMessage(playerid, COLOR_CLIENT, "DINAMICO:{FFFFFF} /crearauto, /crearatm, /crearvendedor, /crearbasura, /editarcasa, /editarnegocio, /anegocioestado.");
	SendClientMessage(playerid, COLOR_CLIENT, "DINAMICO:{FFFFFF} /borrarnegocio, /editarentrada, /editarfaccion, /editarporton, /setbombagas, /borrarcasa.");
	SendClientMessage(playerid, COLOR_CLIENT, "DINAMICO:{FFFFFF} /borrarbombagas, /borrarentrada, /borrarbombagas, /borrarcaja, /borrarfaccion, /borrarporton");
	SendClientMessage(playerid, COLOR_CLIENT, "DINAMICO:{FFFFFF} /borraratm, /borrarbasura, /creararmario, /editararmario, /aborrararmario, /crearcamara, /borrarcamara.");
	SendClientMessage(playerid, COLOR_CLIENT, "DINAMICO:{FFFFFF} /borrarplanta, /creardetector, /borrardetector. /crearpublicidad /borrarpublicidad /editarpublicidad");
	return 1;
}

CMD:reportar(playerid, params[])
{
	new reportid = -1;

	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/reportar [razon]");
	    SendClientMessage(playerid, COLOR_LIGHTRED, "[ADVERTENCIA]:{FFFFFF} Por favor, usa este comando para propositos validos.");
	    return 1;
	}
	if (Report_GetCount(playerid) > 5)
	    return SendErrorMessage(playerid, "Ya tienes 5 reportes activos!");

	if (PlayerData[playerid][pReportTime] >= gettime())
	    return SendErrorMessage(playerid, "Debes esperar %d antes de mandar otro reporte.", PlayerData[playerid][pReportTime] - gettime());

	if ((reportid = Report_Add(playerid, params)) != -1)
	{
		ShowPlayerFooter(playerid, "Tu ~g~reporte~w~ ha sido enviado!");

		foreach (new i : Player)
		{
			if (PlayerData[i][pAdmin] > 0 && PlayerData[i][pAdminDuty]) {
				SendClientMessageEx(i, COLOR_LIGHTYELLOW, "[REPORTE %d]: %s (ID: %d) reporta: %s", reportid, ReturnName(playerid, 0), playerid, params);
			}
		}
		PlayerData[playerid][pReportTime] = gettime() + 15;
		SendServerMessage(playerid, "Tu reporte ha sido enviado a los administradores en linea.");
	}
	else
	{

	    SendErrorMessage(playerid, "La lista de reportes esta llena. Por favor espera un rato.");
	}
	return 1;
}

CMD:reportes(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	new
		count,
		text[128];

	for (new i = 0; i != MAX_REPORTS; i ++)
	{
	    if (!ReportData[i][rExists])
			continue;

		strunpack(text, ReportData[i][rText]);

		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, "[RID: %d] %s (ID: %d) reporta: %s", i, ReturnName(ReportData[i][rPlayer]), ReportData[i][rPlayer], text);
		count++;
	}
	if (!count)
	    return SendErrorMessage(playerid, "No hay reportes activos.");

	SendServerMessage(playerid, "Usa \"/ar RID\" or \"/rr RID\" para aceptar o rechazar un reporte.");
	return 1;
}
//CMD:robar(playerid, params[])
//{
//   if (PlayerData[playerid][pPlayingHours] < 8)
//		return SendErrorMessage(playerid, "No puedes usar este comando, debes tener 8 horas jugadas.");
//
//    if(IsPlayerInRangeOfPoint(playerid,7.0 , -30.8019,-28.9984,1003.5573)) //Acá ustedes lo editan y ponen dónde quieren que sea el robo.
//    {
//        SendClientMessage(playerid, -1, "Robando tienda...");
//        SetTimerEx("RobarTienda",10000,false,"i",playerid); //Nombre de la función, tiempo de robo, repetición, etc.
//        //Acá agregan más cosas si quieren, por EJ: Animaciones, etc.
//    }
//    else SendClientMessage(playerid, -1, "No estas en una tienda que se pueda robar.");
//    return 1;
//}
CMD:ar(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ar [ID del Reporte] (/reportes para ver los reportes)");

	new
		reportid = strval(params),
		string[64];

	if ((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
	    return SendErrorMessage(playerid, "ID de reporte invalida. Los reportes van del 0 al %d.", MAX_REPORTS);

	format(string, sizeof(string), "Has ~g~aceptado~w~ el reporte ID: %d.", reportid);
	ShowPlayerFooter(playerid, string);

	SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) ha aceptado tu reporte.", ReturnName(playerid, 0), playerid);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ha aceptado el reporte de %s.", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));

	Report_Remove(reportid);
	return 1;
}

CMD:rr(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/rr [ID del Reporte] (/reportes para ver los reportes)");

	new
		reportid = strval(params),
		string[64];

	if ((reportid < 0 || reportid >= MAX_REPORTS) || !ReportData[reportid][rExists])
	    return SendErrorMessage(playerid, "ID de reporte invalida. Los reportes van del 0 al %d.", MAX_REPORTS);

	format(string, sizeof(string), "Has ~r~rechazado~w~ el reporte ID: %d.", reportid);
	ShowPlayerFooter(playerid, string);

	SendAdminAction(ReportData[reportid][rPlayer], "%s (ID: %d) rechazó tu reporte.", ReturnName(playerid, 0), playerid);
    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s rechazó el reporte de %s.", ReturnName(playerid, 0), ReturnName(ReportData[reportid][rPlayer], 0));

    Report_Remove(reportid);
	return 1;
}

CMD:spec(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (!isnull(params) && !strcmp(params, "off", true))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
			return SendErrorMessage(playerid, "No estas specteando a nadie.");

	    PlayerSpectatePlayer(playerid, INVALID_PLAYER_ID);
	    PlayerSpectateVehicle(playerid, INVALID_VEHICLE_ID);

	    SetSpawnInfo(playerid, 0, PlayerData[playerid][pSkin], PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2], PlayerData[playerid][pPos][3], 0, 0, 0, 0, 0, 0);
	    TogglePlayerSpectating(playerid, false);
	    TogglePlayerControllable(playerid, 1);
	    return SendServerMessage(playerid, "Ya no estas en modo espectador.");
	}
	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/spec [playerid/nombre] - Escribe \"/spec off\" para dejar el spec.");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
	{
		GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
		GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

		PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
		PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);
	}
	SetPlayerInterior(playerid, GetPlayerInterior(userid));
	SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(userid));

	TogglePlayerSpectating(playerid, 1);

	if (IsPlayerInAnyVehicle(userid))
	    PlayerSpectateVehicle(playerid, GetPlayerVehicleID(userid));

	else
		PlayerSpectatePlayer(playerid, userid);

	SendServerMessage(playerid, "Estas specteando a %s (ID: %d).", ReturnName(userid, 0), userid);
	PlayerData[playerid][pSpectator] = userid;

	return 1;
}

CMD:ajail(playerid, params[])
{
	static
		userid,
		minutes,
		reason[128];

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "uds[128]", userid, minutes, reason))
	    return SendSyntaxMessage(playerid, "/ajail [playerid/nombre] [minutos] [razon]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (minutes < 1)
		return SendErrorMessage(playerid, "No puedes mandar a jail a un jugador por ese tiempo.");

	if (minutes > 30 && PlayerData[playerid][pTester] && !PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "Los testers no pueden mandar a jail por mas de 30 minutos.");

	ClearAnimations(userid);
	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);

    SetPlayerPos(userid, 197.6346, 175.3765, 1003.0234);
    SetPlayerInterior(userid, 3);

	SetPlayerVirtualWorld(userid, (playerid + 100));
 	SetPlayerFacingAngle(userid, 0.0);

	SetCameraBehindPlayer(userid);
	ResetWeapons(userid);

    ShowHungerTextdraw(userid, 0);
	ResetPlayer(userid);

	PlayerData[userid][pJailTime] = minutes * 60;
	PlayerData[userid][pPrisoned] = 0;

	SendAdminAction(playerid, "Has jaileado a %s por %d minutos (%s).", ReturnName(userid, 0), minutes, reason);
	SendAdminAction(userid, "%s te jaileó por %d minutos (%s).", ReturnName(playerid, 0), minutes, reason);

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s envio a jail a %s por %d minutos. Razón: %s", ReturnName(playerid, 0), ReturnName(userid, 0), minutes, reason);
	Log_Write("logs/jail_log.txt", "[%s] %s envio a jail a %s por %d minutos. Razón: %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), minutes, reason);
	return 1;
}

CMD:liberar(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/liberar [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (!PlayerData[userid][pJailTime])
	    return SendErrorMessage(playerid, "No puedes liberar a alguien que no esta en jail.");

	PlayerData[userid][pJailTime] = 1;

	SendAdminAction(playerid, "Liberó a %s del jail.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s te libero del jail.", ReturnName(playerid, 0));

	Log_Write("logs/jail_log.txt", "[%s] %s libero a %s del jail.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:sangrado(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/sangrado [playerid/nombre] (Hace que el jugador pierda vida)");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	switch (PlayerData[userid][pBleeding])
	{
	    case 0:
	    {
	        PlayerData[userid][pBleeding] = 1;
	        PlayerData[userid][pBleedTime] = 10;

            CreateBlood(userid);
			SetTimerEx("HidePlayerBox", 500, false, "dd", userid, _:ShowPlayerBox(userid, 0xFF000066));

			SendServerMessage(playerid, "Has habilitado el sangrado para %s.", ReturnName(userid, 0));
		}
		case 1:
	    {
	        PlayerData[userid][pBleeding] = 0;
	        PlayerData[userid][pBleedTime] = 0;

			SendServerMessage(playerid, "Has deshabilitado el sangrado para %s.", ReturnName(userid, 0));
		}
	}
	return 1;
}

CMD:aslap(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/aslap [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(userid, x, y, z);
	SetPlayerPos(userid, x, y, z + 5);

	PlayerPlaySound(userid, 1130, 0.0, 0.0, 0.0);
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s golpeo a %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:kick(playerid, params[])
{
	static
	    userid,
	    reason[128];

    if (PlayerData[playerid][pAdmin] < 1 && PlayerData[playerid][pTester] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "us[128]", userid, reason))
	    return SendSyntaxMessage(playerid, "/kick [playerid/nombre] [razon]");

	if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "No puedes darle kick a un administrador de rango superior.");

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s kickeo a %s por: %s.", ReturnName(playerid, 0), ReturnName(userid, 0), reason);
	Log_Write("logs/kick_log.txt", "[%s] %s kickeo a %s por: %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), reason);

	KickEx(userid);
	return 1;
}

CMD:silenciar(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/silenciar [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "No te puedes silenciar a vos mismo!");

	if (PlayerData[userid][pMuted])
	    return SendErrorMessage(playerid, "Ese jugador ya esta silenciado.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "No puedes silenciar a un administrador de rango superior.");

	PlayerData[userid][pMuted] = 1;

	SendAdminAction(playerid, "Has silenciado a %s por abusar del chat y/o de comandos.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s te ha silenciado por abusar del chat y/o de comandos.", ReturnName(playerid, 0));

	return 1;
}

CMD:desilenciar(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/desilenciar [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (!PlayerData[userid][pMuted])
	    return SendErrorMessage(playerid, "Ese jugador no esta silenciado.");

	PlayerData[userid][pMuted] = 0;

	SendAdminAction(playerid, "Has desilenciado a %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "Fuiste desilenciado por %s.", ReturnName(playerid, 0));

	return 1;
}

CMD:congelar(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/congelar [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	TogglePlayerControllable(userid, 0);
	SendAdminAction(playerid, "Has congelado los movimientos de %s.", ReturnName(userid, 0));
	return 1;
}

CMD:descongelar(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/descongelar [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

    PlayerData[playerid][pFreeze] = 0;

	TogglePlayerControllable(userid, 1);
	SendAdminAction(playerid, "Has descongelado los movimientos de %s.", ReturnName(userid, 0));
	return 1;
}

CMD:revivir(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/revivir [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "No puedes revivir a un jugador que no esta herido.");

	ShowHungerTextdraw(userid, 1);
	PlayerData[userid][pInjured] = 0;

	ClearAnimations(userid);
	TextDrawHideForPlayer(userid, gServerTextdraws[2]);

	SendAdminAction(playerid, "Ha revivido a %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s te ha revivido.", ReturnName(playerid, 0));
	return 1;
}

CMD:respawn(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/respawn [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (!IsPlayerSpawned(userid))
	    return SendErrorMessage(playerid, "No puedes respawnear a un jugador que no esta spawneado.");

	RespawnPlayer(userid);

	SendAdminAction(playerid, "Respawneaste a %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "Has sido respawneado por %s.", ReturnName(playerid, 0));

	return 1;
}

CMD:llenarnecesidades(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/llenarnecesidades [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	PlayerData[userid][pHunger] = 100;
	PlayerData[userid][pThirst] = 100;

	SendAdminAction(playerid, "Has llenado el hambre y sed de %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "Tu hambre y sed fueron llenados por %s.", ReturnName(playerid, 0));

	return 1;
}

CMD:skin(playerid, params[])
{
	static
	    userid,
		skinid;

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ud", userid, skinid))
	    return SendSyntaxMessage(playerid, "/skin [playerid/nombre] [skin id]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (skinid < 0 || skinid > 311)
	    return SendErrorMessage(playerid, "ID de skin invalida, los skins son desde el 0 al 311.");

	SetPlayerSkin(userid, skinid);
	PlayerData[userid][pSkin] = skinid;

	SendAdminAction(playerid, "Has cambiado el skin de %s al ID: %d.", ReturnName(userid, 0), skinid);
	SendAdminAction(userid, "%s cambio tu skin al ID: %d.", ReturnName(playerid, 0), skinid);

	return 1;
}

CMD:ban(playerid, params[])
{
	static
	    userid,
		reason[128];

    if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "us[128]", userid, reason))
	    return SendSyntaxMessage(playerid, "/ban [playerid/nombre] [razon]");

    if (userid == INVALID_PLAYER_ID || (IsPlayerConnected(userid) && PlayerData[userid][pKicked]))
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "No te puedes banear a vos mismo.");

    if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "No puedes silenciar a un administrador de rango superior.");

 	foreach (new i : Player) {
		if (!strcmp(PlayerData[i][pIP], PlayerData[userid][pIP]) && i != userid) {
		    KickEx(i);
		}
	}
	Dialog_Show(userid, ShowOnly, DIALOG_STYLE_MSGBOX, "Baneado", "Tu cuenta completa fue baneada de este servidor.\n\nUsuario: %s\nRazon: %s\nAdmin que te baneo: %s\n\nPulsa F8 para sacar una screenshot y pedir una apelacion a desban en el foro.", "Close", "", PlayerData[userid][pUsername], reason, ReturnName(playerid, 0));

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s fue baneado por %s. razon: %s.", ReturnName(userid, 0), ReturnName(playerid, 0), reason);
	Log_Write("logs/ban_log.txt", "[%s] %s fue baneado por %s. razon: %s.", ReturnDate(), ReturnName(userid, 0), ReturnName(playerid, 0), reason);

	Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], PlayerData[playerid][pUsername], reason);
	KickEx(userid);

	return 1;
}

CMD:usuario(playerid, params[])
{
	if (isnull(params) || strlen(params) > 24)
		return SendSyntaxMessage(playerid, "/usuario [character name]");

	static
	    query[128];

	format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnResolveUsername", "ds", playerid, params);

	return 1;
}

CMD:cuenta(playerid, params[])
{
	ShowStatsForPlayer(playerid, playerid);
	return 1;
}

CMD:vercuenta(playerid, params[])
{
    static
	    userid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/vercuenta [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "Ese jugador ya no esta conectado.");

	ShowStatsForPlayer(playerid, userid);
	SendAdminAction(playerid, "Estas viendo la cuenta de %s (escribe /cuenta para cerrar).", ReturnName(userid, 0));
	return 1;
}

CMD:acc(playerid, params[])
{
	new
	    string[128];

	format(string, sizeof(string), "Lentes: %s\nGorros: %s\nBandanas: %s", (PlayerData[playerid][pGlasses]) ? ("Si") : ("No"), (PlayerData[playerid][pHat]) ? ("Si") : ("No"), (PlayerData[playerid][pBandana]) ? ("Si") : ("No"));
	Dialog_Show(playerid, Accessory, DIALOG_STYLE_LIST, "Accesorios", string, "Seleccionar", "Cancelar");

	return 1;
}

CMD:ultimodisparo(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/ultimodisparo [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (PlayerData[userid][pLastShot] == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no recibio ningun disparo desde que se conecto.");

    SendServerMessage(playerid, "%s fue disparado por ultima vez por %s (%s).", ReturnName(userid, 0), ReturnName(PlayerData[userid][pLastShot]), GetDuration(gettime() - PlayerData[userid][pShotTime]));
    return 1;
}

CMD:ir(playerid, params[])
{
	static
	    id,
	    type[24],
		string[64];

	if (PlayerData[playerid][pAdmin] < 1)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", id))
 	{
	 	SendSyntaxMessage(playerid, "/ir [jugador o item]");
		SendClientMessage(playerid, COLOR_YELLOW, "[ITEMS]:{FFFFFF} spawn, prision, casa, negocio, entrada, trabajo, porton, interior, publicidad");
		return 1;
	}
    if (id == INVALID_PLAYER_ID)
	{
	    if (sscanf(params, "s[24]S()[64]", type, string))
		{
		    SendSyntaxMessage(playerid, "/ir [jugador o item]");
			SendClientMessage(playerid, COLOR_YELLOW, "[ITEMS]:{FFFFFF} spawn, prision, casa, negocio, entrada, trabajo, porton, interior, publicidad");
			return 1;
	    }
	    if (!strcmp(type, "spawn", true)) {
	        SetDefaultSpawn(playerid);

	        return SendServerMessage(playerid, "Has sido enviado al spawn.");
		}
		else if (!strcmp(type, "prision", true))
		{
	        SetPlayerPos(playerid, 283.5930, 1413.3511, 10.4078);
	        SetPlayerFacingAngle(playerid, 180.0000);

	        SetPlayerInterior(playerid, 0);
	        SetPlayerVirtualWorld(playerid, 0);

	        return SendServerMessage(playerid, "Has sido enviado a la prision.");
		}
		//
		else if (!strcmp(type, "publicidad", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/ir [publicidad] [ID de publicidad]");

			if ((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
			    return SendErrorMessage(playerid, "ID de publicidad invalida.");

		    SetPlayerPos(playerid, BillBoardData[id][bbPos][0], BillBoardData[id][bbPos][1], BillBoardData[id][bbPos][2]);
		    SendServerMessage(playerid, "Has sido enviado a la publicidad ID: %d.", id);
		    return 1;
		}
		//
		else if (!strcmp(type, "casa", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/ir [casa] [ID casa]");

			if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
			    return SendErrorMessage(playerid, "ID de casa invalida.");

		    SetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		    SetPlayerInterior(playerid, HouseData[id][houseExterior]);

			SetPlayerVirtualWorld(playerid, HouseData[id][houseExteriorVW]);
		    SendServerMessage(playerid, "Has sido enviado a la casa ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "negocio", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/ir [negocio] [ID del negocio]");

			if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
			    return SendErrorMessage(playerid, "ID de negocio invalida.");

		    SetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		    SetPlayerInterior(playerid, BusinessData[id][bizExterior]);

			SetPlayerVirtualWorld(playerid, BusinessData[id][bizExteriorVW]);
		    SendServerMessage(playerid, "Has sido enviado al negocio ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "entrada", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/ir [entrada] [ID de entrada]");

			if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
			    return SendErrorMessage(playerid, "ID de entrada invalida.");

		    SetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		    SetPlayerInterior(playerid, EntranceData[id][entranceExterior]);

			SetPlayerVirtualWorld(playerid, EntranceData[id][entranceExteriorVW]);
		    SendServerMessage(playerid, "Has sido enviado a la entrada ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "trabajo", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/ir [trabajo] [ID del trabajo]");

			if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
			    return SendErrorMessage(playerid, "ID de trabajo invalida.");

		    SetPlayerPos(playerid, JobData[id][jobPos][0], JobData[id][jobPos][1], JobData[id][jobPos][2]);
		    SetPlayerInterior(playerid, JobData[id][jobInterior]);

			SetPlayerVirtualWorld(playerid, JobData[id][jobWorld]);
		    SendServerMessage(playerid, "Has sido enviado al trabajo ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "porton", true))
		{
		    if (sscanf(string, "d", id))
		        return SendSyntaxMessage(playerid, "/ir [porton] [ID del porton]");

			if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
			    return SendErrorMessage(playerid, "ID del porton invalida.");

		    SetPlayerPos(playerid, GateData[id][gatePos][0] - (2.5 * floatsin(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][1] - (2.5 * floatcos(-GateData[id][gatePos][3], degrees)), GateData[id][gatePos][2]);
		    SetPlayerInterior(playerid, GateData[id][gateInterior]);

			SetPlayerVirtualWorld(playerid, GateData[id][gateWorld]);
		    SendServerMessage(playerid, "Has sido enviado al porton ID: %d.", id);
		    return 1;
		}
		else if (!strcmp(type, "interior", true))
		{
		    static
		        str[1600];

			str[0] = '\0';

			for (new i = 0; i < sizeof(g_arrInteriorData); i ++) {
			    strcat(str, g_arrInteriorData[i][e_InteriorName]);
			    strcat(str, "\n");
		    }
		    Dialog_Show(playerid, TeleportInterior, DIALOG_STYLE_LIST, "Teleport: Lista de interiores", str, "Seleccionar", "Cancelar");
		    return 1;
		}
	    else return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");
	}
	if (!IsPlayerSpawned(id))
		return SendErrorMessage(playerid, "No puedes enviar a un jugador que no esta spawneado.");

	SendPlayerToPlayer(playerid, id);

	format(string, sizeof(string), "Has sido ~y~teleportado~w~ a %s.", ReturnName(id, 0));
	ShowPlayerFooter(playerid, string);

	return 1;
}

CMD:llevar(playerid, params[])
{
	static
	    userid,
	    type[24];

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "us[32]", userid, type))
 	{
	 	SendSyntaxMessage(playerid, "/llevar [jugador] [opcion]");
		SendClientMessage(playerid, COLOR_YELLOW, "[OPCIONES]:{FFFFFF} spawn, prision");
		return 1;
	}
    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

 	if (!strcmp(type, "spawn", true))
	 {
  		SetDefaultSpawn(userid);

		SendServerMessage(playerid, "Has enviado a %s al spawn.", ReturnName(userid, 0));
		SendServerMessage(userid, "%s te ha enviado al spawn.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "prision", true))
	{
		SetPlayerPos(playerid, 283.5930, 1413.3511, 10.4078);
  		SetPlayerFacingAngle(playerid, 180.0000);

		SetPlayerInterior(playerid, 0);
  		SetPlayerVirtualWorld(playerid, 0);

		SendServerMessage(playerid, "Has enviado a %s a la prision (como civil).", ReturnName(userid, 0));
		SendServerMessage(userid, "%s te ha enviado a la prision como civil.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:traer(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/traer [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (!IsPlayerSpawned(userid))
		return SendErrorMessage(playerid, "No puedes traer a un jugador que no esta spawneado.");

	SendPlayerToPlayer(userid, playerid);
	SendServerMessage(playerid, "Has enviado a %s hacia ti.", ReturnName(userid, 0));
	return 1;
}

CMD:inventario(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "No puedes abrir tu inventario ahora mismo.");

	if (PlayerData[playerid][pJailTime] > 0)
		return SendErrorMessage(playerid, "No puedes abrir tu inventario cuando estas en jail.");

	OpenInventory(playerid);
	return 1;
}

CMD:setinterior(playerid, params[])
{
	static
		userid,
	    interior;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ud", userid, interior))
		return SendSyntaxMessage(playerid, "/setinterior [playerid/nombre] [interior]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	SetPlayerInterior(userid, interior);
	PlayerData[userid][pInterior] = interior;

	SendServerMessage(playerid, "Has cambiado el interior de %s a %d.", ReturnName(userid, 0), interior);
	return 1;
}

CMD:setvw(playerid, params[])
{
	static
		userid,
	    world;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ud", userid, world))
		return SendSyntaxMessage(playerid, "/setvw [playerid/nombre] [mundo]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	SetPlayerVirtualWorld(userid, world);
	PlayerData[userid][pWorld] = world;

	SendServerMessage(playerid, "Has cambiado el mundo virtual de %s a %d.", ReturnName(userid, 0), world);
	return 1;
}

CMD:aa(playerid, params[])
{
	static
	    userid,
	    text[128];

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "us[128]", userid, text))
		return SendSyntaxMessage(playerid, "/aa [playerid/nombre] [mensaje]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	SendClientMessageEx(userid, COLOR_YELLOW, "[ADMIN]: %s dice: %s", ReturnName(playerid, 0), text);

	if (playerid != userid) {
		SendClientMessageEx(playerid, COLOR_YELLOW, "[ADMIN]: %s dice: %s", ReturnName(playerid, 0), text);
	}
	return 1;
}

CMD:llevarajugador(playerid, params[])
{
	static
	    userid,
	    targetid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "uu", userid, targetid))
	    return SendSyntaxMessage(playerid, "/llevarajugador [playerid/nombre] [playerid/nombre] (Lleva al jugador 1 a la posicion del 2)");

	if (userid == INVALID_PLAYER_ID || targetid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "El jugador/s no esta conectado.");

	SendPlayerToPlayer(userid, targetid);

	SendServerMessage(playerid, "Has enviado a %s a la posicion de %s.", ReturnName(userid, 0), ReturnName(targetid));
	SendServerMessage(userid, "%s te envio a la posicion de %s.", ReturnName(playerid, 0), ReturnName(targetid));
	return 1;
}

CMD:unban(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (isnull(params) || strlen(params) > 24)
	{
		SendSyntaxMessage(playerid, "/unban [usuario]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[NOTE]:{FFFFFF} Escribe \"/usuario\" para saber la cuenta a partir del nombre de sus personajes.");
	}
	else
	{
	    Blacklist_Remove(params);

	    SendServerMessage(playerid, "Has desbaneado a \"%s\" satisfactoriamente.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s desbaneo a la cuenta \"%s\".", ReturnName(playerid, 0), params);

	    Log_Write("logs/ban_log.txt", "[%s] %s desbaneo a la cuenta \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:listanegra(playerid, params[])
{
	static
		type[24];

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "s[24]s[128]", type, params))
 	{
	 	SendSyntaxMessage(playerid, "/listanegra [opcion] [parametro]");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[OPCIONES]:{FFFFFF} ban, banip, unbanip");
	 	return 1;
	}
	if (!strcmp(type, "ban", true))
	{
	    if (!IsValidPlayerName(params))
	        return SendErrorMessage(playerid, "El nombre que colocaste no esta en el formato correcto.");

		foreach (new i : Player) if (!strcmp(PlayerData[i][pUsername], params) || !strcmp(ReturnName(i), params, true)) {
		    KickEx(i);
		}
		Blacklist_Add("0.0.0.0", params, PlayerData[playerid][pUsername], "Name Ban (/listanegra)");

	    SendServerMessage(playerid, "Has baneado a \"%s\" satisfactoriamente.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s baneo a \"%s\".", ReturnName(playerid, 0), params);

	    Log_Write("logs/ban_log.txt", "[%s] %s baneo a \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
	}
	else if (!strcmp(type, "banip", true))
	{
	    if (!IsAnIP(params))
	        return SendErrorMessage(playerid, "La IP que escribiste no esta en el formato correcto.");

		foreach (new i : Player) if (!strcmp(PlayerData[i][pIP], params)) {
		    KickEx(i);
		}
		Blacklist_Add(params, "", PlayerData[playerid][pUsername], "IP Ban (/listanegra)");

	    SendServerMessage(playerid, "Has baneado a la IP \"%s\" satisfactoriamente.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s baneo la IP \"%s\".", ReturnName(playerid, 0), params);

	    Log_Write("logs/ban_log.txt", "[%s] %s baneo la IP \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
	}
	else if (!strcmp(type, "unbanip", true))
	{
	    if (!IsAnIP(params))
	        return SendErrorMessage(playerid, "La IP que escribiste no esta en el formato correcto.");

		Blacklist_RemoveIP(params);

	    SendServerMessage(playerid, "Has desbaneado la IP \"%s\" satisfactoriamente.", params);
	    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s desbaneo la IP\"%s\".", ReturnName(playerid, 0), params);

	    Log_Write("logs/ban_log.txt", "[%s] %s desbaneo la IP \"%s\".", ReturnDate(), ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:getip(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/getip [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	SendServerMessage(playerid, "La direccion IP de%s es %s.", ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:togooc(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (!g_StatusOOC)
	{
	    SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s deshabilito el chat OOC global.", ReturnName(playerid, 0));
	    g_StatusOOC = true;
	}
	else
	{
	    SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s habilito el chat OOC global.", ReturnName(playerid, 0));
	    g_StatusOOC = false;
	}
	return 1;
}

CMD:sethp(playerid, params[])
{
	static
		userid,
	    Float:amount;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "uf", userid, amount))
		return SendSyntaxMessage(playerid, "/sethp [playerid/nombre] [cantidad]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	SetPlayerHealth(userid, amount);
	SendServerMessage(playerid, "Asignaste la vida de %s a %.2f.", ReturnName(userid, 0), amount);
	return 1;
}

CMD:setarmor(playerid, params[])
{
	static
		userid,
	    Float:amount;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "uf", userid, amount))
		return SendSyntaxMessage(playerid, "/setarmor [playerid/nombre] [cantidad]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

    SetPlayerArmour(userid, amount);
	SendServerMessage(playerid, "Asignaste el chaleco de %s a %.2f.", ReturnName(userid, 0), amount);
	return 1;
}

CMD:quitararmas(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/quitararmas [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	ResetWeapons(userid);
	SendAdminAction(playerid, "Le has quitado las armas a %s.", ReturnName(userid, 0));

	return 1;
}

CMD:fixveh(playerid, params[])
{
    new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (vehicleid > 0 && isnull(params))
	{
		RepairVehicle(vehicleid);
		SendServerMessage(playerid, "Has reparado tu vehiculo actual.");
	}
	else
	{
		if (sscanf(params, "d", vehicleid))
	    	return SendSyntaxMessage(playerid, "/fixveh [veh ID]");

		else if (!IsValidVehicle(vehicleid))
	    	return SendErrorMessage(playerid, "ID de vehiculo invalida.");

		RepairVehicle(vehicleid);
		SendServerMessage(playerid, "You have repaired vehicle ID: %d.", vehicleid);
	}
	return 1;
}

CMD:traerauto(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/traerauto [veh ID]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "ID de vehiculo invalida.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);
	SetVehiclePos(vehicleid, x + 2, y - 2, z);

 	SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));
	LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	return 1;
}

CMD:entrarauto(playerid, params[])
{
	new vehicleid, seatid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/entrarauto [veh ID]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "ID de vehiculo invalida.");

	seatid = GetAvailableSeat(vehicleid, 0);

	if (seatid == -1)
	    return SendErrorMessage(playerid, "There are no seats left to enter.");

	PutPlayerInVehicle(playerid, vehicleid, seatid);
	return 1;
}

CMD:irauto(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/irauto [veh ID]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "ID de vehiculo invalida.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetVehiclePos(vehicleid, x, y, z);
	SetPlayerPos(playerid, x, y - 2, z + 2);

	return 1;
}

CMD:rauto(playerid, params[])
{
	new vehicleid;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", vehicleid))
	    return SendSyntaxMessage(playerid, "/rauto [veh ID]");

	if (vehicleid < 1 || vehicleid > MAX_VEHICLES || !IsValidVehicle(vehicleid))
		return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

	RespawnVehicle(vehicleid);
	SendServerMessage(playerid, "Has res: %d.", vehicleid);

	return 1;
}

CMD:rtodos(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	new count;

	for (new i = 1; i != MAX_VEHICLES; i ++)
	{
	    if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
	    {
	        RespawnVehicle(i);
			count++;
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "No hay vehiculos spawneados.");

	SendServerMessage(playerid, "Has respawneado %d vehiculos desocupados.", count);
	return 1;
}

CMD:rcercanos(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	new count;

	for (new i = 1; i != MAX_VEHICLES; i ++)
	{
	    static
	        Float:fX,
	        Float:fY,
	        Float:fZ;

	    if (IsValidVehicle(i) && GetVehicleDriver(i) == INVALID_PLAYER_ID)
		{
			GetVehiclePos(i, fX, fY, fZ);

			if (IsPlayerInRangeOfPoint(playerid, 50.0, fX, fY, fZ))
			{
		        RespawnVehicle(i);
				count++;
			}
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "No hay vehiculos cercanos para respawnear.");

	SendServerMessage(playerid, "Has respawnead %d vehiculos cercanos.", count);
	return 1;
}

CMD:veh(playerid, params[])
{
	static
	    model[32],
		color1,
		color2;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "s[32]I(-1)I(-1)", model, color1, color2))
	    return SendSyntaxMessage(playerid, "/veh [model id/name] <color 1> <color 2>");

	if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "ID de vehiculo invalida.");

	static
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:a,
		vehicleid;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, a);

	vehicleid = CreateVehicle(model[0], x, y + 2, z, a, color1, color2, 0);

	if (GetPlayerInterior(playerid) != 0)
	    LinkVehicleToInterior(vehicleid, GetPlayerInterior(playerid));

	if (GetPlayerVirtualWorld(playerid) != 0)
		SetVehicleVirtualWorld(vehicleid, GetPlayerVirtualWorld(playerid));

	if (IsABoat(vehicleid) || IsAPlane(vehicleid) || IsAHelicopter(vehicleid))
	    PutPlayerInVehicle(playerid, vehicleid, 0);

	ResetVehicle(vehicleid);

	CoreVehicles[vehicleid][vehTemporary] = true;
	SendServerMessage(playerid, "Has spawneado un %s (%d, %d).", ReturnVehicleModelName(model[0]), color1, color2);
	return 1;
}

CMD:destruirauto(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (!isnull(params) && !strcmp(params, "all", true))
	{
	    for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && CoreVehicles[i][vehTemporary])
		{
	        CoreVehicles[i][vehTemporary] = false;

	        DestroyVehicle(i);
	        ResetVehicle(i);
	    }
	    SendServerMessage(playerid, "Has destruido los vehiculos temporales.");
	    return 1;
	}
	else if (IsPlayerInAnyVehicle(playerid))
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

	    if (CoreVehicles[vehicleid][vehTemporary])
		{
	        CoreVehicles[vehicleid][vehTemporary] = false;
	        DestroyVehicle(vehicleid);

	        ResetVehicle(vehicleid);
	        SendServerMessage(playerid, "Has destruido este vehiculo creado por un admin.");
		}
		else
		{
		    SendErrorMessage(playerid, "No puedes destruir un vehiculo no temporal o creado por un admin.");
		}
	}
	return 1;
}

CMD:adararma(playerid, params[])
{
	static
	    userid,
	    weaponid,
	    ammo;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "udI(500)", userid, weaponid, ammo))
	    return SendSyntaxMessage(playerid, "/adararma [playerid/nombre] [armaid] [municion]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "No puedes darle armas a jugadores desconectados.");

	if (!IsPlayerSpawned(userid))
	    return SendErrorMessage(playerid, "No puedes darle armas a jugadores no spawnaeados.");

	if (weaponid <= 0 || weaponid > 46 || (weaponid >= 19 && weaponid <= 21))
		return SendErrorMessage(playerid, "Arma invalida.");

	GiveWeaponToPlayer(userid, weaponid, ammo);
	SendServerMessage(playerid, "Le has dado a %s una %s con %d municion.", ReturnName(userid, 0), ReturnWeaponName(weaponid), ammo);
	return 1;
}

CMD:setstat(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	static
	    userid,
	    type[16],
	    amount[32];

	if (sscanf(params, "us[16]S()[32]", userid, type, amount))
 	{
	 	SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [parametro]");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETROS]:{FFFFFF} genero, nacimiento, origen, banco, ahorros, hambre, sed, horas");
		SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETROS]:{FFFFFF} trabajo, ordenes, canales, dnifalso");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (!strcmp(type, "genero", true))
	{
	    if (isnull(amount) || strval(amount) < 1 || strval(amount) > 2)
	        return SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [genero] [1: hombre - 2: mujer]");

		PlayerData[userid][pGender] = strval(amount);

		if (PlayerData[userid][pGender] == 1)
			SendServerMessage(playerid, "Has cambiado el genero de %s a hombre.", ReturnName(userid, 0));

		else if (PlayerData[userid][pGender] == 2)
			SendServerMessage(playerid, "Has cambiado el genero de %s a mujer.", ReturnName(userid, 0));
	}
	else if (!strcmp(type, "nacimiento", true))
	{
	    if (isnull(amount) || strlen(amount) > 24)
	        return SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [nacimiento] [fecha de nacimiento]");

		format(PlayerData[userid][pBirthdate], 24, amount);
		SendServerMessage(playerid, "Has cambiado la fecha de nacimiento de %s a \"%s\".", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "origen", true))
	{
	    if (isnull(amount) || strlen(amount) > 32)
	        return SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [origen] [nuevo origen]");

		format(PlayerData[userid][pOrigin], 32, amount);
		SendServerMessage(playerid, "Has cambiado el origen de %s a \"%s\".", ReturnName(userid, 0), amount);
	}
	else if (!strcmp(type, "banco", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [banco] [fondos bancarios]");

		PlayerData[userid][pBankMoney] = strval(amount);
		SendServerMessage(playerid, "Has cambiado los fondos bancarios de %s a %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
	}
	else if (!strcmp(type, "ahorros", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [ahorros] [dinero]");

		PlayerData[userid][pSavings] = strval(amount);
		SendServerMessage(playerid, "Has cambiado los ahorros de %s a %s.", ReturnName(userid, 0), FormatNumber(strval(amount)));
	}
	else if (!strcmp(type, "hambre", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [hambre] [cantidad]");

		if (strval(amount) < 0 || strval(amount) > 1000)
		    return SendErrorMessage(playerid, "No puedes poner un numero menor a 0 o mayor a 1.000.");

		PlayerData[userid][pHunger] = strval(amount);
		SendServerMessage(playerid, "Has cambiado el hambre de %s a %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "sed", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [sed] [cantidad]");

        if (strval(amount) < 0 || strval(amount) > 1000)
		    return SendErrorMessage(playerid, "No puedes poner un numero menor a 0 o mayor a 1.000.");

		PlayerData[userid][pThirst] = strval(amount);
		SendServerMessage(playerid, "Has cambiado la sed de %s a %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "horas", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [horas] [cantidad]");

		PlayerData[userid][pPlayingHours] = strval(amount);
		SendServerMessage(playerid, "Has cambiado las horas jugadas de %s a %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
    else if (!strcmp(type, "trabajo", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [trabajo] [ID de trabajo]");

		if (strval(amount) < 0 || strval(amount) > 9)
		    return SendErrorMessage(playerid, "You have specified an invalid job ID.");

		PlayerData[userid][pJob] = strval(amount);
		SendServerMessage(playerid, "Has cambiado el trabajo de %s a %s.", ReturnName(userid, 0), Job_GetName(PlayerData[userid][pJob]));
	}
    else if (!strcmp(type, "ordenes", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [ordenes] [cantidad]");

		PlayerData[userid][pWarrants] = strval(amount);
		SendServerMessage(playerid, "Has cambiado las ordenes de %s a %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "canal", true))
	{
	    if (isnull(amount))
	        return SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [canal] [canal de radio]");

		PlayerData[userid][pChannel] = strval(amount);
		SendServerMessage(playerid, "Has cambiado el canal de radio de %s a %s.", ReturnName(userid, 0), FormatNumber(strval(amount), ""));
	}
	else if (!strcmp(type, "dnifalso", true))
	{
	    if (isnull(amount) || strlen(amount) > 32)
	        return SendSyntaxMessage(playerid, "/setstat [playerid/nombre] [dnifalso] [Nombre_Apellido]");

		format(PlayerData[userid][pFakeDNI], 32, amount);
		SendServerMessage(playerid, "Has cambiado el dni falso de %s a \"%s\".", ReturnName(userid, 0), amount);
	}
	return 1;
}

CMD:baninfo(playerid, params[])
{
    static
		string[128];

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (isnull(params) || strlen(params) > 24)
	{
		SendSyntaxMessage(playerid, "/baninfo [usuario]");
		SendClientMessage(playerid, COLOR_LIGHTRED, "[NOTE]:{FFFFFF} Escribe \"/usuario\" para saber la cuenta a partir del nombre de sus personajes.");
	}
	else
	{
	    format(string, sizeof(string), "SELECT * FROM `blacklist` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	    mysql_tquery(g_iHandle, string, "OnBanLookup", "ds", playerid, params);
	}
	return 1;
}

CMD:hacerayudante(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/hacerayudante [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (PlayerData[userid][pTester])
	{
	    PlayerData[userid][pTester] = false;

	    SendAdminAction(playerid, "Le has quitado su rango de ayudante a %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "%s te ha expulsado del grupo de ayudantes.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pTester] = true;

        SendAdminAction(playerid, "Has invitado a %s al grupo de ayudantes.", ReturnName(userid, 0));
		SendAdminAction(userid, "%s te ha invitado al grupo de ayudantes.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:hacerfacmod(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/hacerfacmod [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (PlayerData[userid][pFactionMod])
	{
	    PlayerData[userid][pFactionMod] = false;

	    SendAdminAction(playerid, "Le has quitado su moderador de facciones a %s.", ReturnName(userid, 0));
		SendAdminAction(userid, "%s te ha expulsado del equipo de moderadores de facciones.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[userid][pFactionMod] = true;

        SendAdminAction(playerid, "Has invitado a %s al equipo de moderadores de facciones.", ReturnName(userid, 0));
		SendAdminAction(userid, "%s te ha invitado al equipo de moderadores de facciones.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:acambiarnombre(playerid, params[])
{
	static
	    userid,
	    newname[24],
		query[128];

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "us[24]", userid, newname))
	    return SendSyntaxMessage(playerid, "/cambiarnombre [playerid/nombre] [nuevo nombre]");

	if (userid == INVALID_PLAYER_ID)
		return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (!PlayerData[userid][pLogged] && !PlayerData[userid][pCharacter])
	    return SendErrorMessage(playerid, "Ese jugador todavia no creó ningun personaje.");

	if (!IsValidPlayerName(newname))
	    return SendErrorMessage(playerid, "Has escrito un formato de nombre incorrecto.");

	foreach (new i : Player) if (!strcmp(ReturnName(i), newname)) {
	    return SendErrorMessage(playerid, "Ese nombre ya esta en uso.");
	}
	format(query, sizeof(query), "SELECT `ID` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(newname));
	mysql_tquery(g_iHandle, query, "OnNameChange", "dds", playerid, userid, newname);

	return 1;
}

CMD:limpiarchat(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	for (new i = 0; i < 100; i ++) {
	    SendClientMessageToAll(-1, "");
	}
	return 1;
}

CMD:spawn(playerid, params[])
{
	static
	    Float:x,
	    Float:y,
	    Float:z,
		interior;

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "dfff", interior, x, y, z))
	    return SendSyntaxMessage(playerid, "/spawn [interior] [x] [y] [z]");

	SetPlayerPos(playerid, x, y, z);
	SetPlayerInterior(playerid, interior);

	return 1;
}

CMD:crearcasa(playerid, params[])
{
	static
	    price,
	    id,
	    address[32];

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ds[32]", price, address))
	    return SendSyntaxMessage(playerid, "/crearcasa [precio] [direccion]");

	for (new i = 0; i != MAX_HOUSES; i ++) if (HouseData[i][houseExists] && !strcmp(HouseData[i][houseAddress], address, true)) {
	    return SendErrorMessage(playerid, "La direccion \"%s\" ya esta en uso (ID: %d).", address, i);
	}
	id = House_Create(playerid, address, price);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor alcanzo el limite permitido de casas.");

	SendServerMessage(playerid, "Has creado satisfactoriamente la casa ID: %d.", id);
	return 1;
}

CMD:borrarcasa(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarcasa [casa id]");

	if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
	    return SendErrorMessage(playerid, "ID de casa invalida.");

	House_Delete(id);
	SendServerMessage(playerid, "Has borrado la casa ID: %d.", id);
	return 1;
}

CMD:ayudanegocio(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CLIENT, "NEGOCIOS:{FFFFFF} /comprar, /abandonar, /cerradura, /cajafuerte, /productos.");
	SendClientMessage(playerid, COLOR_CLIENT, "NEGOCIOS:{FFFFFF} /neginfo, /negnombre, /negmensaje, /pedirenvio.");
	return 1;
}

CMD:ayudacasa(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CLIENT, "CASAS:{FFFFFF} /comprar, /abandonar, /cerradura, /almacenamiento, /muebles, /comprararmario.");
	SendClientMessage(playerid, COLOR_CLIENT, "CASAS:{FFFFFF} /timbre, /cluces, /armario, /borrararmario.");
	return 1;
}

CMD:comprar(playerid, params[])
{
	static
		id = -1;

	if ((id = House_Nearest(playerid)) != -1)
	{
		if (House_GetCount(playerid) >= MAX_OWNABLE_HOUSES)
			return SendErrorMessage(playerid, "Solo puedes tener %d casas a la vez.", MAX_OWNABLE_HOUSES);

		if (HouseData[id][houseOwner] != 0)
		    return SendErrorMessage(playerid, "Esta casa ya tiene dueño.");

		if (HouseData[id][housePrice] > GetMoney(playerid))
		    return SendErrorMessage(playerid, "No tienes suficiente dinero.");

	    HouseData[id][houseOwner] = GetPlayerSQLID(playerid);

		House_Refresh(id);
		House_Save(id);

	    GiveMoney(playerid, -HouseData[id][housePrice]);
	    SendServerMessage(playerid, "Has comprado la casa \"%s\" por %s!", HouseData[id][houseAddress], FormatNumber(HouseData[id][housePrice]));

		ShowPlayerFooter(playerid, "Has ~g~comprado~w~ una casa!");
	    Log_Write("logs/house_log.txt", "[%s] %s compro la casa ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(HouseData[id][housePrice]));
	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{
	    if (Business_GetCount(playerid) >= MAX_OWNABLE_BUSINESSES)
			return SendErrorMessage(playerid, "Solo puedes tener %d negocios a la vez.", MAX_OWNABLE_BUSINESSES);

		if (BusinessData[id][bizOwner] != 0)
		    return SendErrorMessage(playerid, "Este negocio ya tiene dueño.");

		if (BusinessData[id][bizPrice] > GetMoney(playerid))
		    return SendErrorMessage(playerid, "No tienes suficiente dinero.");

	    BusinessData[id][bizOwner] = GetPlayerSQLID(playerid);

		Business_Refresh(id);
		Business_Save(id);

	    GiveMoney(playerid, -BusinessData[id][bizPrice]);
	    SendServerMessage(playerid, "Has comprado el negocio \"%s\" por %s!", BusinessData[id][bizName], FormatNumber(BusinessData[id][bizPrice]));

		ShowPlayerFooter(playerid, "Has ~g~comprado~w~ un negocio!");
	    Log_Write("logs/biz_log.txt", "[%s] %s has purchased business ID: %d for %s.", ReturnDate(), ReturnName(playerid), id, FormatNumber(BusinessData[id][bizPrice]));
	}
	//sistema de comprar nativo
	else if ((id = Business_Inside(playerid)) != -1)
	{
		if (BusinessData[id][bizType] == 5) {
		    Business_CarMenu(playerid, id);
		} else {
			Business_PurchaseMenu(playerid, id);
		}
	}
	//sistema de compras nuevo por checkpoint pickup
	else if ((id = Business_NearestVenta(playerid)) != -1)
	{
		Business_PurchaseMenu(playerid, id);
	    //Ver como mierdas hacerlo, o si funciona
	}
	return 1;
}

CMD:subsidio(playerid, params[])
{
	
	static
		amount = 100,
		horas,
		minutos,
		segundos;

	gettime(horas,minutos,segundos);

	
	if(IsPlayerInRangeOfPoint(playerid,2.0,-852.4701,1633.2644,1004.7500) || IsPlayerInRangeOfPoint(playerid,2.0,-852.2942,1624.8451,1004.7500))
	{
		if(PlayerData[playerid][pSubsidioCheck] == 1)
		{
			amount = 100 + (connectedPlayers * 10);
			GiveMoney(playerid, amount);
			SendServerMessage(playerid,"Has recibido %d de dinero por el subsidio", amount);
			mysql_tquery(g_iHandle, "UPDATE `characters` SET `SubsidioCheck` = '0' WHERE `characters`.`ID` = '%d'", PlayerData[playerid][pID]);
			PlayerData[playerid][pSubsidioCheck] = 0;

		}
		else
		{
			return SendErrorMessage(playerid, "Ya has pedido el subsidio o tienes que esperar hasta que se habilite de nuevo para todos");
		}
		
	}
	else
	{
		return SendErrorMessage(playerid, "Debes estar en el banco y en la ventanilla para poder pedir subsidio.");
	}
	return 1;
}

CMD:conectados(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 1)
	{
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");
	}
	SendServerMessage(playerid,"Hay %d jugadores conectados en este momento", connectedPlayers);
	return 1;
}

CMD:abandonar(playerid, params[])
{
	static
	    id = -1;

    if (!IsPlayerInAnyVehicle(playerid) && (id = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "confirmar", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/abandonar [confirmar]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[ADVERTENCIA]:{FFFFFF} Estas a punto de abandonar tu casa sin posible reembolso.");
		}
		else if (!strcmp(params, "confirmar", true))
		{
			HouseData[id][houseOwner] = 0;

			House_Refresh(id);
			House_Save(id);

			SendServerMessage(playerid, "Has abandonado tu casa: %s.", HouseData[id][houseAddress]);
			Log_Write("logs/house_log.txt", "[%s] %s abandono la casa ID: %d.", ReturnDate(), ReturnName(playerid), id);
		}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "confirmar", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/abandonar [confirmar]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Estas a punto de abandonar tu negocio sin posible reembolso.");
		}
		else if (!strcmp(params, "confirmar", true))
		{
			BusinessData[id][bizOwner] = 0;

			Business_Refresh(id);
			Business_Save(id);

			SendServerMessage(playerid, "Has abandonado tu negocio: %s.", BusinessData[id][bizName]);
			Log_Write("logs/biz_log.txt", "[%s] %s abandono el negocio ID: %d.", ReturnDate(), ReturnName(playerid), id);
		}
	}
	else if ((id = Car_Inside(playerid)) != -1 && Car_IsOwner(playerid, id))
	{
	    if (isnull(params) || (!isnull(params) && strcmp(params, "confirmar", true) != 0))
	    {
	        SendSyntaxMessage(playerid, "/abandonar [confirmar]");
	        SendClientMessage(playerid, COLOR_LIGHTRED, "[WARNING]:{FFFFFF} Estas a punto de abandonar tu vehiculo sin posible reembolso.");
		}
		else if (CarData[id][carImpounded] != -1)
    		return SendErrorMessage(playerid, "Este vehiculo esta embargado, no puedes usarlo.");

		else if (!strcmp(params, "confirmar", true))
		{
			new
			    model = CarData[id][carModel];

			Car_Delete(id);

			SendServerMessage(playerid, "Has abandonado tu %s.", ReturnVehicleModelName(model));
			Log_Write("logs/car_log.txt", "[%s] %s abandono su %s.", ReturnDate(), ReturnName(playerid), ReturnVehicleModelName(model));
		}
	}
	else SendErrorMessage(playerid, "No estas cerca de nada que puedas abandonar.");
	return 1;
}

CMD:cluces(playerid, params[])
{
	static
	    id = -1;

	if ((id = House_Inside(playerid)) != -1)
	{
		if (!HouseData[id][houseLights])
		{
		    foreach (new i : Player) if (House_Inside(i) == id) {
		        PlayerTextDrawHide(i, PlayerData[i][pTextdraws][62]);
		    }
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s enciende las luces.", ReturnName(playerid, 0));
		    HouseData[id][houseLights] = true;
		}
		else
		{
		    foreach (new i : Player) if (House_Inside(i) == id) {
		        PlayerTextDrawShow(i, PlayerData[i][pTextdraws][62]);
		    }
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s apaga las luces.", ReturnName(playerid, 0));
		    HouseData[id][houseLights] = false;
		}
	}
	else {
	    SendErrorMessage(playerid, "Tienes que estar en una casa para usar este comando.");
	}
	return 1;
}

CMD:cerradura(playerid, params[])
{
	static
	    id = -1;

	if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1 && House_IsOwner(playerid, id))
	{
		if (!HouseData[id][houseLocked])
		{
			HouseData[id][houseLocked] = true;
			House_Save(id);

			ShowPlayerFooter(playerid, "Has ~r~cerrado~w~ tu casa!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			HouseData[id][houseLocked] = false;
			House_Save(id);

			ShowPlayerFooter(playerid, "Has ~g~abierto~w~ tu casa!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	{
		if (Business_IsOwner(playerid, id))
		{
			if (!BusinessData[id][bizLocked])
			{
				BusinessData[id][bizLocked] = true;

				Business_Refresh(id);
				Business_Save(id);

				ShowPlayerFooter(playerid, "Has ~r~cerrado~w~ tu negocio!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
  			else
			{
				BusinessData[id][bizLocked] = false;

				Business_Refresh(id);
				Business_Save(id);

				ShowPlayerFooter(playerid, "Has ~g~abierto~w~ tu negocio!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
			}
		}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = (Entrance_Inside(playerid) == -1) ? (Entrance_Nearest(playerid)) : (Entrance_Inside(playerid))) != -1)
	{
		if (strlen(EntranceData[id][entrancePass]))
		{
			Dialog_Show(playerid, EntrancePass, DIALOG_STYLE_INPUT, "Contraseña de Pase", "Escribe la contraseña para esta entrada:", "Aceptar", "Cancelar");
		}
	}
	else if ((id = Car_Nearest(playerid)) != -1)
	{
	    static
	        engine,
	        lights,
	        alarm,
	        doors,
	        bonnet,
	        boot,
	        objective;

	    GetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, doors, bonnet, boot, objective);

	    if (Car_IsOwner(playerid, id) || (PlayerData[playerid][pFaction] != -1 && CarData[id][carFaction] == GetFactionType(playerid)))
	    {
			if (!CarData[id][carLocked])
			{
				CarData[id][carLocked] = true;
				Car_Save(id);

				ShowPlayerFooter(playerid, "Has ~r~cerrado~w~ tu vehiculo!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 1, bonnet, boot, objective);
			}
			else
			{
				CarData[id][carLocked] = false;
				Car_Save(id);

				ShowPlayerFooter(playerid, "Has ~g~abierto~w~ tu vehiculo!");
				PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);

				SetVehicleParamsEx(CarData[id][carVehicle], engine, lights, alarm, 0, bonnet, boot, objective);
			}
		}
	}
	else SendErrorMessage(playerid, "No estas cerca de nada que puedas cerrar o abrir.");
	return 1;
}

CMD:acerradura(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    	return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");
	static
	    id = -1;

	if (!IsPlayerInAnyVehicle(playerid) && (id = (House_Inside(playerid) == -1) ? (House_Nearest(playerid)) : (House_Inside(playerid))) != -1)
	{
		if (!HouseData[id][houseLocked])
		{
			HouseData[id][houseLocked] = true;
			House_Save(id);

			ShowPlayerFooter(playerid, "Has ~r~cerrado~w~ tu casa!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
		else
		{
			HouseData[id][houseLocked] = false;
			House_Save(id);

			ShowPlayerFooter(playerid, "Has ~g~abierto~w~ tu casa!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	else if (!IsPlayerInAnyVehicle(playerid) && (id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1)
	{
		if (!BusinessData[id][bizLocked])
		{
			BusinessData[id][bizLocked] = true;

			Business_Refresh(id);
			Business_Save(id);

			ShowPlayerFooter(playerid, "Has ~r~cerrado~w~ tu negocio!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
  		else
		{
			BusinessData[id][bizLocked] = false;

			Business_Refresh(id);
			Business_Save(id);

			ShowPlayerFooter(playerid, "Has ~g~abierto~w~ tu negocio!");
			PlayerPlaySound(playerid, 1145, 0.0, 0.0, 0.0);
		}
	}
	else SendErrorMessage(playerid, "No estas cerca de nada que puedas cerrar o abrir.");
	return 1;
}


CMD:vender(playerid, params[])
{
	static
	    targetid,
	    type[24],
	    string[128];

	if (sscanf(params, "us[24]S()[128]", targetid, type, string))
	{
	    SendSyntaxMessage(playerid, "/vender [playerid/nombre] [propiedad]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[PROPIEDADES]:{FFFFFF} casa, negocio, vehiculo");
	    return 1;
	}
	if (targetid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, targetid, 5.0))
	{
		SendErrorMessage(playerid, "El jugador esta desconectado o no esta cerca tuyo.");
		return 1;
	}
	if (targetid == playerid)
	{
		SendErrorMessage(playerid, "No te puedes vender a vos mismo.");
		return 1;
	}
	if (!strcmp(type, "casa", true))
	{
		static
		    price,
			houseid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/vender [playerid/nombre] [casa] [precio]");

		if (price < 1)
		    return SendErrorMessage(playerid, "El precio no puede ser menor a $1.");

		if ((houseid = House_Nearest(playerid)) != -1 && House_IsOwner(playerid, houseid)) {
			PlayerData[targetid][pHouseSeller] = playerid;
			PlayerData[targetid][pHouseOffered] = houseid;
			PlayerData[targetid][pHouseValue] = price;

		    SendServerMessage(playerid, "Le has pedido a %s que compre tu casa (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s te ha ofrecido su casa por %s (escribe \"/aceptar casa\" para aceptarla).", ReturnName(playerid, 0), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "No estas cerca de ninguna de tus casas.");
	}
	else if (!strcmp(type, "negocio", true))
	{
		static
		    price,
			bizid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/vender [playerid/nombre] [negocio] [precio]");

		if (price < 1)
		    return SendErrorMessage(playerid, "El precio no puede ser menor a $1.");

		if ((bizid = Business_Nearest(playerid)) != -1 && Business_IsOwner(playerid, bizid)) {
			PlayerData[targetid][pBusinessSeller] = playerid;
			PlayerData[targetid][pBusinessOffered] = bizid;
			PlayerData[targetid][pBusinessValue] = price;

		    SendServerMessage(playerid, "Le has pedido a %s que compre tu negocio (%s).", ReturnName(targetid, 0), FormatNumber(price));
            SendServerMessage(targetid, "%s te ha ofrecido su negocio por %s (escribe \"/aceptar negocio\" para aceptarlo).", ReturnName(playerid, 0), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "No estas cerca de tu negocio.");
	}
	else if (!strcmp(type, "vehiculo", true))
	{
		static
		    price,
			carid = -1;

		if (sscanf(string, "d", price))
			return SendSyntaxMessage(playerid, "/vender [playerid/nombre] [veh] [precio]");

		if (price < 1)
		    return SendErrorMessage(playerid, "El precio no puede ser menor a $1..");

		if ((carid = Car_Inside(playerid)) != -1 && Car_IsOwner(playerid, carid)) {
			PlayerData[targetid][pCarSeller] = playerid;
			PlayerData[targetid][pCarOffered] = carid;
			PlayerData[targetid][pCarValue] = price;

		    SendServerMessage(playerid, "Le has pedido a %s que compre tu %s (%s).", ReturnName(targetid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
            SendServerMessage(targetid, "%s te ha ofrecido su %s por %s (escribe \"/aceptar vehiculo\" para aceptarlo).", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));
		}
		else SendErrorMessage(playerid, "No estas dentro de ninguno de tus vehiculos.");
	}
	return 1;
}

CMD:aceptar(playerid, params[])
{
	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/aceptar [parametro]");
		SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETROS]:{FFFFFF} muerte, dni, casa, negocio, vehiculo, comida, faccion, saludo, revision");
		return 1;
	}
	if (!strcmp(params, "muerte", true))
	{
		return cmd_morir(playerid, params);
	}
	if (!strcmp(params, "casa", true) && PlayerData[playerid][pHouseSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pHouseSeller],
	        houseid = PlayerData[playerid][pHouseOffered],
	        price = PlayerData[playerid][pHouseValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "No estas cerca de ese jugador.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "No tienes suficiente dinero para comprar esta casa.");

		if (House_Nearest(playerid) != houseid)
		    return SendErrorMessage(playerid, "Tienes que estar cerca de una casa para comprarla.");

		if (!House_IsOwner(sellerid, houseid))
		    return SendErrorMessage(playerid, "La oferta de esta casa ya no es valida.");

		SendServerMessage(playerid, "Has comprado la casa de %s por %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendServerMessage(sellerid, "%s compro tu casa por %s.", ReturnName(playerid, 0), FormatNumber(price));

		HouseData[houseid][houseOwner] = GetPlayerSQLID(playerid);
		House_Save(houseid);

		GiveMoney(playerid, -price);
		GiveMoney(playerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) le vendio la casa a %s (%s) por %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pHouseSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pHouseOffered] = -1;
		PlayerData[playerid][pHouseValue] = 0;
	}
	if (!strcmp(params, "negocio", true) && PlayerData[playerid][pBusinessSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pBusinessSeller],
	        bizid = PlayerData[playerid][pBusinessOffered],
	        price = PlayerData[playerid][pBusinessValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "No estas cerca de ese jugador.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "No tienes suficiente dinero para comprar este negocio.");

		if (Business_Nearest(playerid) != bizid)
		    return SendErrorMessage(playerid, "Tienes que estar cerca de un negocio para comprarlo.");

		if (!Business_IsOwner(sellerid, bizid))
		    return SendErrorMessage(playerid, "La oferta de este negocio ya no es valida.");

		SendServerMessage(playerid, "Has comprado el negocio de %s por %s.", ReturnName(sellerid, 0), FormatNumber(price));
		SendServerMessage(sellerid, "%s compro tu negocio por %s.", ReturnName(playerid, 0), FormatNumber(price));

		BusinessData[bizid][bizOwner] = GetPlayerSQLID(playerid);
		Business_Save(bizid);

		GiveMoney(playerid, -price);
		GiveMoney(playerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) le vendio el negocio a %s (%s) por %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pBusinessSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pBusinessOffered] = -1;
		PlayerData[playerid][pBusinessValue] = 0;
	}
	if (!strcmp(params, "vehiculo", true) && PlayerData[playerid][pCarSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pCarSeller],
	        carid = PlayerData[playerid][pCarOffered],
	        price = PlayerData[playerid][pCarValue];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "No estas cerca de ese jugador.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "No tienes suficiente dinero para comprar este vehiculo.");

		if (Car_Nearest(playerid) != carid)
		    return SendErrorMessage(playerid, "Tienes que estar cerca del vehiculo para comprarlo.");

		if (!Car_IsOwner(sellerid, carid))
		    return SendErrorMessage(playerid, "La oferta de este vehiculo ya no es valida.");

		SendServerMessage(playerid, "Compro el %s de %s por %s.", ReturnVehicleModelName(CarData[carid][carModel]), ReturnName(sellerid, 0), FormatNumber(price));
		SendServerMessage(sellerid, "%s compro tu %s por %s.", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[carid][carModel]), FormatNumber(price));

		CarData[carid][carOwner] = GetPlayerSQLID(playerid);
		Car_Save(carid);

		GiveMoney(playerid, -price);
		GiveMoney(playerid, price);

		Log_Write("logs/offer_log.txt", "[%s] %s (%s) le vendio el %s a %s (%s) por %s.", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnVehicleModelName(CarData[carid][carModel]), ReturnName(sellerid, 0), PlayerData[sellerid][pIP], FormatNumber(price));

		PlayerData[playerid][pCarSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pCarOffered] = -1;
		PlayerData[playerid][pCarValue] = 0;
	}
	if (!strcmp(params, "comida", true) && PlayerData[playerid][pFoodSeller] != INVALID_PLAYER_ID)
	{
	    new
	        sellerid = PlayerData[playerid][pFoodSeller],
			type = PlayerData[playerid][pFoodType],
	        price = PlayerData[playerid][pFoodPrice];

		if (!IsPlayerNearPlayer(playerid, sellerid, 6.0))
		    return SendErrorMessage(playerid, "No estas cerca de ese jugador.");

		if (GetMoney(playerid) < price)
		    return SendErrorMessage(playerid, "No tienes suficiente dinero para la comida.");

		switch (type)
		{
		    case 1:
		    {
				new id = Inventory_Add(playerid, "Botella de Agua", 2958);

				if (id == -1)
				    return SendErrorMessage(playerid, "No tienes mas espacio en tu inventario.");

		        SendServerMessage(playerid, "Le has comprado agua a %s por $%d (agregado al inventario).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s acepto el agua por $%d.", ReturnName(playerid, 0), price);
			}
			case 2:
		    {
				new id = Inventory_Add(playerid, "Gaseosa", 1543);

				if (id == -1)
				    return SendErrorMessage(playerid, "No tienes mas espacio en tu inventario.");

		        SendServerMessage(playerid, "Le has comprado una gaseosa a %s por $%d (agregado al inventario).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s acepto tu gaseosa por $%d.", ReturnName(playerid, 0), price);
			}
			case 3:
		    {
				new id = Inventory_Add(playerid, "Hamburguesa Cocida", 2703);

				if (id == -1)
				    return SendErrorMessage(playerid, "No tienes mas espacio en tu inventario.");

		        SendServerMessage(playerid, "Has comprado una hamburguesa a %s por $%d (agregado al inventario).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s acepto tu hamburguesa por $%d.", ReturnName(playerid, 0), price);
			}
			case 4:
		    {
				new id = Inventory_Add(playerid, "Pizza Cocida", 2702);

				if (id == -1)
				    return SendErrorMessage(playerid, "No tienes mas espacio en tu inventario.");

		        SendServerMessage(playerid, "Has comprado una porcion de pizza a %s por $%d (agregado al inventario).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s acepto tu porcion de pizza por $%d.", ReturnName(playerid, 0), price);
			}
			case 5:
		    {
				new id = Inventory_Add(playerid, "Pollo", 2663);

				if (id == -1)
				    return SendErrorMessage(playerid, "No tienes mas espacio en tu inventario.");

		        SendServerMessage(playerid, "Has comprado un poco de pollo a %s por $%d (agregado al inventario).", ReturnName(sellerid, 0), price);
		        SendServerMessage(sellerid, "%s acepto tu pollo por $%d.", ReturnName(playerid, 0), price);
			}
		}
		PlayerData[playerid][pFoodSeller] = INVALID_PLAYER_ID;
		PlayerData[playerid][pFoodType] = 0;
		PlayerData[playerid][pFoodPrice] = 0;
	}
	if (!strcmp(params, "faccion", true) && PlayerData[playerid][pFactionOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pFactionOffer],
	        factionid = PlayerData[playerid][pFactionOffered];

		if (!FactionData[factionid][factionExists] || PlayerData[targetid][pFactionRank] < FactionData[PlayerData[targetid][pFaction]][factionRanks] - 1)
	   	 	return SendErrorMessage(playerid, "La oferta de faccion ya no es valida.");

		SetFaction(playerid, factionid);
		PlayerData[playerid][pFactionRank] = 1;

		SendServerMessage(playerid, "Has aceptado la oferta de %s para unirte a \"%s\".", ReturnName(targetid, 0), Faction_GetName(targetid));
		SendServerMessage(targetid, "%s acepto tu oferta para unirse a \"%s\".", ReturnName(playerid, 0), Faction_GetName(targetid));

        PlayerData[playerid][pFactionOffer] = INVALID_PLAYER_ID;
        PlayerData[playerid][pFactionOffered] = -1;
	}
	if (!strcmp(params, "saludo", true) && PlayerData[playerid][pShakeOffer] != INVALID_PLAYER_ID)
	{
	    new
	        targetid = PlayerData[playerid][pShakeOffer],
	        type = PlayerData[playerid][pShakeType];

        if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		    return SendErrorMessage(playerid, "No estas cerca de ese jugador.");

		SetPlayerToFacePlayer(playerid, targetid);
		SetPlayerToFacePlayer(targetid, playerid);

		PlayerData[playerid][pShakeOffer] = INVALID_PLAYER_ID;
		PlayerData[playerid][pShakeType] = 0;

		switch (type)
		{
		    case 1:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkaa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 2:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkba", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 3:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkda", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 4:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkea", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 5:
			{
				ApplyAnimation(playerid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
				ApplyAnimation(targetid, "GANGS", "hndshkfa", 4.0, 0, 0, 0, 0, 0, 1);
			}
			case 6:
			{
			    ApplyAnimation(playerid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
			    ApplyAnimation(targetid, "GANGS", "prtial_hndshk_biz_01", 4.0, 0, 0, 0, 0, 0, 1);
			}
	    }
	    SendServerMessage(playerid, "Aceptaste el saludo de %s.", ReturnName(targetid, 0));
	    SendServerMessage(targetid, "%s acepto tu saludo.", ReturnName(playerid, 0));
	}
	if (!strcmp(params, "revision", true) && PlayerData[playerid][pFriskOffer] != INVALID_PLAYER_ID)
	{
	    new
			targetid = PlayerData[playerid][pFriskOffer];

	    if (!IsPlayerNearPlayer(playerid, targetid, 6.0))
		    return SendErrorMessage(playerid, "No estas cerca de ese jugador.");

		new
		    models[MAX_INVENTORY],
		    amount[MAX_INVENTORY];

		for (new i = 0; i < PlayerData[playerid][pCapacity]; i ++)
		{
	 		if (InventoryData[playerid][i][invExists]) {
	   			models[i] = InventoryData[playerid][i][invModel];
	   			amount[i] = InventoryData[playerid][i][invQuantity];
			}
			else {
			    models[i] = -1;
			    amount[i] = -1;
			}
		}
		PlayerData[playerid][pFriskOffer] = INVALID_PLAYER_ID;
		ShowModelSelectionMenu(targetid, ReturnName(playerid), MODEL_SELECTION_FRISK, models, sizeof(models), 0.0, 0.0, 0.0, 1.0, -1, true, amount);
	}
	return 1;
}
CMD:almacenamiento(playerid, params[])
{
	static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && (House_IsOwner(playerid, houseid) || GetFactionType(playerid) == FACTION_POLICE)) {
	    House_OpenStorage(playerid, houseid);
	}
	else SendErrorMessage(playerid, "No estas en el interior de tu casa.");
	return 1;
}

CMD:editarcasa(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarcasa [id] [opcion]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPCIONES]:{FFFFFF} exterior, interior, precio, direccion, tipo");
		return 1;
	}
	if ((id < 0 || id >= MAX_HOUSES) || !HouseData[id][houseExists])
	    return SendErrorMessage(playerid, "ID de casa invalida.");

	if (!strcmp(type, "exterior", true))
	{
		GetPlayerPos(playerid, HouseData[id][housePos][0], HouseData[id][housePos][1], HouseData[id][housePos][2]);
		GetPlayerFacingAngle(playerid, HouseData[id][housePos][3]);

		HouseData[id][houseExterior] = GetPlayerInterior(playerid);
		HouseData[id][houseExteriorVW] = GetPlayerVirtualWorld(playerid);

		House_Refresh(id);
		House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el exterior de la casa id ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
		GetPlayerFacingAngle(playerid, HouseData[id][houseInt][3]);

		HouseData[id][houseInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pHouse] == HouseData[id][houseID])
			{
				SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
				SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

				SetPlayerInterior(i, HouseData[id][houseInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		House_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el spawn del interior de la casa ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "precio", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/editarcasa [id] [precio] [nuevo precio]");

	    HouseData[id][housePrice] = price;

	    House_Refresh(id);
	    House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el precio de la casa ID: %d to %s.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "direccion", true))
	{
	    new address[32];

	    if (sscanf(string, "s[32]", address))
	        return SendSyntaxMessage(playerid, "/editarcasa [id] [direccion] [nueva direccion]");

	    format(HouseData[id][houseAddress], 32, address);

	    House_Refresh(id);
	    House_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la direccion de la casa ID: %d to \"%s\".", ReturnName(playerid, 0), id, address);
	}
	else if (!strcmp(type, "tipo", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	        return SendSyntaxMessage(playerid, "/editarcasa [id] [tipo] [tipo de interior]");

		if (typeint < 1 || typeint > sizeof(arrHouseInteriors))
			return SendErrorMessage(playerid, "El tipo de interior tiene que ser entre 1 y %d.", sizeof(arrHouseInteriors));

	    HouseData[id][houseInt][0] = arrHouseInteriors[typeint][eHouseX];
	    HouseData[id][houseInt][1] = arrHouseInteriors[typeint][eHouseY];
	    HouseData[id][houseInt][2] = arrHouseInteriors[typeint][eHouseZ];
	    HouseData[id][houseInt][3] = arrHouseInteriors[typeint][eHouseAngle];
        HouseData[id][houseInterior] = arrHouseInteriors[typeint][eHouseInterior];

		foreach (new i : Player)
		{
			if (PlayerData[i][pHouse] == HouseData[id][houseID])
			{
				SetPlayerPos(i, HouseData[id][houseInt][0], HouseData[id][houseInt][1], HouseData[id][houseInt][2]);
				SetPlayerFacingAngle(i, HouseData[id][houseInt][3]);

				SetPlayerInterior(i, HouseData[id][houseInterior]);
				SetCameraBehindPlayer(i);
			}
		}
	    House_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the type of house ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
	}
	return 1;
}

CMD:cercano(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if ((id = House_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Estas parado cerca de la casa ID: %d.", id);

    if ((id = Business_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Estas parado cerca del negocio ID: %d.", id);

    if ((id = Entrance_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Estas parado cerca de la entrada ID: %d.", id);

    if ((id = Job_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Estas parado cerca del trabajo ID: %d.", id);

    if ((id = Arrest_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Estas parado cerca del punto de arresto ID: %d.", id);

    if ((id = Pump_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Estas parado cerca del vertedor de combustible ID: %d.", id);

    if ((id = Crate_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Estas parado cerca de la caja ID: %d.", id);

    if ((id = Gate_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Estas parado cerca del porton ID: %d.", id);

    if ((id = ATM_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Estas parado cerca del ATM ID: %d.", id);

    if ((id = Garbage_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Estas parado cerca del tacho de basura ID: %d.", id);

    if ((id = Vendor_Nearest(playerid)) != -1)
	    SendServerMessage(playerid, "Estas parado cerca del proveedor ID: %d.", id);

	if ((id = Rack_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Estas parado cerca del weapon rack ID: %d.", id);

    if ((id = Speed_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Estas parado cerca de la camara de alta velocidad ID: %d.", id);

    if ((id = Graffiti_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Estas parado cerca del graffiti ID: %d.", id);

    if ((id = Detector_Nearest(playerid)) != -1)
 		SendServerMessage(playerid, "Estas parado cerca del detector ID: %d.", id);

 	if ((id = Business_NearestVenta(playerid)) != -1)
 		SendServerMessage(playerid, "Estas parado cerca del puesto de venta ID: %d.", id);

 	if ((id = Business_NearestDeliver(playerid)) != -1)
 		SendServerMessage(playerid, "Estas parado cerca del puesto de delivery ID: %d.", id);

	return 1;
}

CMD:crearnegocio(playerid, params[])
{
    static
		type,
	    price,
	    id;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "dd", type, price))
 	{
	 	SendSyntaxMessage(playerid, "/crearnegocio [type] [price]");
    	SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Minorista | 2: Armas | 3: Ropa | 4: Comida Rapida | 5: Concesionario ");
    	SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 6: Estacion de Servicio | 7: Muebles | 8: Comida Rapida \'Dinamico\'| 9: Bar | 10: Bar \'Dinamico\'");

    	return 1;
	}
	if (type < 1 || type > 10)
	    return SendErrorMessage(playerid, "Tipo de negocio invalido, los tipos tienen que ser del 1 al 10.");

	if (type == 8 || type == 10)
		SendClientMessage(playerid, COLOR_YELLOW, "Recordar creack un checkpoint nuevo con /editarnegocio ID checkpoint, para agregar el punto de venta.");

	id = Business_Create(playerid, type, price);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al maximo de negocios.");

	SendServerMessage(playerid, "Has creado el negocio ID: %d.", id);
	return 1;
}

CMD:editarnegocio(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarnegocio [id] [opcion]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPCIONES]:{FFFFFF} exterior, interior, checkpoint \'dinamico\', entrega, nombre, precio, stock, tipo, autos, spawn");
	    SendClientMessage(playerid, COLOR_YELLOW, "checkpoint, solo sirve para tiendas a cielo abierto");
		return 1;
	}
	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "ID de negocio invalida.");

	if (!strcmp(type, "exterior", true))
	{
 		GetPlayerPos(playerid, BusinessData[id][bizPos][0], BusinessData[id][bizPos][1], BusinessData[id][bizPos][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizPos][3]);

		BusinessData[id][bizExterior] = GetPlayerInterior(playerid);
		BusinessData[id][bizExteriorVW] = GetPlayerVirtualWorld(playerid);

		Business_Refresh(id);
		Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el exterior del negocio ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizInt][3]);

		BusinessData[id][bizInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
			{
				SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
				SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

				SetPlayerInterior(i, BusinessData[id][bizInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el spawn interior del negocio ID: %d.", ReturnName(playerid, 0), id);
	}

	//Sistema de checkpoints negocios
	else if (!strcmp(type, "checkpoint", true))
	{
		if (BusinessData[id][bizType] == 8 || BusinessData[id][bizType] == 10)
		{
			GetPlayerPos(playerid, BusinessData[id][bizCheck][0], BusinessData[id][bizCheck][1], BusinessData[id][bizCheck][2]);
			Business_Refresh(id);

			Business_Save(id);
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el checkpoint del negocio ID: %d.", ReturnName(playerid, 0), id);
		}
		else
		{
			return SendErrorMessage(playerid, "Este negocio no puede tener checkpoint, es solo para negocios dinamicos.");
		}
	}

	else if (!strcmp(type, "entrega", true))
	{
	    if (BusinessData[id][bizType] == 5)
	        return SendErrorMessage(playerid, "Este negocio no puede tener entregas.");

	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "El punto de entrega tiene que ser en el exterior.");

	    GetPlayerPos(playerid, BusinessData[id][bizDeliver][0], BusinessData[id][bizDeliver][1], BusinessData[id][bizDeliver][2]);
		Business_Refresh(id);

		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el punto de entrega del negocio ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "precio", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/editarnegocio [id] [precio] [nuevo precio]");

	    BusinessData[id][bizPrice] = price;

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el precio del negocio ID: %d a %s.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "stock", true))
	{
	    new amount;

	    if (sscanf(string, "d", amount))
	        return SendSyntaxMessage(playerid, "/editarnegocio [id] [stock] [nuevo stock]");

	    BusinessData[id][bizProducts] = amount;

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el stock del negocio ID: %d a %s productos.", ReturnName(playerid, 0), id, FormatNumber(amount, ""));
	}
	else if (!strcmp(type, "nombre", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editarnegocio [id] [nombre] [nuevo nombre]");

	    format(BusinessData[id][bizName], 32, name);

	    Business_Refresh(id);
	    Business_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el nombre del negocio ID: %d a \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "tipo", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	    {
	        SendSyntaxMessage(playerid, "/editarnegocio [id] [tipo] [tipo de negocio]");
			SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Minorista | 2: Armas | 3: Ropa | 4: Comida Rapida | 5: Concesionario | 6: Estacion de Servicio | 7: Muebles | 9 : Bar");
			return 1;
		}
		if (typeint != 1 || typeint != 2 || typeint != 3 || typeint != 4 || typeint != 5 || typeint != 6 || typeint != 7 || typeint != 9)
			return SendErrorMessage(playerid, "El tipo de negocio debe ser entre 1 y 7 o 9.");

        BusinessData[id][bizType] = typeint;

        switch (typeint) {
            case 1: {
            	BusinessData[id][bizInt][0] = -27.3074;
           		BusinessData[id][bizInt][1] = -30.8741;
            	BusinessData[id][bizInt][2] = 1003.5573;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 4;
            }
            case 2: {
            	BusinessData[id][bizInt][0] = 316.3963;
            	BusinessData[id][bizInt][1] = -169.8375;
            	BusinessData[id][bizInt][2] = 999.6010;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 3: {
            	BusinessData[id][bizInt][0] = 161.4801;
            	BusinessData[id][bizInt][1] = -96.5368;
            	BusinessData[id][bizInt][2] = 1001.8047;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 18;
			}
			case 4: {
            	BusinessData[id][bizInt][0] = 363.3402;
            	BusinessData[id][bizInt][1] = -74.6679;
            	BusinessData[id][bizInt][2] = 1001.5078;
            	BusinessData[id][bizInt][3] = 315.0000;
				BusinessData[id][bizInterior] = 10;
			}
			case 5: {
            	BusinessData[id][bizInt][0] = 1494.5612;
            	BusinessData[id][bizInt][1] = 1304.2061;
            	BusinessData[id][bizInt][2] = 1093.2891;
            	BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 3;
			}
			case 6: {
				BusinessData[id][bizInt][0] = -27.3383;
   				BusinessData[id][bizInt][1] = -57.6909;
			   	BusinessData[id][bizInt][2] = 1003.5469;
      			BusinessData[id][bizInt][3] = 0.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 7: {
				BusinessData[id][bizInt][0] = -2240.4954;
   				BusinessData[id][bizInt][1] = 128.3774;
			   	BusinessData[id][bizInt][2] = 1035.4210;
      			BusinessData[id][bizInt][3] = 270.0000;
				BusinessData[id][bizInterior] = 6;
			}
			case 8: {
				return SendErrorMessage(playerid, "No se puede editar este tipo de negocio, eliminelo y crea otro nuevo");
			}
			case 9: {
				BusinessData[id][bizInt][0] = 501.8523;
   				BusinessData[id][bizInt][1] = -68.2582;
			   	BusinessData[id][bizInt][2] = 998.7578;
      			BusinessData[id][bizInt][3] = 185.5292;
				BusinessData[id][bizInterior] = 11;
			}
			case 10: {
				return SendErrorMessage(playerid, "No se puede editar este tipo de negocio, eliminelo y crea otro nuevo");
			}
		}
		foreach (new i : Player)
		{
			if (PlayerData[i][pBusiness] == BusinessData[id][bizID])
			{
				SetPlayerPos(i, BusinessData[id][bizInt][0], BusinessData[id][bizInt][1], BusinessData[id][bizInt][2]);
				SetPlayerFacingAngle(i, BusinessData[id][bizInt][3]);

				SetPlayerInterior(i, BusinessData[id][bizInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Business_Refresh(id);

	    Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el tipo de negocio ID: %d a %d.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "autos", true))
	{
	    if (BusinessData[id][bizType] != 5)
	        return SendErrorMessage(playerid, "Este negocio no es un concesionario!");

		PlayerData[playerid][pDealership] = id;
		Business_EditCars(playerid, id);
	}
	else if (!strcmp(type, "spawn", true))
	{
	    if (BusinessData[id][bizType] != 5)
	        return SendErrorMessage(playerid, "Este negocio no es un concesinario!");

	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "Tienes que estar en un exterior para poner un punto de spawn.");

	    GetPlayerPos(playerid, BusinessData[id][bizSpawn][0], BusinessData[id][bizSpawn][1], BusinessData[id][bizSpawn][2]);
		GetPlayerFacingAngle(playerid, BusinessData[id][bizSpawn][3]);

		BusinessData[id][bizExterior] = GetPlayerInterior(playerid);

		Business_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el spawn de vehiculos del negocio ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:productos(playerid, params[])
{
	static
	    bizid = -1;

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid)) {
	    Business_ProductMenu(playerid, bizid);
	}
	else SendErrorMessage(playerid, "You are not in range of your business interior.");
	return 1;
}

CMD:anegocioestado(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/avendernegocio [id]");

	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "ID de negocio invalida.");

	BusinessData[id][bizOwner] = 99999999;

	Business_Refresh(id);
	Business_Save(id);

	SendServerMessage(playerid, "El estado es dueño de este negocio ahora (/bizcmds).", id);
	return 1;
}

CMD:borrarnegocio(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarnegocio [id]");

	if ((id < 0 || id >= MAX_BUSINESSES) || !BusinessData[id][bizExists])
	    return SendErrorMessage(playerid, "ID de negocio invalida.");

	Business_Delete(id);
	SendServerMessage(playerid, "Has borrado el negocio ID: %d.", id);
	return 1;
}

CMD:beber(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "No puedes usar este comando ahora.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/beber [agua/gaseosa]");

	if (PlayerData[playerid][pDrinking])
	    return SendErrorMessage(playerid, "You are already drinking from a bottle.");

	if (!strcmp(params, "gaseosa", true))
	{
	    if (!Inventory_HasItem(playerid, "Gaseosa"))
	    	return SendErrorMessage(playerid, "No tienes ninguna gaseosa en el inventario.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "Ahora mismo no tienes sed.");

        PlayerData[playerid][pDrinking] = 1;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Botella Vacia", 1484);
		Inventory_Remove(playerid, "Gaseosa");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca una gaseosa y la abre.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Pulsa ~y~Click~w~ para beber.");
	}
	else if (!strcmp(params, "agua", true))
	{
	    if (!Inventory_HasItem(playerid, "Botella de Agua"))
	    	return SendErrorMessage(playerid, "No tienes ninguna botella de agua en el inventario.");

		if (PlayerData[playerid][pThirst] > 90)
	    	return SendErrorMessage(playerid, "Ahora mismo no tienes sed.");

        PlayerData[playerid][pDrinking] = 2;
        PlayerData[playerid][pDrinkBar] = CreatePlayerProgressBar(playerid, 572.00, 440.00, 56.50, 3.20, -1429936641, 100.0);

        ShowPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
        SetPlayerProgressBarValue(playerid, PlayerData[playerid][pDrinkBar], 100.0);

		Inventory_Add(playerid, "Botella Vacia", 1484);
		Inventory_Remove(playerid, "Botella de Agua");

		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DRINK_SPRUNK);

 		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca una botella de agua y la abre.", ReturnName(playerid, 0));
 		ShowPlayerFooter(playerid, "Pulsa ~y~Click~w~ para beber.");
	}
	return 1;
}

CMD:cocinar(playerid, params[])
{
	new houseid = House_Inside(playerid);

	if (houseid == -1)
	    return SendErrorMessage(playerid, "Tienes que estar dentro de una casa para cocinar.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/cocinar [hamburguesa/pizza]");

    if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "You can't use this command at the moment.");

	if (!strcmp(params, "hamburguesa", true))
	{
	    if (!Inventory_HasItem(playerid, "Hamburguesa Congelada"))
	        return SendErrorMessage(playerid, "No tienes ninguna hamburguesa congelada.");

		if (PlayerData[playerid][pCooking])
		    return SendErrorMessage(playerid, "Ya estas cocinando algo.");

		Inventory_Add(playerid, "Carton", 928);

		PlayerData[playerid][pCooking] = 1;
		PlayerData[playerid][pCookingTime] = 20;
		PlayerData[playerid][pCookingHouse] = houseid;

		Inventory_Remove(playerid, "Hamburguesa Congelada");
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s prepara el microondas y calienta una hamburguesa (20 segundos).", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "pizza", true))
	{
	    if (!Inventory_HasItem(playerid, "Pizza Congelada"))
	        return SendErrorMessage(playerid, "No tienes ninguna caja de pizza congelada.");

		if (PlayerData[playerid][pCooking])
		    return SendErrorMessage(playerid, "Ya estas cocinando algo.");

        Inventory_Add(playerid, "Carton", 928);

		PlayerData[playerid][pCooking] = 2;
		PlayerData[playerid][pCookingTime] = 55;
		PlayerData[playerid][pCookingHouse] = houseid;

        Inventory_Remove(playerid, "Pizza Congelada");
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s prepara el horno y calienta una pizza congelada (55 segundos).", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:chaleco(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "No puedes usar este comando ahora.");

	if (!Inventory_HasItem(playerid, "Chaleco Blindado"))
	    return SendErrorMessage(playerid, "No tienes un chaleco blindado en el inventario.");

	if (ReturnArmour(playerid) > 49)
	    return SendErrorMessage(playerid, "Ya tienes un chaleco puesto.");

	SetPlayerArmour(playerid, 50.0);

	Inventory_Remove(playerid, "Chaleco Blindado");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca un chaleco blindado y se lo pone.", ReturnName(playerid, 0));
	return 1;
}

CMD:cajafuerte(playerid, params[])
{
    static
	    bizid = -1,
		type[24],
		str[12],
		amount;

	if ((bizid = Business_Inside(playerid)) != -1 && Business_IsOwner(playerid, bizid))
	{
	    if (sscanf(params, "s[24]S()[12]", type, str))
	    {
			SendSyntaxMessage(playerid, "/cajafuerte [opcion] (%s disponible)", FormatNumber(BusinessData[bizid][bizVault]));
	        SendClientMessage(playerid, COLOR_YELLOW, "[OPCIONES]:{FFFFFF} retirar, depositar, balance");
	        return 1;
		}
		if (!strcmp(type, "retirar", true))
		{
		    if (sscanf(str, "d", amount))
		        return SendSyntaxMessage(playerid, "/cajafuerte [retirar] [cantidad]");

			if (amount < 1 || amount > BusinessData[bizid][bizVault])
			    return SendErrorMessage(playerid, "Cantidad invalida!");

            BusinessData[bizid][bizVault] -= amount;
            Business_Save(bizid);

            GiveMoney(playerid, amount);
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s ha retirado %s de la caja fuerte del negocio.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else if (!strcmp(type, "depositar", true))
		{
		    if (sscanf(str, "d", amount))
		        return SendSyntaxMessage(playerid, "/cajafuerte [depositar] [cantidad]");

			if (amount < 1 || amount > GetMoney(playerid))
			    return SendErrorMessage(playerid, "Cantidad invalida!");

            BusinessData[bizid][bizVault] += amount;
            Business_Save(bizid);

            GiveMoney(playerid, -amount);
            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s deposito %s en la caja fuerte de su negocio.", ReturnName(playerid, 0), FormatNumber(amount));
		}
		else if (!strcmp(type, "balance", true))
		{
		    SendServerMessage(playerid, "\"%s\" el balance total de tu caja fuerte es de: %s.", BusinessData[bizid][bizName], FormatNumber(BusinessData[bizid][bizVault]));
		}
	}
	else SendErrorMessage(playerid, "No estas en el interior de tu negocio.");
	return 1;
}

CMD:examenmanejo(playerid, params[])
{
	if (PlayerData[playerid][pDrivingTest])
	    return SendErrorMessage(playerid, "Ya estas en un examen de manejo!");

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, -2033.0439, -117.4885, 1035.1719))
	    return SendErrorMessage(playerid, "No estas en el punto adecuado.");

	if (Inventory_HasItem(playerid, "Permiso de Conducir"))
	    return SendErrorMessage(playerid, "Ya tienes un permiso de conducir!");

	if (GetMoney(playerid) < 50)
	    return SendErrorMessage(playerid, "No tienes $50 para hacer el examen.");

    PlayerData[playerid][pInterior] = GetPlayerInterior(playerid);
   	PlayerData[playerid][pWorld] = GetPlayerVirtualWorld(playerid);

	GetPlayerHealth(playerid, PlayerData[playerid][pHealth]);
	GetPlayerPos(playerid, PlayerData[playerid][pPos][0], PlayerData[playerid][pPos][1], PlayerData[playerid][pPos][2]);
 	GetPlayerFacingAngle(playerid, PlayerData[playerid][pPos][3]);

    PlayerData[playerid][pTestCar] = CreateVehicle(410, -2047.1056, -87.7183, 34.8219, 0.1447, 1, 1, -1);
    PlayerData[playerid][pTestWarns] = 0;

	if (PlayerData[playerid][pTestCar] != INVALID_VEHICLE_ID)
	{
		PlayerData[playerid][pDrivingTest] = true;
	    PlayerData[playerid][pTestStage] = 0;

		ResetVehicle(PlayerData[playerid][pTestCar]);
	    SetPlayerVirtualWorld(playerid, (2000 + playerid));

	    SetVehicleVirtualWorld(PlayerData[playerid][pTestCar], (2000 + playerid));
		PutPlayerInVehicle(playerid, PlayerData[playerid][pTestCar], 0);

		SetPlayerCheckpoint(playerid, g_arrDrivingCheckpoints[0][0], g_arrDrivingCheckpoints[0][1], g_arrDrivingCheckpoints[0][2], 3.0);
		SendServerMessage(playerid, "Has iniciado el examen de manejo.");

		SetPlayerInterior(playerid, 0);
	}
	return 1;
}

CMD:crearentrada(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (isnull(params) || strlen(params) > 32)
	    return SendSyntaxMessage(playerid, "/crearentrada [nombre]");

	new id = Entrance_Create(playerid, params);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de entradas.");

	SendServerMessage(playerid, "Has creado la entrada ID: %d.", id);
	return 1;
}

CMD:editarentrada(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarentrada [id] [name]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} exterior, interior, contraseña, nombre, bloqueada, icono, tipo, custom, virtual");
		return 1;
	}
	if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
	    return SendErrorMessage(playerid, "ID de entrada invalida.");

	if (!strcmp(type, "exterior", true))
	{
	    GetPlayerPos(playerid, EntranceData[id][entrancePos][0], EntranceData[id][entrancePos][1], EntranceData[id][entrancePos][2]);
		GetPlayerFacingAngle(playerid, EntranceData[id][entrancePos][3]);

		EntranceData[id][entranceExterior] = GetPlayerInterior(playerid);
		EntranceData[id][entranceExteriorVW] = GetPlayerVirtualWorld(playerid);

		Entrance_Refresh(id);
		Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el exterior de la entrada ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "interior", true))
	{
	    GetPlayerPos(playerid, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
		GetPlayerFacingAngle(playerid, EntranceData[id][entranceInt][3]);

		EntranceData[id][entranceInterior] = GetPlayerInterior(playerid);

        foreach (new i : Player)
		{
			if (PlayerData[i][pEntrance] == EntranceData[id][entranceID])
			{
				SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
				SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

				SetPlayerInterior(i, EntranceData[id][entranceInterior]);
				SetCameraBehindPlayer(i);
			}
		}
		Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el spawn interior de la entrada ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "custom", true))
	{
	    new status;

	    if (sscanf(string, "d", status))
	        return SendSyntaxMessage(playerid, "/editarentrada [id] [custom] [0/1]");

		if (status < 0 || status > 1)
		    return SendErrorMessage(playerid, "Tienes que escribir 0 (no) o 1 (si).");

	    EntranceData[id][entranceCustom] = status;
	    Entrance_Save(id);

	    if (status) {
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s activo el modo interior custom para la entrada ID: %d.", ReturnName(playerid, 0), id);
		}
		else {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s desactivo el modo interior custom para la entrada ID: %d.", ReturnName(playerid, 0), id);
		}
	}
	else if (!strcmp(type, "virtual", true))
	{
	    new worldid;

	    if (sscanf(string, "d", worldid))
	        return SendSyntaxMessage(playerid, "/editarentrada [id] [virtual] [interior]");

	    EntranceData[id][entranceWorld] = worldid;

		foreach (new i : Player) if (Entrance_Inside(i) == id) {
			SetPlayerVirtualWorld(i, worldid);
		}
		Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el id de interior virtual a la entrada ID: %d a %d.", ReturnName(playerid, 0), id, worldid);
	}
	else if (!strcmp(type, "icono", true))
	{
	    new icon;

	    if (sscanf(string, "d", icon))
	        return SendSyntaxMessage(playerid, "/editarentrada [id] [icono] [id de icono]");

		if (icon < 0 || icon > 63)
		    return SendErrorMessage(playerid, "Icono de mapa invalido! Los iconos se encuentran en \"wiki.sa-mp.com/wiki/MapIcons\".");

	    EntranceData[id][entranceIcon] = icon;

	    Entrance_Refresh(id);
	    Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el icono del mapa del interior ID: %d a %d.", ReturnName(playerid, 0), id, icon);
	}
	else if (!strcmp(type, "contraseña", true))
	{
	    new password[32];

	    if (sscanf(string, "s[32]", password))
	        return SendSyntaxMessage(playerid, "/editarentrada [id] [contraseña] [contraseña de entrada] (usa 'ninguna' para desactivar)");

		if (!strcmp(password, "ninguna", true)) {
			EntranceData[id][entrancePass][0] = 0;
		}
		else {
		    format(EntranceData[id][entrancePass], 32, password);
		}
	    Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la contraseña de la entrada ID: %d a \"%s\".", ReturnName(playerid, 0), id, password);
	}
	else if (!strcmp(type, "bloqueada", true))
	{
	    new locked;

	    if (sscanf(string, "d", locked))
	        return SendSyntaxMessage(playerid, "/editarentrada [id] [bloqueada] [bloqueada 0/1]");

		if (locked < 0 || locked > 1)
		    return SendErrorMessage(playerid, "Valor invalido. Usa 0 para desbloquearla y 1 para bloquearla.");

	    EntranceData[id][entranceLocked] = locked;
	    Entrance_Save(id);

	    if (locked) {
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s bloqueo la entrada ID: %d.", ReturnName(playerid, 0), id);
		} else {
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s desbloqueo la entrada ID: %d.", ReturnName(playerid, 0), id);
		}
	}
	else if (!strcmp(type, "nombre", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editarentrada [id] [nombre] [nuevo nombre]");

	    format(EntranceData[id][entranceName], 32, name);

	    Entrance_Refresh(id);
	    Entrance_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el nombre de la entrada ID: %d a \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "tipo", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	    {
	        SendSyntaxMessage(playerid, "/editentrance [id] [tipo] [tipo de entrada]");
			SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 0: Ninguna | 1: Escuela de Manejo | 2: Banco | 3: Almacen | 4: Municipalidad | 5: Campo de tiro");
			return 1;
		}
		if (typeint < 0 || typeint > 5)
			return SendErrorMessage(playerid, "Los tipos son entre 0 y 5.");

		if (EntranceData[id][entranceType] == 3 && typeint != 3) {
		    DestroyForklifts(id);
		}
		else if (EntranceData[id][entranceType] != 3 && typeint == 3) {
		    CreateForklifts(id);
		}
        EntranceData[id][entranceType] = typeint;

        switch (typeint) {
            case 1: {
            	EntranceData[id][entranceInt][0] = -2029.5531;
           		EntranceData[id][entranceInt][1] = -118.8003;
            	EntranceData[id][entranceInt][2] = 1035.1719;
            	EntranceData[id][entranceInt][3] = 0.0000;
				EntranceData[id][entranceInterior] = 3;
            }
			case 2: {
            	EntranceData[id][entranceInt][0] = 1456.1918;
           		EntranceData[id][entranceInt][1] = -987.9417;
            	EntranceData[id][entranceInt][2] = 996.1050;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 6;
            }
            case 3: {
                EntranceData[id][entranceInt][0] = 1291.8246;
           		EntranceData[id][entranceInt][1] = 5.8714;
            	EntranceData[id][entranceInt][2] = 1001.0078;
            	EntranceData[id][entranceInt][3] = 180.0000;
				EntranceData[id][entranceInterior] = 18;
			}
			case 4: {
			    EntranceData[id][entranceInt][0] = 390.1687;
           		EntranceData[id][entranceInt][1] = 173.8072;
            	EntranceData[id][entranceInt][2] = 1008.3828;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 3;
			}
			case 5: {
			    EntranceData[id][entranceInt][0] = 304.0165;
           		EntranceData[id][entranceInt][1] = -141.9894;
            	EntranceData[id][entranceInt][2] = 1004.0625;
            	EntranceData[id][entranceInt][3] = 90.0000;
				EntranceData[id][entranceInterior] = 7;
			}
		}
		foreach (new i : Player)
		{
			if (PlayerData[i][pEntrance] == EntranceData[id][entranceID])
			{
				SetPlayerPos(i, EntranceData[id][entranceInt][0], EntranceData[id][entranceInt][1], EntranceData[id][entranceInt][2]);
				SetPlayerFacingAngle(i, EntranceData[id][entranceInt][3]);

				SetPlayerInterior(i, EntranceData[id][entranceInterior]);
				SetCameraBehindPlayer(i);
			}
		}
	    Entrance_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el tipo de entrada en la entrada ID: %d to %d.", ReturnName(playerid, 0), id, typeint);
	}
	return 1;
}

CMD:borrarentrada(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarentrada [id de entrada]");

	if ((id < 0 || id >= MAX_ENTRANCES) || !EntranceData[id][entranceExists])
	    return SendErrorMessage(playerid, "ID de entrada invalida.");

	Entrance_Delete(id);
	SendServerMessage(playerid, "Has borrado la entrada ID: %d.", id);
	return 1;
}

CMD:municion(playerid, params[])
{
    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "No puedes usar este comando ahora.");

	if (!Inventory_HasItem(playerid, "Caja de Municion"))
	    return SendErrorMessage(playerid, "No tienes cajas de municion encima.");

	Inventory_Add(playerid, "Cargador", 19995, 5);

	SendServerMessage(playerid, "Abriste una caja de municion y recibiste 5 cargadores");

	Inventory_Remove(playerid, "Caja de Municion");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abrió una caja de municion.", ReturnName(playerid, 0));
	return 1;
}

CMD:faq(playerid, params[])
{
	Dialog_Show(playerid, FAQ, DIALOG_STYLE_LIST, "Preguntas Frecuentes", "Como entro a un interior?\nComo veo mi inventario?\nComo agarro items tirados en el piso?\nQue son los iconos que veo en la pantalla?\nComo lleno mi hambre y sed?\nComo busco ciertos lugares?\nComo dejo de trabajar en mi trabajo?\nComo saco armas y las cargo?\nComo edito los muebles de mi casa?\nComo interactuo con las cosas del servidor?", "Seleccionar", "Cancelar");
	return 1;
}

CMD:atm(playerid, params[])
{
	if (ATM_Nearest(playerid) == -1)
	    return SendErrorMessage(playerid, "No estas cerca de una maquina de ATM.");

	Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Cuenta Bancaria", "Balance: %s", "Seleccionar", "Cancelar", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	return 1;
}

CMD:banco(playerid, params[])
{
	if (!IsPlayerInBank(playerid))
	    return SendErrorMessage(playerid, "No estas en un banco.");

	Dialog_Show(playerid, Bank, DIALOG_STYLE_LIST, "Cuenta Bancaria", "Balance: %s", "Seleccionar", "Cancelar", FormatNumber(PlayerData[playerid][pBankMoney]), FormatNumber(PlayerData[playerid][pSavings]));
	return 1;
}

CMD:estacionar(playerid, params[])
{
	new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "Debes estar dentro de tu vehiculo.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "Este vehiculo esta embargado, no puedes usarlo.");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendErrorMessage(playerid, "Tienes que ser el conductor!");

	    static
			g_arrSeatData[10] = {INVALID_PLAYER_ID, ...},
			g_arrDamage[4],
			Float:health,
			seatid;

        for (new i = 0; i < 14; i ++) {
			CarData[carid][carMods][i] = GetVehicleComponentInSlot(CarData[carid][carVehicle], i);
	    }
		GetVehicleDamageStatus(CarData[carid][carVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
		GetVehicleHealth(CarData[carid][carVehicle], health);

		foreach (new i : Player) if (IsPlayerInVehicle(i, CarData[carid][carVehicle])) {
		    seatid = GetPlayerVehicleSeat(i);

		    g_arrSeatData[seatid] = i;
		}
		GetVehiclePos(CarData[carid][carVehicle], CarData[carid][carPos][0], CarData[carid][carPos][1], CarData[carid][carPos][2]);
		GetVehicleZAngle(CarData[carid][carVehicle], CarData[carid][carPos][3]);

		Car_Spawn(carid);
		Car_Save(carid);

		SendServerMessage(playerid, "Has estacionado tu %s.", ReturnVehicleName(CarData[carid][carVehicle]));

        UpdateVehicleDamageStatus(CarData[carid][carVehicle], g_arrDamage[0], g_arrDamage[1], g_arrDamage[2], g_arrDamage[3]);
		SetVehicleHealth(CarData[carid][carVehicle], health);

		for (new i = 0; i < sizeof(g_arrSeatData); i ++) if (g_arrSeatData[i] != INVALID_PLAYER_ID) {
		    PutPlayerInVehicle(g_arrSeatData[i], CarData[carid][carVehicle], i);

		    g_arrSeatData[i] = INVALID_PLAYER_ID;
		}
	}
	else SendErrorMessage(playerid, "No estas dentro de nada que puedas estacionar.");
	return 1;
}

CMD:crearbombagas(playerid, params[])
{
	static
	    id,
		bizid = -1;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", bizid))
	    return SendSyntaxMessage(playerid, "/crearbombagas [id de negocio]");

	if ((bizid < 0 || bizid >= MAX_BUSINESSES) || !BusinessData[bizid][bizExists])
	    return SendErrorMessage(playerid, "ID de negocio invalida.");

	if (BusinessData[bizid][bizType] != 6)
	    return SendErrorMessage(playerid, "Este negocio no es una estacion de servicio!");

    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
		return SendErrorMessage(playerid, "Solo puedes crear bombas de combustible en exteriores.");

	id = Pump_Create(playerid, bizid);

	if (id == -1)
	    return SendErrorMessage(playerid, "El negocio llego al limite de bombas.");

	SendServerMessage(playerid, "Has creado la bomba de combustible ID: %d.", id);
	EditDynamicObject(playerid, PumpData[id][pumpObject]);

	PlayerData[playerid][pEditPump] = id;
	return 1;
}

CMD:borrarbombagas(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarbombagas [bomba id]");

	if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
	    return SendErrorMessage(playerid, "ID de bomba invalida.");

	Pump_Delete(id);
	SendServerMessage(playerid, "Has borrado la bomba de combustible ID: %d.", id);
	return 1;
}

CMD:setbombagas(playerid, params[])
{
	static
	    id = 0,
		amount;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "dd", id, amount))
	    return SendSyntaxMessage(playerid, "/setbombagas [bomba id] [cantidad combustible]");

	if ((id < 0 || id >= MAX_GAS_PUMPS) || !PumpData[id][pumpExists])
	    return SendErrorMessage(playerid, "ID de bomba invalida.");

	PumpData[id][pumpFuel] = amount;

	Pump_Refresh(id);
	Pump_Save(id);

	SendServerMessage(playerid, "Has asignado %d combustible para la bomba ID: %d.", amount, id);
	return 1;
}

CMD:rellenar(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pRefill] != INVALID_VEHICLE_ID)
	{
	    BusinessData[PlayerData[playerid][pGasStation]][bizVault] += PlayerData[playerid][pRefillPrice];
		Business_Save(PlayerData[playerid][pGasStation]);

        GiveMoney(playerid, -PlayerData[playerid][pRefillPrice]);

		SendServerMessage(playerid, "Has rellenado tu vehiculo por $%d.", PlayerData[playerid][pRefillPrice]);
        StopRefilling(playerid);

        return 1;
	}
	if (!vehicleid)
	    return SendErrorMessage(playerid, "No estas dentro de un vehiculo!");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "Tienes que ser el conductor!");

	if (GetEngineStatus(vehicleid))
	    return SendErrorMessage(playerid, "Tienes que apagar el motor primero.");

	new id = Pump_Nearest(playerid);

	if (id != -1)
	{
		if (CoreVehicles[vehicleid][vehFuel] > 95)
			return SendErrorMessage(playerid, "Este vehiculo no necesita gasolina.");

		if (IsPumpOccupied(id))
		    return SendErrorMessage(playerid, "Esta bomba de combustible ya esta ocupada.");

		if (PumpData[id][pumpFuel] < 1)
   			return SendErrorMessage(playerid, "Esta bomba de combustible no tiene mas combustible.");

		PlayerData[playerid][pGasPump] = id;
		PlayerData[playerid][pGasStation] = PumpData[id][pumpBusiness];

		PlayerData[playerid][pRefill] = vehicleid;
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s Ha empezado a llenar de combustible su vehiculo.", ReturnName(playerid, 0));
	}
	else
	{
		SendErrorMessage(playerid, "No estas cerca de ninguna bomba de combustible.");
	}
	return 1;
}

CMD:quitarmods(playerid, params[])
{
	new
	    carid = GetPlayerVehicleID(playerid);

	if (!carid)
	    return SendErrorMessage(playerid, "Tienes que estar dentro de un vehiculo.");

    if (IsVehicleImpounded(carid))
    	return SendErrorMessage(playerid, "Este vehiculo esta embargado, no puedes usarlo.");

	if ((carid = Car_GetID(carid)) != -1 && Car_IsOwner(playerid, carid))
	{
	    if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	        return SendErrorMessage(playerid, "Tienes que ser el conductor!");

		for (new i = 0; i < 14; i ++) {
		    RemoveVehicleComponent(CarData[carid][carVehicle], CarData[carid][carMods][i]);

		    CarData[carid][carMods][i] = 0;
		}
		Car_Save(carid);
		SendServerMessage(playerid, "Has eliminado las modificaciones de este vehiculo.");
	}
	else SendErrorMessage(playerid, "No estas dentro de nada al que le puedas quitar las modificaciones.");
	return 1;
}

CMD:maletero(playerid, params[])
{
	new
	    id = -1;

	if ((id = Car_Nearest(playerid)) != -1)
	{
	    if (IsVehicleImpounded(CarData[id][carVehicle]))
	        return SendErrorMessage(playerid, "Este vehiculo esta embargado, no puedes usarlo.");

	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Primero tienes que salir del vehiculo.");

		if (!IsDoorVehicle(CarData[id][carVehicle]))
		    return SendErrorMessage(playerid, "Este vehiculo no tiene maletero.");

		if (CarData[id][carLocked])
		    return SendErrorMessage(playerid, "El maletero de este vehiculo esta bloqueado.");

		Car_ShowTrunk(playerid, id);
	}
	else SendErrorMessage(playerid, "No estas cerca de ningun vehiculo.");
	return 1;
}

CMD:negnombre(playerid, params[])
{
	new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
	{
		if (isnull(params))
		    return SendSyntaxMessage(playerid, "/negnombre [nuevo nombre]");

		if (strlen(params) > 32)
		    return SendErrorMessage(playerid, "El nombre del negocio no puede superar las 32 letras.");

		format(BusinessData[id][bizName], 32, params);

		Business_Refresh(id);
		Business_Save(id);

		SendServerMessage(playerid, "Nombre del negocio cambiado a: \"%s\".", params);
	}
	else SendErrorMessage(playerid, "No estas cerca de tu negocio.");
	return 1;
}

CMD:negmensaje(playerid, params[])
{
	new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id))
	{
		if (isnull(params))
		    return SendSyntaxMessage(playerid, "/negmensaje [mensaje] - Usa \"ninguno\" para desactivar.");

		if (!strcmp(params, "ninguno", true))
		{
		    BusinessData[id][bizMessage][0] = '\0';

			Business_Save(id);
			SendServerMessage(playerid, "Has eliminado el mensaje de bienvenida del negocio.");
		}
		else
		{
			format(BusinessData[id][bizMessage], 128, params);

			Business_Save(id);
			SendServerMessage(playerid, "Mensaje de bienvenida del negocio cambiado a: \"%s\".", params);
		}
	}
	else SendErrorMessage(playerid, "No estas cerca de tu negocio.");
	return 1;
}
CMD:aojail(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] >= 1)
	{
		new string[128], name[MAX_PLAYER_NAME], minutes;
		if(sscanf(params, "s[24]ds[64]", name, minutes)) return SendClientMessageEx(playerid, COLOR_WHITE, "USO: /aojail [jugador] [tiempo (minutos)]");

		new tmpName[24], query[512];
		mysql_real_escape_string(name, tmpName);

		SetPVarString(playerid, "OnJailAccount", tmpName);

		format(string, sizeof(string), "Intentando jailear la cuenta de %s por %d minutos...", tmpName, minutes);
		SendClientMessageEx(playerid, COLOR_LIGHTYELLOW, string);

		format(query,sizeof(query),"UPDATE `characters` SET `JailTime` = %d WHERE `Admin` < %d AND `Username` = '%s'", minutes*60, PlayerData[playerid][pAdmin], tmpName);
		mysql_tquery(g_iHandle, query, "OnJailAccount", "i", playerid);
	}
	return 1;
}
CMD:muebles(playerid, params[])
{
    static
	    houseid = -1;

	if ((houseid = House_Inside(playerid)) != -1 && House_IsOwner(playerid, houseid))
	{
        new
			count = 0,
			string[MAX_FURNITURE * 32];

        for (new i = 0; i != MAX_FURNITURE; i ++) if (count < MAX_HOUSE_FURNITURE && FurnitureData[i][furnitureExists] && FurnitureData[i][furnitureHouse] == houseid) {
    		ListedFurniture[playerid][count++] = i;

    		format(string, sizeof(string), "%s%s (%.2f metros)\n", string, FurnitureData[i][furnitureName], GetPlayerDistanceFromPoint(playerid, FurnitureData[i][furniturePos][0], FurnitureData[i][furniturePos][1], FurnitureData[i][furniturePos][2]));
		}
		if (count) {
			Dialog_Show(playerid, ListedFurniture, DIALOG_STYLE_LIST, "Muebles Comprados", string, "Seleccionar", "Cancelar");
     	}
     	else SendErrorMessage(playerid, "Esta casa no tiene ningun mueble spawneado.");
	}
	else SendErrorMessage(playerid, "No estas en el interior de tu casa.");
	return 1;
}

CMD:creartrabajo(playerid, params[])
{
	static
	    type,
		id = -1;

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/creartrabajo [tipo]");

	if (type < 1 || type > 9)
	    return SendErrorMessage(playerid, "Tipo de trabajo invalido, numeros entre el 1 y el 9.");

	id = Job_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de trabajos.");

	SendServerMessage(playerid, "Has creado el trabajo ID: %d.", id);
	return 1;
}

CMD:borrartrabajo(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrartrabajo [id trabajo]");

	if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
	    return SendErrorMessage(playerid, "ID de trabajo invalida.");

	Job_Delete(id);
	SendServerMessage(playerid, "Has borrado el trabajo ID: %d.", id);
	return 1;
}

CMD:editartrabajo(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editartrabajo [id] [parametro]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETROS]:{FFFFFF} localizacion, tipo, punto, entrega");
		return 1;
	}
	if ((id < 0 || id >= MAX_DYNAMIC_JOBS) || !JobData[id][jobExists])
	    return SendErrorMessage(playerid, "You have specified an invalid job ID.");

	if (!strcmp(type, "localizacion", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobPos][0] = x;
		JobData[id][jobPos][1] = y;
		JobData[id][jobPos][2] = z;

		JobData[id][jobInterior] = GetPlayerInterior(playerid);
		JobData[id][jobWorld] = GetPlayerVirtualWorld(playerid);

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la localizacion del trabajo ID: %d.", ReturnName(playerid, 0), id);
	}
 	else if (!strcmp(type, "tipo", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
	        return SendSyntaxMessage(playerid, "/editartrabajo [id] [tipo] [nuevo tipo]");

        if (typeint < 1 || typeint > 9)
	    	return SendErrorMessage(playerid, "Tipo de trabajo invalido, tipos entre el numero 1 y 9.");

	    JobData[id][jobType] = typeint;

	    Job_Refresh(id);
	    Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el tipo del trabajo ID: %d a %s.", ReturnName(playerid, 0), id, Job_GetName(typeint));
	}
	else if (!strcmp(type, "punto", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobPoint][0] = x;
		JobData[id][jobPoint][1] = y;
		JobData[id][jobPoint][2] = z;
        JobData[id][jobPointInt] = GetPlayerInterior(playerid);
        JobData[id][jobPointWorld] = GetPlayerVirtualWorld(playerid);

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el punto del trabajo ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "entrega", true))
	{
	    if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
	        return SendErrorMessage(playerid, "No puedes poner puntos de entrega en un interior.");

	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		JobData[id][jobDeliver][0] = x;
		JobData[id][jobDeliver][1] = y;
		JobData[id][jobDeliver][2] = z;

		Job_Refresh(id);
		Job_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el punto de entrega del trabajo ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:renunciar(playerid, params[])
{
	if (PlayerData[playerid][pJob] != 0)
	{
	    new vehicleid = GetPlayerVehicleID(playerid);

		if (PlayerData[playerid][pMinedRock])
		{
	    	PlayerData[playerid][pMinedRock] = 0;
			PlayerData[playerid][pMineCount] = 0;

			DisablePlayerCheckpoint(playerid);

			RemovePlayerAttachedObject(playerid, 4);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
		}
		if (PlayerData[playerid][pJob] == JOB_COURIER)
		{
			if (PlayerData[playerid][pUnloading] != -1)
			{
	   		 	PlayerData[playerid][pUnloading] = -1;
	    		PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;

	    		DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pDeliverShipment])
			{
			    PlayerData[playerid][pShipment] = -1;
			    PlayerData[playerid][pDeliverShipment] = 0;

			    DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pLoading])
			{
	   	 		PlayerData[playerid][pLoading] = 0;
	    		PlayerData[playerid][pLoadType] = 0;

	    		DisablePlayerCheckpoint(playerid);
			}
			if (PlayerData[playerid][pLoadCrate])
 			{
  				PlayerData[playerid][pLoadCrate] = 0;

				RemovePlayerAttachedObject(playerid, 4);
				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
			}
		}
		if (IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
		{
 			CoreVehicles[vehicleid][vehLoadType] = 0;
   			DestroyObject(CoreVehicles[vehicleid][vehCrate]);

			CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;
			DisablePlayerCheckpoint(playerid);
		}
		SendServerMessage(playerid, "Renunciaste a tu trabajo como \"%s\".", Job_GetName(PlayerData[playerid][pJob]));
		PlayerData[playerid][pJob] = 0;
	}
	else SendErrorMessage(playerid, "No tienes un trabajo como para poder renunciar (xd).");
	return 1;
}

CMD:trabajar(playerid, params[])
{
	static
	    id = -1;

	if ((id = Job_Nearest(playerid)) != -1)
	{
	    if (PlayerData[playerid][pJob] == JobData[id][jobType])
	        return SendErrorMessage(playerid, "Ya tienes este trabajo.");

	    PlayerData[playerid][pJob] = JobData[id][jobType];

	    return SendServerMessage(playerid, "Ahora eres un %s - escribe \"/ayudatrabajo\" para los comandos del trabajo.", Job_GetName(JobData[id][jobType]));
	}
    SendErrorMessage(playerid, "No estas en un lugar de trabajo.");
	return 1;
}

CMD:descargar(playerid, params[])
{
	new
		id = Business_NearestDeliver(playerid),
		vid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "No tienes el trabajo adecuado.");

    if (id == -1)
	    return SendErrorMessage(playerid, "No estas cerca de ningun punto de entrega.");

 	if (!IsLoadableVehicle(vid))
  		return SendErrorMessage(playerid, "No estas dentro de ningun vehiculo que se pueda cargar.");

	if (!CoreVehicles[vid][vehLoadType] || CoreVehicles[vid][vehLoads] < 1)
	    return SendErrorMessage(playerid, "No hay nada cargado en este vehiculo.");

	if (PlayerData[playerid][pUnloading] != -1)
	    return SendErrorMessage(playerid, "Ya estas descargando cajas.");

	if (PlayerData[playerid][pShipment] != -1 && id != PlayerData[playerid][pShipment])
	    return SendErrorMessage(playerid, "No aceptaste la entrega para este negocio.");

	switch (CoreVehicles[vid][vehLoadType])
 	{
	 	case 1:
	 	{
	 	    if (BusinessData[id][bizType] != 1 && BusinessData[id][bizType] != 6)
	 	        return SendErrorMessage(playerid, "Este negocio no puede aceptar esta carga (tipo de carga equivocado).");
		}
		case 2..4:
		{
		    if (BusinessData[id][bizType] != CoreVehicles[vid][vehLoadType])
	 	        return SendErrorMessage(playerid, "Este negocio no puede aceptar esta carga (tipo de carga equivocado).");
		}
		case 5:
		{
		    if (BusinessData[id][bizType] != 6)
	 	        return SendErrorMessage(playerid, "Este negocio no puede aceptar esta carga (tipo de carga equivocado).");
		}
		case 6:
		{
		    if (BusinessData[id][bizType] != 7)
	 	        return SendErrorMessage(playerid, "Este negocio no puede aceptar esta carga (tipo de carga equivocado).");
		}
	}
	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	DisableWaypoint(playerid);

	GetVehicleBoot(vid, fX, fY, fZ);
	RemovePlayerFromVehicle(playerid);

	PlayerData[playerid][pUnloading] = id;
	PlayerData[playerid][pUnloadVehicle] = vid;

	SetPlayerCheckpoint(playerid, fX, fY, fZ, 1.0);
	SendServerMessage(playerid, "Descarga las cajas y llevalas al punto.");

	return 1;
}

CMD:reparar(playerid, params[])
{
	
	if (GetFactionType(playerid) != FACTION_MECHANIC)
	    return SendErrorMessage(playerid, "No eres mecanico.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Debes salir del vehiculo primero.");

	if(!IsNearTaller(playerid) && (!Inventory_HasItem(playerid, "Kit de Reparacion")))
		return SendErrorMessage(playerid, "Estas muy lejos del taller y no tienes un kit de reparacion");

	if (PlayerData[playerid][pRepairTime] > gettime())
	    return SendErrorMessage(playerid, "Tienes que esperar %d segundos antes de volver a reparar un vehiculo.", PlayerData[playerid][pRepairTime] - gettime());

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsEngineVehicle(i))
	        return SendErrorMessage(playerid, "Este vehiculo no puede ser reparado.");

	    if (!GetHoodStatus(i))
	        return SendErrorMessage(playerid, "El capo del vehiculo tiene que estar abierto.");

        if (CoreVehicles[i][vehRepairing])
            return SendErrorMessage(playerid, "Este vehiculo ya esta siendo reparado.");

		if(!IsNearTaller(playerid))
		{
            Inventory_Remove(playerid, "Kit de Reparacion");
		}
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

        CoreVehicles[i][vehRepairing] = true;
        SetTimerEx("RepairCar", 5000, false, "dd", playerid, i);

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s empieza a reparar el vehiculo.", ReturnName(playerid, 0));
		GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~g~Reparado...~w~ Espere", 5500, 3);
		return 1;
	}
	SendErrorMessage(playerid, "No estas cerca del capo de ningun vehiculo.");
	return 1;
}

CMD:nitro(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_MECHANIC)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Tienes que salir del vehiculo primero.");

	if (!Inventory_HasItem(playerid, "Garrafa de NOS"))
	    return SendErrorMessage(playerid, "No tienes una Garrafa de NOS en el inventario.");

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsValidVehicle(i) && IsPlayerNearHood(playerid, i))
	{
	    if (!IsEngineVehicle(i) || IsABike(i) || IsABoat(i) || IsAPlane(i) || IsAHelicopter(i))
	        return SendErrorMessage(playerid, "No puedes agregarle nitro a este vehiculo.");

	    if (!GetHoodStatus(i))
	        return SendErrorMessage(playerid, "El capo tiene que estar abierto.");

		Inventory_Remove(playerid, "Garrafa de NOS");
		ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);

		AddComponent(i, 1010);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s Coloca una garrafa de NOS en el motor del vehiculo.", ReturnName(playerid, 0));
		return 1;
	}
	SendErrorMessage(playerid, "No estas cerca del capo de ningun vehiculo.");
	return 1;
}

CMD:aceptarllamado(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_TAXI)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	if (!PlayerData[playerid][pTaxiDuty])
	    return SendErrorMessage(playerid, "Tienes que ser taxista y estar de servicio para hacer esto.");

	Taxi_ShowCalls(playerid);
	return 1;
}

CMD:taxi(playerid, params[])
{
	new modelid = GetVehicleModel(GetPlayerVehicleID(playerid));

    if (PlayerData[playerid][pJob] != JOB_TAXI)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	if (modelid != 438 && modelid != 420)
	    return SendErrorMessage(playerid, "Tienes que estar dentro de un taxi.");

	if (PlayerData[playerid][pTaxiDuty])
	{
	    foreach (new i : Player) if (PlayerData[i][pTaxiPlayer] == playerid && IsPlayerInVehicle(i, GetPlayerVehicleID(playerid))) {
	        LeaveTaxi(i, playerid);
	    }
	    SetPlayerColor(playerid, DEFAULT_COLOR);

        PlayerData[playerid][pTaxiDuty] = false;
        SendServerMessage(playerid, "Ya no estas de servicio de taxista!");
	}
	else
	{
		SetPlayerColor(playerid, 0xF5DEB300);

	    PlayerData[playerid][pTaxiDuty] = true;
	    SendClientMessageToAllEx(COLOR_GREEN, "[TAXI]: %s ahora esta de servicio. Escribe \"/llamar 1222\" para llamar a un taxi!", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:usarkit(playerid, params[])
{
	if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "No puedes usar este comando ahora.");

	if (PlayerData[playerid][pFirstAid])
	    return SendErrorMessage(playerid, "Ya estas usando un kit de primeros auxilios.");

	if (!Inventory_HasItem(playerid, "Primeros Auxilios"))
	    return SendErrorMessage(playerid, "No tienes ningun kit de primeros auxilios en tu inventario.");

	if (ReturnHealth(playerid) > 99)
	    return SendErrorMessage(playerid, "No necesitas un kit de primeros auxilios ahora.");

	if (!IsPlayerInAnyVehicle(playerid))
	    ApplyAnimation(playerid, "SWAT", "gnstwall_injurd", 4.0, 1, 0, 0, 0, 0);

    PlayerData[playerid][pFirstAid] = true;
    PlayerData[playerid][pAidTimer] = SetTimerEx("FirstAidUpdate", 1000, true, "d", playerid);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre un kit de primeros auxilios y lo usa.", ReturnName(playerid, 0));
    Inventory_Remove(playerid, "Primeros Auxilios");

    ShowPlayerFooter(playerid, "Has usado un ~g~kit de primeros auxilios!");
    return 1;
}

CMD:celular(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Celular"))
	    return SendErrorMessage(playerid, "No tienes un telefono en tu inventario.");

    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || PlayerData[playerid][pInjured] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "No puedes usar este comando ahora.");

	static
	    str[32];

	format(str, sizeof(str), "Telefono (#%d)", PlayerData[playerid][pPhone]);

	if (PlayerData[playerid][pPhoneOff]) {
		Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, str, "Marcar Numero\nMis Contactos\nEnviar Mensaje de Texto\nEncender Telefono", "Seleccionar", "Cancelar");
	}
	else {
	    Dialog_Show(playerid, MyPhone, DIALOG_STYLE_LIST, str, "Marcar Numero\nMis Contactos\nEnviar Mensaje de Texto\nApagar Telefono", "Seleccionar", "Cancelar");
	}
	return 1;
}
CMD:sms(playerid, params[])
	return cmd_texto(playerid, params);

CMD:texto(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Celular"))
	    return SendErrorMessage(playerid, "No tienes un celular en tu inventario.");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "Tu telefono tiene que estar prendido.");

	static
	    targetid,
		number,
		text[128];

	if (sscanf(params, "ds[128]", number, text))
	    return SendSyntaxMessage(playerid, "/texto [numero] [mensaje]");

	if (!number)
	    return SendErrorMessage(playerid, "El numero marcado no esta de servicio en este momento.");

	if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
	{
	    if (targetid == playerid)
	        return SendErrorMessage(playerid, "No te puedes mandar un mensaje a ti mismo!");

		if (PlayerData[targetid][pPhoneOff])
		    return SendErrorMessage(playerid, "El telefono de la otra persona esta apagado.");

        GiveMoney(playerid, -1);
		ShowPlayerFooter(playerid, "Has ~r~gastado~w~ $1 al enviar el mensaje.");

		SendClientMessageEx(targetid, COLOR_YELLOW, "[SMS]: %s - %s (%d)", text, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);
		SendClientMessageEx(playerid, COLOR_YELLOW, "[SMS]: %s - %s (%d)", text, ReturnName(playerid, 0), PlayerData[playerid][pPhone]);

        PlayerPlaySoundEx(targetid, 21001);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su telefono y envia un sms.", ReturnName(playerid, 0));
	}
	else
	{
	    SendErrorMessage(playerid, "El numero marcado no esta de servicio en este momento.");
	}
	return 1;
}

CMD:contestar(playerid, params[])
{
	if (!PlayerData[playerid][pIncomingCall])
	    return SendErrorMessage(playerid, "No estas recibiendo ninguna llamada.");

	if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "No puedes usar este comando en este momento.");

    if (PlayerData[playerid][pPhoneOff])
    	return SendErrorMessage(playerid, "Tu telefono tiene que estar prendido.");

	new targetid = PlayerData[playerid][pCallLine];

	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[targetid][pIncomingCall] = 0;

	SendClientMessage(playerid, COLOR_YELLOW, "[TELEFONO]:{FFFFFF} Has contestado tu telefono.");
	SendClientMessage(targetid, COLOR_YELLOW, "[TELEFONO]:{FFFFFF} Han contestado el telefono.");

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su telefono y contesta la llamada.", ReturnName(playerid, 0));
	return 1;
}

CMD:colgar(playerid, params[])
{
	new targetid = PlayerData[playerid][pCallLine];

	if (PlayerData[playerid][pEmergency] || PlayerData[playerid][pPlaceAd])
	{
	    PlayerData[playerid][pEmergency] = 0;
	    PlayerData[playerid][pPlaceAd] = 0;

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s colgó su telefono.", ReturnName(playerid, 0));
        return 1;
	}
	if (targetid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "No tienes ninguna llamada para colgar.");

	if (PlayerData[playerid][pIncomingCall])
	{
	    SendClientMessage(playerid, COLOR_YELLOW, "[TELEFONO]:{FFFFFF} Has rechazado la llamada.");
	    SendClientMessage(targetid, COLOR_YELLOW, "[TELEFONO]:{FFFFFF} Han rechazado la llamada.");

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s rechazó la llamada.", ReturnName(playerid, 0));
	}
	else
	{
        SendClientMessage(playerid, COLOR_YELLOW, "[TELEFONO]:{FFFFFF} Has colgado la llamada.");
	    SendClientMessage(targetid, COLOR_YELLOW, "[TELEFONO]:{FFFFFF} Han colgado la llamada.");

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s cuelga y guarda su telefono.", ReturnName(playerid, 0));
	    SendNearbyMessage(targetid, 30.0, COLOR_PURPLE, "** %s cuelga y guarda su telefono.", ReturnName(targetid, 0));
	}
	PlayerData[playerid][pIncomingCall] = 0;
	PlayerData[targetid][pIncomingCall] = 0;

	PlayerData[playerid][pCallLine] = INVALID_PLAYER_ID;
	PlayerData[targetid][pCallLine] = INVALID_PLAYER_ID;

	return 1;
}

CMD:pintar(playerid, params[])
{
	if (PlayerData[playerid][pCuffed])
	    return SendErrorMessage(playerid, "No puedes usar este comando en este momento.");

	new vehicleid = GetNearestVehicle(playerid);

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "No estas cerca de ningun vehiculo.");

	if (!Inventory_HasItem(playerid, "Bote de Spray"))
	    return SendErrorMessage(playerid, "No tienes ningun bote de spray en tu inventario.");

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Tienes que salir del vehiculo primero.");

	static
 		colors[256];

	for (new i = 0; i < sizeof(colors); i ++) {
		colors[i] = i;
   	}
   	ShowColorSelectionMenu(playerid, MODEL_SELECTION_COLOR, colors);
	return 1;
}

CMD:id(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/id [playerid/nombre]");

	if (strlen(params) < 3)
		return SendErrorMessage(playerid, "Tienes que poner al menos 3 letras.");

	new count;

	foreach (new i : Player)
	{
	    if (strfind(ReturnName(i), params, true) != -1)
	    {
	        SendClientMessageEx(playerid, COLOR_WHITE, "** %s - ID: %d", ReturnName(i), i);
	        count++;
		}
	}
	if (!count)
	    return SendErrorMessage(playerid, "Ningún usuario concuerda con los criterios de búsqueda: \"%s\".", params);

	return 1;
}

CMD:neginfo(playerid, params[])
{
    new
		id = -1;

    if ((id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid))) != -1 && Business_IsOwner(playerid, id)) {
     	SendServerMessage(playerid, "ID: %d | Negocio: %s | Productos: %d | Bobeda: %s", id, BusinessData[id][bizName], BusinessData[id][bizProducts], FormatNumber(BusinessData[id][bizVault]));
	}
	else SendErrorMessage(playerid, "No estas cerca de tu negocio.");
	return 1;
}

CMD:cargarcaja(playerid, params[])
{
	new vehid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pJob] != JOB_UNLOADER)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	if (!IsPlayerInWarehouse(playerid))
	    return SendErrorMessage(playerid, "Tienes que estar dentro de un almacen para hacer esto.");

	if (GetVehicleModel(vehid) != 530)
	    return SendErrorMessage(playerid, "Tienes que estar dentro de un forklift.");

	if (CoreVehicles[vehid][vehLoadType] == 7)
	    return SendErrorMessage(playerid, "Este forklift ya tiene una caja encima.");

	if (!IsPlayerInRangeOfPoint(playerid, 5.0, 1260.3976, -20.0215, 1001.0234))
	    return SendErrorMessage(playerid, "Tienes que estar mas cerca de las cajas.");

	if (PlayerData[playerid][pLoading])
	    return SendErrorMessage(playerid, "Ya estas cargando una caja en este momento.");

	PlayerData[playerid][pLoading] = 1;

	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Cargando caja...", 3200, 3);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s mueve el forklift hacia la caja.", ReturnName(playerid, 0));

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("ForkliftUpdate", 3000, false, "dd", playerid, vehid);
	return 1;
}

CMD:minar(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_MINER)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	if (!IsPlayerNearMine(playerid))
	    return SendErrorMessage(playerid, "Tienes que estar cerca de la mina.");

	if (PlayerData[playerid][pMining])
	{
	    PlayerData[playerid][pMining] = false;
	    PlayerData[playerid][pMineCount] = 0;

		RemovePlayerAttachedObject(playerid, 4);
	    SendServerMessage(playerid, "Has terminado tu trabajo de minero.");
	}
	else
	{
	    PlayerData[playerid][pMining] = true;
        PlayerData[playerid][pMineCount] = 0;

	    SendServerMessage(playerid, "Estas minando! Usa el RMB para minar.");
	    SetPlayerAttachedObject(playerid, 4, 18634, 6, 0.156547, 0.039423, 0.026570, 198.109115, 6.364907, 262.997558, 1.000000, 1.000000, 1.000000);
	}
	return 1;
}

CMD:vendercomida(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_FOOD_VENDOR)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 423)
 		return SendErrorMessage(playerid, "No estas dentro de un camion de comida.");

	static
	    userid,
	    food[24],
	    price;

	if (sscanf(params, "us[24]d", userid, food, price))
	{
	    SendSyntaxMessage(playerid, "/vendercomida [playerid/nombre] [comida] [precio]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[COMIDAS]:{FFFFFF} agua, gaseosa, hamburguesa, pizza, pollo");
	    return 1;
	}
	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 7.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o esta muy lejos.");

	if (price < 1 || price > 20)
	    return SendErrorMessage(playerid, "El precio no puede ser mas bajo que $1 o mayor que $20.");

	if (!strcmp(food, "agua", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 1;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s te ofrecio algo de agua por $%d (escribe \"/aceptar comida\" para aceptar).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Has ofrecido algo de agua a %s por $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "gaseosa", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 2;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s te ofrecio una gaseosa por $%d (escribe \"/aceptar comida\" para aceptar).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Has ofrecido una gaseosa a %s por $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "hamburguesa", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 3;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s te ofrecio una hamburguesa por $%d (escribe \"/aceptar comida\" para aceptar).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Has ofrecido una hamburguesa a %s por $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "pizza", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 4;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s te ofrecio una porcion de pizza por $%d (escribe \"/aceptar comida\" para aceptar).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Has ofrecido una porcion de pizza a %s por $%d.", ReturnName(userid, 0), price);
	}
	else if (!strcmp(food, "pollo", true))
	{
	    PlayerData[userid][pFoodSeller] = playerid;
	    PlayerData[userid][pFoodType] = 5;
	    PlayerData[userid][pFoodPrice] = price;

		SendServerMessage(userid, "%s te ofrecio algo de pollo por $%d (escribe \"/aceptar comida\" para aceptar).", ReturnName(playerid, 0), price);
		SendServerMessage(playerid, "Has ofrecido algo de pollo a %s por $%d.", ReturnName(userid, 0), price);
	}
	return 1;
}

CMD:crearcaja(playerid, params[])
{
	static
	    id = -1,
		type;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/crearcaja [tipo]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Blancas | 2: Partes Pistolas | 3: Partes de SMG | 4: Escopetas | 5: Rifles | 6: Drogas");
		return 1;
	}
	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipo de caja invalido. Numeros entre 1 y 6.");

	id = Crate_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego a su limite de cajas.");

	SendServerMessage(playerid, "Has creado la caja ID: %d.", id);
	return 1;
}

CMD:borrarcaja(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarcaja [id de caja]");

	if ((id < 0 || id >= MAX_CRATES) || !CrateData[id][crateExists])
	    return SendErrorMessage(playerid, "ID de caja invalida.");

	Crate_Delete(id);
	SendServerMessage(playerid, "Has borrado la caja ID: %d.", id);
	return 1;
}

CMD:cajas(playerid, params[])
{
	static
	    string[512];

	string[0] = '\0';

	for (new i = 1; i != MAX_VEHICLES; i ++) if (IsLoadableVehicle(i) && IsPlayerNearBoot(playerid, i))
	{
	    if (GetVehicleCrates(i) < 1)
	        return SendErrorMessage(playerid, "No hay cajas en este vehiculo.");

		for (new j = 0; j != MAX_CRATES; j ++) if (CrateData[j][crateExists] && CrateData[j][crateVehicle] == i) {
			format(string, sizeof(string), "%sCaja #%d: %s Partes\n", string, j, Crate_GetType(CrateData[j][crateType]));
		}
		PlayerData[playerid][pCrateVehicle] = i;
		return Dialog_Show(playerid, Crates, DIALOG_STYLE_LIST, "Cajas", string, "Tomar", "Cancelar");
	}
	SendErrorMessage(playerid, "No estas cerca de ningun vehiculo que se pueda cargar.");
	return 1;
}

CMD:crearpartes(playerid, params[])
{
	new id = -1;

	if (PlayerData[playerid][pJob] != JOB_WEAPON_SMUGGLER)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

    if ((id = Job_NearestPoint(playerid)) == -1 || JobData[id][jobType] != JOB_WEAPON_SMUGGLER)
		return SendErrorMessage(playerid, "No estas cerca de la fabrica de armas.");

	if (PlayerData[playerid][pCarryCrate] == -1)
	    return SendErrorMessage(playerid, "No estas llevando ninguna caja.");

	if (PlayerData[playerid][pCrafting])
	    return SendErrorMessage(playerid, "Ya estas creando partes de armas.");

	if (CrateData[PlayerData[playerid][pCarryCrate]][crateType] < 1 || CrateData[PlayerData[playerid][pCarryCrate]][crateType] > 5)
	    return SendErrorMessage(playerid, "No hay partes de armas en esta caja.");

    PlayerData[playerid][pCrafting] = 1;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s empieza a crear sus partes de %s.", ReturnName(playerid, 0), Crate_GetType(CrateData[PlayerData[playerid][pCarryCrate]][crateType]));
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Crafting parts...", 11000, 3);

	TogglePlayerControllable(playerid, 0);
	SetTimerEx("CraftParts", 8000, false, "dd", playerid, PlayerData[playerid][pCarryCrate]);
	return 1;
}

CMD:abrircaja(playerid, params[])
{
	new id = Crate_Nearest(playerid);

	if (id == -1 || CrateData[id][crateType] != 6)
	    return SendErrorMessage(playerid, "No estas cerca de ninguna caja de droga.");

	if (!Inventory_HasItem(playerid, "Palanca"))
		return SendErrorMessage(playerid, "Necesitas una palanca para abrir esta caja.");

	if (PlayerData[playerid][pOpeningCrate])
	    return SendErrorMessage(playerid, "Ya estas abriendo una caja.");

	PlayerData[playerid][pOpeningCrate] = 1;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca una palanca y la usa para abrir la caja.", ReturnName(playerid, 0));
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Abriendo caja...", 3000, 3);

 	TogglePlayerControllable(playerid, 0);
  	ApplyAnimation(playerid, "BASEBALL", "Bat_4", 4.0, 1, 1, 1, 1, 0, 1);

	SetTimerEx("OpenCrate", 3000, false, "dd", playerid, id);
    return 1;
}

CMD:plantar(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/plantar [marihuana/coca/opio]");

	if (Plant_Nearest(playerid) != -1)
	    return SendErrorMessage(playerid, "No puedes plantar cerca de otras plantas.");

	if (!strcmp(params, "marihuana", true))
	{
	    if (Inventory_Count(playerid, "Semillas de Maria") < 3)
	        return SendErrorMessage(playerid, "Necesitas al menos 3 semillas de marihuana.");

		Inventory_Remove(playerid, "Semillas de Maria", 3);

		Plant_Create(playerid, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s planta unas semillas de marihuana.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "coca", true))
	{
	    if (Inventory_Count(playerid, "Semillas de Coca") < 4)
	        return SendErrorMessage(playerid, "Necesitas al menos 4 semillas de coca.");

		Inventory_Remove(playerid, "Semillas de Coca", 4);

		Plant_Create(playerid, 2);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s planta unas semillas de coca.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "opio", true))
	{
	    if (Inventory_Count(playerid, "Semillas de Opio") < 5)
	        return SendErrorMessage(playerid, "Necesitas al menos 5 semillas de opio.");

		Inventory_Remove(playerid, "Semillas de Opio", 5);

		Plant_Create(playerid, 3);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s planta unas semillas de opio.", ReturnName(playerid, 0));
	}
	else {
	    SendSyntaxMessage(playerid, "/plantar [marihuana/coca/opio]");
	}
	return 1;
}

CMD:cosechar(playerid, params[])
{
	new id = Plant_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Tienes que estar cerca de una planta de droga.");

	if (PlantData[id][plantDrugs] < Plant_MaxGrams(PlantData[id][plantType]))
	    return SendErrorMessage(playerid, "Esta planta no esta del todo crecida.");

	if (GetPlayerSpecialAction(playerid) != SPECIAL_ACTION_DUCK)
	    return SendErrorMessage(playerid, "Tienes que estar agachado para cosechar una planta.");

	if (PlayerData[playerid][pHarvesting])
	    return SendErrorMessage(playerid, "Ya estas cosechando una planta.");

	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Cosechando planta...", 3100, 3);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s empieza a cosechar su planta de droga.", ReturnName(playerid, 0));

	PlayerData[playerid][pHarvesting] = 1;
	SetTimerEx("HarvestPlant", 3000, false, "dd", playerid, id);
	return 1;
}

CMD:crearfaccion(playerid, params[])
{
	static
	    id = -1,
		type,
		name[32];

    if (PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ds[32]", type, name))
	{
	    SendSyntaxMessage(playerid, "/crearfaccion [tipo] [nombre]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Policia | 2: Noticias | 3: Medicos | 4: Gobierno | 5: Ilegal | 6: Mecanicos");
		return 1;
	}
	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipo de faccion invalido. Numeros entre 1 y 6.");

	id = Faction_Create(name, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de facciones.");

	SendServerMessage(playerid, "Has creado la faccion ID: %d.", id);
	return 1;
}

CMD:borrarfaccion(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarfaccion [id faccion]");

	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendErrorMessage(playerid, "ID de faccion invalida.");

	Faction_Delete(id);
	SendServerMessage(playerid, "Has creado la faccion ID: %d.", id);
	return 1;
}

CMD:abrir(playerid, params[])
{
	new id = Gate_Nearest(playerid);

	if (id != -1)
	{
		if (strlen(GateData[id][gatePass]))
		{
		    Dialog_Show(playerid, GatePass, DIALOG_STYLE_INPUT, "Escribe la Contraseña", "Escribe la contraseña para el portón:", "Aceptar", "Cancelar");
		}
		else
		{
		    if (GateData[id][gateFaction] != -1 && PlayerData[playerid][pFaction] != GetFactionByID(GateData[id][gateFaction]))
				return SendErrorMessage(playerid, "No puedes abrir este portón.");

			Gate_Operate(id);

			switch (GateData[id][gateOpened])
			{
			    case 0:
				    ShowPlayerFooter(playerid, "Has ~r~cerrado~w~ el porton!");

                case 1:
				    ShowPlayerFooter(playerid, "Has ~g~abierto~w~ el porton!");
			}
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][0]))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE)
	        return SendErrorMessage(playerid, "Tienes que ser parte de la policia para abrir esta puerta.");

	    if (!PrisonData[prisonDoorOpened][0])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][0], 0.0, 0.0, -90.0);

			PrisonData[prisonDoorOpened][0] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su llave y abre la puerta de la prision.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][0], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][0] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su llave y cierra la puerta de la prision.", ReturnName(playerid, 0));
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][1]))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE)
	        return SendErrorMessage(playerid, "Tienes que ser parte de la policia para abrir esta puerta.");

	    if (!PrisonData[prisonDoorOpened][1])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][1], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][1] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su llave y abre la puerta de la prision.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][1], 0.0, 0.0, 90.0);

			PrisonData[prisonDoorOpened][1] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su llave y cierra la puerta de la prision.", ReturnName(playerid, 0));
		}
	}
	else if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonDoors][2]))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE)
	        return SendErrorMessage(playerid, "Tienes que ser parte de la policia para abrir esta puerta.");

	    if (!PrisonData[prisonDoorOpened][2])
		{
			SetDynamicObjectRot(PrisonData[prisonDoors][2], 0.0, 0.0, -90.0);

			PrisonData[prisonDoorOpened][2] = true;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su llave y abre la puerta de la prision.", ReturnName(playerid, 0));
		}
		else
		{
		    SetDynamicObjectRot(PrisonData[prisonDoors][2], 0.0, 0.0, 0.0);

			PrisonData[prisonDoorOpened][2] = false;
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su llave y cierra la puerta de la prision.", ReturnName(playerid, 0));
		}
	}
	for (new i = 0; i < 24; i ++) if (IsPlayerNearDynamicObject(playerid, PrisonData[prisonCells][i], 3.0))
	{
	    if (GetFactionType(playerid) != FACTION_POLICE)
	        return SendErrorMessage(playerid, "Tienes que ser parte de la policia para abrir esta puerta.");

		if (!PrisonData[prisonCellOpened][i])
		{
			MoveDynamicObject(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1] + 1.6, PrisonCells[i][2], 3.0);

		    PrisonData[prisonCellOpened][i] = true;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su llave y abre la celda.", ReturnName(playerid, 0));
		}
		else
		{
		    MoveDynamicObject(PrisonData[prisonCells][i], PrisonCells[i][0], PrisonCells[i][1], PrisonCells[i][2], 3.0);

		    PrisonData[prisonCellOpened][i] = false;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su llave y cierra la celda.", ReturnName(playerid, 0));
		}
		break;
	}
	return 1;
}

CMD:tirar(playerid, params[])
{
	new weaponid = 0;

    if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
    	return SendErrorMessage(playerid, "No puedes tirar ningun arma ahora.");

	if ((weaponid = GetWeapon(playerid)) == 0)
	    return SendErrorMessage(playerid, "Tienes que tener el arma en mano para tirarla.");

	if (weaponid == 23 && PlayerData[playerid][pTazer])
	    return SendErrorMessage(playerid, "No puedes tirar un Tazer.");

    if (weaponid == 25 && PlayerData[playerid][pBeanBag])
	    return SendErrorMessage(playerid, "No puedes tirar una escopeta de balas de goma.");

	static
	    Float:x,
	    Float:y,
	    Float:z,
		Float:angle;

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	x += 1.5 * floatsin(-angle, degrees);
	y += 1.5 * floatcos(-angle, degrees);

    DropItem(ReturnWeaponName(weaponid), ReturnName(playerid, 0), GetWeaponModel(weaponid), 1, x, y, z - 1, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid), weaponid, GetPlayerAmmo(playerid));
	ResetWeapon(playerid, weaponid);

    ApplyAnimation(playerid, "GRENADE", "WEAPON_throwu", 4.1, 0, 0, 0, 0, 0, 1);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca una %s y la tira al piso.", ReturnName(playerid, 0), ReturnWeaponName(weaponid));
 	Log_Write("logs/droppick.txt", "[%s] %s tiro una %s.", ReturnDate(), ReturnName(playerid, 0), ReturnWeaponName(weaponid));
	return 1;
}

CMD:facciones2(playerid, params[])
{
	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionExists]) {
	    SendClientMessageEx(playerid, COLOR_WHITE, "[ID: %d] {%06x}%s", i, FactionData[i][factionColor] >>> 8, FactionData[i][factionName]);
	}
	return 1;
}

CMD:editarfaccion(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];
	    
	if (PlayerData[playerid][pAdmin] < 5 && !PlayerData[playerid][pFactionMod])
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarfaccion [id] [name]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NAMES]:{FFFFFF} nombre, color, tipo, skins, caja, rangos, cantidadrangos, lider, taller");
		return 1;
	}
	if ((id < 0 || id >= MAX_FACTIONS) || !FactionData[id][factionExists])
	    return SendErrorMessage(playerid, "ID de faccion invalida.");

    if (!strcmp(type, "nombre", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editarfaccion [id] [nombre] [nuevo nombre]");

	    format(FactionData[id][factionName], 32, name);

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el nombre de la faccion ID: %d a \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "cantidadrangos", true))
	{
	    new ranks;

	    if (sscanf(string, "d", ranks))
	        return SendSyntaxMessage(playerid, "/editarfaccion [id] [cantidadrangos] [rangos]");

		if (ranks < 1 || ranks > 15)
		    return SendErrorMessage(playerid, "El numero no puede ser menor a 1 o mayor a 15.");

	    FactionData[id][factionRanks] = ranks;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la cantidad de rangos de la faccion ID: %d a %d.", ReturnName(playerid, 0), id, ranks);
	}
	else if (!strcmp(type, "rangos", true))
	{
	    Faction_ShowRanks(playerid, id);
	}
	else if (!strcmp(type, "color", true))
	{
	    new color;

	    if (sscanf(string, "h", color))
	        return SendSyntaxMessage(playerid, "/editarfaccion [id] [color] [color hex]");

	    FactionData[id][factionColor] = color;
	    Faction_Update(id);

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el {%06x}color{FF6347} de la faccion ID: %d.", ReturnName(playerid, 0), color >>> 8, id);
	}
	else if (!strcmp(type, "tipo", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
		 	SendSyntaxMessage(playerid, "/editarfaccion [id] [tipo] [tipo de la faccion]");
            SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Policia | 2: Noticias | 3: Medicos | 4: Gobierno | 5: Ilegal | 6: Mecanicos");
            return 1;
		}
		if (typeint < 1 || typeint > 6)
		    return SendErrorMessage(playerid, "Tipo de faccion invalido. Numeros entre 1 y 6.");

	    FactionData[id][factionType] = typeint;

	    Faction_Save(id);
		SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el tipo de la faccion ID: %d a %d.", ReturnName(playerid, 0), id, typeint);
	}
	else if (!strcmp(type, "skins", true))
	{
	    static
	        skins[8];

		for (new i = 0; i < sizeof(skins); i ++)
		    skins[i] = (FactionData[id][factionSkins][i]) ? (FactionData[id][factionSkins][i]) : (19300);

	    PlayerData[playerid][pFactionEdit] = id;
		ShowModelSelectionMenu(playerid, "Skins de Faccion", MODEL_SELECTION_SKINS, skins, sizeof(skins), -16.0, 0.0, -55.0);
	}
	else if (!strcmp(type, "caja", true))
	{
        PlayerData[playerid][pFactionEdit] = id;
		Dialog_Show(playerid, FactionLocker, DIALOG_STYLE_LIST, "Caja Fuerte de Faccion", "Localizacion\nArmas", "Seleccionar", "Cancelar");
	}
    else if (!strcmp(type, "lider", true))
    {
        new lider[32];

        if (sscanf(string, "s[32]", lider))
            return SendSyntaxMessage(playerid, "/editarfaccion [id] [lider] [nuevo lider]");

        format(FactionData[id][factionLeader], 32, lider);

        Faction_Save(id);
        SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el lider de la faccion ID: %d a \"%s\".", ReturnName(playerid, 0), id, lider);
    }
    else if (!strcmp(type, "taller", true))
	{
	    if(FactionData[id][factionType] != 6)
	        return SendErrorMessage(playerid, "Tipo de faccion incorrecto");
		GetPlayerPos(playerid, FactionData[id][factionFixPos][0], FactionData[id][factionFixPos][1], FactionData[id][factionFixPos][2]);
    	Faction_Save(id);
    	SendFactionAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la posicion del taller de la faccion ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:color(playerid, params[])
{
	static
	    color;

	if (sscanf(params, "h", color)) {
	 	SendSyntaxMessage(playerid, "/color [color hex]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[EJEMPLO]:{FFFFFF} 0xFFFFFFFF es blanco, 0xFF0000FF es rojo, etc.");
	}
	else {
	    SendClientMessageEx(playerid, color, "Este es un mensaje de prueba, probando color 0x%06xFF.", color >>> 8);
	}
	return 1;
}

CMD:trabajos(playerid, params[])
{
	Dialog_Show(playerid, JobList, DIALOG_STYLE_LIST, "Trabajos", "Camionero\nTaxista\nDescargador de Carga\nMinero\nVendedor de Alimentos\nBasurero\nClasificador de Paquetes\nContrabandista de Armas", "Seleccionar", "Cancelar");
	return 1;
}

CMD:fcaja(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Tienes que ser miembro de una faccion.");

	if (!IsNearFactionLocker(playerid))
	    return SendErrorMessage(playerid, "No estas cerca de la caja fuerte de tu faccion.");

 	if (FactionData[factionid][factionType] != FACTION_GANG)
		Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Caja Fuerte de Faccion", "Ponerse en servicio\nChaleco Blindado\nSkins\nArmas\nCargadores\nCajas de Municion", "Seleccionar", "Cancelar");

	else Dialog_Show(playerid, Locker, DIALOG_STYLE_LIST, "Caja Fuerte de Faccion", "Skins\nArmas", "Seleccionar", "Cancelar");
	return 1;
}

CMD:hacerlider(playerid, params[])
{
	static
		userid,
		id;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/hacerlider [playerid/nombre] [faccion id] (Usa -1 para quitarle la faccion)");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

    if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	    return SendErrorMessage(playerid, "ID de faccion invalida.");

	if (id == -1)
	{
	    ResetFaction(userid);

	    SendServerMessage(playerid, "Le has quitado el liderazgo de faccion a %s.", ReturnName(userid, 0));
    	SendServerMessage(userid, "%s te ha quitado tu liderazgo de faccion.", ReturnName(playerid, 0));
	}
	else
	{
		SetFaction(userid, id);
		PlayerData[userid][pFactionRank] = FactionData[id][factionRanks];

		SendServerMessage(playerid, "Le has dado lider a %s de \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
    	SendServerMessage(userid, "%s te hizo lider de \"%s\".", ReturnName(playerid, 0), FactionData[id][factionName]);
	}
    return 1;
}

CMD:hacermiembro(playerid, params[])
{
	static
		userid,
		id;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ud", userid, id))
	    return SendSyntaxMessage(playerid, "/asetfaction [playerid/nombre] [faction id] (Use -1 to unset)");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

    if ((id < -1 || id >= MAX_FACTIONS) || (id != -1 && !FactionData[id][factionExists]))
	    return SendErrorMessage(playerid, "ID de faccion invalida.");

	if (id == -1)
	{
	    ResetFaction(userid);

	    SendServerMessage(playerid, "Has quitado a %s de tu faccion.", ReturnName(userid, 0));
    	SendServerMessage(userid, "%s te ha expulsado de tu faccion.", ReturnName(playerid, 0));
	}
	else
	{
		SetFaction(userid, id);

		if (!PlayerData[userid][pFactionRank])
	    	PlayerData[userid][pFactionRank] = 1;

		SendServerMessage(playerid, "Le has dado miembro a %s en \"%s\".", ReturnName(userid, 0), FactionData[id][factionName]);
    	SendServerMessage(userid, "%s te hizo miembro de la faccion \"%s\".", ReturnName(playerid, 0), FactionData[id][factionName]);
	}
    return 1;
}

CMD:adarrango(playerid, params[])
{
	static
		userid,
		rank,
		factionid;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ud", userid, rank))
	    return SendSyntaxMessage(playerid, "/adarrango [playerid/nombre] [rango id]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if ((factionid = PlayerData[userid][pFaction]) == -1)
	    return SendErrorMessage(playerid, "Ese jugador no es miembro de ninguna faccion.");

    if (rank < 1 || rank > FactionData[factionid][factionRanks])
        return SendErrorMessage(playerid, "Rango invalido. Los rangos de esta faccion son entre el 1 y el %d.", FactionData[factionid][factionRanks]);

	PlayerData[userid][pFactionRank] = rank;

	SendServerMessage(playerid, "Has cambiado el rango de miembro de faccion de %s a %d.", ReturnName(userid, 0), rank);
    SendServerMessage(userid, "%s te cambio tu rango de faccion a %d.", ReturnName(playerid, 0), rank);

    return 1;
}

CMD:fmiembros(playerid, params[])
{
	new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "Tienes que ser miembro de faccion.");

	SendClientMessage(playerid, COLOR_SERVER, "Miembros Conectados:");

	foreach (new i : Player) if (PlayerData[i][pFaction] == factionid) {
		SendClientMessageEx(playerid, COLOR_WHITE, "[ID: %d] %s - %s (%d)", i, ReturnName(i, 0), Faction_GetRank(i), PlayerData[i][pFactionRank]);
	}
	return 1;
}

CMD:fac(playerid, params[])
{
    new factionid = PlayerData[playerid][pFaction];

 	if (factionid == -1)
	    return SendErrorMessage(playerid, "No estas en una faccion.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(f)ac [mensaje]");

    if (PlayerData[playerid][pDisableFaction])
	    return SendErrorMessage(playerid, "El chat de faccion esta deshabilitado.");
	if (factionid >= 0)
	{
		SendFactionMessage(factionid, COLOR_FACTION, "(( (%d) %s %s: %s ))", PlayerData[playerid][pFactionRank], Faction_GetRank(playerid), ReturnName(playerid, 0), params);
		Log_Write("logs/faction_chat.txt", "[%s] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
		return 1;
	}
	return 1;
}

CMD:fsalir(playerid, params[])
{
	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Tienes que ser miembro de una faccion.");

	if (GetFactionType(playerid) == FACTION_POLICE)
	{
	    SetPlayerArmour(playerid, 0);
	    ResetWeapons(playerid);
	}
	SendServerMessage(playerid, "Has abandonado la faccion \"%s\" (rango %d).", Faction_GetName(playerid), PlayerData[playerid][pFactionRank]);
    ResetFaction(playerid);

    return 1;
}

CMD:fcontratar(playerid, params[])
{
	new
	    userid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Tienes que ser miembro de una faccion.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Tienes que ser al menos rango %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/contratar [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado.");

	if (PlayerData[userid][pFaction] == PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "Ese jugador ya es miembro de tu faccion.");

    if (PlayerData[userid][pFaction] != -1)
	    return SendErrorMessage(playerid, "Ese jugador es miembro de otra faccion.");

	PlayerData[userid][pFactionOffer] = playerid;
    PlayerData[userid][pFactionOffered] = PlayerData[playerid][pFaction];

    SendServerMessage(playerid, "Le has dado un contrato a %s para unirse a \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
    SendServerMessage(userid, "%s te dio un contrato para unirte a \"%s\" (escribe \"/aceptar faccion\").", ReturnName(playerid, 0), Faction_GetName(playerid));

	return 1;
}

CMD:fexpulsar(playerid, params[])
{
    new
	    userid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Tienes que ser miembro de una faccion.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Tienes que ser al menos rango %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/fexpulsar [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado.");

	if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "Ese jugador no es parte de tu faccion.");

    SendServerMessage(playerid, "Has espulsado a %s de \"%s\".", ReturnName(userid, 0), Faction_GetName(playerid));
    SendServerMessage(userid, "%s te expulso de la faccion \"%s\".", ReturnName(playerid, 0), Faction_GetName(playerid));

    ResetFaction(userid);

	return 1;
}

CMD:fdarrango(playerid, params[])
{
    new
	    userid,
		rankid;

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Tienes que ser miembro de una faccion.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Tienes que ser al menos rango %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	if (sscanf(params, "ud", userid, rankid))
	    return SendSyntaxMessage(playerid, "/fdarrango [playerid/nombre] [rango (1-%d)]", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "No puedes cambiar tu propio rango.");

	if (PlayerData[userid][pFaction] != PlayerData[playerid][pFaction])
	    return SendErrorMessage(playerid, "Ese jugador no es parte de tu faccion.");

	if (rankid < 0 || rankid > FactionData[PlayerData[playerid][pFaction]][factionRanks])
	    return SendErrorMessage(playerid, "Rango invalido, los rangos son entre el 1 y el %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);

	PlayerData[userid][pFactionRank] = rankid;

    SendServerMessage(playerid, "A %s le cambiaste el rango a %s (%d).", ReturnName(userid, 0), Faction_GetRank(userid), rankid);
    SendServerMessage(userid, "%s te cambio el rango de faccion a %s (%d).", ReturnName(playerid, 0), Faction_GetRank(userid), rankid);

	return 1;
}

CMD:puntodespawn(playerid, params[])
{
	new point;
	if(sscanf(params, "i", point)) return SendErrorMessage(playerid, "/spawnpoint [0-2] (0 = Unity, 1 = Faccion, 2 = Ultima Conexion)");
	if(point == 0)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Cambiaste tu punto de spawn a Unity.");
		PlayerData[playerid][pSpawnPoint] = 0;
		return 1;
	}
	if(point == 1)
	{
	    if(PlayerData[playerid][pFactionID] == -1)
	    {
	        SendErrorMessage(playerid, "No eres parte de una faccion.");
	        return 1;
		}
		SendClientMessage(playerid, COLOR_WHITE, "Has cambiado tu punto de spawn a tu faccion.");
		PlayerData[playerid][pSpawnPoint] = 1;
		return 1;
	}
	if(point == 2)
	{
	    SendClientMessage(playerid, COLOR_WHITE, "Has cambiado tu punto de spawn a tu ultimo lugar de conexion.");
		PlayerData[playerid][pSpawnPoint] = 2;
		return 1;
	}
	return 1;
}
CMD:fspawn(playerid, params[])
{
	new faction = PlayerData[playerid][pFactionID];

	if (PlayerData[playerid][pFaction] == -1)
	    return SendErrorMessage(playerid, "Tienes que ser lider de una faccion.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks])
	    return SendErrorMessage(playerid, "Tienes que ser al menos rango %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks]);
	new Float:X, Float:Y, Float:Z;
	GetPlayerPos(playerid, X, Y, Z);
	FactionData[faction][SpawnX] = X;
	FactionData[faction][SpawnY] = Y;
	FactionData[faction][SpawnZ] = Z;
	FactionData[faction][SpawnInterior] = GetPlayerInterior(playerid);
	FactionData[faction][SpawnVW] = GetPlayerVirtualWorld(playerid);
	Faction_Save(faction);
	SendServerMessage(playerid, "Has cambiado el punto de spawn de tu faccion (/puntodespawn para cambiar el tuyo).");
	return 1;
}

CMD:tazer(playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "No puedes usar este comando ahora.");

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser policia.");

	if (!PlayerData[playerid][pTazer])
	{
	    PlayerData[playerid][pTazer] = 1;
	    GetPlayerWeaponData(playerid, 2, PlayerData[playerid][pGuns][2], PlayerData[playerid][pAmmo][2]);

		GivePlayerWeapon(playerid, 23, 20000);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su tazer de su cinturon.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[playerid][pTazer] = 0;
		SetWeapons(playerid);

		SetPlayerArmedWeapon(playerid, PlayerData[playerid][pGuns][2]);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s deja su tazer en su cinturon.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:balasgoma(playerid, params[])
{
	if (GetPlayerState(playerid) != PLAYER_STATE_ONFOOT || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "No puedes usar este comando ahora.");

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser policia.");

	if (!PlayerData[playerid][pBeanBag])
	{
	    PlayerData[playerid][pBeanBag] = 1;
	    GetPlayerWeaponData(playerid, 3, PlayerData[playerid][pGuns][3], PlayerData[playerid][pAmmo][3]);

		GivePlayerWeapon(playerid, 25, 20000);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su escopeta de balas de goma.", ReturnName(playerid, 0));
	}
	else
	{
	    PlayerData[playerid][pBeanBag] = 0;
		SetWeapons(playerid);

		SetPlayerArmedWeapon(playerid, PlayerData[playerid][pGuns][3]);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s deja su escopeta de balas de goma.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:esposar(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser policia.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/esposar [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "No puedes esposarte a ti mismo.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Tienes que estar cerca del jugador.");

    if (PlayerData[userid][pStunned] < 0 && GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP && !IsPlayerIdle(userid))
	    return SendErrorMessage(playerid, "El jugador esta AFK o congelado.");

	if (GetPlayerSpecialAction(userid) != SPECIAL_ACTION_HANDSUP)
	    return SendErrorMessage(playerid, "El jugador tiene que estar rendido (/rendirse).");

    if (PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "The player is already cuffed at the moment.");

	static
	    string[64];

	if (PlayerData[userid][pDrinking])
	{
        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

		DestroyPlayerProgressBar(playerid, PlayerData[playerid][pDrinkBar]);
		PlayerData[userid][pDrinking] = 0;
	}
	if (PlayerData[userid][pHoldWeapon] > 0)
	{
	    HoldWeapon(userid, 0);
	}
    PlayerData[userid][pCuffed] = 1;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_CUFFED);

	format(string, sizeof(string), "Has sido ~r~esposado~w~ por %s.", ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca unas esposas y las ajusta en las manos de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:desesposar(playerid, params[])
{
    new
	    userid;

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser policia.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/desesposar [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "No puedes quitarte las esposas a vos mismo.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Tienes que estar cerca de ese jugador.");

    if (!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "El jugador no esta esposado.");

	static
	    string[64];

    PlayerData[userid][pCuffed] = 0;
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

	format(string, sizeof(string), "Has sido ~g~desesposado~w~ por %s.", ReturnName(playerid, 0));
    ShowPlayerFooter(userid, string);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s desajusta las esopsas en las manos de %s y las guarda.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:arrastrar(playerid, params[])
{
	new
	    userid;

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/arrastrar [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador esta desconetado.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "No puedes arrastrarte a ti mismo.");

	if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Tienes que estar cerca de ese jugador.");

    if (!PlayerData[userid][pCuffed] && !PlayerData[userid][pStunned])
        return SendErrorMessage(playerid, "El jugador no esta esposado o congelado.");

	if (PlayerData[userid][pDragged])
	{
	    PlayerData[userid][pDragged] = 0;
	    PlayerData[userid][pDraggedBy] = INVALID_PLAYER_ID;

	    KillTimer(PlayerData[userid][pDragTimer]);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s suelta a %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
	    PlayerData[userid][pDragged] = 1;
	    PlayerData[userid][pDraggedBy] = playerid;

	    PlayerData[userid][pDragTimer] = SetTimerEx("DragUpdate", 200, true, "dd", playerid, userid);
	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s agarra a %s y lo arrastra.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	return 1;
}

CMD:detener(playerid, params[])
{
	new
		userid,
		vehicleid = GetNearestVehicle(playerid);

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser policia.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/detener [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado.");

    if (userid == playerid)
	    return SendErrorMessage(playerid, "No te puedes detener a ti mismo.");

    if (!IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Tienes que estar cerca de un jugador.");

    if (!PlayerData[userid][pCuffed])
        return SendErrorMessage(playerid, "El jugador no esta esposado.");

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "No estas cerca de ningun vehiculo.");

	if (GetVehicleMaxSeats(vehicleid) < 2)
  	    return SendErrorMessage(playerid, "No puedes detener a un jugador en este vehiculo.");

	if (IsPlayerInVehicle(userid, vehicleid))
	{
		TogglePlayerControllable(userid, 1);

		RemoveFromVehicle(userid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre la puerta y empuja a %s del vehiculo.", ReturnName(playerid, 0), ReturnName(userid, 0));
	}
	else
	{
		new seatid = GetAvailableSeat(vehicleid, 2);

		if (seatid == -1)
		    return SendErrorMessage(playerid, "No hay asientos disponibles.");

		new
		    string[64];

		format(string, sizeof(string), "Has sido ~r~detenido~w~ por %s.", ReturnName(playerid, 0));
		TogglePlayerControllable(userid, 0);

		StopDragging(userid);
		PutPlayerInVehicle(userid, vehicleid, seatid);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre la puerta y deja a %s dentro del vehiculo.", ReturnName(playerid, 0), ReturnName(userid, 0));
		ShowPlayerFooter(userid, string);
	}
	return 1;
}

CMD:creararresto(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	id = Arrest_Create(x, y, z, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de puntos de arresto.");

	SendServerMessage(playerid, "Has creado el punto de arresto ID: %d.", id);
	return 1;
}

CMD:borrararresto(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrararresto [punto id]");

	if ((id < 0 || id >= MAX_ARREST_POINTS) || !ArrestData[id][arrestExists])
	    return SendErrorMessage(playerid, "ID de punto de arresto invalida.");

	Arrest_Delete(id);
	SendServerMessage(playerid, "Has borrado el punto de arresto ID: %d.", id);
	return 1;
}

CMD:omd(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser policia.");

	if (!IsACruiser(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Tienes que estar dentro de un coche de patruya.");

	Dialog_Show(playerid, MainMDC, DIALOG_STYLE_LIST, "Ordenador Mobil de Datos", "Activar Ordenes\nDejar Cargos\nVer Cargos", "Seleccionar", "Cancelar");
	return 1;
}

CMD:arrestar(playerid, params[])
{
	static
	    userid,
		time;

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser policia.");

	if (sscanf(params, "ud", userid, time))
	    return SendSyntaxMessage(playerid, "/arrestar [playerid/nombre] [minutos]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "El jugador esta desconectado o no esta cerca tuyo.");

	if (time < 1 || time > 120)
	    return SendErrorMessage(playerid, "El tiempo no puede ser menor a 1 o mayor a 120.");

	if (!PlayerData[userid][pCuffed])
	    return SendErrorMessage(playerid, "El jugador tiene que estar esposado.");

	if (!IsPlayerNearArrest(playerid))
	    return SendErrorMessage(playerid, "Tienes que estar cerca de un punto de arresto.");

	PlayerData[userid][pPrisoned] = 1;
	PlayerData[userid][pJailTime] = time * 60;

	StopDragging(userid);
	SetPlayerInPrison(userid);

	ResetWeapons(userid);
	ResetPlayer(userid);

	PlayerData[userid][pWarrants] = 0;
	PlayerData[userid][pCuffed] = 0;

	PlayerTextDrawShow(userid, PlayerData[userid][pTextdraws][70]);
    SetPlayerSpecialAction(userid, SPECIAL_ACTION_NONE);

    SendClientMessageToAllEx(COLOR_LIGHTRED, "[PRISION] %s fue enviado a prision por %d dias en la Prision de San Andreas.", ReturnName(userid, 0), time);
    return 1;
}

CMD:confiscarplanta(playerid, params[])
{
	static
	    plantid;

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser policia.");

	if ((plantid = Plant_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "No estas cerca de ninguna planta de droga.");

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s confisco una planta de %s, pesando %d gramos.", ReturnName(playerid, 0), Plant_GetType(PlantData[plantid][plantType]), PlantData[plantid][plantDrugs]);
	Plant_Delete(plantid);
	return 1;
}

CMD:morir(playerid, params[])
{
	if (!PlayerData[playerid][pInjured])
	    return SendErrorMessage(playerid, "No estas herido.");

	SetPlayerHealth(playerid, 0.0);
	SendServerMessage(playerid, "Has aceptado tu muerte.");
	return 1;
}

CMD:cargarherido(playerid, params[])
{
	static
	    userid,
		seatid;

	if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "Tienes que ser parte de una faccion de medicos.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/cargarherido [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 10.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "No puedes cargarte a ti mismo a una ambulancia.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "Ese jugador no esta herido.");

	for (new i = 0; i != MAX_VEHICLES; i ++) if (IsPlayerNearBoot(playerid, i) && GetVehicleModel(i) == 416)
	{
	    seatid = GetAvailableSeat(i, 2);

	    if (seatid == -1)
	        return SendErrorMessage(playerid, "No hay espacio para el paciente.");

		ClearAnimations(userid);
		PlayerData[userid][pInjured] = 2;

		PutPlayerInVehicle(userid, i, seatid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre la ambulancia y carga a %s en la camilla.", ReturnName(playerid, 0), ReturnName(userid, 0));

		TogglePlayerControllable(userid, 0);
		SetPlayerHealth(userid, 100.0);
		return 1;
	}
	SendErrorMessage(playerid, "Tienes que estar cerca de una ambulancia.");
	return 1;
}

CMD:dejarpaciente(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "Tienes que ser parte de una faccion de medicos.");

    if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/dejarherido [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerInVehicle(playerid, GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "No puedes llevarte a ti mismo al hospital.");

	if (!PlayerData[userid][pInjured])
	    return SendErrorMessage(playerid, "Ese jugador no esta herido.");

	for (new i = 0; i < sizeof(arrHospitalDeliver); i ++) if (IsPlayerInRangeOfPoint(playerid, 5.0, arrHospitalDeliver[i][0], arrHospitalDeliver[i][1], arrHospitalDeliver[i][2]))
	{
	    ClearAnimations(userid);

	    SetPlayerInterior(userid, 3);
	    SendServerMessage(playerid, "Has dejado a %s en el hospital.", ReturnName(userid, 0));

	    SetPlayerPos(userid, -204.5867, -1740.7955, 675.7687);
    	SetPlayerFacingAngle(userid, 0.0000);

		TogglePlayerControllable(userid, 1);
  		SetCameraBehindPlayer(userid);

		SetPlayerVirtualWorld(userid, i + 5000);
  		PlayerData[userid][pHospitalInt] = i;

	  	PlayerData[userid][pHospital] = -1;
    	PlayerData[userid][pHospitalTime] = 0;

    	SendServerMessage(userid, "Te has recuperado en el hospital mas cercano.");

		GameTextForPlayer(userid, " ", 1, 3);
  		ShowHungerTextdraw(userid, 1);

  		PlayerData[userid][pInjured] = 0;
		TextDrawHideForPlayer(userid, gServerTextdraws[2]);
		return 1;
	}
	SendErrorMessage(playerid, "Tienes que estar cerca del punto de entrega de un hospital.");
	return 1;
}

CMD:m(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "No puedes usar el megafono.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(m)egafono [mensaje]");

	if (strlen(params) > 64) {
	    SendNearbyMessage(playerid, 40.0, COLOR_YELLOW, "(Megafono) %s dice: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 40.0, COLOR_YELLOW, "...%s", params[64]);
	}
	else {
	    SendNearbyMessage(playerid, 40.0, COLOR_YELLOW, "(Megafono) %s dice: %s", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:ponervenda(playerid, params[])
{
    static
	    userid;

	if (GetFactionType(playerid) != FACTION_MEDIC)
	    return SendErrorMessage(playerid, "Tienes que ser parte de una faccion de medicos.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/ponervenda [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "No puedes usar este comando con vos mismo.");

	if (PlayerData[userid][pFirstAid])
	    return SendErrorMessage(playerid, "Ese jugador ya esta siendo vendado.");

    if (ReturnHealth(userid) > 99)
	    return SendErrorMessage(playerid, "Ese jugador no necesita ser vendado.");

    PlayerData[userid][pFirstAid] = true;
    PlayerData[userid][pAidTimer] = SetTimerEx("FirstAidUpdate", 1000, true, "d", userid);

    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s abre un kit de primeros auxilios y le coloca una venda a %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
    return 1;
}

CMD:transmitir(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Tienes que ser parte de una faccion de noticias.");

	if (!IsNewsVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Tienes que estar dentro de un vehiculo de noticias (Camioneta o Helicoptero).");

	if (!PlayerData[playerid][pBroadcast])
	{
	    PlayerData[playerid][pBroadcast] = true;

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s inicio una transmision.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Has iniciado una transmision (usa \"/tm [texto]\" para transmitir).");
	}
	else
	{
	    PlayerData[playerid][pBroadcast] = false;

		foreach (new i : Player) if (PlayerData[i][pNewsGuest] == playerid) {
		    PlayerData[i][pNewsGuest] = INVALID_PLAYER_ID;
		}
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s termino una transmision.", ReturnName(playerid, 0));
	    SendServerMessage(playerid, "Has terminado tu transmision.");
	}
	return 1;
}

CMD:tm(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Tienes que ser parte de una faccion de noticias.");

    if (isnull(params))
	    return SendSyntaxMessage(playerid, "/tm [texto a transmitir]");

	if (!IsNewsVehicle(GetPlayerVehicleID(playerid)))
	    return SendErrorMessage(playerid, "Tienes que estar dentro de un vehiculo de noticias (Camioneta o Helicoptero).");

	if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "Tienes que estar transmitiendo para usar este comando.");

	if (strlen(params) > 64) {
	    foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
		    SendClientMessageEx(i, COLOR_LIGHTGREEN, "[LSTV] Reportero %s: %.64s", ReturnName(playerid, 0), params);
		    SendClientMessageEx(i, COLOR_LIGHTGREEN, "...%s", params[64]);
		}
	}
	else {
        foreach (new i : Player) if (!PlayerData[i][pDisableBC]) {
		    SendClientMessageEx(i, COLOR_LIGHTGREEN, "[LSTV] Reportero %s: %s", ReturnName(playerid, 0), params);
		}
	}
	return 1;
}

CMD:agregarinvitado(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Tienes que ser parte de una faccion de noticias.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/agregarinvitado [playerid/nombre]");

    if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "Tienes que estar transmitiendo para usar este comando.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

 	if (userid == playerid)
		return SendErrorMessage(playerid, "No puedes invitarte a ti mismo.");

	if (PlayerData[userid][pNewsGuest] == playerid)
	    return SendErrorMessage(playerid, "Ya estas en una transmision con ese jugador.");

	if (PlayerData[userid][pNewsGuest] != INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador ya es parte de otra transmision.");

	PlayerData[userid][pNewsGuest] = playerid;

	SendServerMessage(playerid, "Has agregado a %s como invitado.", ReturnName(userid, 0));
	SendServerMessage(userid, "%s te ha agregado como invitado de una transmision.", ReturnName(userid, 0));
	return 1;
}

CMD:quitarinvitado(playerid, params[])
{
	static
	    userid;

    if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Tienes que ser parte de una faccion de noticias.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/quitarinvitado [playerid/nombre]");

    if (!PlayerData[playerid][pBroadcast])
	    return SendErrorMessage(playerid, "Tienes que estar transmitiendo para usar este comando.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

 	if (userid == playerid)
		return SendErrorMessage(playerid, "No puedes quitarte a ti mismo de invitado de una transmision.");

	if (PlayerData[userid][pNewsGuest] != playerid)
	    return SendErrorMessage(playerid, "Ese jugador no es un invitado de tu transmision.");

	PlayerData[userid][pNewsGuest] = INVALID_PLAYER_ID;

	SendServerMessage(playerid, "Has quitado a %s de tu transmision.", ReturnName(userid, 0));
	SendServerMessage(userid, "%s te quito de su transmision.", ReturnName(userid, 0));
	return 1;
}

CMD:pagar(playerid, params[])
{
	static
	    userid,
	    amount;

	if (sscanf(params, "ud", userid, amount))
	    return SendSyntaxMessage(playerid, "/pagar [playerid/nombre] [cantidad]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "No puedes darte dinero a ti mismo.");

	if (amount < 1)
	    return SendErrorMessage(playerid, "Please specify an amount above 1 dollar.");

	if (amount > 100 && PlayerData[playerid][pPlayingHours] < 2)
	    return SendErrorMessage(playerid, "No puedes pagar mas de 100 sin tener mas de 2 horas jugadas.");

	if (amount > GetMoney(playerid))
	    return SendErrorMessage(playerid, "No tienes esa cantidad de dinero.");

	static
	    string[72];

	GiveMoney(playerid, -amount);
	GiveMoney(userid, amount);

	format(string, sizeof(string), "Has recibido ~g~%s~w~ de parte de %s.", FormatNumber(amount), ReturnName(playerid, 0));
	ShowPlayerFooter(userid, string);

	format(string, sizeof(string), "Le has dado ~r~%s~w~ a %s.", FormatNumber(amount), ReturnName(userid, 0));
	ShowPlayerFooter(playerid, string);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca $%s de su billetera y se lo da a %s.", ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));
	Log_Write("logs/pay_log.txt", "[%s] %s (%s) pago %s a %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], FormatNumber(amount), ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

/*CMD:radio(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be a civil service worker.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/(r)adio [radio text]");

	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "[RADIO] %s %s: %s", Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	SendNearbyMessage(playerid, 5.0, COLOR_WHITE, "[RADIO] %s: %s", ReturnName(playerid, 0), params);
	Log_Write("logs/faction_chat.txt", "[%s][Radio] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}*/
CMD:facciones(playerid, params[])
{
	ViewFactions(playerid);
	return 1;
}
CMD:d(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_MEDIC && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Tienes que ser parte de una faccion legal.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/d [radio de departamentos]");

	for (new i = 0; i != MAX_FACTIONS; i ++) if (FactionData[i][factionType] == FACTION_POLICE || FactionData[i][factionType] == FACTION_MEDIC || FactionData[i][factionType] == FACTION_GOV) {
		SendFactionMessage(i, COLOR_DEPARTMENT, "[%s] %s %s: %s", GetInitials(Faction_GetName(playerid)), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	}
	Log_Write("logs/faction_chat.txt", "[%s] [/d] %s %s: %s", ReturnDate(), Faction_GetRank(playerid), ReturnName(playerid, 0), params);
	return 1;
}

CMD:gps(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Aparato GPS"))
	    return SendErrorMessage(playerid, "Tienes que tener un GPS para hacer esto.");

	if (PlayerData[playerid][pInjured] || PlayerData[playerid][pLoading] > 0 || PlayerData[playerid][pUnloading] != -1 || PlayerData[playerid][pDeliverShipment] > 0)
	    return SendErrorMessage(playerid, "No puedes usar este comando en este momento.");

	Dialog_Show(playerid, MainGPS, DIALOG_STYLE_LIST, "Sistema GPS", "Encontrar Casa\nEncontrar Negocio\nEncontrar Entrada\nEncontrar Trabajo\nLocalizaciones Personalizadas", "Seleccionar", "Cancelar");
	return 1;
}

CMD:llenar(playerid, params[])
{
	new vehicleid = GetNearestVehicle(playerid);

	if (IsPlayerInAnyVehicle(playerid) || vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "No estas cerca de ningun vehiculo.");

	if (!Inventory_HasItem(playerid, "Lata de Combustible"))
	    return SendErrorMessage(playerid, "No tienes ninguna lata de combustible.");

	if (GetEngineStatus(vehicleid))
	    return SendErrorMessage(playerid, "Tienes que apagar el motor primero.");

	if (CoreVehicles[vehicleid][vehFuel] > 95)
	    return SendErrorMessage(playerid, "Este vehiculo no necesita combustible.");

	if (PlayerData[playerid][pFuelCan])
	    return SendErrorMessage(playerid, "Ya estas usando una lata de combustible.");

    PlayerData[playerid][pFuelCan] = 1;

	Inventory_Remove(playerid, "Lata de Combustible");
	GameTextForPlayer(playerid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~r~Llenando Vehiculo...", 5200, 3);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s Abre una lata de combustible y llena el tanque del vehiculo.", ReturnName(playerid, 0));
	SetTimerEx("RefillUpdate", 5000, false, "dd", playerid, vehicleid);

	return 1;
}

CMD:ayudame(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/ayudame [razon]");

    if (PlayerData[playerid][pHelpTime] >= gettime())
	    return SendErrorMessage(playerid, "Tienes que esperar %d segundos antes de enviar otro pedido de ayuda.", PlayerData[playerid][pHelpTime] - gettime());

	PlayerData[playerid][pSeekHelp] = 1;
	SendTesterMessage(COLOR_CYAN, "[AYUDA]: %s (ID: %d) pregunta: \"%s\"", ReturnName(playerid, 0), playerid, params);

	PlayerData[playerid][pHelpTime] = gettime() + 15;
	SendServerMessage(playerid, "Le enviaste un pedido de ayuda al equipo de ayudantes.");
	return 1;
}

CMD:mp(playerid, params[])
{
	static
	    userid,
	    text[128];

	if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/mp [playerid/nombre] [mensaje]");

	if (PlayerData[playerid][pDisablePM])
		return SendErrorMessage(playerid, "Tienes que habilitar los mensajes privados primero.");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "No puedes enviarte mensajes privados a ti mismo.");
	if (PlayerData[playerid][pAdmin] == 0)
	{
		if (PlayerData[userid][pAdmin] == 0)
			return SendErrorMessage(playerid, "Solo puedes enviarles mensajes privados a administradores");
	}
	if (PlayerData[userid][pDisablePM])
	    return SendErrorMessage(playerid, "Ese jugador tiene los mensajes privados desactivados.");

	GameTextForPlayer(userid, "~n~~n~~n~~n~~n~~n~~n~~n~~n~~n~~y~Nuevo Mensaje!", 3000, 3);
	PlayerPlaySound(userid, 1085, 0.0, 0.0, 0.0);

	SendClientMessageEx(userid, COLOR_YELLOW, "(( MP de %s (%d): %s ))", ReturnName(playerid, 0), playerid, text);
	SendClientMessageEx(playerid, COLOR_YELLOW, "(( MP a %s (%d): %s ))", ReturnName(userid, 0), userid, text);
	return 1;
}

CMD:tog(playerid, params[])
{
	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/tog [parametro]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[PARAMETROS]:{FFFFFF} ooc, mp, faccion, ayudantes, transmision, velocimetro");
	    return 1;
	}
	if (!strcmp(params, "ooc", true))
	{
	    if (!PlayerData[playerid][pDisableOOC])
	    {
	        PlayerData[playerid][pDisableOOC] = 1;
         	SendServerMessage(playerid, "Has desactivado el chat OOC (/tog para activar).");
		}
		else
		{
  			PlayerData[playerid][pDisableOOC] = 0;
  			SendServerMessage(playerid, "Has activado el chat OOC.");
		}
	}
	else if (!strcmp(params, "mp", true))
	{
	    if (!PlayerData[playerid][pDisablePM])
	    {
			PlayerData[playerid][pDisablePM] = 1;
   			SendServerMessage(playerid, "Has desactivado los mensajes privados (/tog para activar).");
		}
		else
		{
  			PlayerData[playerid][pDisablePM] = 0;
     		SendServerMessage(playerid, "Has activado los mensajes privados.");
		}
	}
	else if (!strcmp(params, "faccion", true))
	{
	    if (PlayerData[playerid][pFaction] == -1)
	        return SendErrorMessage(playerid, "No eres parte de ninguna faccion.");

	    if (!PlayerData[playerid][pDisableFaction])
	    {
	        PlayerData[playerid][pDisableFaction] = 1;
			SendServerMessage(playerid, "Has desactivado el chat de faccion (/tog para activar).");
		}
		else
		{
  			PlayerData[playerid][pDisableFaction] = 0;
     		SendServerMessage(playerid, "Has activado el chat de faccion.");
		}
	}
	else if (!strcmp(params, "ayudantes", true))
	{
	    if (!PlayerData[playerid][pTester])
	        return SendErrorMessage(playerid, "No eres ayudante.");

	    if (!PlayerData[playerid][pDisableTester])
	    {
	        PlayerData[playerid][pDisableTester] = 1;
			SendServerMessage(playerid, "Has desactivado el chat de ayudantes (/tog para activar).");
		}
		else
		{
  			PlayerData[playerid][pDisableTester] = 0;
     		SendServerMessage(playerid, "Has activado el chat de ayudantes.");
		}
	}
	else if (!strcmp(params, "transmision", true))
	{
	    if (!PlayerData[playerid][pDisableBC])
	    {
	        PlayerData[playerid][pDisableBC] = 1;
			SendServerMessage(playerid, "Has desactivado las transmisiones de noticias (/tog para activar).");
		}
		else
		{
  			PlayerData[playerid][pDisableBC] = 0;
     		SendServerMessage(playerid, "Has activado las transmisiones de noticias.");
		}
	}
	else if (!strcmp(params, "velocimetro", true))
	{
	    if (!PlayerData[playerid][pDisableSpeedo])
	    {
	        for (new i = 34; i < 39; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    	}
	        PlayerData[playerid][pDisableSpeedo] = 1;
			SendServerMessage(playerid, "Has desactivado el velocimetro (/tog para activar).");
		}
		else
		{
		    if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsSpeedoVehicle(GetPlayerVehicleID(playerid)))
		    {
		        for (new i = 34; i < 39; i ++) {
					PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	    		}
		    }
  			PlayerData[playerid][pDisableSpeedo] = 0;
     		SendServerMessage(playerid, "Has activado el velocimetro.");
		}
	}
	return 1;
}

CMD:multar(playerid, params[])
{
	static
	    userid,
	    price,
	    reason[64];

	if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser policia.");

	if (sscanf(params, "uds[64]", userid, price, reason))
		return SendSyntaxMessage(playerid, "/multar [playerid/nombre] [precio] [razon]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "No puedes multarte a ti mismo.");

	if (price < 1 || price > 1000)
	    return SendErrorMessage(playerid, "El precio no puede ser menor a 1 o mayor a 1.000.");

	new id = Ticket_Add(userid, price, reason);

	if (id != -1) {
	    SendServerMessage(playerid, "Has escrito una multa para %s por %s, razon: %s", ReturnName(userid, 0), FormatNumber(price), reason);
	    SendServerMessage(userid, "%s te multo por %s, razon: %s", ReturnName(playerid, 0), FormatNumber(price), reason);

	    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca una multa y la escribe para %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	    Log_Write("logs/ticket_log.txt", "[%s] %s escribio una multa de %s para %s, razon: %s", ReturnDate(), ReturnName(playerid, 0), FormatNumber(price), ReturnName(userid, 0), reason);
	}
	else {
	    SendErrorMessage(playerid, "Ese jugador ya tiene %d multas.", MAX_PLAYER_TICKETS);
	}
	return 1;
}

CMD:multas(playerid, params[])
{
	static
	    string[MAX_PLAYER_TICKETS * 64];

	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 361.2687, 171.5613, 1008.3828))
	    return SendErrorMessage(playerid, "Tienes que estar en la municipalidad para pagar tus multas.");

	string[0] = 0;

	for (new i = 0; i < MAX_PLAYER_TICKETS; i ++)
	{
	    if (TicketData[playerid][i][ticketExists])
	        format(string, sizeof(string), "%s%s (%s - %s)\n", string, TicketData[playerid][i][ticketReason], FormatNumber(TicketData[playerid][i][ticketFee]), TicketData[playerid][i][ticketDate]);

		else format(string, sizeof(string), "%sSlot Vacío\n", string);
	}
	return Dialog_Show(playerid, MyTickets, DIALOG_STYLE_LIST, "Mis Multas", string, "Pagar", "Cancelar");
}

CMD:bretirar(playerid, params[])
{
	static
	    amount;

	if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "No eres parte del gobierno.");

	if (sscanf(params, "d", amount))
		return SendSyntaxMessage(playerid, "/bretirar [cantidad] (%s disponible)", FormatNumber(g_TaxVault));

	if (!IsPlayerInCityHall(playerid))
	    return SendErrorMessage(playerid, "Tienes que estar en la municipalidad para hacer esto.");

	if (amount < 1 || amount > g_TaxVault)
	    return SendErrorMessage(playerid, ".");

    if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Tienes que ser al menos rango %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	Tax_AddMoney(-amount);

	GiveMoney(playerid, amount);
	SendServerMessage(playerid, "Has retirado %s de la boveda (%s disponible).", FormatNumber(amount), FormatNumber(g_TaxVault));

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s retiro %s de la boveda del gobierno.", ReturnName(playerid, 0), FormatNumber(amount));
	Log_Write("logs/tax_vault.txt", "[%s] %s retiro %s de la boveda.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount));
	return 1;
}

CMD:bdepositar(playerid, params[])
{
	static
	    amount;

	if (GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "No eres parte del gobierno.");

	if (sscanf(params, "d", amount))
		return SendSyntaxMessage(playerid, "/bdepositar [cantidad] (%s disponible)", FormatNumber(g_TaxVault));

    if (!IsPlayerInCityHall(playerid))
	    return SendErrorMessage(playerid, "Tienes que estar en la municipalidad para hacer esto.");

	if (amount < 1 || amount > GetMoney(playerid))
	    return SendErrorMessage(playerid, "Cantidad Invalida.");

	if (PlayerData[playerid][pFactionRank] < FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1)
	    return SendErrorMessage(playerid, "Tienes que ser al menos rango %d.", FactionData[PlayerData[playerid][pFaction]][factionRanks] - 1);

	Tax_AddMoney(amount);

	GiveMoney(playerid, -amount);
	SendServerMessage(playerid, "Has depositado %s en la boveda (%s disponible).", FormatNumber(amount), FormatNumber(g_TaxVault));

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s deposito %s en la boveda del gobierno.", ReturnName(playerid, 0), FormatNumber(amount));
	Log_Write("logs/tax_vault.txt", "[%s] %s deposito %s en la boveda del gobierno.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount));
	return 1;
}

CMD:spike(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "No eres un oficial de policia.");

	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/spike [item]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ITEMS]:{FFFFFF} tirar, borrar, borrartodos");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (!strcmp(params, "tirar", true))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Tienes que salir del auto primero.");

	    for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
	    {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 1;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = fZ;

            BarricadeData[i][cadeObject] = CreateDynamicObject(2899, fX, fY, fZ - 0.8, 0.0, 0.0, fA + 90.0);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tiro una cadena de spikes en el piso.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s tiro una cadena de spikes en %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));

			return 1;
		}
		SendErrorMessage(playerid, "El servidor llego a limite de cadenas de spikes.");
	}
	else if (!strcmp(params, "borrar", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1 && IsPlayerInRangeOfPoint(playerid, 3.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            DestroyDynamicObject(BarricadeData[i][cadeObject]);

            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s agarro una cadena de spikes.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s agarro una cadena de spikes en %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		SendErrorMessage(playerid, "No estas cerca de ninguna cadena de spikes.");
	}
	else if (!strcmp(params, "borrartodos", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 1)
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

			DestroyDynamicObject(BarricadeData[i][cadeObject]);
		}
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s borro todas las cadenas de spikes.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:bloqueocarretera(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "No eres un oficial de policia.");

	if (isnull(params))
 	{
	 	SendSyntaxMessage(playerid, "/bloqueocarretera [opcion]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPCIONES]:{FFFFFF} colocar, borrar, borrartodos");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (!strcmp(params, "colocar", true))
	{
	    if (IsPlayerInAnyVehicle(playerid))
	        return SendErrorMessage(playerid, "Tienes que salir del auto primero.");

	    for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
	    {
            BarricadeData[i][cadeExists] = true;
            BarricadeData[i][cadeType] = 2;

            BarricadeData[i][cadePos][0] = fX;
            BarricadeData[i][cadePos][1] = fY;
            BarricadeData[i][cadePos][2] = fZ;

            BarricadeData[i][cadeObject] = CreateDynamicObject(981, fX, fY, fZ, 0.0, 0.0, fA);
            SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 2);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s coloca un bloqueo de carretera.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s coloco un bloqueo de carretera en %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));

			return 1;
		}
		SendErrorMessage(playerid, "El servidor llego al limite de bloqueos de carreteras.");
	}
	else if (!strcmp(params, "borrar", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2 && IsPlayerInRangeOfPoint(playerid, 5.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

            DestroyDynamicObject(BarricadeData[i][cadeObject]);

            SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s quito un bloqueo de carretera.", ReturnName(playerid, 0));
			SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s quito un bloqueo de carretera en %s.", ReturnName(playerid, 0), GetLocation(fX, fY, fZ));
			return 1;
		}
		SendErrorMessage(playerid, "No estas cerca de ningun bloqueo de carretera.");
	}
	else if (!strcmp(params, "borrartodos", true))
	{
        for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 2)
	    {
            BarricadeData[i][cadeExists] = 0;
            BarricadeData[i][cadeType] = 0;

			DestroyDynamicObject(BarricadeData[i][cadeObject]);
		}
		SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s borro todos los bloqueos de carretera.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:cono(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "No eres un oficial de policia.");
	new id;
	if (sscanf(params, "i", id))
 	{
	 	SendSyntaxMessage(playerid, "/cono [id]");
	 	SendClientMessage(playerid, COLOR_YELLOW, "ID: 1: Cono, 2: Bloqueo Pequeño, 3: Bloqueo Mediano, 4: Bloqueo Mediano , 5: Bloqueo Grande");
	 	SendClientMessage(playerid, COLOR_YELLOW, "ID: 6: Cartel calle cerrada 7: Cinta de policia, 8: Desvio, 9: Escalera, 10: Barril");
		return 1;
	}
	static
        Float:fX,
        Float:fY,
        Float:fZ,
        Float:fA;

    new objeto;

    GetPlayerPos(playerid, fX, fY, fZ);
    GetPlayerFacingAngle(playerid, fA);

	if (IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Tienes que salir del auto primero.");
	if (id == 1)
	{
		objeto = 1238;
		for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
		{
	        BarricadeData[i][cadeExists] = true;
	        BarricadeData[i][cadeType] = 3;

	        BarricadeData[i][cadePos][0] = fX;
	        BarricadeData[i][cadePos][1] = fY;
	        BarricadeData[i][cadePos][2] = fZ;

	        BarricadeData[i][cadeObject] = CreateDynamicObject(objeto, fX, fY, fZ - 0.7, 0.0, 0.0, fA);
	        SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 1);

			return 1;
		}
		SendErrorMessage(playerid, "El servidor llego al limite conos/bloqueos/spikes.");
		return 1;
	}
	if (id == 2)
	{
		objeto = 1228;
		for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
		{
	        BarricadeData[i][cadeExists] = true;
	        BarricadeData[i][cadeType] = 3;

	        BarricadeData[i][cadePos][0] = fX;
	        BarricadeData[i][cadePos][1] = fY;
	        BarricadeData[i][cadePos][2] = fZ;

	        BarricadeData[i][cadeObject] = CreateDynamicObject(objeto, fX, fY, fZ - 0.6, 0.0, 0.0, fA);
	        SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 1);

			return 1;
		}
		SendErrorMessage(playerid, "El servidor llego al limite conos/bloqueos/spikes.");
		return 1;
	}
	if (id == 3)
	{
		objeto = 1422;
		for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
		{
	        BarricadeData[i][cadeExists] = true;
	        BarricadeData[i][cadeType] = 3;

	        BarricadeData[i][cadePos][0] = fX;
	        BarricadeData[i][cadePos][1] = fY;
	        BarricadeData[i][cadePos][2] = fZ;

	        BarricadeData[i][cadeObject] = CreateDynamicObject(objeto, fX, fY, fZ - 0.7, 0.0, 0.0, fA);
	        SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 1);

			return 1;
		}
		SendErrorMessage(playerid, "El servidor llego al limite conos/bloqueos/spikes.");
		return 1;
	}
	if (id == 4)
	{
		objeto = 1459;
		for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
		{
	        BarricadeData[i][cadeExists] = true;
	        BarricadeData[i][cadeType] = 3;

	        BarricadeData[i][cadePos][0] = fX;
	        BarricadeData[i][cadePos][1] = fY;
	        BarricadeData[i][cadePos][2] = fZ;

	        BarricadeData[i][cadeObject] = CreateDynamicObject(objeto, fX, fY, fZ - 0.4, 0.0, 0.0, fA);
	        SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 1);

			return 1;
		}
		SendErrorMessage(playerid, "El servidor llego al limite conos/bloqueos/spikes.");
		return 1;
	}
	if (id == 5)
	{
		objeto = 3091;
		for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
		{
	        BarricadeData[i][cadeExists] = true;
	        BarricadeData[i][cadeType] = 3;

	        BarricadeData[i][cadePos][0] = fX;
	        BarricadeData[i][cadePos][1] = fY;
	        BarricadeData[i][cadePos][2] = fZ;

	        BarricadeData[i][cadeObject] = CreateDynamicObject(objeto, fX, fY, fZ - 0.7, 0.0, 0.0, fA);
	        SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 1);

			return 1;
		}
		SendErrorMessage(playerid, "El servidor llego al limite conos/bloqueos/spikes.");
		return 1;
	}
	if (id == 6)
	{
		objeto = 19972;
		for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
		{
	        BarricadeData[i][cadeExists] = true;
	        BarricadeData[i][cadeType] = 3;

	        BarricadeData[i][cadePos][0] = fX;
	        BarricadeData[i][cadePos][1] = fY;
	        BarricadeData[i][cadePos][2] = fZ;

	        BarricadeData[i][cadeObject] = CreateDynamicObject(objeto, fX, fY, fZ - 1, 0.0, 0.0, fA);
	        SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 1);

			return 1;
		}
		SendErrorMessage(playerid, "El servidor llego al limite conos/bloqueos/spikes.");
		return 1;
	}
	if (id == 7)
	{
		objeto = 19834;
		for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
		{
	        BarricadeData[i][cadeExists] = true;
	        BarricadeData[i][cadeType] = 3;

	        BarricadeData[i][cadePos][0] = fX;
	        BarricadeData[i][cadePos][1] = fY;
	        BarricadeData[i][cadePos][2] = fZ;

	        BarricadeData[i][cadeObject] = CreateDynamicObject(objeto, fX, fY, fZ, 0.0, 0.0, fA);
	        SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 1);

			return 1;
		}
		SendErrorMessage(playerid, "El servidor llego al limite conos/bloqueos/spikes.");
		return 1;
	}
	if (id == 8)
	{
		objeto = 1425;
		for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
		{
	        BarricadeData[i][cadeExists] = true;
	        BarricadeData[i][cadeType] = 3;

	        BarricadeData[i][cadePos][0] = fX;
	        BarricadeData[i][cadePos][1] = fY;
	        BarricadeData[i][cadePos][2] = fZ;

	        BarricadeData[i][cadeObject] = CreateDynamicObject(objeto, fX, fY, fZ - 0.6, 0.0, 0.0, fA);
	        SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 1);

			return 1;
		}
		SendErrorMessage(playerid, "El servidor llego al limite conos/bloqueos/spikes.");
		return 1;
	}
	if (id == 9)
	{
		objeto = 1437;
		for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
		{
	        BarricadeData[i][cadeExists] = true;
	        BarricadeData[i][cadeType] = 3;

	        BarricadeData[i][cadePos][0] = fX;
	        BarricadeData[i][cadePos][1] = fY;
	        BarricadeData[i][cadePos][2] = fZ;

	        BarricadeData[i][cadeObject] = CreateDynamicObject(objeto, fX, fY, fZ, 45, 0.0, fA);
	        SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 1);

			return 1;
		}
		SendErrorMessage(playerid, "El servidor llego al limite conos/bloqueos/spikes.");
		return 1;
	}
	if (id == 10)
	{
		objeto = 1237;
		for (new i = 0; i != MAX_BARRICADES; i ++) if (!BarricadeData[i][cadeExists])
		{
	        BarricadeData[i][cadeExists] = true;
	        BarricadeData[i][cadeType] = 3;

	        BarricadeData[i][cadePos][0] = fX;
	        BarricadeData[i][cadePos][1] = fY;
	        BarricadeData[i][cadePos][2] = fZ;

	        BarricadeData[i][cadeObject] = CreateDynamicObject(objeto, fX, fY, fZ - 1, 0.0, 0.0, fA);
	        SetPlayerPos(playerid, fX + 2, fY + 2, fZ + 1);

			return 1;
		}
		SendErrorMessage(playerid, "El servidor llego al limite conos/bloqueos/spikes.");
	}
	return 1;
}

CMD:borrarcono(playerid)
{
	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "No eres un oficial de policia.");
	for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 3 && IsPlayerInRangeOfPoint(playerid, 5.0, BarricadeData[i][cadePos][0], BarricadeData[i][cadePos][1], BarricadeData[i][cadePos][2]))
    {
        BarricadeData[i][cadeExists] = 0;
        BarricadeData[i][cadeType] = 0;

        DestroyDynamicObject(BarricadeData[i][cadeObject]);

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s quito un cono.", ReturnName(playerid, 0));
		return 1;
	}
	SendErrorMessage(playerid, "No estas cerca de ningun cono.");
	return 1;
}

CMD:borrarconotodos(playerid)
{
	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "No eres un oficial de policia.");
	for (new i = 0; i != MAX_BARRICADES; i ++) if (BarricadeData[i][cadeExists] && BarricadeData[i][cadeType] == 3)
	{
        BarricadeData[i][cadeExists] = 0;
        BarricadeData[i][cadeType] = 0;

		DestroyDynamicObject(BarricadeData[i][cadeObject]);
	}
	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s borro todos conos.", ReturnName(playerid, 0));
	return 1;
}

CMD:cambiarnombre(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 361.8299, 173.5183, 1008.3828))
	    return SendErrorMessage(playerid, "No estas cerca de la municipalidad.");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/cambiarnombre [nuevo nombre]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "Formato de nombre invalido.");

	static
	    query[128];

	format(query, sizeof(query), "SELECT `Username` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnVerifyNameChange", "ds", playerid, params);

	return 1;
}

CMD:aceptarnombre(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No puedes usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/acceptarnombre [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (!strlen(PlayerData[userid][pNameChange]))
	    return SendErrorMessage(playerid, "Ese jugador no pidio ningun cambio de nombre.");

	SendServerMessage(playerid, "Has aceptado el cambio de nombre de %s a %s.", ReturnName(userid, 0), PlayerData[userid][pNameChange]);
    SendServerMessage(userid, "%s acepto tu cambio de nombre a %s.", ReturnName(playerid, 0), PlayerData[userid][pNameChange]);

	ChangeName(userid, PlayerData[userid][pNameChange]);
	PlayerData[userid][pNameChange][0] = '\0';

	return 1;
}

CMD:rechazarnombre(playerid, params[])
{
	static
	    userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No puedes usar ese comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/rechazarnombre [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (!strlen(PlayerData[userid][pNameChange]))
	    return SendErrorMessage(playerid, "Ese jugador no pidio ningun cambio de nombre.");

	SendServerMessage(playerid, "Rechazo el cambio de nombre de %s a %s.", ReturnName(userid, 0), PlayerData[userid][pNameChange]);
    SendServerMessage(userid, "%s rechazo tu cambio de nombre a %s.", ReturnName(playerid, 0), PlayerData[userid][pNameChange]);

	PlayerData[userid][pNameChange][0] = '\0';

	return 1;
}

CMD:borrarcuenta(playerid, params[])
{
	static
	    query[64];

    if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/borrarcuenta [username]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "Formato de nombre invalido.");

	foreach (new i : Player) if (!strcmp(PlayerData[i][pUsername], params, true)) {
	    return SendErrorMessage(playerid, "No puedes borrar la cuenta de un jugador conectado.");
	}
	format(query, sizeof(query), "SELECT * FROM `characters` WHERE `Username` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnDeleteAccount", "ds", playerid, params);

	return 1;
}

CMD:timbre(playerid, params[])
{
	new id = House_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "Tienes que estar cerca de una casa.");

	foreach (new i : Player) if (House_Inside(i) == id) {
	    SendClientMessage(i, COLOR_PURPLE, "** Escuchas el timbre sonar.");
	    PlayerPlaySound(i, 20801, 0, 0, 0);
	}
	PlayerPlaySoundEx(playerid, 20801);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s toca el timbre de la casa.", ReturnName(playerid, 0));
	return 1;
}

CMD:crearporton(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	id = Gate_Create(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de portones.");

	SendServerMessage(playerid, "Has creado el porton ID: %d.", id);
	return 1;
}

CMD:borrarporton(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarporton [porton id]");

	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SendErrorMessage(playerid, "ID de porton invalida.");

	Gate_Delete(id);
	SendServerMessage(playerid, "Has borrado el porton ID: %d.", id);
	return 1;
}

CMD:editarporton(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarporton [id] [item]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[ITEMS]:{FFFFFF} pos, velocidad, radio, tiempo, objeto, mover, pass, linkid, faccion");
		return 1;
	}
	if ((id < 0 || id >= MAX_GATES) || !GateData[id][gateExists])
	    return SendErrorMessage(playerid, "ID de porton invalida.");

    //if (!strcmp(type, "posicion", true))
	//{
	//	static
	//	    Float:x,
	//	    Float:y,
	//	    Float:z,
	//	    Float:angle;
//
	//	GetPlayerPos(playerid, x, y, z);
	//	GetPlayerFacingAngle(playerid, angle);
//
	//	x += 3.0 * floatsin(-angle, degrees);
	//	y += 3.0 * floatcos(-angle, degrees);
//
	//	GateData[id][gatePos][0] = x;
	//	GateData[id][gatePos][1] = y;
	//	GateData[id][gatePos][2] = z;
	//	GateData[id][gatePos][3] = 0.0;
	//	GateData[id][gatePos][4] = 0.0;
	//	GateData[id][gatePos][5] = angle;
//
	//	SetDynamicObjectPos(GateData[id][gateObject], x, y, z);
	//	SetDynamicObjectRot(GateData[id][gateObject], 0.0, 0.0, angle);
//
	//	GateData[id][gateOpened] = false;
//
	//	Gate_Save(id);
	//	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la posicion del porton ID: %d.", ReturnName(playerid, 0), id);
	//	return 1;
	//}
	else if (!strcmp(type, "velocidad", true))
	{
	    static
	        Float:speed;

		if (sscanf(string, "f", speed))
		    return SendSyntaxMessage(playerid, "/editarporton [id] [velocidad] [velocidad de movimiento]");

		if (speed < 0.0 || speed > 20.0)
		    return SendErrorMessage(playerid, "La velocidad no puede ser menora a 0 o mayor a 20.");

        GateData[id][gateSpeed] = speed;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la velocidad del porton ID: %d a %.2f.", ReturnName(playerid, 0), id, speed);
		return 1;
	}
	else if (!strcmp(type, "radio", true))
	{
	    static
	        Float:radius;

		if (sscanf(string, "f", radius))
		    return SendSyntaxMessage(playerid, "/editarporton [id] [radio] [radio abierto]");

		if (radius < 0.0 || radius > 20.0)
		    return SendErrorMessage(playerid, "El radio del porton no puede ser menor a 0 o mayor a 20.");

        GateData[id][gateRadius] = radius;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el radio del porton ID: %d a %.2f.", ReturnName(playerid, 0), id, radius);
		return 1;
	}
	else if (!strcmp(type, "tiempo", true))
	{
	    static
	        time;

		if (sscanf(string, "d", time))
		    return SendSyntaxMessage(playerid, "/editarporton [id] [tiempo] [tiempo de cerrado] (0 para desactivar)");

		if (time < 0 || time > 60000)
		    return SendErrorMessage(playerid, "El tiempo no puede ser menor a 0 o mayor a 60.000 ms.");

        GateData[id][gateTime] = time;

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el tiempo de cerrado del porton ID: %d a %d.", ReturnName(playerid, 0), id, time);
		return 1;
	}
	else if (!strcmp(type, "objeto", true))
	{
	    static
	        model;

		if (sscanf(string, "d", model))
		    return SendSyntaxMessage(playerid, "/editarporton [id] [objeto] [objeto del porton]");

		if (!IsValidObjectModel(model))
		    return SendErrorMessage(playerid, "ID de objeto invalida.");

        GateData[id][gateModel] = model;

		DestroyDynamicObject(GateData[id][gateObject]);
		GateData[id][gateObject] = CreateDynamicObject(GateData[id][gateModel], GateData[id][gatePos][0], GateData[id][gatePos][1], GateData[id][gatePos][2], GateData[id][gatePos][3], GateData[id][gatePos][4], GateData[id][gatePos][5], GateData[id][gateWorld], GateData[id][gateInterior]);

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el id de objeto del porton ID: %d a %d.", ReturnName(playerid, 0), id, model);
		return 1;
	}
    else if (!strcmp(type, "pos", true))
	{
	    ResetEditing(playerid);
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
		PlayerData[playerid][pEditType] = 1;

		SendServerMessage(playerid, "Estas ajustando la posicion del porton ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "mover", true))
	{
	    ResetEditing(playerid);
	   	EditDynamicObject(playerid, GateData[id][gateObject]);

		PlayerData[playerid][pEditGate] = id;
		PlayerData[playerid][pEditType] = 2;

		SendServerMessage(playerid, "Estas ajustando la posicion de movimiento del porton ID: %d.", id);
		return 1;
	}
	else if (!strcmp(type, "linkid", true))
	{
	    static
	        linkid = -1;

		if (sscanf(string, "d", linkid))
		    return SendSyntaxMessage(playerid, "/editarporton [id] [linkid] [gate link] (-1 for none)");

        if ((linkid < -1 || linkid >= MAX_GATES) || (linkid != -1 && !GateData[linkid][gateExists]))
	    	return SendErrorMessage(playerid, "You have specified an invalid gate ID.");

        GateData[id][gateLinkID] = (linkid == -1) ? (-1) : (GateData[linkid][gateID]);
		Gate_Save(id);

		if (id == -1)
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the faction of gate ID: %d to no gate.", ReturnName(playerid, 0), id);

		else
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the faction of gate ID: %d to ID: %d.", ReturnName(playerid, 0), id, linkid);

		return 1;
	}
	else if (!strcmp(type, "faccion", true))
	{
	    static
	        factionid = -1;

		if (sscanf(string, "d", factionid))
		    return SendSyntaxMessage(playerid, "/editarporton [id] [faccion] [porton de faccion] (-1 para ninguno)");

        if ((factionid < -1 || factionid >= MAX_FACTIONS) || (factionid != -1 && !FactionData[factionid][factionExists]))
	    	return SendErrorMessage(playerid, "You have specified an invalid faction ID.");

        GateData[id][gateFaction] = (factionid == -1) ? (-1) : (FactionData[factionid][factionID]);
		Gate_Save(id);

		if (factionid == -1)
			SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la faccion del porton ID: %d a ninguna faccion.", ReturnName(playerid, 0), id);

		else
		    SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la faccion del porton ID: %d a \"%s\".", ReturnName(playerid, 0), id, FactionData[factionid][factionName]);

		return 1;
	}
	else if (!strcmp(type, "pass", true))
	{
	    static
	        pass[32];

		if (sscanf(string, "s[32]", pass))
		    return SendSyntaxMessage(playerid, "/editarporton [id] [pass] [contraseña] (Usa 'ninguna' para desactivar)");

		if (!strcmp(params, "ninguna", true))
			GateData[id][gatePass][0] = 0;

		else format(GateData[id][gatePass], 32, pass);

		Gate_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la contraseña del porton ID: %d a %s.", ReturnName(playerid, 0), id, pass);
		return 1;
	}
	return 1;
}

CMD:dardinero(playerid, params[])
{
	static
		userid,
	    amount;

	if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ud", userid, amount))
		return SendSyntaxMessage(playerid, "/dardinero [playerid/nombre] [cantidad]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	GiveMoney(userid, amount);

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s le dio %s dinero a %s.", ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));
 	Log_Write("logs/admin_log.txt", "[%s] %s le dio %s dinero a %s.", ReturnDate(), ReturnName(playerid, 0), FormatNumber(amount), ReturnName(userid, 0));

	return 1;
}

CMD:usardroga(playerid, params[])
{
	if (isnull(params))
	{
	    SendSyntaxMessage(playerid, "/usardroga [nombre]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[NOMBRES]:{FFFFFF} marihuana, cocaina, heroina, anabolicos");
		return 1;
	}
	if (PlayerData[playerid][pDrugTime] > 0)
	    return SendErrorMessage(playerid, "Espera a que el efecto de la droga pase.");

	if (!strcmp(params, "marihuana", true))
	{
	    if (Inventory_Count(playerid, "Marihuana") < 2)
	        return SendErrorMessage(playerid, "Necesitas al menos 2 gramos de marihuana.");

		PlayerData[playerid][pDrugUsed] = 1;
		PlayerData[playerid][pDrugTime] = 300;

		Inventory_Remove(playerid, "Marihuana", 2);
		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);

		SendClientMessage(playerid, COLOR_WHITE, "Has fumado Marihuana, el efecto de la droga durará 5 minutos");
		SendClientMessage(playerid, COLOR_WHITE, "Recuerda que fumar Marihuana da mucha hambre");
		//SendClientMessage(playerid, COLOR_WHITE, "Se te puso de estado: {FFFFFF}Ojos rojos medio cerrados");

		marihuanatimer[playerid] = SetTimerEx("EfectoMarihuana", 80000, true, "i", playerid);
		//marihuanaestado[playerid] = SetTimerEx("MarihuanaEstado", 15000, false, "i", playerid);
		estado[playerid] = Create3DTextLabel("Ojos rojos medio cerrados",0x00FF00FF,30.0,40.0,5.0,40.0,1);
    	Attach3DTextLabelToPlayer(estado[playerid], playerid, 0.0, 0.0, 0.40);
		ConEstado[playerid] = true;
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_SMOKE_CIGGY);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su encendedor y prende un porro.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "cocaina", true))
	{
	    if (Inventory_Count(playerid, "Cocaina") < 2)
	        return SendErrorMessage(playerid, "Necesitas al menos 2 gramos de cocaina.");

        PlayerData[playerid][pDrugTime] = 35;
		PlayerData[playerid][pDrugUsed] = 2;

		Inventory_Remove(playerid, "Cocaina", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca un poco de cocaina y la inhala.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "heroina", true))
	{
	    if (Inventory_Count(playerid, "Heroina") < 2)
	        return SendErrorMessage(playerid, "Necesitas al menos dos gramos de heroina.");

        PlayerData[playerid][pDrugTime] = 30;
		PlayerData[playerid][pDrugUsed] = 3;

		Inventory_Remove(playerid, "Heroina", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca una jeringa con heroina y se la inyecta.", ReturnName(playerid, 0));
	}
	else if (!strcmp(params, "anabolicos", true))
	{
	    if (!Inventory_HasItem(playerid, "Anabolicos"))
	        return SendErrorMessage(playerid, "Necesitas al menos una pastilla de anabolicos.");

		if (ReturnHealth(playerid) <= 5)
		    return SendErrorMessage(playerid, "Tienes la vida muy baja como para tomar anabolicos.");

        PlayerData[playerid][pDrugTime] = 60;
		PlayerData[playerid][pDrugUsed] = 4;

		SetPlayerHealth(playerid, ReturnHealth(playerid) - 5);
		Inventory_Remove(playerid, "Anabolicos", 2);

		ApplyAnimation(playerid, "SMOKING", "M_smk_in", 4.1, 0, 0, 0, 0, 0, 1);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca unas pastillas de anabolicos y las traga.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:huelladactilar(playerid, params[])
{
    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser policia.");

	if (PlayerData[playerid][pFingerTime] > 0)
	    return SendErrorMessage(playerid, "Ya estas usando un escaner de huellas digitales.");

    for (new i = 0; i != MAX_DROPPED_ITEMS; i ++) if (DroppedItems[i][droppedModel] && IsPlayerInRangeOfPoint(playerid, 1.5, DroppedItems[i][droppedPos][0], DroppedItems[i][droppedPos][1], DroppedItems[i][droppedPos][2])) {
        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s usa un escaner de huellas digitales en el objeto.", ReturnName(playerid, 0));

        PlayerData[playerid][pFingerTime] = 3;
        PlayerData[playerid][pFingerItem] = i;

        return 1;
	}
	SendErrorMessage(playerid, "No hay un objeto cerca.");
	return 1;
}

CMD:crearauto(playerid, params[])
{
	static
		model[32],
		color1,
		color2,
		id = -1,
		type = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "s[32]I(-1)I(-1)I(0)", model, color1, color2, type))
 	{
	 	SendSyntaxMessage(playerid, "/crearauto [model id/nombre] [color 1] [color 2] <faccion>");
	 	SendClientMessage(playerid, COLOR_YELLOW, "[TYPES]:{FFFFFF} 1: Policia | 2: Noticias | 3: Medica | 4: Gobierno");
	 	return 1;
	}
	if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "ID de vehiculo invalida.");

	static
	    Float:x,
		Float:y,
		Float:z,
		Float:angle;

    GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Car_Create(0, model[0], x, y, z, angle, color1, color2, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de vehiculos dinamicos.");

	SetPlayerPosEx(playerid, x, y, z + 2, 1000);
	SendServerMessage(playerid, "Has creado el vehiculo ID: %d.", CarData[id][carVehicle]);
	return 1;
}

CMD:borrarauto(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		 	id = GetPlayerVehicleID(playerid);

		else return SendSyntaxMessage(playerid, "/borrarauto [vehicle id]");
	}
	if (!IsValidVehicle(id) || Car_GetID(id) == -1)
	    return SendErrorMessage(playerid, "ID de vehiculo invalida.");

	Car_Delete(Car_GetID(id));
	SendServerMessage(playerid, "Has borrado el vehiculo ID: %d.", id);
	return 1;
}

CMD:mochila(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Backpack"))
	    return SendErrorMessage(playerid, "No tienes una mochila.");

	Backpack_Open(playerid);
	return 1;
}

CMD:tirarmochila(playerid, params[])
{
	new
		id = GetPlayerBackpack(playerid);

	if (!Inventory_HasItem(playerid, "Backpack") || id == -1)
	    return SendErrorMessage(playerid, "No tienes una mochila.");

	if (!Backpack_GetItems(id))
	    return SendErrorMessage(playerid, "No puedes tirar una mochila vacia");

    if (IsPlayerInAnyVehicle(playerid) || !IsPlayerSpawned(playerid))
    	return SendErrorMessage(playerid, "No puedes tirar una mochila ahora.");

	static
	    Float:x,
	    Float:y,
	    Float:z;

	GetPlayerPos(playerid, x, y, z);

	BackpackData[id][backpackPlayer] = 0;
    BackpackData[id][backpackPos][0] = x;
    BackpackData[id][backpackPos][1] = y;
    BackpackData[id][backpackPos][2] = z;
    BackpackData[id][backpackInterior] = GetPlayerInterior(playerid);
    BackpackData[id][backpackWorld] = GetPlayerVirtualWorld(playerid);

	Backpack_Refresh(id);
	Backpack_Save(id);

	Inventory_Remove(playerid, "Backpack");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tiro su mochila.", ReturnName(playerid, 0));

	SetAccessories(playerid);

	return 1;
}

CMD:setitem(playerid, params[])
{
	static
	    userid,
		item[32],
		amount;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "uds[32]", userid, amount, item))
	    return SendSyntaxMessage(playerid, "/setitem [playerid/nombre] [cantidad] [item]");

    if (IsFurnitureItem(item))
	{
	    for (new i = 0; i < sizeof(g_aFurnitureData); i ++) if (!strcmp(g_aFurnitureData[i][e_FurnitureName], item, true))
		{
	        Inventory_Set(userid, g_aFurnitureData[i][e_FurnitureName], g_aFurnitureData[i][e_FurnitureModel], amount);

			SendServerMessage(playerid, "You have set %s's \"%s\" to %d.", ReturnName(userid, 0), item, amount);
			return 1;
		}
	}
	else for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if (!strcmp(g_aInventoryItems[i][e_InventoryItem], item, true))
	{
	    if (!strcmp(item, "Celular", true)) {
	        PlayerData[userid][pPhone] = random(90000) + 10000;
	    }
        Inventory_Set(userid, g_aInventoryItems[i][e_InventoryItem], g_aInventoryItems[i][e_InventoryModel], amount);

		return SendServerMessage(playerid, "You have set %s's \"%s\" to %d.", ReturnName(userid, 0), item, amount);
	}
	SendErrorMessage(playerid, "Nombre de item invalido (usa /items para una lista).");
	return 1;
}

CMD:items(playerid, params[])
{
	static
	    string[1024];

	if (!strlen(string)) {
		for (new i = 0; i < sizeof(g_aInventoryItems); i ++) {
			format(string, sizeof(string), "%s%s\n", string, g_aInventoryItems[i][e_InventoryItem]);
		}
	}
	return Dialog_Show(playerid, ShowOnly, DIALOG_STYLE_LIST, "Lista de items", string, "Seleccionar", "Cancelar");
}

CMD:crearembargadero(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
 		return SendErrorMessage(playerid, "No puedes crear embargaderos en interiores.");

	GetPlayerPos(playerid, x, y, z);

	id = Impound_Create(x, y, z);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de embargaderos.");

	SendServerMessage(playerid, "Has creado el embargadero ID: %d.", id);
	return 1;
}

CMD:borrarembargadero(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarembargadero [id embargadero]");

	if ((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
	    return SendErrorMessage(playerid, "ID de embargadero invalida.");

	Impound_Delete(id);
	SendServerMessage(playerid, "Has borrado el embargadero ID: %d.", id);
	return 1;
}

CMD:editarembargadero(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarembargadero [id] [opcion]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPCIONES]:{FFFFFF} localizacion, liberacion");
		return 1;
	}
	if ((id < 0 || id >= MAX_IMPOUND_LOTS) || !ImpoundData[id][impoundExists])
	    return SendErrorMessage(playerid, "ID de embargadero invalida.");

	if (!strcmp(type, "localizacion", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z;

	    GetPlayerPos(playerid, x, y, z);

		ImpoundData[id][impoundLot][0] = x;
		ImpoundData[id][impoundLot][1] = y;
		ImpoundData[id][impoundLot][2] = z;

		Impound_Refresh(id);
		Impound_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la localizacion del embargadero ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "liberacion", true))
	{
	    static
	        Float:x,
	        Float:y,
	        Float:z,
			Float:angle;

	    GetPlayerPos(playerid, x, y, z);
		GetPlayerFacingAngle(playerid, angle);

		ImpoundData[id][impoundRelease][0] = x;
		ImpoundData[id][impoundRelease][1] = y;
		ImpoundData[id][impoundRelease][2] = z;
		ImpoundData[id][impoundRelease][3] = angle;

		Impound_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el punto de liberacion del embargadero ID: %d.", ReturnName(playerid, 0), id);
	}
	return 1;
}

CMD:liberarvehiculo(playerid, params[])
{
	if (!IsPlayerInRangeOfPoint(playerid, 3.0, 361.1653, 175.8127, 1008.3828))
	    return SendErrorMessage(playerid, "Tienes que estar en la municipalidad para liberar un vehiculo.");

	new
	    string[32 * MAX_OWNABLE_CARS],
		count;

	for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (count < MAX_OWNABLE_CARS && CarData[i][carExists] && Car_IsOwner(playerid, i) && CarData[i][carImpounded] != -1)
	{
		format(string, sizeof(string), "%s%d: %s (%s)\n", string, count + 1, ReturnVehicleName(CarData[i][carVehicle]), FormatNumber(CarData[i][carImpoundPrice]));
        ListedVehicles[playerid][count++] = i;
	}
	if (!count)
	    SendErrorMessage(playerid, "No tienes ningun vehiculo embargado.");

	else Dialog_Show(playerid, ReleaseCar, DIALOG_STYLE_LIST, "Liberar vehiculo", string, "Seleccionar", "Cancelar");
	return 1;
}

CMD:enganchar(playerid, params[])
{
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	    return SendErrorMessage(playerid, "No estas conduciendo una grua.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "No eres el conductor.");

	new vehicleid = GetVehicleFromBehind(GetPlayerVehicleID(playerid));

	if (vehicleid == INVALID_VEHICLE_ID)
	    return SendErrorMessage(playerid, "No tienes ningun otro vehiculo cerca.");

	if (!IsDoorVehicle(vehicleid) || IsAPlane(vehicleid) || IsABoat(vehicleid) || IsAHelicopter(vehicleid))
	    return SendErrorMessage(playerid, "No puedes enganchar este vehiculo.");

	AttachTrailerToVehicle(vehicleid, GetPlayerVehicleID(playerid));
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s engancho un %s a su grua.", ReturnName(playerid, 0), ReturnVehicleName(vehicleid));
	return 1;
}

CMD:desenganchar(playerid, params[])
{
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) != 525)
	    return SendErrorMessage(playerid, "No estas conduciendo una grua.");

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "No eres el conductor.");

	new
	    trailerid = GetVehicleTrailer(GetPlayerVehicleID(playerid));

    if (!trailerid)
	    return SendErrorMessage(playerid, "No hay un vehiculo agarrado a la grua.");

	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s desengancho el %s de su grua.", ReturnName(playerid, 0), ReturnVehicleName(trailerid));

	return 1;
}

CMD:embargar(playerid, params[])
{
	new
		price,
		id = Impound_Nearest(playerid),
		vehicleid = GetPlayerVehicleID(playerid);

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser policia.");

    if (sscanf(params, "d", price))
        return SendSyntaxMessage(playerid, "/embargar [precio]");

	if (price < 1 || price > 1000)
	    return SendErrorMessage(playerid, "El precio de multa no puede ser menor a 1 o mayor a 1.000.");

	if (GetVehicleModel(vehicleid) != 525)
	    return SendErrorMessage(playerid, "No estas manejando una grua.");

	if (id == -1)
	    return SendErrorMessage(playerid, "No estas cerca de un embargadero.");

	if (!GetVehicleTrailer(vehicleid))
	    return SendErrorMessage(playerid, "No hay un vehiculo enganchado.");

 	vehicleid = Car_GetID(GetVehicleTrailer(vehicleid));

	if (vehicleid == -1)
	    return SendErrorMessage(playerid, "No puedes enganchar este vehiculo.");

	if (CarData[vehicleid][carImpounded] != -1)
	    return SendErrorMessage(playerid, "Este vehiculo ya esta embargado.");

	CarData[vehicleid][carImpounded] = ImpoundData[id][impoundID];
	CarData[vehicleid][carImpoundPrice] = price;

	Tax_AddMoney(price);

	GetVehiclePos(CarData[vehicleid][carVehicle], CarData[vehicleid][carPos][0], CarData[vehicleid][carPos][1], CarData[vehicleid][carPos][2]);
	Car_Save(vehicleid);

	SendFactionMessage(PlayerData[playerid][pFaction], COLOR_RADIO, "RADIO: %s embargo un %s por %s.", ReturnName(playerid, 0), ReturnVehicleModelName(CarData[vehicleid][carModel]), FormatNumber(price));
 	DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));

	return 1;
}

CMD:radiocanal(playerid, params[])
{
	new channel;

	if (!Inventory_HasItem(playerid, "Walkie-Talkie"))
	    return SendErrorMessage(playerid, "Tienes que tener una radio portable.");

	if (sscanf(params, "d", channel))
 	{
	 	SendSyntaxMessage(playerid, "/radiocanal [canal de radio] (0 to disable)");

	 	if (PlayerData[playerid][pChannel] > 0)
			SendClientMessageEx(playerid, COLOR_YELLOW, "[AVISO]:{FFFFFF} Tu canal de radio ahora es %d.", PlayerData[playerid][pChannel]);

		return 1;
	}
	if (channel < 0 || channel > 999999)
	    return SendErrorMessage(playerid, "El canal no puede ser menor a 0 o mayor a 999.999.");

	PlayerData[playerid][pChannel] = channel;

	if (channel == 0)
	    SendServerMessage(playerid, "Has desactivado tu radio portable.");

	else SendServerMessage(playerid, "Has cambiado el canal de tu radio a %d (\"/r [texto]\" para hablar por él).", channel);
	return 1;
}

CMD:r(playerid, params[])
{
	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/r [Radio IC]");

    if (!Inventory_HasItem(playerid, "Walkie-Talkie"))
	    return SendErrorMessage(playerid, "Tienes que tener una radio portable.");

	if (!PlayerData[playerid][pChannel])
	    return SendErrorMessage(playerid, "Tu radio portable esta desactivada (/radiocanal).");

	static
	    string[128];
	if(PlayerData[playerid][pChannel] == 911 && GetFactionType(playerid) != FACTION_POLICE) return SendErrorMessage(playerid, "Esta es una frecuencia solo para el departamento de policia.");
	if (strlen(params) > 64)
	{
		format(string, sizeof(string), "** [RADIO: %d] %s: %.64s",PlayerData[playerid][pChannel],ReturnName(playerid, 0), params);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);
		format(string, sizeof(string), "...%s **",params[64]);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);
		SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "** (Radio) %s: %.64s", ReturnName(playerid, 0), params);
	    SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "...%s **", params[64]);
	}
	else {
		format(string, sizeof(string),"** [RADIO: %d] %s: %s **", PlayerData[playerid][pChannel],ReturnName(playerid, 0), params);
		SendRadioMessage(PlayerData[playerid][pChannel], COLOR_SERVER, string);
		SendNearbyMessage(playerid, 5.0, COLOR_SERVER, "** (Radio) %s: %.64s", ReturnName(playerid, 0), params);
	}
	return 1;
}

CMD:ayudatrabajo(playerid, params[])//AYUDA
{
	switch (PlayerData[playerid][pJob])
	{
	    case 1: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /repartir, /dejardecargar, /descargar, /envios.");
	    //case 2: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /repair, /nitrous.");
	    case 3: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /taxi, /aceptarllamado.");
	    case 4: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /cargarcaja.");
	    case 5: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /minar.");
	    case 6: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /vendercomida.");
	    case 7: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /tomarbasura, /tirarbasura, /encontrarbasura.");
	    case 8: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /clasificar.");
	    case 9: SendClientMessage(playerid, COLOR_CLIENT, "JOBS:{FFFFFF} /crearpartes.");
	    default: SendErrorMessage(playerid, "No tienes trabajo en este momento.");
	}
	return 1;
}

CMD:crearatm(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	id = ATM_Create(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de maquinas de ATM.");

	SendServerMessage(playerid, "Has creado el ATM ID: %d.", id);
	return 1;
}

CMD:borraratm(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borraratm [atm id]");

	if ((id < 0 || id >= MAX_ATM_MACHINES) || !ATMData[id][atmExists])
	    return SendErrorMessage(playerid, "ID de ATM invalida.");

	ATM_Delete(id);
	SendServerMessage(playerid, "Has borrado el ATM ID: %d.", id);
	return 1;
}

CMD:eliminarcheckpoint(playerid, params[])
{
	if (PlayerData[playerid][pDrivingTest])
	    return SendErrorMessage(playerid, "No puedes hacer esto en un test de manejo.");

	new
		vehicleid = GetPlayerVehicleID(playerid);

	PlayerData[playerid][pCP] = 0;

	if (PlayerData[playerid][pSorting] != -1)
	{
	    PlayerData[playerid][pSorting] = -1;
		PlayerData[playerid][pSortCrate] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (PlayerData[playerid][pMinedRock])
	{
	    PlayerData[playerid][pMinedRock] = 0;
		PlayerData[playerid][pMineCount] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (PlayerData[playerid][pUnloading] != -1)
	{
	    PlayerData[playerid][pUnloading] = -1;
	    PlayerData[playerid][pUnloadVehicle] = INVALID_VEHICLE_ID;
	}
	if (PlayerData[playerid][pLoading])
	{
	    PlayerData[playerid][pLoading] = 0;
	    PlayerData[playerid][pLoadType] = 0;
	}
	if (PlayerData[playerid][pLoadCrate])
 	{
  		PlayerData[playerid][pLoadCrate] = 0;

		RemovePlayerAttachedObject(playerid, 4);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}
	if (IsPlayerInWarehouse(playerid) && GetVehicleModel(vehicleid) == 530 && CoreVehicles[vehicleid][vehLoadType] == 7)
	{
 		CoreVehicles[vehicleid][vehLoadType] = 0;
 		CoreVehicles[vehicleid][vehCrate] = INVALID_OBJECT_ID;

   		DestroyObject(CoreVehicles[vehicleid][vehCrate]);
	}
    DisablePlayerCheckpoint(playerid);
    SendServerMessage(playerid, "Has borrado tu checkpoint.");
    return 1;
}

CMD:reiniciarsv(playerid, params[])
{
	new time;

	if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (g_ServerRestart)
	{
	    TextDrawHideForAll(gServerTextdraws[3]);

	    g_ServerRestart = 0;
	    g_RestartTime = 0;

	    return SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s cancelo el reinicio del servidor.", ReturnName(playerid, 0));
	}
	if (sscanf(params, "d", time))
	    return SendSyntaxMessage(playerid, "/reiniciarsv [segundos]");

	if (time < 3 || time > 600)
	    return SendErrorMessage(playerid, "El tiempo no puede ser menor a 3 segundos o mayor a 600.");

    TextDrawShowForAll(gServerTextdraws[3]);

	g_ServerRestart = 1;
	g_RestartTime = time;

	SendClientMessageToAllEx(COLOR_LIGHTRED, "[ADMIN]: %s ha iniciado un reinicio del servidor en %d segundos.", ReturnName(playerid, 0), time);
	return 1;
}

CMD:propiedades(playerid, params[])
{
	new count;

	for (new i = 0; i < MAX_HOUSES; i ++) if (House_IsOwner(playerid, i)) {
	    SendClientMessageEx(playerid, COLOR_LIGHTGREEN, "** Casa ID: %d | Direccion: %s | Localizacion: %s", i, HouseData[i][houseAddress], GetLocation(HouseData[i][housePos][0], HouseData[i][housePos][1], HouseData[i][housePos][2]));

	    count++;
	}
	for (new i = 0; i < MAX_BUSINESSES; i ++) if (Business_IsOwner(playerid, i) && BusinessData[i][bizOwner] != 99999999) {
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Negocio ID: %d | Nombre: %s | Localizacion: %s", i, BusinessData[i][bizName], GetLocation(BusinessData[i][bizPos][0], BusinessData[i][bizPos][1], BusinessData[i][bizPos][2]));

	    count++;
	}
	if (!count)
	    return SendErrorMessage(playerid, "No eres dueño de ninguna propiedad (Negocio o casa).");

	return 1;
}

CMD:avendercasa(playerid, params[])
{
	new houseid = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", houseid))
	    return SendSyntaxMessage(playerid, "/avendercasa [casa ID]");

	if ((houseid < 0 || houseid >= MAX_HOUSES) || !HouseData[houseid][houseExists])
	    return SendErrorMessage(playerid, "ID de casa invalido.");

	HouseData[houseid][houseOwner] = 0;

	House_Refresh(houseid);
	House_Save(houseid);

	SendServerMessage(playerid, "Vendiste la casa ID: %d.", houseid);
	return 1;
}

CMD:avendernegocio(playerid, params[])
{
	new bizid = -1;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", bizid))
	    return SendSyntaxMessage(playerid, "/avendernegocio [negocio ID]");

	if ((bizid < 0 || bizid >= MAX_HOUSES) || !BusinessData[bizid][bizExists])
	    return SendErrorMessage(playerid, "ID de negocio invalida.");

	BusinessData[bizid][bizOwner] = 0;

	Business_Refresh(bizid);
	Business_Save(bizid);

	SendServerMessage(playerid, "Vendiste el negocio ID: %d.", bizid);
	return 1;
}

CMD:llaves(playerid, params[])
{
	new
	    Float:fX,
	    Float:fY,
	    Float:fZ,
		userid,
		count;

	if (sscanf(params, "u", userid))
	{
		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(playerid, i)) {
		    GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

		    SendClientMessageEx(playerid, COLOR_WHITE, "** ID: %d | Modelo: %s | Localizacion: %s", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ));
		    count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "No tienes vehiculos.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	else if (PlayerData[playerid][pAdmin] >= 3)
	{
		if (userid == INVALID_PLAYER_ID)
	    	return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
  		SendClientMessageEx(playerid, COLOR_YELLOW, "Vehiculos de %s (ID: %d):", ReturnName(userid, 0), userid);

		for (new i = 0; i < MAX_DYNAMIC_CARS; i ++) if (Car_IsOwner(userid, i)) {
  			GetVehiclePos(CarData[i][carVehicle], fX, fY, fZ);

			SendClientMessageEx(playerid, COLOR_WHITE, "** ID: %d | Modelo: %s | Localizacion: %s", CarData[i][carVehicle], ReturnVehicleModelName(CarData[i][carModel]), GetLocation(fX, fY, fZ));
			count++;
		}
		if (!count)
		    SendClientMessage(playerid, COLOR_WHITE, "Ese jugador no tiene vehiculos.");

		SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	}
	return 1;
}

/*CMD:grantweapon(playerid, params[])
{
	new userid;

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "You must be an officer or a government member.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/grantweapon [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "You can't grant yourself a Licencia de Armas.");

	if (Inventory_HasItem(userid, "Licencia de Armas"))
	    return SendErrorMessage(playerid, "That player already has a Licencia de Armas.");

	Inventory_Add(userid, "Licencia de Armas", 1581);

	SendServerMessage(playerid, "You have granted a Licencia de Armas to %s.", ReturnName(userid, 0));
	SendServerMessage(userid, "You've been granted a Licencia de Armas by %s.", ReturnName(playerid, 0));

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s has granted %s with a Licencia de Armas.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}*/

CMD:quitarlicenciaarmas(playerid, params[])
{
	new userid;

	if (GetFactionType(playerid) != FACTION_POLICE && GetFactionType(playerid) != FACTION_GOV)
	    return SendErrorMessage(playerid, "Debes ser Policia de miembro del Gobierno.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/quitarlicenciaarmas [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "No te puedes quitar tu propia licencia.");

	if (!Inventory_HasItem(userid, "Licencia de Armas"))
	    return SendErrorMessage(playerid, "Ese jugador no tiene licencia de arams.");

	Inventory_Remove(userid, "Licencia de Armas");

	SendServerMessage(playerid, "Le quitaste a %s su licencia de armas.", ReturnName(userid, 0));
	SendServerMessage(userid, "%s te quitó tu licencia de armas.", ReturnName(playerid, 0));

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le quitó a %s su licencia de armas.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:jetpack(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
 	{
 	    PlayerData[playerid][pJetpack] = 1;
	 	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_USEJETPACK);
	}
	else
	{
		PlayerData[userid][pJetpack] = 1;

		SetPlayerSpecialAction(userid, SPECIAL_ACTION_USEJETPACK);
		SendServerMessage(playerid, "You have spawned a jetpack for %s.", ReturnName(userid, 0));
	}
	return 1;
}

CMD:setclima(playerid, params[])
{
	new weatherid;

	if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", weatherid))
	    return SendSyntaxMessage(playerid, "/setclima [clima ID] (Default 1)");

	SetWeather(weatherid);
	SendServerMessage(playerid, "Has cambiado el clima al ID: %d.", weatherid);
	return 1;
}

CMD:setgas(playerid, params[])
{
	static
	    id = 0,
		amount;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "dd", id, amount))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		{
		    id = GetPlayerVehicleID(playerid);

		    if (sscanf(params, "d", amount))
		        return SendSyntaxMessage(playerid, "/setgas [cantidad]");

			if (amount < 0)
			    return SendErrorMessage(playerid, "La cantidad no puede ser menor a 0.");

			CoreVehicles[id][vehFuel] = amount;
			SendServerMessage(playerid, "Cambiaste el combustible del vehiculo ID: %d a %d porciento.", id, amount);
			return 1;
		}
		else return SendSyntaxMessage(playerid, "/setgas [vehiculo id] [cantidad]");
	}
	if (!IsValidVehicle(id))
	    return SendErrorMessage(playerid, "ID de vehiculo invalida.");

	if (amount < 0)
 		return SendErrorMessage(playerid, "La cantidad no puede ser menor a 0.");

	CoreVehicles[id][vehFuel] = amount;
	SendServerMessage(playerid, "Cambiaste el combustible del vehiculo ID: %d a %d porciento.", id, amount);
	return 1;
}

CMD:setautovida(playerid, params[])
{
	static
	    id = 0,
		Float:amount;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "df", id, amount))
 	{
	 	if (IsPlayerInAnyVehicle(playerid))
		{
		    id = GetPlayerVehicleID(playerid);

		    if (sscanf(params, "f", amount))
		        return SendSyntaxMessage(playerid, "/setautovida [cantidad]");

			if (amount < 0.0)
			    return SendErrorMessage(playerid, "La cantidad no puede ser menor a 0.");

			SetVehicleHealth(id, amount);
			SendServerMessage(playerid, "Cambiaste la \"vida\" del auto ID: %d a %.1f.", id, amount);
			return 1;
		}
		else return SendSyntaxMessage(playerid, "/setautovida [vehiculo id] [cantidad]");
	}
	if (!IsValidVehicle(id))
	    return SendErrorMessage(playerid, "ID de vehiculo invalida.");

	if (amount < 0.0)
	    return SendErrorMessage(playerid, "La cantidad no puede ser menor a 0.");

	SetVehicleHealth(id, amount);
	SendServerMessage(playerid, "Cambiaste la \"vida\" del auto ID: %d a %.1f.", id, amount);
	return 1;
}

CMD:editarauto(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarauto [id] [opcion]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPCIONES]:{FFFFFF} localizacion, faccion, color1, color2, job");
		return 1;
	}
	if (!IsValidVehicle(id) || Car_GetID(id) == -1)
	    return SendErrorMessage(playerid, "You have specified an invalid vehicle ID.");

	id = Car_GetID(id);

	if (!strcmp(type, "localizacion", true))
	{
 		GetPlayerPos(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2]);
		GetPlayerFacingAngle(playerid, CarData[id][carPos][3]);

		Car_Save(id);
		Car_Spawn(id);

		SetPlayerPosEx(playerid, CarData[id][carPos][0], CarData[id][carPos][1], CarData[id][carPos][2] + 2.0, 1000);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la localizacion del auto ID: %d.", ReturnName(playerid, 0), CarData[id][carVehicle]);
	}
	else if (!strcmp(type, "faccion", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
     	    SendSyntaxMessage(playerid, "/editarauto [id] [faccion] [tipo]");
		 	SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Policia | 2: Noticias | 3: Medicos | 4: Gobierno");
		 	return 1;
		}
		if (typeint < 0 || typeint > 4)
		    return SendErrorMessage(playerid, "El tipo no puede ser menor a 1 o mayor a 4.");

		CarData[id][carFaction] = typeint;

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el tipo de faccion del vehiculo ID: %d a %d.", ReturnName(playerid, 0), CarData[id][carVehicle], typeint);
	}
    else if (!strcmp(type, "color", true))
	{
	    new color1;

	    if (sscanf(string, "d", color1))
			return SendSyntaxMessage(playerid, "/editarauto [id] [color] [color 1]");

		if (color1 < 0 || color1 > 255)
		    return SendErrorMessage(playerid, "El color no puede ser menor a 0 o mayor a 255.");

		CarData[id][carColor1] = color1;
		ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el color 1 del vehiculo ID: %d a %d.", ReturnName(playerid, 0), CarData[id][carVehicle], color1);
	}
    else if (!strcmp(type, "color2", true))
	{
	    new color2;

	    if (sscanf(string, "d", color2))
			return SendSyntaxMessage(playerid, "/editarauto [id] [color2] [color 2]");

		if (color2 < 0 || color2 > 255)
		    return SendErrorMessage(playerid, "El color no puede ser menor a 0 o mayor a 255.");

		CarData[id][carColor2] = color2;
		ChangeVehicleColor(CarData[id][carVehicle], CarData[id][carColor1], CarData[id][carColor2]);

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el color 2 del vehiculo ID: %d a %d.", ReturnName(playerid, 0), CarData[id][carVehicle], color2);
	}
	else if (!strcmp(type, "job", true))
	{
	    new typeint;

	    if (sscanf(string, "d", typeint))
     	{
     	    SendSyntaxMessage(playerid, "/editarauto [id] [job] [job id]");
     	    SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Camionero | 3: Taxista | 4: Descargador de carja | 5: Minero | 6:Vendedor de Alimentos");
     	    SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 7: Basurero | 8: Creador de Cajas | 9: Contrabandista de Armas");
		 	return 1;
		}
        if (typeint < 0 || typeint > 10)
		    return SendErrorMessage(playerid, "El tipo no puede ser menor a 1 o mayor a 9.");

		CarData[id][carJob] = typeint;

		Car_Save(id);
		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el tipo de trabajo del vehiculo ID: %d.", ReturnName(playerid, 0), CarData[id][carVehicle]);
	}
	return 1;
}

CMD:crearbasura(playerid, params[])
{
	static
	    id = -1,
		type;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/crearbasura [tipo]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Contenedor | 2: Tacho");
		return 1;
	}
	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "El tipo de basura tiene que ser 1 o 2.");

	id = Garbage_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al maximo de contenedores/tachos de basura.");

	SendServerMessage(playerid, "Has creado el tacho/contenedo de basura ID: %d.", id);
	return 1;
}

CMD:borrarbasura(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarbasura [basura id]");

	if ((id < 0 || id >= MAX_GARBAGE_BINS) || !GarbageData[id][garbageExists])
	    return SendErrorMessage(playerid, "ID de basura invalido.");

	Garbage_Delete(id);
	SendServerMessage(playerid, "Has borrado el contenedor/tacho de basura ID: %d.", id);
	return 1;
}

CMD:tomarbasura(playerid, params[])
{
	new
		id = Garbage_Nearest(playerid),
		string[64];

	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	if (id == -1)
	    return SendErrorMessage(playerid, "No estas cerca de ningun tacho/contenedor de basura.");

	if (GarbageData[id][garbageCapacity] < 1)
	    return SendErrorMessage(playerid, "Este tacho de basura esta vacio.");

	if (PlayerData[playerid][pCarryTrash])
	    return SendErrorMessage(playerid, "Ya estas llevando una bolsa de basura.");

    GarbageData[id][garbageCapacity]--;
   	Garbage_Save(id);

	PlayerData[playerid][pCarryTrash] = 1;
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca una bolsa del tacho de basura.", ReturnName(playerid, 0), string);

	format(string, sizeof(string), "[Garbage %d]\n{FFFFFF}Basura Capacidad: %d/20", id, GarbageData[id][garbageCapacity]);
  	UpdateDynamic3DTextLabelText(GarbageData[id][garbageText3D], COLOR_DARKBLUE, string);

  	SetPlayerAttachedObject(playerid, 4, 1264, 6, 0.000000, 0.000000, 0.000000, 0.000000, 270.000000, 90.000000, 0.500000, 0.500000, 0.500000);
	ShowPlayerFooter(playerid, "Pulsa ~y~'N'~w~ para cargar la bolsa de basura.");

	return 1;
}

CMD:tirarbasura(playerid, params[])
{
	new
		vehicleid = GetPlayerVehicleID(playerid),
		id = Job_NearestPoint(playerid, 5.0);

	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	if (GetVehicleModel(vehicleid) != 408)
	    return SendErrorMessage(playerid, "Tienes que estar conduciendo un camion de basura.");

	if (id == -1 || JobData[id][jobType] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "No estas cerca de ningun volcado de basura.");

	if (CoreVehicles[vehicleid][vehTrash] < 1)
	    return SendErrorMessage(playerid, "No hay basura cargada en este vehiculo.");

	GiveMoney(playerid, (CoreVehicles[vehicleid][vehTrash] * 25));
	ShowPlayerFooter(playerid, "Has ~g~entregado~w~ la basura!");

	SendServerMessage(playerid, "Has ganado $%d por tirar %d bolsas de basura.", (CoreVehicles[vehicleid][vehTrash] * 15), CoreVehicles[vehicleid][vehTrash]);
	CoreVehicles[vehicleid][vehTrash] = 0;

	return 1;
}

CMD:crearvendedor(playerid, params[])
{
	static
	    id = -1,
		type;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", type))
	{
	    SendSyntaxMessage(playerid, "/crearvendedor [tipo]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[TIPOS]:{FFFFFF} 1: Comida | 2: Gaseosa");
		return 1;
	}
	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Tienes que elegir tipos entre el 1 y el 2.");

	id = Vendor_Create(playerid, type);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de vendedores.");

	SendServerMessage(playerid, "Has creado el vendedor ID: %d.", id);
	return 1;
}

CMD:borrarvendedor(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarvendedor [vendedor id]");

	if ((id < 0 || id >= MAX_VENDORS) || !VendorData[id][vendorExists])
	    return SendErrorMessage(playerid, "ID de vendedor invalido.");

	Vendor_Delete(id);
	SendServerMessage(playerid, "Has borrado el vendedor ID: %d.", id);
	return 1;
}

CMD:bailar(playerid, params[])
{
	new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/bailar [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Tipo de baile invalido.");

	switch (type) {
		case 1: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE1);
	    case 2: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE2);
	    case 3: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE3);
	    case 4: SetPlayerSpecialAction(playerid, SPECIAL_ACTION_DANCE4);
	}
	return 1;
}

CMD:rendirse(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_HANDSUP);
	return 1;
}

CMD:orinar(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:acciones(playerid, params[])
{
	SendClientMessage(playerid, COLOR_CLIENT, "ANIMACION:{FFFFFF} /bailar, /rendirse, /batear, /bar, /lavar, /echarse, /ejercitarse, /mamada, /bomba.");
	SendClientMessage(playerid, COLOR_CLIENT, "ANIMACION:{FFFFFF} /allevar, /crack, /dormir, /saltar, /acuerdo, /bailar2, /comer, /vomitar, /gesto, /hablar.");
	SendClientMessage(playerid, COLOR_CLIENT, "ANIMACION:{FFFFFF} /gafas, /apintar, /lanzar, /tarjeta, /oficina, /beso, /cuchillo, /rcp, /dj, /arobar.");
	SendClientMessage(playerid, COLOR_CLIENT, "ANIMACION:{FFFFFF} /animar, /saludar, /strip, /fumar, /arecargar, /taichi, /paja, /cubrirse, /skate, /borracho.");
	SendClientMessage(playerid, COLOR_CLIENT, "ANIMACION:{FFFFFF} /llorar, /cansado, /sentarse, /vigilar, /jodete, /caminar, /stopanim.");
	return 1;
}

CMD:batear(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/batear [1-5]");

	if (type < 1 || type > 5)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "BASEBALL", "Bat_1", 4.1, 0, 1, 1, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "BASEBALL", "Bat_2", 4.1, 0, 1, 1, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "BASEBALL", "Bat_3", 4.1, 0, 1, 1, 0, 0, 1);
	    case 4: ApplyAnimation(playerid, "BASEBALL", "Bat_4", 4.1, 0, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "BASEBALL", "Bat_IDLE", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:slap(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimation(playerid, "BASEBALL", "Bat_M", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:bar(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/bar [1-8]");

	if (type < 1 || type > 8)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "BAR", "Barserve_bottle", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "BAR", "Barserve_give", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "BAR", "Barserve_glass", 4.1, 0, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimation(playerid, "BAR", "Barserve_in", 4.1, 0, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimation(playerid, "BAR", "Barserve_order", 4.1, 0, 0, 0, 0, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "BAR", "BARman_idle", 4.1, 1, 0, 0, 0, 0, 1);
	    case 7: ApplyAnimationEx(playerid, "BAR", "dnk_stndM_loop", 4.1, 0, 0, 0, 0, 0, 1);
	    case 8: ApplyAnimationEx(playerid, "BAR", "dnk_stndF_loop", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:lavar(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimation(playerid, "BD_FIRE", "wash_up", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:echarse(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/echarse [1-5]");

	if (type < 1 || type > 5)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "BEACH", "bather", 4.1, 1, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "BEACH", "Lay_Bac_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "BEACH", "ParkSit_M_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "BEACH", "ParkSit_W_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "BEACH", "SitnWait_loop_W", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:ejercitarse(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/ejercitarse [1-7]");

	if (type < 1 || type > 7)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "benchpress", "gym_bp_celebrate", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "benchpress", "gym_bp_down", 4.1, 0, 0, 0, 1, 0, 1);
	    case 3: ApplyAnimation(playerid, "benchpress", "gym_bp_getoff", 4.1, 0, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "benchpress", "gym_bp_geton", 4.1, 0, 0, 0, 1, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_A", 4.1, 0, 0, 0, 1, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_B", 4.1, 0, 0, 0, 1, 0, 1);
	    case 7: ApplyAnimationEx(playerid, "benchpress", "gym_bp_up_smooth", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:mamada(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/mamada [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_COUCH_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_W", 4.1, 1, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "BLOWJOBZ", "BJ_STAND_LOOP_P", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:bomba(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimation(playerid, "BOMBER", "BOM_Plant", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:allevar(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/allevar [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "CARRY", "liftup05", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "CARRY", "liftup105", 4.1, 0, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimation(playerid, "CARRY", "putdwn", 4.1, 0, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimation(playerid, "CARRY", "putdwn05", 4.1, 0, 0, 0, 0, 0, 1);
	    case 6: ApplyAnimation(playerid, "CARRY", "putdwn105", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:crack(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/crack [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth1", 4.1, 0, 0, 0, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "CRACK", "crckdeth2", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "CRACK", "crckdeth3", 4.1, 0, 0, 0, 1, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "CRACK", "crckidle1", 4.1, 0, 0, 0, 1, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "CRACK", "crckidle2", 4.1, 0, 0, 0, 1, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "CRACK", "crckidle3", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:dormir(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/dormir [1-2]");

	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "CRACK", "crckdeth4", 4.1, 0, 0, 0, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "CRACK", "crckidle4", 4.1, 0, 0, 0, 1, 0, 1);
	}
	return 1;
}

CMD:saltar(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimation(playerid, "DODGE", "Crush_Jump", 4.1, 0, 1, 1, 0, 0, 1);
	return 1;
}

CMD:acuerdo(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/deal [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "DEALER", "DEALER_DEAL", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "DEALER", "DRUGS_BUY", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "DEALER", "shop_pay", 4.1, 0, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_01", 4.1, 1, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_02", 4.1, 1, 0, 0, 0, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE_03", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:bailar2(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/bailar2 [1-10]");

	if (type < 1 || type > 10)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "DANCING", "dance_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "DANCING", "DAN_Left_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "DANCING", "DAN_Right_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "DANCING", "DAN_Loop_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 5: ApplyAnimationEx(playerid, "DANCING", "DAN_Up_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 6: ApplyAnimationEx(playerid, "DANCING", "DAN_Down_A", 4.1, 1, 0, 0, 0, 0, 1);
	    case 7: ApplyAnimationEx(playerid, "DANCING", "dnce_M_a", 4.1, 1, 0, 0, 0, 0, 1);
	    case 8: ApplyAnimationEx(playerid, "DANCING", "dnce_M_e", 4.1, 1, 0, 0, 0, 0, 1);
	    case 9: ApplyAnimationEx(playerid, "DANCING", "dnce_M_b", 4.1, 1, 0, 0, 0, 0, 1);
	    case 10: ApplyAnimationEx(playerid, "DANCING", "dnce_M_c", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:comer(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/eating [1-3]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "FOOD", "EAT_Burger", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "FOOD", "EAT_Chicken", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "FOOD", "EAT_Pizza", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:vomitar(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimation(playerid, "FOOD", "EAT_Vomit_P", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:gesto(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/gesto [1-15]");

	if (type < 1 || type > 15)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "GHANDS", "gsign1", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "GHANDS", "gsign1LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "GHANDS", "gsign2", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "GHANDS", "gsign2LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "GHANDS", "gsign3", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "GHANDS", "gsign3LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "GHANDS", "gsign4", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "GHANDS", "gsign4LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 9: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0, 1);
		case 10: ApplyAnimation(playerid, "GHANDS", "gsign5", 4.1, 0, 0, 0, 0, 0, 1);
		case 11: ApplyAnimation(playerid, "GHANDS", "gsign5LH", 4.1, 0, 0, 0, 0, 0, 1);
		case 12: ApplyAnimation(playerid, "GANGS", "Invite_No", 4.1, 0, 0, 0, 0, 0, 1);
		case 13: ApplyAnimation(playerid, "GANGS", "Invite_Yes", 4.1, 0, 0, 0, 0, 0, 1);
		case 14: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkD", 4.1, 0, 0, 0, 0, 0, 1);
		case 15: ApplyAnimation(playerid, "GANGS", "smkcig_prtl", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:hablar(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/hablar [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkA", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkB", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkE", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkF", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkG", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "GANGS", "prtial_gngtlkH", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:gafas(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimation(playerid, "goggles", "goggles_put_on", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:apintar(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

 	ApplyAnimationEx(playerid, "GRAFFITI", "spraycan_fire", 4.1, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:lanzar(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimation(playerid, "GRENADE", "WEAPON_throw", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:tarjeta(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimation(playerid, "HEIST9", "Use_SwipeCard", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:oficina(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/oficina [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Bored_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Crash", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Drink", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Read", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Type_Loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, "INT_OFFICE", "OFF_Sit_Watch", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:beso(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/beso [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "KISSING", "Playa_Kiss_03", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:cuchillo(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/cuchillo [1-8]");

	if (type < 1 || type > 8)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "KNIFE", "knife_1", 4.1, 0, 1, 1, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "KNIFE", "knife_2", 4.1, 0, 1, 1, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "KNIFE", "knife_3", 4.1, 0, 1, 1, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "KNIFE", "knife_4", 4.1, 0, 1, 1, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "KNIFE", "WEAPON_knifeidle", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Player", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Damage", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "KNIFE", "KILL_Knife_Ped_Die", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:rcp(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimation(playerid, "MEDIC", "CPR", 4.1, 0, 0, 0, 0, 0, 1);
	return 1;
}

CMD:dj(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/dj [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
    	case 1: ApplyAnimationEx(playerid, "SCRATCHING", "scdldlp", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "SCRATCHING", "scdlulp", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "SCRATCHING", "scdrdlp", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "SCRATCHING", "scdrulp", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:arobar(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/arobar [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "PED", "ARRESTgun", 4.1, 0, 0, 0, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "SHOP", "ROB_Loop_Threat", 4.1, 1, 0, 0, 0, 0, 1);
    	case 3: ApplyAnimationEx(playerid, "ON_LOOKERS", "point_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "ON_LOOKERS", "Pointup_loop", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:animar(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/animar [1-8]");

	if (type < 1 || type > 8)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "ON_LOOKERS", "shout_01", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "ON_LOOKERS", "shout_02", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "ON_LOOKERS", "shout_in", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "RIOT", "RIOT_ANGRY_B", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimation(playerid, "RIOT", "RIOT_CHANT", 4.1, 0, 0, 0, 0, 0, 1);
		case 6: ApplyAnimation(playerid, "RIOT", "RIOT_shout", 4.1, 0, 0, 0, 0, 0, 1);
		case 7: ApplyAnimation(playerid, "STRIP", "PUN_HOLLER", 4.1, 0, 0, 0, 0, 0, 1);
		case 8: ApplyAnimation(playerid, "OTB", "wtchrace_win", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:strip(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/strip [1-7]");

	if (type < 1 || type > 7)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "STRIP", "strip_A", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "STRIP", "strip_B", 4.1, 1, 0, 0, 0, 0, 1);
		case 3: ApplyAnimationEx(playerid, "STRIP", "strip_C", 4.1, 1, 0, 0, 0, 0, 1);
		case 4: ApplyAnimationEx(playerid, "STRIP", "strip_D", 4.1, 1, 0, 0, 0, 0, 1);
		case 5: ApplyAnimationEx(playerid, "STRIP", "strip_E", 4.1, 1, 0, 0, 0, 0, 1);
		case 6: ApplyAnimationEx(playerid, "STRIP", "strip_F", 4.1, 1, 0, 0, 0, 0, 1);
		case 7: ApplyAnimationEx(playerid, "STRIP", "strip_G", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:saludar(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/saludar [1-3]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "PED", "endchat_03", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimation(playerid, "KISSING", "gfwave2", 4.1, 0, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "ON_LOOKERS", "wave_loop", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:fumar(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/fumar [1-3]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimation(playerid, "SMOKING", "M_smk_drag", 4.1, 0, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "SMOKING", "M_smklean_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimation(playerid, "SMOKING", "M_smkstnd_loop", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:arecargar(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/arecargar [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
		case 1: ApplyAnimation(playerid, "BUDDY", "buddy_reload", 4.1, 0, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "UZI", "UZI_reload", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "COLT45", "colt45_reload", 4.1, 0, 0, 0, 0, 0, 1);
		case 4: ApplyAnimation(playerid, "RIFLE", "rifle_load", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:taichi(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimationEx(playerid, "PARK", "Tai_Chi_Loop", 4.1, 1, 0, 0, 0, 0, 1);
	return 1;
}

CMD:paja(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/paja [1-3]");

	if (type < 1 || type > 3)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "PAULNMAC", "wank_loop", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimation(playerid, "PAULNMAC", "wank_in", 4.1, 0, 0, 0, 0, 0, 1);
		case 3: ApplyAnimation(playerid, "PAULNMAC", "wank_out", 4.1, 0, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:cubrirse(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimationEx(playerid, "PED", "cower", 4.1, 0, 0, 0, 1, 0, 1);
	return 1;
}

CMD:skate(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/skate [1-2]");

	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "SKATE", "skate_idle", 4.1, 1, 0, 0, 0, 0, 1);
		case 2: ApplyAnimationEx(playerid, "SKATE", "skate_run", 4.1, 1, 1, 1, 1, 1, 1);
	}
	return 1;
}

CMD:borracho(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimationEx(playerid, "PED", "WALK_drunk", 4.1, 1, 1, 1, 1, 1, 1);
	return 1;
}

CMD:llorar(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimationEx(playerid, "GRAVEYARD", "mrnF_loop", 4.1, 1, 0, 0, 0, 0, 1);
    return 1;
}

CMD:cansado(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/cansado [1-2]");

	if (type < 1 || type > 2)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "PED", "IDLE_tired", 4.1, 1, 0, 0, 0, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "FAT", "IDLE_tired", 4.1, 1, 0, 0, 0, 0, 1);
	}
	return 1;
}

CMD:sentarse(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/sentarse [1-6]");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
		case 1: ApplyAnimationEx(playerid, "CRIB", "PED_Console_Loop", 4.1, 1, 0, 0, 0, 0);
		case 2: ApplyAnimationEx(playerid, "INT_HOUSE", "LOU_In", 4.1, 0, 0, 0, 1, 0);
		case 3: ApplyAnimationEx(playerid, "MISC", "SEAT_LR", 4.1, 1, 0, 0, 0, 0);
		case 4: ApplyAnimationEx(playerid, "MISC", "Seat_talk_01", 4.1, 1, 0, 0, 0, 0);
		case 5: ApplyAnimationEx(playerid, "MISC", "Seat_talk_02", 4.1, 1, 0, 0, 0, 0);
		case 6: ApplyAnimationEx(playerid, "ped", "SEAT_down", 4.1, 0, 0, 0, 1, 0);
	}
	return 1;
}

CMD:vigilar(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/vigilar [1-4]");

	if (type < 1 || type > 4)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "COP_AMBIENT", "Coplook_loop", 4.1, 0, 1, 1, 1, 0, 1);
	    case 2: ApplyAnimationEx(playerid, "GRAVEYARD", "prst_loopa", 4.1, 1, 0, 0, 0, 0, 1);
	    case 3: ApplyAnimationEx(playerid, "GRAVEYARD", "mrnM_loop", 4.1, 1, 0, 0, 0, 0, 1);
	    case 4: ApplyAnimationEx(playerid, "DEALER", "DEALER_IDLE", 4.1, 0, 1, 1, 1, 0, 1);
	}
	return 1;
}

CMD:jodete(playerid, params[])
{
    if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	ApplyAnimation(playerid, "PED", "fucku", 4.1, 0, 0, 0, 0, 0);
	return 1;
}

CMD:caminar(playerid, params[])
{
    new type;

	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No puedes usar animaciones en este momento.");

	if (sscanf(params, "d", type))
	    return SendSyntaxMessage(playerid, "/caminar [1-16]");

	if (type < 1 || type > 17)
	    return SendErrorMessage(playerid, "Tipo invalido de animacion.");

	switch (type) {
	    case 1: ApplyAnimationEx(playerid, "FAT", "FatWalk", 4.1, 1, 1, 1, 1, 1, 1);
	    case 2: ApplyAnimationEx(playerid, "MUSCULAR", "MuscleWalk", 4.1, 1, 1, 1, 1, 1, 1);
	    case 3: ApplyAnimationEx(playerid, "PED", "WALK_armed", 4.1, 1, 1, 1, 1, 1, 1);
	    case 4: ApplyAnimationEx(playerid, "PED", "WALK_civi", 4.1, 1, 1, 1, 1, 1, 1);
	    case 5: ApplyAnimationEx(playerid, "PED", "WALK_fat", 4.1, 1, 1, 1, 1, 1, 1);
	    case 6: ApplyAnimationEx(playerid, "PED", "WALK_fatold", 4.1, 1, 1, 1, 1, 1, 1);
	    case 7: ApplyAnimationEx(playerid, "PED", "WALK_gang1", 4.1, 1, 1, 1, 1, 1, 1);
	    case 8: ApplyAnimationEx(playerid, "PED", "WALK_gang2", 4.1, 1, 1, 1, 1, 1, 1);
	    case 9: ApplyAnimationEx(playerid, "PED", "WALK_player", 4.1, 1, 1, 1, 1, 1, 1);
	    case 10: ApplyAnimationEx(playerid, "PED", "WALK_old", 4.1, 1, 1, 1, 1, 1, 1);
	    case 11: ApplyAnimationEx(playerid, "PED", "WALK_wuzi", 4.1, 1, 1, 1, 1, 1, 1);
	    case 12: ApplyAnimationEx(playerid, "PED", "WOMAN_walkbusy", 4.1, 1, 1, 1, 1, 1, 1);
	    case 13: ApplyAnimationEx(playerid, "PED", "WOMAN_walkfatold", 4.1, 1, 1, 1, 1, 1, 1);
	    case 14: ApplyAnimationEx(playerid, "PED", "WOMAN_walknorm", 4.1, 1, 1, 1, 1, 1, 1);
	    case 15: ApplyAnimationEx(playerid, "PED", "WOMAN_walksexy", 4.1, 1, 1, 1, 1, 1, 1);
	    case 16: ApplyAnimationEx(playerid, "PED", "WOMAN_walkshop", 4.1, 1, 1, 1, 1, 1, 1);
	}
	return 1;
}

CMD:panel(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 6 || !IsPlayerAdmin(playerid))
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (g_ServerLocked)
		Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Abrir Servidor\nCambiar Nombre\nEjecutar Solicitud\nTimer Hora", "Seleccionar", "Cancelar");

	else Dialog_Show(playerid, ServerPanel, DIALOG_STYLE_LIST, "Server Panel", "Contraseña\nCambiar Nombre\nEjecutar Solicitud\nTimer Hora", "Seleccionar", "Cancelar");
	return 1;
}

CMD:apareceritem(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (isnull(params))
	    return SendSyntaxMessage(playerid, "/apareceritem [nombre] (/items para una lista)");

	static
		Float:x,
		Float:y,
		Float:z;

	GetPlayerPos(playerid, x, y, z);

    for (new i = 0; i < sizeof(g_aInventoryItems); i ++) if (!strcmp(g_aInventoryItems[i][e_InventoryItem], params, true))
	{
	    new id = DropItem(g_aInventoryItems[i][e_InventoryItem], "Admin", g_aInventoryItems[i][e_InventoryModel], 1, x, y, z - 0.9, GetPlayerInterior(playerid), GetPlayerVirtualWorld(playerid));

	    if (id == -1)
	        return SendErrorMessage(playerid, "El servidor llego al maximo de items spawneados.");
        Log_Write("logs/spawnitem.txt", "[%s] %s creo un %s", ReturnDate(), ReturnName(playerid, 0), g_aInventoryItems[i][e_InventoryItem]);
		SendServerMessage(playerid, "Has creado un \"%s\" (escribe /cantidad para asignar la cantidad).", g_aInventoryItems[i][e_InventoryItem]);
		return 1;
	}
    SendErrorMessage(playerid, "Nombre de item invalido (escribe /items para una lista).");
	return 1;
}

CMD:cantidaditem(playerid, params[])
{
	static
	    id = -1,
		amount;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if ((id = Item_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "No estas cerca de ningun item spawneado.");

	if (sscanf(params, "d", amount))
	    return SendSyntaxMessage(playerid, "/cantidaditem [cantidad]");

	if (amount < 1)
	    return SendErrorMessage(playerid, "La cantidad no puede ser menor a 1.");

    Item_SetQuantity(id, amount);
    Log_Write("logs/spawnitem.txt", "[%s] %s cambio la cantida de %s a %d.", ReturnDate(), ReturnName(playerid, 0), DroppedItems[id][droppedItem], amount);
    SendServerMessage(playerid, "Cambiaste la cantidad de \"%s\" a %d.", DroppedItems[id][droppedItem], amount);
    return 1;
}

CMD:borraritem(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if ((id = Item_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "o estas cerca de ningun item spawneado.");

    SendServerMessage(playerid, "Has borrado un \"%s\".", DroppedItems[id][droppedItem]);
    Item_Delete(id);
    return 1;
}

CMD:boombox(playerid, params[])
{
	static
	    type[24],
	    string[128];

	if (!Inventory_HasItem(playerid, "Boombox"))
	    return SendErrorMessage(playerid, "You don't have a boombox on you.");

	if (sscanf(params, "s[24]S()[128]", type, string))
	{
	    SendSyntaxMessage(playerid, "/boombox [opcion]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPCIONES]:{FFFFFF} colocar, agarrar, url");
	    return 1;
	}
	if (!strcmp(type, "colocar", true))
	{
	    if (BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "Ya colocaste un boombox en el piso.");

		if (Boombox_Nearest(playerid) != INVALID_PLAYER_ID)
		    return SendErrorMessage(playerid, "Estas muy cerca de otro boombox.");

		if (IsPlayerInAnyVehicle(playerid))
		    return SendErrorMessage(playerid, "Tienes que salir del vehiculo.");

		Boombox_Place(playerid);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su boombox y lo deja en el piso.", ReturnName(playerid, 0));
		SendServerMessage(playerid, "Colocaste tu boombox (usa \"/boombox\" para mas opciones).");
	}
	else if (!strcmp(type, "agarrar", true))
	{
	    if (!BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "No tienes ningun boombox colocado.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return SendErrorMessage(playerid, "No estas cerca de tu boombox.");

		Boombox_Destroy(playerid);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s agarra su boombox y lo guarda.", ReturnName(playerid, 0));
	}
	else if (!strcmp(type, "url", true))
	{
	    if (sscanf(string, "s[128]", string))
	        return SendSyntaxMessage(playerid, "/boombox [url] [url de cancion]");

        if (!BoomboxData[playerid][boomboxPlaced])
	        return SendErrorMessage(playerid, "No tienes ningun boombox colocado.");

		if (!IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[playerid][boomboxPos][0], BoomboxData[playerid][boomboxPos][1], BoomboxData[playerid][boomboxPos][2]))
		    return SendErrorMessage(playerid, "No estas cerca de tu boombox.");

		Boombox_SetURL(playerid, string);
		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s coloca una cancion en el boombox.", ReturnName(playerid, 0));
	}
	return 1;
}

CMD:aborrarboombox(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	foreach (new i : Player) if (BoomboxData[i][boomboxPlaced] && IsPlayerInRangeOfPoint(playerid, 3.0, BoomboxData[i][boomboxPos][0], BoomboxData[i][boomboxPos][1], BoomboxData[i][boomboxPos][2])) {
		Boombox_Destroy(i);

		SendServerMessage(playerid, "Has borrado el boombox de %s.", ReturnName(i, 0));
		return SendServerMessage(i, "%s borro tu boombox.", ReturnName(playerid, 0));
	}
	SendErrorMessage(playerid, "No estas cerca de ningun boombox.");
	return 1;
}

CMD:encontrarbasura(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_GARBAGE)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	new id = GetClosestGarbage(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "No hay tachos de basura disponibles.");

	PlayerData[playerid][pCP] = 1;

	SetPlayerCheckpoint(playerid, GarbageData[id][garbagePos][0], GarbageData[id][garbagePos][1], GarbageData[id][garbagePos][2], 2.5);
	SendServerMessage(playerid, "Marcador puesto en el tacho de basura mas cercano.");
	return 1;
}

CMD:buscar(playerid, params[])
{
	new userid;

	if (sscanf(params, "u", userid))
	{
		SendSyntaxMessage(playerid, "/revisar [playerid/nombre]");
		SendClientMessage(playerid, COLOR_YELLOW, "[CONSEJO]:{FFFFFF} Usa /revisarmochila para revisar la mochila.");
		return 1;
	}
	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (Inventory_HasItem(userid, "Semillas de Maria"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Semillas de Marihuana (%d)", Inventory_Count(userid, "Semillas de Maria"));

    if (Inventory_HasItem(userid, "Semillas de Coca"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Semillas de Coca (%d)", Inventory_Count(userid, "Semillas de Coca"));

    if (Inventory_HasItem(userid, "Semillas de Opio"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Semillas de Opio (%d)", Inventory_Count(userid, "Semillas de Opio"));

	if (Inventory_HasItem(userid, "Anabolicos"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Anabolicos (%d)", Inventory_Count(userid, "Anabolicos"));

    if (Inventory_HasItem(userid, "Marihuana"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Marihuana (%d)", Inventory_Count(userid, "Marihuana"));

    if (Inventory_HasItem(userid, "Cocaina"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Cocaina (%d)", Inventory_Count(userid, "Cocaina"));

    if (Inventory_HasItem(userid, "Heroina"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Heroina (%d)", Inventory_Count(userid, "Heroina"));

	for (new i = 0; i < 12; i ++) if (PlayerData[userid][pGuns][i] && PlayerData[userid][pAmmo][i] > 0) {
	    SendClientMessageEx(playerid, COLOR_LIGHTRED, "** %s", ReturnWeaponName(PlayerData[userid][pGuns][i]));
	}
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s revisa a %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:revisarmochila(playerid, params[])
{
    new userid, backpack;

	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/searchbp [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (!Inventory_HasItem(userid, "Backpack") || (backpack = GetPlayerBackpack(userid)) == -1)
	    return SendErrorMessage(playerid, "Ese jugador no tiene mochila.");

    if (Backpack_HasItem(backpack, "Semillas de Maria"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Semilas de Marihuana (%d)", Backpack_Count(backpack, "Semillas de Maria"));

    if (Backpack_HasItem(backpack, "Semillas de Coca"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Semillas de Coca (%d)", Backpack_Count(backpack, "Semillas de Coca"));

    if (Backpack_HasItem(backpack, "Semillas de Opio"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Semillas de Opio (%d)", Backpack_Count(backpack, "Semillas de Opio"));

	if (Backpack_HasItem(backpack, "Anabolicos"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Anabolicos (%d)", Backpack_Count(backpack, "Anabolicos"));

    if (Backpack_HasItem(backpack, "Marihuana"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Marihuana (%d)", Backpack_Count(backpack, "Marihuana"));

    if (Backpack_HasItem(backpack, "Cocaina"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Cocaina (%d)", Backpack_Count(backpack, "Cocaina"));

    if (Backpack_HasItem(backpack, "Heroina"))
		SendClientMessageEx(playerid, COLOR_LIGHTRED, "** Heroina (%d)", Backpack_Count(backpack, "Heroina"));

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s revisa la mochila de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:confiscar(playerid, params[])
{
	new
	    userid,
		string[128];

    if (GetFactionType(playerid) != FACTION_POLICE)
		return SendErrorMessage(playerid, "Tienes que ser policia.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/confiscar [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (GetWeaponCount(userid) > 0)
		strcat(string, "Confiscar Armas\n");

	if (Inventory_HasItem(userid, "Semillas de Maria") || Inventory_HasItem(userid, "Semillas de Coca") || Inventory_HasItem(userid, "Semillas de Opio"))
	    strcat(string, "Confiscar Semillas\n");

	if (Inventory_HasItem(userid, "Marihuana") || Inventory_HasItem(userid, "Cocaina") || Inventory_HasItem(userid, "Heroina") || Inventory_HasItem(userid, "Anabolicos"))
	    strcat(string, "Confiscar Drogas\n");

    if (Inventory_HasItem(userid, "Walkie-Talkie"))
	    strcat(string, "Confiscar Walkie\n");

	if (Inventory_HasItem(userid, "Backpack") && GetPlayerBackpack(userid) != -1)
	    strcat(string, "Confiscar Mochila\n");

    if (Inventory_HasItem(userid, "Licencia de Armas"))
	    strcat(string, "Confiscar Licencia de Armas\n");

   	if (Inventory_HasItem(userid, "Permiso de Conducir"))
	    strcat(string, "Confiscar Permiso de Conducir\n");

	if (!strlen(string))
	    return SendErrorMessage(playerid, "Este jugador no tiene objetos ilegales para confiscar.");

	PlayerData[playerid][pTakeItems] = userid;
	Dialog_Show(playerid, TakeItems, DIALOG_STYLE_LIST, "Confiscar", string, "Confiscar", "Cancelar");
	return 1;
}

CMD:tirarpuerta(playerid, params[])
{
	static
	    id = -1;

	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "Tienes que ser policia.");

	if ((id = House_Nearest(playerid)) != -1)
	{
	    if (!HouseData[id][houseLocked])
	        return SendErrorMessage(playerid, "Esta casa ya esta abierta.");

	    ShowPlayerFooter(playerid, "Intentando ~r~romper~w~ la puerta...");
	    ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s intenta tirar la puerta de la casa de una patada.", ReturnName(playerid, 0));
	    SetTimerEx("KickHouse", 1500, false, "dd", playerid, id);
	}
	else if ((id = Business_Nearest(playerid)) != -1)
	{
		if (!BusinessData[id][bizLocked])
		    return SendErrorMessage(playerid, "Este negocio ya esta abierto.");

		ShowPlayerFooter(playerid, "Attempting to ~r~break~w~ door...");
        ApplyAnimation(playerid, "POLICE", "Door_Kick", 4.0, 0, 0, 0, 0, 0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s intenta tirar la puerta del negocio de una patada.", ReturnName(playerid, 0));
	    SetTimerEx("KickBusiness", 1500, false, "dd", playerid, id);
	}
	else {
		SendErrorMessage(playerid, "Tienes que estar cerca de un negocio o una casa.");
	}
	return 1;
}

CMD:comprararmario(playerid, params[])
{
	new houseid = House_Inside(playerid);

	if (houseid == -1 || !House_IsOwner(playerid, houseid))
	    return SendErrorMessage(playerid, "No estas dentro de tu casa.");

	if (isnull(params) || (!isnull(params) && strcmp(params, "confirmar", true) != 0))
		return SendSyntaxMessage(playerid, "/comprararmario [confirmar] ($1.000)");

	if (Rack_Count(playerid) >= 4)
	    return SendErrorMessage(playerid, "Tu casa puede tener hasta 4 armarios.");

	if (Rack_Nearest(playerid) != -1)
	    return SendErrorMessage(playerid, "No puedes usar este comando cerca de otro armario.");

	if (GetMoney(playerid) < 1000)
	    return SendErrorMessage(playerid, "No tienes suficiente dinero para comprar el armario.");

	new id = Rack_Create(playerid, houseid);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de armarios.");

    ResetEditing(playerid);

	PlayerData[playerid][pEditRack] = id;
	EditDynamicObject(playerid, RackData[id][rackObjects][4]);

    GiveMoney(playerid, -1000);
	SendServerMessage(playerid, "Compraste un armario por $1.000.");
	return 1;
}

CMD:armario(playerid, params[])
{
	new id = Rack_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "No estas cerca de ningun armario de armas.");

	Rack_ShowGuns(playerid, id);
	return 1;
}

CMD:borrararmario(playerid, params[])
{
	new
		id = -1,
		houseid = House_Inside(playerid);

	if (houseid == -1 || !House_IsOwner(playerid, houseid))
	    return SendErrorMessage(playerid, "No estas dentro de tu casa.");

	if ((id = Rack_Nearest(playerid)) == -1)
	    return SendErrorMessage(playerid, "No estas cerca de ningun armario de armas.");

	Rack_Delete(id);
	SendServerMessage(playerid, "Has borrado el armario de armas de tu casa.");
	return 1;
}

CMD:creararmario(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	id = Rack_Create(playerid, -1);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de armarios.");

    ResetEditing(playerid);
    PlayerData[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendServerMessage(playerid, "Has creado el armario ID: %d.", id);
	return 1;
}

CMD:editararmario(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/editararmario [armario id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendErrorMessage(playerid, "ID de armario invalido.");

	ResetEditing(playerid);
	PlayerData[playerid][pEditRack] = id;

	EditDynamicObject(playerid, RackData[id][rackObjects][4]);
	SendServerMessage(playerid, "Estas editando el armario ID: %d.", id);
	return 1;
}

CMD:aborrararmario(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/aborrararmario [armario id]");

	if ((id < 0 || id >= MAX_WEAPON_RACKS) || !RackData[id][rackExists])
	    return SendErrorMessage(playerid, "ID de armario invalido.");

	Rack_Delete(id);
	SendServerMessage(playerid, "Borraste el armario ID: %d.", id);
	return 1;
}

CMD:vernumero(playerid, params[])
{
	new number;

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", number))
	    return SendSyntaxMessage(playerid, "/vernumero [numero de telefono]");

	if (number == 0)
	    return SendErrorMessage(playerid, "Numero de telefono invalido.");

	if (GetNumberOwner(number) != INVALID_PLAYER_ID)
	    return SendServerMessage(playerid, "El numero de telefono %d es de %s.", number, ReturnName(GetNumberOwner(number), 0));

	SendErrorMessage(playerid, "No hay un jugador conectado que tenga ese numero.");
	return 1;
}

CMD:darvuelta(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (vehicleid > 0 && isnull(params))
	{
		FlipVehicle(vehicleid);
		SendServerMessage(playerid, "Has dado vuelta tu vehiculo actual.");
	}
	else
	{
		if (sscanf(params, "d", vehicleid))
	    	return SendSyntaxMessage(playerid, "/darvuelta [vehiculo ID]");

		else if (!IsValidVehicle(vehicleid))
	    	return SendErrorMessage(playerid, "ID de vehiculo invalida.");

		FlipVehicle(vehicleid);
		SendServerMessage(playerid, "Has dado vuelta el vehiculo ID: %d.", vehicleid);
	}
	return 1;
}

CMD:crearcamara(playerid, params[])
{
	static
	    Float:limit,
	    Float:range;

	if (sscanf(params, "ff", limit, range))
		return SendSyntaxMessage(playerid, "/crearcamara [limite de velocidad] [distancia] (distancia normal: 30)");

	if (limit < 5.0 || limit > 150.0)
	    return SendErrorMessage(playerid, "El limite de velocidad no puede ser menor a 5 o superior a 150.");

	if (range < 5.0 || range > 50.0)
	    return SendErrorMessage(playerid, "La distancia no puede ser menor a 5 o mayor a 50.");

	if (Speed_Nearest(playerid) != -1)
	    return SendErrorMessage(playerid, "No puedes hacer esto estando tan cerca de otra camara de velocidad.");

	new id = Speed_Create(playerid, limit, range);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de camaras de velocidad.");

	SendServerMessage(playerid, "Has creado la camara de velocidad ID: %d.", id);
	return 1;
}

CMD:borrarcamara(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarcamara [camara id]");

	if ((id < 0 || id >= MAX_SPEED_CAMERAS) || !SpeedData[id][speedExists])
	    return SendErrorMessage(playerid, "ID de camara invalida.");

	Speed_Delete(id);
	SendServerMessage(playerid, "Has borrado la camara de velocidad ID: %d.", id);
	return 1;
}

CMD:admins(playerid, params[])
{
	new count = 0;

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

    foreach (new i : Player) if (PlayerData[i][pAdmin] > 0 && PlayerData[i][pAdminHide] < 1)
	{
        if (PlayerData[i][pAdminDuty])
        {
        	if (PlayerData[i][pAdmin] == 1) 
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FFFFFF}(Moderador: %d) {33CC33}(On Duty)", ReturnName(i, 0), PlayerData[i][pAdmin]);
			if (PlayerData[i][pAdmin] == 2) 
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FFFFFF}(Admin Junior: %d) {33CC33}(On Duty)", ReturnName(i, 0), PlayerData[i][pAdmin]);
			if (PlayerData[i][pAdmin] == 3) 
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FFFFFF}(Administrador: %d) {33CC33}(On Duty)", ReturnName(i, 0), PlayerData[i][pAdmin]);
			if (PlayerData[i][pAdmin] == 4) 
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FFFFFF}(Admin Superior: %d) {33CC33}(On Duty)", ReturnName(i, 0), PlayerData[i][pAdmin]);
			if (PlayerData[i][pAdmin] == 5) 
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FFFFFF}(Encargado de Staff: %d) {33CC33}(On Duty)", ReturnName(i, 0), PlayerData[i][pAdmin]);
			if (PlayerData[i][pAdmin] == 6) 
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FFFFFF}(Fundador: %d) {33CC33}(On Duty)", ReturnName(i, 0), PlayerData[i][pAdmin]);
        }

		else
		{
		    if (PlayerData[i][pAdmin] == 1) 
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FFFFFF}(Moderador: %d) {FF6347}(Off Duty)", ReturnName(i, 0), PlayerData[i][pAdmin]);
			if (PlayerData[i][pAdmin] == 2) 
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FFFFFF}(Admin Junior: %d) {FF6347}(Off Duty)", ReturnName(i, 0), PlayerData[i][pAdmin]);
			if (PlayerData[i][pAdmin] == 3) 
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FFFFFF}(Administrador: %d) {FF6347}(Off Duty)", ReturnName(i, 0), PlayerData[i][pAdmin]);
			if (PlayerData[i][pAdmin] == 4) 
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FFFFFF}(Admin Superior: %d) {FF6347}(Off Duty)", ReturnName(i, 0), PlayerData[i][pAdmin]);
			if (PlayerData[i][pAdmin] == 5) 
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FFFFFF}(Encargado de Staff: %d) {FF6347}(Off Duty)", ReturnName(i, 0), PlayerData[i][pAdmin]);
			if (PlayerData[i][pAdmin] == 6) 
				SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FFFFFF}(Fundador: %d) {FF6347}(Off Duty)", ReturnName(i, 0), PlayerData[i][pAdmin]);
		}

        count++;
	}
	if (!count) {
	    SendClientMessage(playerid, COLOR_WHITE, "* No hay admins conectados.");
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:ayudantes(playerid, params[])
{
	new count = 0;

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

    foreach (new i : Player) if (PlayerData[i][pTester] > 0)
	{
        if (PlayerData[i][pTesterDuty])
			SendClientMessageEx(playerid, COLOR_WHITE, "* %s {33CC33}(On Duty)", ReturnName(i, 0));

		else SendClientMessageEx(playerid, COLOR_WHITE, "* %s {FF6347}(Off Duty)", ReturnName(i, 0));

        count++;
	}
	if (!count) {
	    SendClientMessage(playerid, COLOR_WHITE, "* No hay ayudantes conectados.");
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:licencias(playerid, params[])
{
	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/showlicense [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "No puedes mostrarte las licencias a vos mismo.");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");

	if (Inventory_HasItem(playerid, "Permiso de Conducir")) SendClientMessageEx(userid, COLOR_WHITE, "* Permiso de Conducir {33CC33}(Superado)");
 	else SendClientMessageEx(userid, COLOR_WHITE, "* Permiso de Conducir {AA3333}(No Superado)");

	if (Inventory_HasItem(playerid, "Licencia de Armas")) SendClientMessageEx(userid, COLOR_WHITE, "* Licencia de Armas {33CC33}(Superado)");
	else SendClientMessageEx(userid, COLOR_WHITE, "* Licencia de Armas {AA3333}(No Superado)");

	SendClientMessage(userid, COLOR_GREY, "-----------------------------------------------------------");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s Saca sus licencias y se las muestra a %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:borrarpersonaje(playerid, params[])
{
	static
	    query[128];

    if (PlayerData[playerid][pAdmin] < 6)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (isnull(params) || strlen(params) > 24)
	    return SendSyntaxMessage(playerid, "/borrarpersonaje [nombre personaje]");

    if (!IsValidPlayerName(params))
	    return SendErrorMessage(playerid, "Nombre de personaje invalido.");

	format(query, sizeof(query), "SELECT `ID`, `Admin` FROM `characters` WHERE `Character` = '%s'", SQL_ReturnEscaped(params));
	mysql_tquery(g_iHandle, query, "OnDeleteCharacter", "ds", playerid, params);

	return 1;
}

CMD:dejardecargar(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	if (!PlayerData[playerid][pLoading] && !PlayerData[playerid][pLoadType])
	    return SendErrorMessage(playerid, "No estas cargando cajas ahora mismo.");

	PlayerData[playerid][pLoading] = 0;
	PlayerData[playerid][pLoadType] = 0;
    PlayerData[playerid][pLoadCrate] = 0;

	RemovePlayerAttachedObject(playerid, 4);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

	DisablePlayerCheckpoint(playerid);
	SendServerMessage(playerid, "Dejaste de cargar cajas.");

	return 1;
}

CMD:repartir(playerid, params[])
{
 	new id = Job_NearestPoint(playerid);

	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	if (id == -1 || JobData[id][jobType] != JOB_COURIER)
	    return SendErrorMessage(playerid, "No estas cerca de ningun punto de cargado.");

	if (PlayerData[playerid][pLoadType] > 0)
	    return SendErrorMessage(playerid, "Ya empezaste una entrega.");

    if (IsPlayerInAnyVehicle(playerid))
    	return SendErrorMessage(playerid, "Tienes que salir del vehiculo.");

	Dialog_Show(playerid, StartDelivery, DIALOG_STYLE_LIST, "Elige el tipo", "Minorista\nAmmunation\nRopa\nComida\nGasolina\nMuebles", "Seleccionar", "Cancelar");
	return 1;
}

CMD:pedirenvio(playerid, params[])
{
    new id = (Business_Inside(playerid) == -1) ? (Business_Nearest(playerid)) : (Business_Inside(playerid));

    if (id == -1 || !Business_IsOwner(playerid, id))
        return SendErrorMessage(playerid, "No estas cerca de tu negocio.");

	if (BusinessData[id][bizType] == 5)
	    return SendErrorMessage(playerid, "No puedes pedir un envio para este tipo de negocios.");

	if (BusinessData[id][bizShipment])
	{
	    foreach (new i : Player) if (PlayerData[i][pShipment] == id)
		{
	        CancelShipment(i);
	        SendServerMessage(i, "El pedido de envio fue cancelado.");
	    }
	    BusinessData[id][bizShipment] = 0;
	    Business_Save(id);

	    SendServerMessage(playerid, "Tu negocio ya no esta necesitando un envio.");
	    SendJobMessage(1, COLOR_YELLOW, "** %s ya no esta pidiendo un envio para su %s. **", ReturnName(playerid, 0), BusinessData[id][bizName]);
	}
	else
	{
	    if (BusinessData[id][bizDeliver][0] == 0.0 && BusinessData[id][bizDeliver][1] == 0.0 && BusinessData[id][bizDeliver][2] == 0.0)
	        return SendErrorMessage(playerid, "No hay punto de entrega para este negocio, pidele ayuda a un admin.");

	    BusinessData[id][bizShipment] = 1;
	    Business_Save(id);

	    SendServerMessage(playerid, "Has pedido un envio para tu negocio.");
		SendJobMessage(1, COLOR_YELLOW, "** %s esta pidiendo un envio para su %s (/envios para aceptar). **", ReturnName(playerid, 0), BusinessData[id][bizName]);
	}
	return 1;
}

CMD:cancelarenvio(playerid, params[])
{
	if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	if (PlayerData[playerid][pShipment] == -1)
	    return SendErrorMessage(playerid, "No has aceptado ningun envio.");

	CancelShipment(playerid);
	SendServerMessage(playerid, "Has cancelado el envio aceptado.");
	return 1;
}

CMD:envios(playerid, params[])
{
    if (PlayerData[playerid][pJob] != JOB_COURIER)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

	if (PlayerData[playerid][pShipment] != -1)
	    return SendErrorMessage(playerid, "Ya has aceptado un envio (usa /cancelarenvio para cancelarlo).");

	ShowShipments(playerid);
	return 1;
}

CMD:recargar(playerid, params[])
{
	new weaponid = PlayerData[playerid][pHoldWeapon];

	if (!weaponid)
	    return SendErrorMessage(playerid, "No estas sosteniendo ningun arma vacia.");

	if (!Inventory_HasItem(playerid, "Cargador"))
	    return SendErrorMessage(playerid, "No tienes ningun cargador.");

	if (PlayerData[playerid][pUsedMagazine])
	    return SendErrorMessage(playerid, "Ya usaste un cargador con esta arma.");

	switch (weaponid)
	{
	    case 22:
	    {
		    PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Cargador");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le coloca el cargador a su arma.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Pulsa ~y~'H'~w~ para cargar el arma.");
		}
		case 24:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Cargador");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le coloca el cargador a su arma.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Pulsa ~y~'H'~w~ para cargar el arma.");
		}
		case 25:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Cargador");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le coloca el cargador a su arma.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Pulsa ~y~'H'~w~ para cargar el arma.");
		}
		case 27:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Cargador");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le coloca el cargador a su arma.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Pulsa ~y~'H'~w~ para cargar el arma.");
		}
		case 28:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Cargador");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le coloca el cargador a su arma.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Pulsa ~y~'H'~w~ para cargar el arma.");
		}
		case 29:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Cargador");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le coloca el cargador a su arma.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Pulsa ~y~'H'~w~ para cargar el arma.");
		}
		case 32:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Cargador");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le coloca el cargador a su arma.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Pulsa ~y~'H'~w~ para cargar el arma.");
		}
		case 30:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Cargador");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le coloca el cargador a su arma.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Pulsa ~y~'H'~w~ para cargar el arma.");
		}
		case 33:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Cargador");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le coloca el cargador a su arma.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Pulsa ~y~'H'~w~ para cargar el arma.");
		}
        case 34:
	    {
	        PlayerPlaySoundEx(playerid, 1131);
			PlayerData[playerid][pUsedMagazine] = 1;

	        Inventory_Remove(playerid, "Cargador");
   			PlayReloadAnimation(playerid, 24);

			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le coloca el cargador a su arma.", ReturnName(playerid, 0));
			ShowPlayerFooter(playerid, "Pulsa ~y~'H'~w~ para cargar el arma.");
		}
		default:
		    return SendErrorMessage(playerid, "No puedes colocarle un cargador a esta arma.");
	}
	return 1;
}

CMD:limpiarinventario(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/limpiarinventario [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	Inventory_Clear(userid);

	SendAdminAction(playerid, "Has limpiado el inventario de %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s ha limpiado tu inventario, perdiste todos los items.", ReturnName(playerid, 0));

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s limpio el inventario de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:tareas(playerid, params[])
{
	if (!IsTaskActive(playerid))
	    return 1;

	new
	    string[128];

	if (!PlayerData[playerid][pBankTask])
		strcat(string, "Visitar Banco (pendiente)\n");

	if (!PlayerData[playerid][pStoreTask])
	    strcat(string, "Visitar Tienda (pendiente)\n");

	if (!PlayerData[playerid][pTestTask])
	    strcat(string, "Visitar Escuela de Conducir (pendiente)\n");

	Dialog_Show(playerid, NewTasks, DIALOG_STYLE_LIST, "Lista de Tareas", string, "Seleccionar", "Cancelar");
	return 1;
}

CMD:advertencias(playerid, params[])
{
    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Advertencias (%d/3)", PlayerData[playerid][pWarnings]);

    if (PlayerData[playerid][pWarnings] >= 1 && strlen(PlayerData[playerid][pWarn1]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 1er Advertencia: \"%s\"", PlayerData[playerid][pWarn1]);

    if (PlayerData[playerid][pWarnings] >= 2 && strlen(PlayerData[playerid][pWarn2]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 2da Advertencia: \"%s\"", PlayerData[playerid][pWarn2]);

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:veradvertencias(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/veradvertencias [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "%s Advertencias (%d/3)", ReturnName(userid, 0), PlayerData[userid][pWarnings]);

    if (PlayerData[userid][pWarnings] >= 1 && strlen(PlayerData[userid][pWarn1]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 1er Advertencia: \"%s\"", PlayerData[userid][pWarn1]);

    if (PlayerData[userid][pWarnings] >= 2 && strlen(PlayerData[userid][pWarn2]))
        SendClientMessageEx(playerid, COLOR_WHITE, "* 1da Advertencia: \"%s\"", PlayerData[userid][pWarn2]);

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:warn(playerid, params[])
{
	static
	    userid,
		reason[32];

    if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "us[32]", userid, reason))
	    return SendSyntaxMessage(playerid, "/warn [playerid/nombre] [razon]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (PlayerData[userid][pAdmin] > PlayerData[playerid][pAdmin])
	    return SendErrorMessage(playerid, "No puedes advertir a un administrador de rango superior.");

	switch (++ PlayerData[userid][pWarnings])
	{
	    case 1:
	    {
	        format(PlayerData[userid][pWarn1], 32, reason);

	        SendAdminAction(userid, "%s te dio una advertencia por \"%s\" (primer advertencia).", ReturnName(playerid, 0), reason);
	        SendAdminAction(playerid, "Has advertido a %s por \"%s\" (primer advertencia).", ReturnName(userid, 0), reason);
		}
		case 2:
	    {
	        format(PlayerData[userid][pWarn2], 32, reason);

	        SendAdminAction(userid, "%s te dio una advertencia por \"%s\" (segunda advertencia).", ReturnName(playerid, 0), reason);
	        SendAdminAction(playerid, "Has advertido a %s por \"%s\" (segunda advertencia).", ReturnName(userid, 0), reason);
		}
		default:
	    {
	        ResetWarnings(userid);

	        SendAdminAction(userid, "Has sido baneado por exceso de advertencias (\"%s\").", reason);
	        SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s baneo a %s por exceso de advertencias, razon: %s", ReturnName(userid, 0), ReturnName(playerid, 0), reason);

			Blacklist_Add(PlayerData[userid][pIP], PlayerData[userid][pUsername], PlayerData[playerid][pUsername], reason);
			KickEx(userid);
		}
	}
	Log_Write("logs/warn_log.txt", "[%s] %s ha advertido a %s por %s.", ReturnDate(), ReturnName(playerid, 0), ReturnName(userid, 0), reason);
	return 1;
}

CMD:quitaradvertencias(playerid, params[])
{
	static
	    userid;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/quitaradvertencias [playerid/nombre]");

    if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	ResetWarnings(userid);

	SendAdminAction(playerid, "Le has quitado las advertencias a %s.", ReturnName(userid, 0));
	SendAdminAction(userid, "%s te quito las advertencias.", ReturnName(playerid, 0));

	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s le quito las advertencias a %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:clasificar(playerid, params[])
{
	new id = -1;

	if (PlayerData[playerid][pJob] != JOB_SORTER)
	    return SendErrorMessage(playerid, "No tienes el trabajo apropiado.");

    if ((id = Job_NearestPoint(playerid)) == -1 || JobData[id][jobType] != JOB_SORTER)
		return SendErrorMessage(playerid, "No estas cerca de la central de clasificado.");

 	switch (PlayerData[playerid][pSorting])
 	{
	 	case -1:
 	    {
 	        PlayerData[playerid][pSorting] = id;
 	        PlayerData[playerid][pSortCrate] = 1;

			SendServerMessage(playerid, "Has empezado a clasificar. Ve hacia el marcador.");

 	        SetPlayerAttachedObject(playerid, 4, 1220, 5, 0.137832, 0.176979, 0.151424, 96.305931, 185.363006, 20.328088, 0.699999, 0.800000, 0.699999);
			SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);

			ApplyAnimation(playerid, "CARRY", "liftup", 4.1, 0, 0, 0, 0, 0, 1);
			SetPlayerCheckpoint(playerid, JobData[id][jobDeliver][0], JobData[id][jobDeliver][1], JobData[id][jobDeliver][2], 1.0);
		}
		default:
		{
		    PlayerData[playerid][pSorting] = -1;

		    if (PlayerData[playerid][pSortCrate] != 0)
		    {
		        PlayerData[playerid][pSortCrate] = 0;

		        RemovePlayerAttachedObject(playerid, 4);
		        SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
 	        }
 	        DisablePlayerCheckpoint(playerid);
 	        SendServerMessage(playerid, "Has terminado de clasificar paquetes.");
 	    }
	}
	return 1;
}

CMD:dararma(playerid, params[])
{
	new
	    weaponid = GetWeapon(playerid),
	    ammo = GetPlayerAmmo(playerid),
		userid;

	if (!weaponid)
	    return SendErrorMessage(playerid, "No estas sosteniendo ningun arma.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/dararma [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "No puedes darte armas a vos mismo.");

	if (GetFactionType(playerid) == FACTION_POLICE)
		return SendErrorMessage(playerid, "No puedes dar armas si eres policia.");

	if (PlayerData[userid][pGuns][g_aWeaponSlots[weaponid]] != 0)
	    return SendErrorMessage(playerid, "Ese jugador ya tiene un arma de ese tipo.");

	ResetWeapon(playerid, weaponid);
	GiveWeaponToPlayer(userid, weaponid, ammo);

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le dio su %s a %s.", ReturnName(playerid, 0), ReturnWeaponName(weaponid), ReturnName(userid, 0));
	Log_Write("logs/give_log.txt", "[%s] %s (%s) le dio una %s con %d municion a %s (%s).", ReturnDate(), ReturnName(playerid, 0), PlayerData[playerid][pIP], ReturnWeaponName(weaponid), ammo, ReturnName(userid, 0), PlayerData[userid][pIP]);
	return 1;
}

CMD:vw(playerid, params[]) {
	SendClientMessageEx(playerid, COLOR_CLIENT, "Mundo virtual actual: %d", GetPlayerVirtualWorld(playerid));

	return 1;
}

CMD:toghud(playerid, params[])
{
	switch (PlayerData[playerid][pHUD])
	{
	    case 0:
	    {
	        PlayerData[playerid][pDisableSpeedo] = 0;
	        PlayerData[playerid][pHUD] = 1;

	        ShowHungerTextdraw(playerid, 1);
	        SendServerMessage(playerid, "Has habilitado el HUD.");

			TextDrawShowForPlayer(playerid, gServerTextdraws[0]);
			TextDrawShowForPlayer(playerid, gServerTextdraws[1]);

	        if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && IsSpeedoVehicle(GetPlayerVehicleID(playerid)))
		    {
		        for (new i = 34; i < 39; i ++) {
					PlayerTextDrawShow(playerid, PlayerData[playerid][pTextdraws][i]);
	    		}
		    }
		}
	    case 1:
	    {
	        PlayerData[playerid][pDisableSpeedo] = 1;
	        PlayerData[playerid][pHUD] = 0;

	        ShowHungerTextdraw(playerid, 0);
	        SendServerMessage(playerid, "Has deshabilitado el HUD.");

	        TextDrawHideForPlayer(playerid, gServerTextdraws[0]);
			TextDrawHideForPlayer(playerid, gServerTextdraws[1]);

	        for (new i = 34; i < 39; i ++) {
				PlayerTextDrawHide(playerid, PlayerData[playerid][pTextdraws][i]);
	    	}
		}
	}
	return 1;
}

CMD:hduty(playerid, params[])
{
	if (!PlayerData[playerid][pTester])
	    return SendErrorMessage(playerid, "No eres ayudante.");

	if (!PlayerData[playerid][pTesterDuty])
	{
		SetPlayerColor(playerid, 0xFF634700);

		PlayerData[playerid][pTesterDuty] = 1;
		SendClientMessageToAllEx(COLOR_LIGHTRED, "** %s esta en servicio como ayudante (/ayudame para pedir ayuda).", ReturnName(playerid, 0));
	}
	else
	{
	    SetPlayerColor(playerid, DEFAULT_COLOR);

		PlayerData[playerid][pTesterDuty] = 0;
		SendServerMessage(playerid, "Ya no estas en servicio como ayudante.");
	}
	return 1;
}

CMD:ayudar(playerid, params[])
{
	new userid;

	if (!PlayerData[playerid][pTester])
	    return SendErrorMessage(playerid, "No eres ayudante.");

	if (!PlayerData[playerid][pTesterDuty])
	    return SendErrorMessage(playerid, "Tienes que estar en servicio de ayudante para hacer esto.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/ayudar [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (!PlayerData[userid][pSeekHelp])
	    return SendErrorMessage(playerid, "Ese jugador no pidio ningun tipo de ayuda.");

	PlayerData[userid][pSeekHelp] = 0;

	SendServerMessage(userid, "%s acepto tu pedido de ayuda.", ReturnName(playerid, 0));
	SendTesterMessage(COLOR_LIGHTRED, "[AYUDANTE]: %s acepto el pedido de ayuda de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:rh(playerid, params[])
{
	new userid;

	if (!PlayerData[playerid][pTester])
	    return SendErrorMessage(playerid, "No eres ayudante.");

	if (!PlayerData[playerid][pTesterDuty])
	    return SendErrorMessage(playerid, "Tienes que estar en servicio de ayudante para hacer esto.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/rh [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "Ese jugador no esta conectado o es invalido.");

	if (!PlayerData[userid][pSeekHelp])
	    return SendErrorMessage(playerid, "Ese jugador no pidio ningun tipo de ayuda.");

	PlayerData[userid][pSeekHelp] = 0;

	SendServerMessage(userid, "%s rechazo tu pedido de ayuda.", ReturnName(playerid, 0));
	SendTesterMessage(COLOR_LIGHTRED, "[AYUDANTE]: %s rechazo el pedido de ayuda de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:tiempo(playerid, params[])
{
	static
	    string[128],
		month[12],
		date[6];

	getdate(date[2], date[1], date[0]);
	gettime(date[3], date[4], date[5]);

	switch (date[1]) {
	    case 1: month = "Enero";
	    case 2: month = "Febrero";
	    case 3: month = "Marzo";
	    case 4: month = "Abril";
	    case 5: month = "Mayo";
	    case 6: month = "Junio";
	    case 7: month = "Julio";
	    case 8: month = "Agosto";
	    case 9: month = "Septiembre";
	    case 10: month = "Octubre";
	    case 11: month = "Noviembre";
	    case 12: month = "Diciembre";
	}
	format(string, sizeof(string), "%d/60 minutos hasta el PayDay.",PlayerData[playerid][pMinutes]);
	SendClientMessage(playerid, COLOR_YELLOW, string);
	format(string, sizeof(string), "~g~%s %02d %d~n~~b~%02d:%02d:%02d", month, date[0], date[2], date[3], date[4], date[5]);
	GameTextForPlayer(playerid, string, 6000, 1);

	return 1;
}

CMD:curartodos(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	foreach (new i : Player) {
	    SetPlayerHealth(i, 100.0);
	}
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s curo a todos los jugadores conectados.", ReturnName(playerid, 0));
	return 1;
}

CMD:guardarcuentas(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	foreach (new i : Player) {
		SQL_SaveCharacter(i);
	}
	SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s guardo todas las cuentas del servidor.", ReturnName(playerid, 0));
	return 1;
}

CMD:susurro(playerid, params[])
{
	new userid, text[128];

    if (sscanf(params, "us[128]", userid, text))
	    return SendSyntaxMessage(playerid, "/mp [playerid/nombre] [texto]");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 5.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");

	if (userid == playerid)
		return SendErrorMessage(playerid, "No puedes enviarte un mensaje privado a vos mismo.");

    if (strlen(text) > 64) {
	    SendClientMessageEx(userid, COLOR_YELLOW, "** Mensaje de %s (%d): %.64s", ReturnName(playerid, 0), playerid, text);
	    SendClientMessageEx(userid, COLOR_YELLOW, "...%s **", text[64]);

	    SendClientMessageEx(playerid, COLOR_YELLOW, "** Mensaje a %s (%d): %.64s", ReturnName(userid, 0), userid, text);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "...%s **", text[64]);
	}
	else {
	    SendClientMessageEx(userid, COLOR_YELLOW, "** Mensaje de %s (%d): %s **", ReturnName(playerid, 0), playerid, text);
	    SendClientMessageEx(playerid, COLOR_YELLOW, "** Mensaje a %s (%d): %s **", ReturnName(userid, 0), userid, text);
	}
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s susurra algo al odio de %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	return 1;
}

CMD:mascara(playerid, params[])
{
	if (!Inventory_HasItem(playerid, "Mascara"))
		return SendErrorMessage(playerid, "No tienes una mascara.");

	switch (PlayerData[playerid][pMaskOn])
	{
		case 0:
		{
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca una mascara y se la pone.", ReturnName(playerid, 0));
		    PlayerData[playerid][pMaskOn] = 1;
		}
		case 1:
		{
		    PlayerData[playerid][pMaskOn] = 0;
		    SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s se saca la mascara y la guarda.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:enmascarados(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	static
	    name[24];

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");

    foreach (new i : Player) if (PlayerData[i][pMaskOn]) {
        GetPlayerName(i, name, sizeof(name));

        SendClientMessageEx(playerid, COLOR_WHITE, "* %s (#%d)", name, PlayerData[i][pMaskID]);
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:armas(playerid, params[])
{
	new userid;

	if (PlayerData[playerid][pAdmin] < 2)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/armas [playerid/nombre]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "El jugador esta desconectado.");

	new
	    weaponid,
	    ammo;

    SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
    SendClientMessageEx(playerid, COLOR_LIGHTRED, "Armas de%s:", ReturnName(userid, 0));

	for (new i = 0; i < 13; i ++)
	{
		GetPlayerWeaponData(userid, i, weaponid, ammo);

		if (weaponid > 0)
		    SendClientMessageEx(playerid, COLOR_WHITE, "* %s (%d municion)", ReturnWeaponName(weaponid), ammo);
	}
	SendClientMessage(playerid, COLOR_GREY, "-----------------------------------------------------------");
	return 1;
}

CMD:sirena(playerid, params[])
{
	if (GetFactionType(playerid) != FACTION_POLICE)
	    return SendErrorMessage(playerid, "No eres oficial de policia.");

	new vehicleid = GetPlayerVehicleID(playerid);

	if (!IsPlayerInAnyVehicle(playerid))
	    return SendErrorMessage(playerid, "Tienes que estar dentro de un vehiculo.");

	switch (CoreVehicles[vehicleid][vehSirenOn])
	{
	    case 0:
	    {
			static
        		Float:fSize[3],
        		Float:fSeat[3];

		    GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_SIZE, fSize[0], fSize[1], fSize[2]); // need height (z)
    		GetVehicleModelInfo(GetVehicleModel(vehicleid), VEHICLE_MODEL_INFO_FRONTSEAT, fSeat[0], fSeat[1], fSeat[2]); // need pos (x, y)

            CoreVehicles[vehicleid][vehSirenOn] = 1;
			CoreVehicles[vehicleid][vehSirenObject] = CreateDynamicObject(18646, 0.0, 0.0, 1000.0, 0.0, 0.0, 0.0);

		    AttachDynamicObjectToVehicle(CoreVehicles[vehicleid][vehSirenObject], vehicleid, -fSeat[0], fSeat[1], fSize[2] / 2.0, 0.0, 0.0, 0.0);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s engancha una sirena portable al vehiculo.", ReturnName(playerid, 0));
		}
		case 1:
		{
		    CoreVehicles[vehicleid][vehSirenOn] = 0;

			DestroyDynamicObject(CoreVehicles[vehicleid][vehSirenObject]);
			SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s desengancha la sirena portable del vehiculo.", ReturnName(playerid, 0));
		}
	}
	return 1;
}

CMD:asignarespacios(playerid, params[])
{
	static
	    userid,
		capacity;

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ud", userid, capacity))
	    return SendSyntaxMessage(playerid, "/asignarespacios [playerid/nombre] [amount]");

	if (userid == INVALID_PLAYER_ID)
	    return SendErrorMessage(playerid, "El jugador esta desconectado.");

	if (capacity < 1 || capacity > 120)
	    return SendErrorMessage(playerid, "La capacidad no puede superar los 20 items.");

	PlayerData[userid][pCapacity] = 120;

	SendServerMessage(playerid, "Cambiaste la capacidad del inventario de %s a %d items.", ReturnName(userid, 0), capacity);
	SendServerMessage(userid, "%s cambio tu capacidad del inventario a %d items.", ReturnName(playerid, 0), capacity);
	return 1;
}

CMD:romperesposas(playerid, params[])
{
	static
		userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/romperesposas [playerid/nombre]");

	if (!Inventory_HasItem(playerid, "Palanca"))
	    return SendErrorMessage(playerid, "No tienes una palanca.");

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "El jugador esta muy lejos o esta desconectado.");

	if (!PlayerData[userid][pCuffed])
	    return SendErrorMessage(playerid, "El jugador no tiene esposas puestas.");

	if (userid == playerid)
	    return SendErrorMessage(playerid, "No puedes romper las esposas vos mismo.");

	SetTimerEx("BreakCuffs", 3000, false, "dd", playerid, userid);
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s intenta romper las esposas con una palanca.", ReturnName(playerid, 0));
	return 1;
}

CMD:dado(playerid, params[])
{
	new
		number = random(6) + 1;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s tira un dado y cae en el numero %d.", ReturnName(playerid, 0), number);
	return 1;
}

CMD:saludo(playerid, params[])
{
	static
	    userid,
	    type;

	if (sscanf(params, "ud", userid, type))
	    return SendSyntaxMessage(playerid, "/saludo [playerid/name] [1-6]");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "El jugador esta muy lejos o esta desconectado.");

    if (userid == playerid)
		return SendErrorMessage(playerid, "No puedes saludarte a vos mismo.");

	if (type < 1 || type > 6)
	    return SendErrorMessage(playerid, "El tipo de saludo es entre 1 y 6.");

	PlayerData[userid][pShakeOffer] = playerid;
	PlayerData[userid][pShakeType] = type;

	SendServerMessage(userid, "%s quiere saludarte (escribe \"/aceptar saludo\").", ReturnName(playerid, 0));
	SendServerMessage(playerid, "Quieres hacer un saludo con %s, espera su respuesta.", ReturnName(userid, 0));
	return 1;
}

CMD:revisar(playerid, params[])
{
	static
	    userid;

	if (sscanf(params, "u", userid))
	    return SendSyntaxMessage(playerid, "/revisar [playerid/nombre] (Usa /buscar para revisar mejor)");

    if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 6.0))
	    return SendErrorMessage(playerid, "The specified player is disconnected or not near you.");

    if (userid == playerid)
		return SendErrorMessage(playerid, "You cannot frisk yourself.");

	PlayerData[userid][pFriskOffer] = playerid;

	SendServerMessage(userid, "%s quiere revisarte (escribe \"/aceptar revision\").", ReturnName(playerid, 0));
	SendServerMessage(playerid, "Quieres revisar a %s espera a que lo acepte.", ReturnName(userid, 0));
	return 1;
}

CMD:setradio(playerid, params[])
{
	new vehicleid = GetPlayerVehicleID(playerid);

	if (GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	    return SendErrorMessage(playerid, "You are not driving any vehicle.");

	if (!IsEngineVehicle(vehicleid))
	    return SendErrorMessage(playerid, "This vehicle doesn't have any radio.");

	Dialog_Show(playerid, Radio, DIALOG_STYLE_LIST, "Radio Channels", "Cultural\nOldies\nOther\nPop\nRhythm & Blues\nRock\nTalk\nUrban\nElectric\nTurn Radio Off", "Seleccionar", "Cancelar");
	return 1;
}

CMD:creargraffiti(playerid, params[])
{
	static
	    id = -1,
		Float:x,
		Float:y,
		Float:z,
		Float:angle;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (GetPlayerInterior(playerid) > 0 || GetPlayerVirtualWorld(playerid) > 0)
 		return SendErrorMessage(playerid, "No puedes hacer un graffiti dentro de un interior.");

	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, angle);

	id = Graffiti_Create(x, y, z, angle);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de puntos de graffiti.");

	EditDynamicObject(playerid, GraffitiData[id][graffitiObject]);

	PlayerData[playerid][pEditGraffiti] = id;
	SendServerMessage(playerid, "Has creado el graffiti ID: %d.", id);
	return 1;
}

CMD:borrargraffiti(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrargraffiti [graffiti id]");

	if ((id < 0 || id >= MAX_GRAFFITI_POINTS) || !GraffitiData[id][graffitiExists])
	    return SendErrorMessage(playerid, "ID de graffiti invalida.");

	Graffiti_Delete(id);
	SendServerMessage(playerid, "Has borrado el graffiti ID: %d.", id);
	return 1;
}

CMD:graffiti(playerid, params[])
{
	new id = Graffiti_Nearest(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "No estas en un punto de graffiti.");

	if (GetFactionType(playerid) != FACTION_GANG)
	    return SendErrorMessage(playerid, "No eres miembro de una faccion ilegal.");

	Dialog_Show(playerid, GraffitiColor, DIALOG_STYLE_LIST, "Seleccionar Color", "{FFFFFF}Blanco\n{FF0000}Rojo\n{FFFF00}Amarillo\n{33CC33}Verde\n{33CCFF}Azul Claro\n{FFA500}Naranja\n{1394BF}Azul Oscuro", "Seleccionar", "Cancelar");
	return 1;
}

CMD:aincendio(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	static
	    Float:fX,
	    Float:fY,
	    Float:fZ;

	RandomFire();

	GetDynamicObjectPos(g_aFireObjects[0], fX, fY, fZ);
	SendServerMessage(playerid, "Creaste un incendio aleatorio (%s).", GetLocation(fX, fY, fZ));
	return 1;
}

CMD:borrarincendio(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 3)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	for (new i = 0; i < sizeof(g_aFireObjects); i ++)
	{
	    g_aFireExtinguished[i] = 0;

	    if (IsValidDynamicObject(g_aFireObjects[i]))
	        DestroyDynamicObject(g_aFireObjects[i]);
	}
	SendServerMessage(playerid, "Borraste el incendio.");
	return 1;
}

CMD:aocultar(playerid, params[])
{
    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	switch (PlayerData[playerid][pAdminHide])
	{
	    case 0:
	    {
	        PlayerData[playerid][pAdminHide] = 1;
	        SendServerMessage(playerid, "Ahora estas escondido de la lista de admins.");
		}
		case 1:
	    {
	        PlayerData[playerid][pAdminHide] = 0;
	        SendServerMessage(playerid, "Ahora eres visible en la lista de admins.");
		}
	}
	return 1;
}

CMD:creardetector(playerid, params[])
{
	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	static
	    query[255];

	for (new i = 0; i < MAX_METAL_DETECTORS; i ++) if (!MetalDetectors[i][detectorExists])
	{
	    MetalDetectors[i][detectorExists] = 1;
	    MetalDetectors[i][detectorInterior] = GetPlayerInterior(playerid);
	    MetalDetectors[i][detectorWorld] = GetPlayerVirtualWorld(playerid);

	    GetPlayerPos(playerid, MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2]);
	    GetPlayerFacingAngle(playerid, MetalDetectors[i][detectorPos][3]);

		format(query, sizeof(query), "INSERT INTO `detectors` (`detectorX`, `detectorY`, `detectorZ`, `detectorAngle`, `detectorInterior`, `detectorWorld`) VALUES('%.4f', '%.4f', '%.4f', '%.4f', '%d', '%d')", MetalDetectors[i][detectorPos][0], MetalDetectors[i][detectorPos][1], MetalDetectors[i][detectorPos][2], MetalDetectors[i][detectorPos][3], MetalDetectors[i][detectorInterior], MetalDetectors[i][detectorWorld]);
		mysql_tquery(g_iHandle, query, "OnDetectorCreated", "d", i);

	    Detector_Refresh(i);
	    SendServerMessage(playerid, "Creaste el detector de metales ID: %d.", i);
	    return 1;
	}
	SendErrorMessage(playerid, "El servidor llego al limite de detectores de metales.");
	return 1;
}

CMD:borrardetector(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrardetector [detector id]");

	if ((id < 0 || id >= MAX_METAL_DETECTORS) || !MetalDetectors[id][detectorExists])
	    return SendErrorMessage(playerid, "ID de detector invalida.");

	Detector_Delete(id);
	SendServerMessage(playerid, "Borraste el detector de metales ID: %d.", id);
	return 1;
}

CMD:forzarpuerta(playerid, params[])
{
	new id = Car_Nearest(playerid);

	if (!Inventory_HasItem(playerid, "Palanca"))
	    return SendErrorMessage(playerid, "No tienes una palanca.");

	if (id == -1)
	    return SendErrorMessage(playerid, "No estas cerca de ningun vehiculo.");

	if (!CarData[id][carLocked])
	    return SendErrorMessage(playerid, "Este vehiculo no esta cerrado.");

	PlayerData[playerid][pPicking] = 1;
	PlayerData[playerid][pPickCar] = id;

	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su palanca y hace fuerza para abrir la puerta.", ReturnName(playerid, 0));
	SendServerMessage(playerid, "Espera 60 segundos hasta que la puerta se abra.");
	return 1;
}

CMD:borrarplanta(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarplanta [planta id]");

	if ((id < 0 || id >= MAX_DRUG_PLANTS) || !PlantData[id][plantExists])
	    return SendErrorMessage(playerid, "ID de planta invalida.");

	Plant_Delete(id);
	SendServerMessage(playerid, "Has borrado la planta ID: %d.", id);
	return 1;
}

CMD:darauto(playerid, params[])
{
	static
		userid,
	    model[32];

    if (PlayerData[playerid][pAdmin] < 4)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "us[32]", userid, model))
	    return SendSyntaxMessage(playerid, "/darauto [playerid/nombre] [id/nombre]");

	if (Car_GetCount(userid) >= MAX_OWNABLE_CARS)
	    return SendErrorMessage(playerid, "Ese jugador ya tiene muchos autos.");

    if ((model[0] = GetVehicleModelByName(model)) == 0)
	    return SendErrorMessage(playerid, "ID de modelo de vehiculo invalida (400-611).");

	static
	    Float:x,
		Float:y,
		Float:z,
		Float:angle,
		id = -1;

    GetPlayerPos(userid, x, y, z);
	GetPlayerFacingAngle(userid, angle);

	id = Car_Create(PlayerData[userid][pID], model[0], x, y + 2, z + 1, angle, random(127), random(127), 0);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de vehiculos dinamicos.");

	SendServerMessage(playerid, "Has creado el vehiculo ID: %d para %s.", CarData[id][carVehicle], ReturnName(userid, 0));
	return 1;
}

CMD:desbug(playerid, params[])
{
	if (GetPlayerInterior(playerid) == 0 && GetPlayerVirtualWorld(playerid) > 0)
	{
	    SetPlayerVirtualWorld(playerid, 0);
	    SendServerMessage(playerid, "Has sido desbugueado, si no funciona, habla con un admin.");
	}
	else SendErrorMessage(playerid, "No estas bugueado o este sistema no puede solucionarlo. Habla con un admin.");
	return 1;
}

CMD:stopanim(playerid, params[])
{
	if (!AnimationCheck(playerid))
	    return SendErrorMessage(playerid, "No estas usando ninguna animacion.");

	ClearAnimations(playerid, 1);
    HidePlayerFooter(playerid);

	PlayerData[playerid][pLoopAnim] = 0;
	SendServerMessage(playerid, "Has detenido tus animaciones.");
	return 1;
}

CMD:editarpublicidad(playerid, params[])
{
	static
	    id,
	    type[24],
	    string[128];

	if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "ds[24]S()[128]", id, type, string))
 	{
	 	SendSyntaxMessage(playerid, "/editarpublicidad [id] [opcion]");
	    SendClientMessage(playerid, COLOR_YELLOW, "[OPCIONES]:{FFFFFF} lugar, nombre, precio, mensaje, dueño, distancia");
		return 1;
	}
	if ((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
	    return SendErrorMessage(playerid, "ID de negocio invalida.");

	if (!strcmp(type, "lugar", true))
	{
 		GetPlayerPos(playerid, BillBoardData[id][bbPos][0], BillBoardData[id][bbPos][1], BillBoardData[id][bbPos][2]);

		Billboard_Refresh(id);
		Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la localizacion de la publicidad ID: %d.", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "precio", true))
	{
	    new price;

	    if (sscanf(string, "d", price))
	        return SendSyntaxMessage(playerid, "/editarpublicidad [id] [precio] [nuevo precio]");

	    BillBoardData[id][bbPrice] = price;

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el precio de la publicidad ID: %d a %s.", ReturnName(playerid, 0), id, FormatNumber(price));
	}
	else if (!strcmp(type, "nombre", true))
	{
	    new name[32];

	    if (sscanf(string, "s[32]", name))
	        return SendSyntaxMessage(playerid, "/editarpublicidad [id] [nombre] [nuevo nombre]");

	    format(BillBoardData[id][bbName], 32, name);

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el nombre de la publicidad ID: %d a \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "mensaje", true))
	{
	    new name[32];

	    if (sscanf(string, "s[230]", name))
	        return SendSyntaxMessage(playerid, "/editarpublicidad [id] [mensaje] [nuevo mensaje] (Max letras: 230)");

	    format(BillBoardData[id][bbMessage], 32, name);

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto el mensaje de la publicidad ID: %d a \"%s\".", ReturnName(playerid, 0), id, name);
	}
	else if (!strcmp(type, "dueño", true))
	{
	    new giveplayerid;

	    if (sscanf(string, "d", giveplayerid))
	        return SendSyntaxMessage(playerid, "/editarpublicidad [id] [(quitar)dueño] [playerid]");

        if (giveplayerid == INVALID_PLAYER_ID)
	    	return SendErrorMessage(playerid, "That player is disconnected.");
		BillBoardData[id][bbOwner] = GetPlayerSQLID(giveplayerid);

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s has adjusted the owner of billboard ID: %d", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "quitardueño", true))
	{
	    if (sscanf(string, "d"))
	        return SendSyntaxMessage(playerid, "/editarpublicidad [id] [quitardueño]");

		BillBoardData[id][bbOwner] = 0;

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s quito al dueño de la publicidad ID: %d", ReturnName(playerid, 0), id);
	}
	else if (!strcmp(type, "distancia", true))
	{
	    new range;

	    if (sscanf(string, "d", range))
	        return SendSyntaxMessage(playerid, "/editarpublicidad [id] [distancia] [nuevo piso]");

        if(range < 10)
		{
		    SendErrorMessage(playerid, "La distancia tiene que ser entre 10 y 200");
		    return 1;
		}

		if(range > 200)
		{
		    SendErrorMessage(playerid, "La distancia tiene que ser entre 10 y 200");
		    return 1;
		}

	    BillBoardData[id][bbRange] = range;

	    Billboard_Refresh(id);
	    Billboard_Save(id);

		SendAdminAlert(COLOR_LIGHTRED, "[ADMIN]: %s ajusto la distancia del cartel de publicidad ID: %d a %d.", ReturnName(playerid, 0), id, range);
	}
	return 1;
}

CMD:borrarpublicidad(playerid, params[])
{
	static
	    id = 0;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/borrarpublicidad [publicidad id]");

	if ((id < 0 || id >= MAX_BILLBOARDS) || !BillBoardData[id][bbExists])
	    return SendErrorMessage(playerid, "ID de publicidad invalida.");

	Billboard_Delete(id);
	SendServerMessage(playerid, "Has borrado el cartel de publicidad ID: %d.", id);
	return 1;
}

CMD:llamar(playerid, params[])
{
    if (!Inventory_HasItem(playerid, "Celular"))
	    return SendErrorMessage(playerid, "No tienes un celular encima.");

    if (PlayerData[playerid][pPhoneOff])
		return SendErrorMessage(playerid, "Tu telefono tiene que estar prendido.");

    if (PlayerData[playerid][pHospital] != -1 || PlayerData[playerid][pCuffed] || !IsPlayerSpawned(playerid))
	    return SendErrorMessage(playerid, "No puedes usar este comando ahora mismo.");
	static
	    targetid,
		number;
	if (PlayerData[playerid][pInjured] && number != 911)
	    return SendErrorMessage(playerid, "Solo puedes llamar al 911 cuando estas herido");
	if (sscanf(params, "d", number))
 	   return SendSyntaxMessage(playerid, "/llamar [numero] (1222 para  taxi, 911 para emergencias, 222 noticias, 223 publicidad)");

	if (!number)
	    return SendErrorMessage(playerid, "El numero escrito no esta en servicio.");

	if (number == 911)
	{
		PlayerData[playerid][pEmergency] = 1;
		PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su telefono y llama a alguien.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_LIGHTBLUE, "[OPERADORA]:{FFFFFF} Que servicio necesitas?: \"policia\" o \"medicos\"?");
	}
	else if (number == 1222)
	{
	    PlayerData[playerid][pTaxiCalled] = 1;
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su telefono y llama a alguien.", ReturnName(playerid, 0));
		SendClientMessage(playerid, COLOR_YELLOW, "[OPERADORA]:{FFFFFF} El departamento de taxistas fue notificado de tu llamado.");

        SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s cuelga su telefono.", ReturnName(playerid, 0));
		SendJobMessage(3, COLOR_YELLOW, "** %s esta solicitando un taxi en %s (usa /aceptarllamado para aceptar).", ReturnName(playerid, 0), GetPlayerLocation(playerid));
	}
	else if (number == 222)
	{
	    PlayerData[playerid][pPlaceAd] = 1;
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su telefono y llama a alguien.", ReturnName(playerid, 0));

		if (PlayerData[playerid][pPlayingHours] < 4) {
            SendClientMessage(playerid, COLOR_CYAN, "[OPERADORA]:{FFFFFF} Tienes que jugar al menos 4 horas para colocar publicidad.");
		    cmd_colgar(playerid, "\1");
		}
		else if (PlayerData[playerid][pAdTime] < 1) {
			SendClientMessage(playerid, COLOR_CYAN, "[OPERADORA]:{FFFFFF} Diga \"si\" si deseas hacer una publicidad por $500.");
		}
		else {
		    SendClientMessage(playerid, COLOR_CYAN, "[OPERADORA]:{FFFFFF} Ya hiciste publicidad en los ultimos dos minutos. Intentalo de nuevo mas tarde.");
		    cmd_colgar(playerid, "\1");
		}
	}
	else if (number == 223)
	{
	    PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su telefono y llama a alguien.", ReturnName(playerid, 0));

		if (PlayerData[playerid][pPlayingHours] < 4) {
            SendClientMessage(playerid, COLOR_CYAN, "[OPERADORA]:{FFFFFF} Tienes que jugar al menos 4 horas para colocar publicidad.");
		    cmd_colgar(playerid, "\1");
		}
		SendClientMessageEx(playerid, COLOR_YELLOW, "[PHONE]:{FFFFFF} Hola, esta es la agencia de publicidad de Los Santos, escucha las siguientes opciones!");
		ViewBillboards(playerid);
	}
	else if ((targetid = GetNumberOwner(number)) != INVALID_PLAYER_ID)
	{
	    if (targetid == playerid)
	        return SendErrorMessage(playerid, "No puedes llamarte a ti mismo!");

		if (PlayerData[targetid][pPhoneOff])
		    return SendErrorMessage(playerid, "El receptor tiene su telefono apagado.");

		PlayerData[targetid][pIncomingCall] = 1;
		PlayerData[playerid][pIncomingCall] = 1;

		PlayerData[targetid][pCallLine] = playerid;
		PlayerData[playerid][pCallLine] = targetid;

		SendClientMessageEx(playerid, COLOR_YELLOW, "[TELEFONO]:{FFFFFF} Intentando llamar a #%d, espera por una respuesta...", number);
		SendClientMessageEx(targetid, COLOR_YELLOW, "[TELEFONO]:{FFFFFF} Recibiendo llamado de #%d (escribe \"/contestar\" para contestar el telefono).", PlayerData[playerid][pPhone]);

        PlayerPlaySound(playerid, 3600, 0.0, 0.0, 0.0);
        PlayerPlaySoundEx(targetid, 23000);

		SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s saca su telefono y llama a alguien.", ReturnName(playerid, 0));
	}
	else
	{
	    SendErrorMessage(playerid, "El numero marcado no esta en servicio.");
	}
	return 1;
}

CMD:crearpublicidad(playerid, params[])
{
	static
	    id = -1;

    if (PlayerData[playerid][pAdmin] < 5)
	    return SendErrorMessage(playerid, "No tienes permiso para usar este comando.");

	id = Billboard_Create(playerid, -1);

	if (id == -1)
	    return SendErrorMessage(playerid, "El servidor llego al limite de carteles de publicidad.");

	SendServerMessage(playerid, "Has creado el cartel de publicidad ID: %d.", id);
	return 1;
}

CMD:publicidad(playerid, params[])
{
	if(PlayerData[playerid][pAdmin] < 1)
	{
	    SendErrorMessage(playerid, "No estas autorizado a usar este comando");
	    return 1;
	}
	ViewBillboards(playerid);
	return 1;
}

CMD:mipublicidad(playerid, params[])
{
	if(PlayerData[playerid][pOwnsBillboard] == -1)
	{
	    SendErrorMessage(playerid, "No eres dueño de un cartel de publicidad");
	    return 1;
	}
    Dialog_Show(playerid, MyBillboardMenu, DIALOG_STYLE_LIST, "Publicidad", "Editar Mensaje\nDejar Publicidad", "Aceptar", "Cancelar");
    return 1;
}
CMD:reglamento(playerid)
{
	if(!IsPlayerConnected(playerid))return SendClientMessage(playerid, COLOR_GREY, "Primero conectate!");
	Dialog_Show(playerid, REGLAMENTO1, DIALOG_STYLE_LIST, "Reglamento e Informacion del Servidor", "Aprende a Rolear con esta Info\nCiviles\nAdministracion\nUsuarios Conflictivos\nReglas en Roles\nReglas en Facciones\nReglas en Zonas", "Seleccionar", "Cerrar");
	return 1;
}
CMD:anuncio(playerid)
{
    if (GetFactionType(playerid) != FACTION_NEWS)
		return SendErrorMessage(playerid, "Tienes que ser parte de una faccion de noticias.");
    Dialog_Show(playerid, ADPLACEP, DIALOG_STYLE_INPUT, "Anuncios - CNN","Nota: Tamaño del texto sólo será máximo 128 Letras.", "Enviar", "Atrás");
    return 1;
}

CMD:dni(playerid, params[])
{
	static
		userid,
		genero[15];
	new nombre[MAX_PLAYER_NAME];
	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/dni [playerid/nombre]");

	GetPlayerName(playerid, nombre, sizeof(nombre));
	if (PlayerData[playerid][pGender] == 1)
		genero = "Hombre";
	if (PlayerData[playerid][pGender] == 2)
		genero = "Mujer";

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 8.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le da su dni a %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	new string1[200];
	format(string1, sizeof(string1), "{5AC18E}-------------------------------------------\n{5AC18E}Nombre:{ffffff} %s\n{5AC18E}Genero:{ffffff} %s\n{5AC18E}Origen:{ffffff} %s\n{5AC18E}-------------------------------------------", nombre, genero, PlayerData[playerid][pOrigin]);
	Dialog_Show(userid, DNI, DIALOG_STYLE_MSGBOX, "Documento Nacional de Identidad", string1, "Cerrar", "");
	return 1;
}

CMD:dnifalso(playerid, params[])
{
	static
		userid,
		genero[15];
	if (sscanf(params, "u", userid))
		return SendSyntaxMessage(playerid, "/dnifalso [playerid/nombre]");

	if (PlayerData[playerid][pGender] == 1)
		genero = "Hombre";
	if (PlayerData[playerid][pGender] == 2)
		genero = "Mujer";

	if (userid == INVALID_PLAYER_ID || !IsPlayerNearPlayer(playerid, userid, 8.0))
	    return SendErrorMessage(playerid, "Ese jugador esta desconectado o no esta cerca tuyo.");
	SendNearbyMessage(playerid, 30.0, COLOR_PURPLE, "** %s le da su dni a %s.", ReturnName(playerid, 0), ReturnName(userid, 0));
	new string1[250];
	format(string1, sizeof(string1), "{5AC18E}-------------------------------------------\n{5AC18E}Nombre:{ffffff} %s\n{5AC18E}Genero:{ffffff} %s\n{5AC18E}Origen:{ffffff} %s\n{5AC18E}-------------------------------------------", PlayerData[playerid][pFakeDNI], genero, PlayerData[playerid][pOrigin]);
	Dialog_Show(userid, DNI, DIALOG_STYLE_MSGBOX, "Documento Nacional de Identidad", string1, "Cerrar", "");
	return 1;
}

CMD:estado(playerid,params[])
{
   	new estadoo[200],str[256],mensaje[256];
   	if(ConEstado[playerid] == true) return SendErrorMessage(playerid,"Ya estas en un estado. Usa /sinestado");
   	if(sscanf(params, "s[128]", estadoo) )return SendSyntaxMessage(playerid,"Uso: /miestado [ESTADO] ");
    format(str, sizeof(str), "{FFA500}%s",estadoo);
    format(mensaje, sizeof(mensaje), "Te pusiste de estado: {FFFFFF}%s",estadoo);
    estado[playerid] = Create3DTextLabel(str,0x00FF00FF,30.0,40.0,5.0,40.0,1);
    Attach3DTextLabelToPlayer(estado[playerid], playerid, 0.0, 0.0, 0.40);
    SendClientMessageEx(playerid, 0x00FF00FF, mensaje);
    SendClientMessageEx(playerid, 0x00FF00FF, "Para borrar tu estado usa {FFFFFF}/sinestado");
    ConEstado[playerid] = true;
    return 1;
}
CMD:sinestado(playerid,params[])
{
   if(ConEstado[playerid] == true)
   {
         SendClientMessageEx(playerid,0x00FF00FF,"Has Borrado tu estado actual");
         Delete3DTextLabel(estado[playerid]);
         ConEstado[playerid] = false; return 1; 
   }
   if(ConEstado[playerid] == false) return SendErrorMessage(playerid,"No tienes ningun estado");
   return 1;
}
